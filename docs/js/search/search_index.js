var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiOptions.html",[0,1.08,1,2.444]],["body/interfaces/ApiOptions.html",[0,1.885,1,3.371,2,1.804,3,0.06,4,0.06,5,0.06,6,0.046,7,2.025,8,0.046,9,0.55,10,0.232,11,3.711,12,3.865,13,4.295,14,2.842,15,4.209,16,3.54,17,4.035,18,4.295,19,1.929,20,3.865,21,4.295,22,4.035,23,3.699,24,3.711,25,1.828,26,0.139,27,0.009,28,3.018,29,2.927,30,3.114,31,0.678,32,3.577,33,3.972,34,0.196,35,2.508,36,1.534,37,0.135,38,2.025,39,2.025,40,2.025,41,3.349,42,1.743,43,2.741,44,2.966,45,1.685,46,1.231,47,2.966,48,0.682,49,0.821,50,1.581,51,2.439,52,1.685,53,2.741,54,3.018,55,1.951,56,2.468,57,1.674,58,2.741,59,2.849,60,1.017,61,2.685,62,0.787,63,1.804,64,2.182,65,2.247,66,2.741,67,2.061,68,2.468,69,2.741,70,2.316,71,2.247,72,2.316,73,2.468,74,2.849,75,2.849,76,1.945,77,3.097,78,4.227,79,3.097,80,2.215,81,4.702,82,2.215,83,2.215,84,2.025,85,3.097,86,4.5,87,4.114,88,2.114,89,3.097,90,2.215,91,2.215,92,3.84,93,2.215,94,0.237,95,3.097,96,3.711,97,2.215,98,2.215,99,3.097,100,2.215,101,3.097,102,2.114,103,3.097,104,2.114,105,3.097,106,2.114,107,3.097,108,3.444,109,1.804,110,3.444,111,3.245,112,3.245,113,3.097,114,2.215,115,2.215,116,2.215,117,2.114,118,3.097,119,2.215,120,2.215,121,2.114,122,3.097,123,2.849,124,2.215,125,2.215,126,2.215,127,2.215,128,3.097,129,2.215,130,1.797,131,2.215,132,2.081,133,2.081,134,3.665,135,3.097,136,3.245,137,3.245,138,2.215,139,3.245,140,4.227,141,1.161,142,2.215,143,2.215,144,3.245,145,2.114,146,3.097,147,2.215,148,2.215,149,2.215,150,1.685,151,3.097,152,2.468,153,3.097,154,3.097,155,3.097,156,1.593,157,2.439,158,3.665,159,0.623,160,3.097,161,4.488,162,5.296,163,5.296,164,5.296,165,2.114,166,3.097,167,3.865,168,2.114,169,3.097,170,3.245,171,2.114,172,3.097,173,3.901,174,3.245,175,2.114,176,3.097,177,2.741,178,2.114,179,3.097,180,3.245,181,2.114,182,3.097,183,3.245,184,2.114,185,3.097,186,3.665,187,3.097,188,4.702,189,2.114,190,3.097,191,2.114,192,3.097,193,2.114,194,3.097,195,2.114,196,3.097,197,2.114,198,3.097,199,2.114,200,3.097,201,2.114,202,1.673,203,2.966,204,2.966,205,2.849,206,2.114,207,2.114,208,2.025,209,0.495,210,1.743,211,2.114,212,1.872,213,2.215,214,2.215,215,2.215,216,3.071,217,2.025,218,0.604,219,2.114,220,2.114,221,3.711,222,0.86,223,3.371,224,1.396,225,2.828,226,3.84,227,2.182,228,2.553,229,2.075,230,1.05,231,2.828,232,2.39,233,1.743,234,3.021,235,1.743,236,1.632,237,1.804,238,2.029,239,1.49,240,1.759,241,2.966,242,0.524,243,1.872,244,2.215,245,1.804,246,2.12,247,0.802,248,2.215,249,0.486,250,1.632,251,1.945,252,1.743,253,2.114,254,0.155,255,2.215,256,2.215,257,1.534,258,2.215,259,2.025,260,2.114,261,2.966,262,4.209,263,1.231,264,2.025,265,2.025,266,2.025,267,1.407,268,1.175,269,2.7,270,1.945,271,2.741,272,1.743,273,2.849,274,2.114,275,2.741,276,2.114,277,2.966,278,1.945,279,2.966,280,2.849,281,2.005,282,2.025,283,1.804,284,1.673,285,1.945,286,0.715,287,1.632,288,2.025,289,1.632,290,2.025,291,2.215,292,1.945,293,2.025,294,0.778,295,1.685,296,1.632,297,1.632,298,1.632,299,2.025,300,2.114,301,0.09,302,1.945,303,1.804,304,1.685,305,0.005,306,0.005]],["title/classes/ArithmeticFunctions.html",[307,0.346,308,1.928]],["body/classes/ArithmeticFunctions.html",[0,1.4,3,0.044,4,0.044,5,0.044,6,0.074,8,0.034,10,0.129,19,0.647,26,0.114,27,0.009,31,0.544,34,0.319,37,0.132,46,3.099,60,0.839,62,1.155,94,0.231,130,2.23,141,0.697,159,0.493,161,2.452,209,0.898,218,0.5,222,0.997,224,1.897,230,1.341,239,1.234,242,0.928,249,0.791,254,0.138,268,1.638,284,0.84,286,1.502,294,1.178,301,0.129,305,0.004,306,0.004,307,0.655,308,2.499,309,0.113,310,1.129,311,0.549,312,4.069,313,4.069,314,1.834,315,4.017,316,0.174,317,2.581,318,4.039,319,0.594,320,1.834,321,2.581,322,1.834,323,2.581,324,0.883,325,0.745,326,2.196,327,1.261,328,1.129,329,4.084,330,2.098,331,2.461,332,2.739,333,2.739,334,2.83,335,1.065,336,2.127,337,1.859,338,0.93,339,2.024,340,1.163,341,1.163,342,1.163,343,1.163,344,1.545,345,1.163,346,1.163,347,1.096,348,1.834,349,2.27,350,0.632,351,1.007,352,1.163,353,1.163,354,1.163,355,1.163,356,1.163,357,1.163,358,1.163,359,1.163,360,1.163,361,1.163,362,1.163,363,1.163,364,1.12,365,1.163,366,1.163,367,1.163,368,1.163,369,1.129,370,1.163,371,1.163,372,2.846,373,2.803,374,1.163,375,1.163,376,0.71,377,1.163,378,1.163,379,1.163,380,1.834,381,1.129,382,1.163,383,1.129,384,1.467,385,0.22,386,2.077,387,0.906,388,2.006,389,2.426,390,1.392,391,2.978,392,2.27,393,3.624,394,2.27,395,2.27,396,2.27,397,1.834,398,1.163,399,2.27,400,1.163,401,2.202,402,1.163,403,1.163,404,1.163,405,1.163,406,1.163,407,1.163,408,1.163,409,1.163,410,1.163,411,1.163,412,1.163,413,1.163,414,1.163,415,1.504,416,1.163,417,1.163,418,2.202,419,1.163,420,1.163,421,1.163,422,1.163,423,2.202,424,1.163,425,1.834,426,1.163,427,1.163,428,1.163,429,1.163,430,1.163,431,1.163,432,1.163,433,2.202,434,1.163,435,1.163,436,1.163,437,1.163,438,1.163,439,1.163,440,1.163,441,1.163,442,1.163,443,1.163,444,1.163,445,1.163,446,1.163,447,1.163,448,1.163,449,1.163,450,1.163,451,1.163,452,1.163,453,1.163,454,1.163,455,1.163,456,1.163,457,1.163,458,1.163,459,1.163,460,1.163,461,1.163,462,1.163,463,1.163,464,1.163,465,2.202,466,1.163,467,1.163,468,1.163,469,1.163,470,2.202,471,1.163,472,1.163,473,1.163,474,1.163,475,1.163,476,1.163,477,2.202,478,1.163,479,1.163,480,2.499,481,2.576,482,2.803,483,1.163,484,1.163,485,0.82,486,1.163,487,1.163,488,2.202,489,1.163,490,1.163,491,1.163,492,1.163,493,1.163,494,1.163,495,1.163,496,1.163,497,1.163,498,1.163,499,1.163,500,1.163,501,1.163,502,1.163,503,1.163,504,1.163,505,1.163,506,1.163,507,1.163,508,1.163,509,1.163,510,1.163,511,2.202,512,1.163,513,1.163,514,1.163,515,1.163,516,1.163,517,1.163,518,1.163,519,1.163,520,1.163,521,1.163,522,1.163,523,1.678,524,0.98,525,1.779,526,1.163,527,1.163,528,1.163,529,2.202,530,1.862,531,1.163,532,1.163,533,1.163,534,2.202,535,1.163,536,1.163,537,1.163,538,1.163,539,2.889,540,1.163,541,1.129,542,2.889,543,1.163,544,0.954,545,2.576,546,1.163,547,0.861]],["title/classes/ArithmeticOperators.html",[307,0.346,511,1.928]],["body/classes/ArithmeticOperators.html",[0,1.384,3,0.043,4,0.043,5,0.043,6,0.089,8,0.033,10,0.168,19,0.634,26,0.119,27,0.009,31,0.541,34,0.315,37,0.132,46,3.064,60,0.928,62,1.05,94,0.229,130,2.217,141,0.688,159,0.485,209,0.897,218,0.493,222,0.981,224,1.894,230,1.282,239,1.604,242,0.919,249,0.782,254,0.147,268,1.627,284,0.823,286,1.492,294,1.177,301,0.168,305,0.004,306,0.004,307,0.652,308,2.172,309,0.111,310,1.105,311,0.54,314,1.14,315,4.019,316,0.226,318,4.039,319,0.773,320,1.14,322,1.14,324,0.865,325,0.729,326,2.179,327,1.241,328,1.105,329,4.097,330,2.08,331,2.444,332,2.731,333,2.731,334,2.822,335,1.043,336,2.114,337,1.844,338,0.911,339,2.004,340,1.14,341,1.14,342,1.14,343,1.14,344,1.52,345,1.14,346,1.14,347,1.073,348,1.804,349,2.239,350,0.619,351,0.986,352,1.14,353,1.14,354,1.14,355,1.14,356,1.14,357,1.14,358,1.14,359,1.14,360,1.14,361,1.14,362,1.14,363,1.14,364,1.102,365,1.14,366,1.14,367,1.14,368,1.14,369,1.105,370,1.14,371,1.14,372,2.83,373,2.775,374,1.14,375,1.14,376,0.696,377,1.14,378,1.14,379,1.14,380,1.804,381,1.105,382,1.14,383,1.105,384,1.45,385,0.217,386,2.065,387,0.887,388,1.983,389,2.399,390,1.37,391,2.952,392,2.239,393,3.607,394,2.239,395,2.239,396,2.239,397,1.804,398,1.14,399,2.239,400,1.14,401,2.172,402,1.14,403,1.14,404,1.14,405,1.14,406,1.14,407,1.14,408,1.14,409,1.14,410,1.14,411,1.14,412,1.14,413,1.14,414,1.14,415,1.48,416,1.14,417,1.14,418,2.172,419,1.14,420,1.14,421,1.14,422,1.14,423,2.172,424,1.14,425,1.804,426,1.14,427,1.14,428,1.14,429,1.14,430,1.14,431,1.14,432,1.14,433,2.172,434,1.14,435,1.14,436,1.14,437,1.14,438,1.14,439,1.14,440,1.14,441,1.14,442,1.14,443,1.14,444,1.14,445,1.14,446,1.14,447,1.14,448,1.14,449,1.14,450,1.14,451,1.14,452,1.14,453,1.14,454,1.14,455,1.14,456,1.14,457,1.14,458,1.14,459,1.14,460,1.14,461,1.14,462,1.14,463,1.14,464,1.14,465,2.172,466,1.14,467,1.14,468,1.14,469,1.14,470,2.172,471,1.14,472,1.14,473,1.14,474,1.14,475,1.14,476,1.14,477,2.172,478,1.14,479,1.14,480,3.281,481,2.547,482,2.775,483,1.14,484,1.14,485,0.803,486,1.14,487,1.14,488,2.172,489,1.14,490,1.14,491,1.14,492,1.14,493,1.14,494,1.14,495,1.14,496,1.14,497,1.14,498,1.14,499,1.14,500,1.14,501,1.14,502,1.14,503,1.14,504,1.14,505,1.14,506,1.14,507,1.14,508,1.14,509,1.14,510,1.14,511,2.471,512,1.804,513,1.14,514,1.804,515,1.14,516,1.804,517,1.14,518,1.804,519,1.14,520,1.804,521,1.14,522,1.804,523,1.651,524,0.96,525,1.75,526,1.14,527,1.14,528,1.14,529,2.172,530,1.837,531,1.14,532,1.14,533,1.14,534,2.172,535,1.14,536,1.14,537,1.14,538,1.14,539,2.863,540,1.14,541,1.105,542,2.863,543,1.14,544,0.935,545,2.547,546,1.14,547,0.844,548,2.996,549,4.003,550,4.003,551,4.003,552,4.003,553,4.003,554,2.529,555,2.529,556,2.529,557,2.529,558,2.529,559,2.529]],["title/interfaces/Cache.html",[0,1.08,41,1.872]],["body/interfaces/Cache.html",[0,1.911,1,2.943,2,1.888,3,0.063,4,0.063,5,0.063,6,0.081,7,2.118,8,0.048,9,0.332,10,0.136,11,2.034,12,2.118,13,3.2,14,1.558,15,3.329,16,2.638,17,2.212,18,3.2,19,1.715,20,2.118,21,3.2,22,2.212,23,3.099,24,2.034,26,0.136,27,0.009,28,2.393,29,2.322,30,2.47,31,0.673,32,3.285,33,3.648,34,0.205,35,2.574,36,1.605,37,0.136,38,2.118,39,2.118,40,2.118,41,3.456,42,1.823,43,2.833,44,3.065,45,1.763,46,1.288,47,3.065,48,0.714,49,0.859,50,1.654,51,2.502,52,1.763,53,2.833,54,3.082,55,2.016,56,2.551,57,1.717,58,2.833,59,2.943,60,1.026,61,2.742,62,0.813,63,1.864,64,2.254,65,2.322,66,2.833,67,2.129,68,2.551,69,2.833,70,2.393,71,2.322,72,2.393,73,2.551,74,2.943,75,2.943,76,2.034,77,3.2,78,4.318,79,3.2,80,2.317,81,4.776,82,2.317,83,2.317,84,2.118,85,3.2,86,4.581,87,4.188,88,2.212,89,3.2,90,2.317,91,2.317,92,3.94,93,2.317,94,0.238,95,3.2,96,3.791,97,2.317,98,2.317,99,3.2,100,2.317,101,3.2,102,2.212,103,3.2,104,2.212,105,3.2,106,2.212,107,3.2,108,3.517,109,1.888,110,3.517,111,3.353,112,3.353,113,3.2,114,2.317,115,2.317,116,2.317,117,2.212,118,3.2,119,2.317,120,2.317,121,2.212,122,3.2,123,2.943,124,2.317,125,2.317,126,2.317,127,2.317,128,3.2,129,2.317,130,1.843,131,2.317,132,2.135,133,2.135,134,3.761,135,3.2,136,3.353,137,3.353,138,2.317,139,3.353,140,4.318,141,1.171,142,2.317,143,2.317,144,3.353,145,2.212,146,3.2,147,2.317,148,2.317,149,2.317,150,1.763,151,3.2,152,2.551,153,3.2,154,3.2,155,3.2,156,1.646,157,2.502,158,3.761,159,0.644,160,3.2,161,4.559,162,5.343,163,5.343,164,5.343,165,2.212,166,3.2,167,3.947,168,2.212,169,3.2,170,3.353,171,2.212,172,3.2,173,3.935,174,3.353,175,2.212,176,3.2,177,2.833,178,2.212,179,3.2,180,3.353,181,2.212,182,3.2,183,3.353,184,2.212,185,3.2,186,3.761,187,3.2,188,4.776,189,2.212,190,3.2,191,2.212,192,3.2,193,2.212,194,3.2,195,2.212,196,3.2,197,2.212,198,3.2,199,2.212,200,3.2,201,2.212,202,1.729,203,3.065,204,3.065,205,2.943,206,2.212,207,2.212,208,2.118,209,0.511,210,1.823,211,2.212,212,1.958,213,2.317,214,2.317,215,2.317,216,3.12,217,2.118,218,0.62,219,2.212,220,2.212,221,3.791,222,0.899,223,3.459,224,1.426,225,2.902,226,3.94,227,2.254,228,2.638,229,2.12,230,1.277,231,2.902,232,2.47,233,1.823,234,3.099,235,1.823,236,1.707,237,1.888,238,2.082,239,1.529,240,1.817,241,3.065,242,0.548,243,1.958,244,3.353,245,3.209,246,3.12,247,1.214,248,3.353,249,0.735,250,1.707,251,2.034,252,1.823,253,2.212,254,0.161,255,2.317,256,2.317,257,1.605,258,2.317,259,2.118,260,2.212,261,3.065,262,4.261,263,1.288,264,2.118,265,2.118,266,2.118,267,1.472,268,1.214,269,2.738,270,2.034,271,2.833,272,1.823,273,2.943,274,2.212,275,2.833,276,2.212,277,3.065,278,2.034,279,3.065,280,2.943,281,2.071,282,2.118,283,1.888,284,1.729,285,2.034,286,1.271,287,1.707,288,2.118,289,1.707,290,2.118,291,2.317,292,2.034,293,2.118,294,0.799,295,1.763,296,1.707,297,1.707,298,1.707,299,2.118,300,2.212,301,0.186,302,2.034,303,1.888,304,1.763,305,0.005,306,0.005,311,0.716,316,0.183,319,0.627,560,3.353,561,3.67,562,3.67]],["title/classes/CollectionFunctions.html",[307,0.346,418,1.928]],["body/classes/CollectionFunctions.html",[0,1.409,3,0.045,4,0.045,5,0.045,6,0.066,8,0.034,10,0.105,19,0.655,26,0.111,27,0.009,31,0.546,34,0.321,37,0.133,46,3.094,60,0.805,62,1.133,94,0.229,130,2.238,141,0.702,159,0.498,209,0.898,218,0.504,222,1.006,224,1.898,230,1.328,239,1.006,242,0.934,249,0.796,254,0.134,268,1.645,284,0.85,286,1.508,294,1.179,301,0.105,305,0.004,306,0.004,307,0.656,308,2.219,309,0.114,310,1.142,311,0.554,314,1.177,315,4.017,316,0.142,318,4.04,319,0.485,320,1.177,322,1.177,324,0.893,325,0.753,326,2.206,327,1.273,328,1.142,329,4.09,330,2.109,331,2.47,332,2.744,333,2.744,334,2.834,335,1.077,336,2.134,337,1.867,338,0.94,339,2.036,340,1.177,341,1.177,342,1.177,343,1.177,344,1.559,345,1.177,346,1.177,347,1.108,348,1.851,349,2.287,350,0.64,351,1.019,352,1.177,353,1.177,354,1.177,355,1.177,356,1.177,357,1.177,358,1.177,359,1.177,360,1.177,361,1.177,362,1.177,363,1.177,364,1.13,365,1.177,366,1.177,367,1.177,368,1.177,369,1.142,370,1.177,371,1.177,372,2.855,373,2.819,374,1.177,375,1.177,376,0.719,377,1.177,378,1.177,379,1.177,380,1.851,381,1.142,382,1.177,383,1.142,384,1.476,385,0.222,386,2.084,387,0.916,388,2.019,389,2.442,390,1.405,391,2.993,392,2.287,393,3.633,394,2.287,395,2.287,396,2.287,397,1.851,398,1.177,399,2.287,400,1.177,401,2.219,402,1.177,403,1.177,404,1.177,405,1.177,406,1.177,407,1.177,408,1.177,409,1.177,410,1.177,411,1.177,412,1.177,413,1.177,414,1.177,415,1.518,416,1.177,417,1.177,418,2.515,419,1.851,420,1.177,421,1.851,422,1.177,423,2.219,424,1.177,425,1.851,426,1.177,427,1.177,428,1.177,429,1.177,430,1.177,431,1.177,432,1.177,433,2.219,434,1.177,435,1.177,436,1.177,437,1.177,438,1.177,439,1.177,440,1.177,441,1.177,442,1.177,443,1.177,444,1.177,445,1.177,446,1.177,447,1.177,448,1.177,449,1.177,450,1.177,451,1.177,452,1.177,453,1.177,454,1.177,455,1.177,456,1.177,457,1.177,458,1.177,459,1.177,460,1.177,461,1.177,462,1.177,463,1.177,464,1.177,465,2.219,466,1.177,467,1.177,468,1.177,469,1.177,470,2.219,471,1.177,472,1.177,473,1.177,474,1.177,475,1.177,476,1.177,477,2.219,478,1.177,479,1.177,480,2.515,481,2.593,482,2.819,483,1.177,484,1.177,485,0.829,486,1.177,487,1.177,488,2.219,489,1.177,490,1.177,491,1.177,492,1.177,493,1.177,494,1.177,495,1.177,496,1.177,497,1.177,498,1.177,499,1.177,500,1.177,501,1.177,502,1.177,503,1.177,504,1.177,505,1.177,506,1.177,507,1.177,508,1.177,509,1.177,510,1.177,511,2.219,512,1.177,513,1.177,514,1.177,515,1.177,516,1.177,517,1.177,518,1.177,519,1.177,520,1.177,521,1.177,522,1.177,523,1.693,524,0.991,525,1.795,526,1.177,527,1.177,528,1.177,529,2.219,530,1.876,531,1.177,532,1.177,533,1.177,534,2.219,535,1.177,536,1.177,537,1.177,538,1.177,539,2.903,540,1.177,541,1.142,542,2.903,543,1.177,544,0.965,545,2.593,546,1.177,547,0.871,563,4.106,564,4.106,565,2.611,566,2.611]],["title/classes/ComputeExpression.html",[307,0.346,567,3.3]],["body/classes/ComputeExpression.html",[3,0.09,4,0.09,5,0.09,6,0.11,8,0.088,9,0.614,10,0.211,25,1.84,26,0.137,27,0.009,31,0.388,34,0.444,37,0.102,49,1.76,60,0.637,62,1.039,66,4.014,94,0.23,157,2.106,159,0.637,209,0.793,218,0.674,222,1.844,224,1.717,230,1.248,239,1.287,242,0.784,246,3.541,247,1.552,254,0.169,281,3.103,294,0.869,301,0.22,305,0.007,306,0.007,307,0.412,309,0.23,311,0.916,316,0.308,319,1.027,326,2.157,327,2.332,330,2.727,331,2.511,332,2.39,333,2.39,334,2.449,336,2.12,337,2.138,338,2.445,339,2.795,385,0.297,386,1.869,415,2.782,485,1.668,539,3.29,541,2.969,542,3.29,544,2.51,547,1.752,567,6.886,568,4.637,569,4.368,570,4.287,571,4.287,572,3.391,573,4.224,574,2.701,575,6.79,576,2.615,577,3.488,578,6.79,579,4.965,580,5.252,581,5.252,582,4.637,583,5.252,584,4.237,585,5.252,586,0.784,587,3.689,588,5.252,589,2.367,590,5.252,591,3.488,592,3.488,593,3.689,594,5.472,595,4.233,596,2.522,597,7.525,598,5.252,599,2.911,600,4.637,601,5.252,602,2.801,603,2.911,604,5.252,605,3.165,606,4.287,607,3.622,608,5.252]],["title/classes/ConditionalFunctions.html",[307,0.346,477,1.928]],["body/classes/ConditionalFunctions.html",[0,1.416,3,0.045,4,0.045,5,0.045,6,0.054,8,0.034,10,0.068,19,0.66,26,0.109,27,0.009,31,0.548,34,0.322,37,0.133,46,3.088,60,0.761,62,1.104,94,0.23,130,2.243,141,0.706,159,0.501,209,0.898,218,0.506,222,1.012,224,1.899,230,1.313,239,0.645,242,0.937,249,0.8,254,0.128,268,1.649,284,0.857,286,1.511,294,1.179,301,0.068,305,0.004,306,0.004,307,0.657,308,2.23,309,0.115,310,1.151,311,0.557,314,1.186,315,4.016,316,0.091,318,4.039,319,0.311,320,1.186,322,1.186,324,0.901,325,0.759,326,2.213,327,1.281,328,1.151,329,4.089,330,2.116,331,2.476,332,2.747,333,2.747,334,2.837,335,1.086,336,2.139,337,1.873,338,0.948,339,2.043,340,1.186,341,1.186,342,1.186,343,1.186,344,1.569,345,1.186,346,1.186,347,1.117,348,1.862,349,2.299,350,0.645,351,1.027,352,1.186,353,1.186,354,1.186,355,1.186,356,1.186,357,1.186,358,1.186,359,1.186,360,1.186,361,1.186,362,1.186,363,1.186,364,1.137,365,1.186,366,1.186,367,1.186,368,1.186,369,1.151,370,1.186,371,1.186,372,2.861,373,2.83,374,1.186,375,1.186,376,0.724,377,1.186,378,1.186,379,1.186,380,1.862,381,1.151,382,1.186,383,1.151,384,1.483,385,0.223,386,2.089,387,0.924,388,2.028,389,2.453,390,1.414,391,3.003,392,2.299,393,3.64,394,2.299,395,2.299,396,2.299,397,1.862,398,1.186,399,2.299,400,1.186,401,2.23,402,1.186,403,1.186,404,1.186,405,1.186,406,1.186,407,1.186,408,1.186,409,1.186,410,1.186,411,1.186,412,1.186,413,1.186,414,1.186,415,1.528,416,1.186,417,1.186,418,2.23,419,1.186,420,1.186,421,1.186,422,1.186,423,2.23,424,1.186,425,1.862,426,1.186,427,1.186,428,1.186,429,1.186,430,1.186,431,1.186,432,1.186,433,2.23,434,1.186,435,1.186,436,1.186,437,1.186,438,1.186,439,1.186,440,1.186,441,1.186,442,1.186,443,1.186,444,1.186,445,1.186,446,1.186,447,1.186,448,1.186,449,1.186,450,1.186,451,1.186,452,1.186,453,1.186,454,1.186,455,1.186,456,1.186,457,1.186,458,1.186,459,1.186,460,1.186,461,1.186,462,1.186,463,1.186,464,1.186,465,2.23,466,1.186,467,1.186,468,1.186,469,1.186,470,2.23,471,1.186,472,1.186,473,1.186,474,1.186,475,1.186,476,1.186,477,2.526,478,1.862,479,1.186,480,2.526,481,2.604,482,2.83,483,1.186,484,1.186,485,0.836,486,1.186,487,1.186,488,2.23,489,1.186,490,1.186,491,1.186,492,1.186,493,1.186,494,1.186,495,1.186,496,1.186,497,1.186,498,1.186,499,1.186,500,1.186,501,1.186,502,1.186,503,1.186,504,1.186,505,1.186,506,1.186,507,1.186,508,1.186,509,1.186,510,1.186,511,2.23,512,1.186,513,1.186,514,1.186,515,1.186,516,1.186,517,1.186,518,1.186,519,1.186,520,1.186,521,1.186,522,1.186,523,1.704,524,0.999,525,1.807,526,1.186,527,1.186,528,1.186,529,2.23,530,1.886,531,1.186,532,1.186,533,1.186,534,2.23,535,1.186,536,1.186,537,1.186,538,1.186,539,2.913,540,1.186,541,1.151,542,2.913,543,1.186,544,0.973,545,2.604,546,1.186,547,0.878,609,3.33,610,2.632]],["title/classes/CountExpression.html",[307,0.346,611,3.554]],["body/classes/CountExpression.html",[3,0.081,4,0.081,5,0.081,6,0.103,8,0.061,9,0.573,10,0.204,19,1.184,25,1.778,26,0.135,27,0.009,28,2.854,31,0.467,34,0.457,37,0.107,49,1.862,60,0.965,61,3.355,62,0.969,67,2.539,94,0.218,130,2.11,157,1.894,159,0.768,209,0.852,218,0.629,222,2.05,224,1.814,230,1.248,239,1.157,242,0.945,246,3.647,247,1.448,249,0.876,254,0.161,281,2.977,286,1.555,294,0.977,301,0.215,305,0.006,306,0.006,307,0.497,309,0.206,311,0.854,316,0.3,319,1.004,324,1.616,325,1.362,326,2.269,327,2.365,330,2.658,331,2.656,332,2.658,333,2.658,334,2.724,336,2.15,337,2.139,338,2.572,384,1.212,385,0.312,386,1.966,388,1.658,415,2.641,485,2.011,547,1.576,569,4.278,570,3.998,571,3.998,572,3.219,573,4.085,574,2.429,576,2.539,577,3.137,579,2.846,584,4.213,586,0.945,589,2.129,591,3.137,592,3.137,593,3.317,596,2.269,599,2.618,602,2.519,603,2.618,605,2.846,606,2.982,607,4.464,611,7.359,612,3.806,613,4.723,614,3.816,615,4.723,616,4.723,617,4.723,618,4.723,619,4.723,620,3.806,621,4.723,622,4.723,623,4.744,624,4.205,625,6.414,626,3.137,627,4.205,628,3.137,629,3.317,630,3.535,631,2.846,632,3.535,633,3.317,634,3.317,635,3.816,636,3.137,637,3.535,638,4.171,639,3.317,640,3.535,641,3.535,642,3.535,643,3.535,644,3.535,645,2.269,646,3.535,647,4.171,648,3.137,649,2.982,650,3.535,651,4.739,652,5.103,653,2.346,654,4.205,655,2.618,656,2.726,657,4.171,658,4.171]],["title/classes/CountField.html",[307,0.346,625,3.554]],["body/classes/CountField.html",[3,0.084,4,0.084,5,0.084,6,0.111,8,0.064,10,0.199,19,1.235,25,1.734,26,0.133,27,0.009,28,3.497,31,0.48,34,0.462,37,0.11,49,1.888,60,0.941,61,3.236,62,0.754,67,3.111,94,0.22,130,2.384,157,1.974,159,0.789,209,0.857,218,0.489,222,2.031,224,1.828,230,1.217,242,0.972,246,3.67,247,1.126,249,1.074,254,0.163,281,2.845,286,1.581,294,0.993,301,0.207,305,0.006,306,0.006,307,0.511,309,0.215,311,0.878,316,0.292,319,0.952,324,1.685,325,1.42,326,2.316,327,2.405,330,2.563,331,2.693,332,2.685,333,2.685,334,2.752,336,2.186,337,2.169,338,2.626,384,1.67,385,0.319,386,1.355,388,1.728,485,2.068,547,1.643,569,3.233,572,2.219,573,3.727,584,3.991,586,0.735,589,2.219,596,2.365,599,2.729,602,2.626,603,2.729,605,2.967,606,4.899,607,4.139,611,7.172,612,3.968,614,2.967,623,5.153,624,4.323,625,6.814,626,3.27,627,4.323,628,3.27,629,3.459,630,3.685,631,2.967,632,3.685,633,3.459,634,3.459,635,3.923,636,3.27,637,3.685,638,4.348,639,3.459,640,3.685,641,3.685,642,3.685,643,3.685,644,3.685,645,2.365,646,3.685,647,4.348,648,4.843,649,3.109,650,4.872,651,4.872,652,5.247,653,2.446,654,4.323,655,2.729,656,2.842,657,4.348,658,4.348,659,2.344,660,3.968,661,4.924,662,4.924,663,3.968,664,4.348,665,4.924,666,4.924,667,4.924,668,4.924,669,4.924]],["title/classes/CsdlAction.html",[307,0.346,670,2.545]],["body/classes/CsdlAction.html",[3,0.1,4,0.1,5,0.1,6,0.114,8,0.076,9,0.656,10,0.23,26,0.134,27,0.009,31,0.661,37,0.13,48,1.838,55,2.751,62,1.345,63,2.042,94,0.239,132,2.479,133,2.479,141,1.199,238,2.418,240,2.479,254,0.172,298,4.029,301,0.225,305,0.007,306,0.007,307,0.68,309,0.254,316,0.299,385,0.384,586,1.233,670,4.182,671,2.658,672,3.864,673,5.47,674,5.47,675,2.042,676,5.221,677,5.221,678,5.818,679,5.818,680,5.818,681,5.818,682,5.818,683,5.818,684,3.358,685,3.673,686,3.358,687,3.864,688,3.506,689,3.358,690,3.168]],["title/classes/CsdlActionImport.html",[307,0.346,689,2.545]],["body/classes/CsdlActionImport.html",[3,0.103,4,0.103,5,0.103,6,0.111,8,0.078,9,0.669,10,0.206,26,0.131,27,0.009,31,0.645,37,0.131,48,1.838,55,3.317,62,1.313,63,3.012,94,0.24,132,2.532,133,2.532,141,1.209,238,2.469,240,2.532,254,0.173,298,3.441,301,0.206,305,0.007,306,0.007,307,0.686,309,0.263,316,0.288,385,0.387,586,0.898,670,3.474,671,2.596,672,3.997,673,4.671,674,4.671,675,2.112,676,4.829,677,4.829,684,3.474,685,3.799,686,3.474,687,3.997,688,3.627,689,4.271,690,3.235,691,6.018,692,6.018,693,6.018,694,6.018]],["title/classes/CsdlAnnotable.html",[307,0.346,695,2.444]],["body/classes/CsdlAnnotable.html",[3,0.112,4,0.112,5,0.112,6,0.108,8,0.085,9,0.704,10,0.213,26,0.125,27,0.009,31,0.483,37,0.129,48,1.814,94,0.235,132,2.237,133,2.237,141,1.149,218,0.649,238,2.182,240,2.237,254,0.15,263,2.295,301,0.168,305,0.008,306,0.008,307,0.675,309,0.286,316,0.268,344,2.483,385,0.376,586,0.976,671,2.513,690,2.859,695,4.603,696,4.894,697,5.068,698,6.539,699,4.751,700,6.539,701,6.539,702,3.041,703,4.128,704,4.689,705,3.774,706,4.128,707,4.593,708,3.624,709,4.593]],["title/classes/CsdlAnnotation.html",[307,0.346,699,2.352]],["body/classes/CsdlAnnotation.html",[3,0.11,4,0.11,5,0.11,6,0.111,8,0.084,9,0.698,10,0.212,26,0.129,27,0.009,31,0.476,37,0.129,48,1.818,94,0.239,132,2.207,133,2.207,141,1.143,218,0.64,238,2.152,240,2.207,254,0.148,263,3.003,301,0.165,305,0.008,306,0.008,307,0.672,309,0.282,316,0.285,344,2.449,385,0.374,586,0.963,671,2.589,690,2.82,695,4.277,696,4.828,697,4.454,699,4.565,702,3,703,4.073,704,5.352,705,3.723,706,4.073,707,4.531,708,3.575,709,4.531,710,6.451,711,6.451,712,6.451,713,6.451]],["title/classes/CsdlAnnotations.html",[307,0.346,703,2.784]],["body/classes/CsdlAnnotations.html",[3,0.109,4,0.109,5,0.109,6,0.11,8,0.082,9,0.691,10,0.223,26,0.131,27,0.009,31,0.468,37,0.128,48,1.82,94,0.239,132,2.17,133,2.17,141,1.134,218,0.759,238,2.116,240,2.17,254,0.147,263,2.226,301,0.163,305,0.007,306,0.007,307,0.668,309,0.277,316,0.294,344,3.231,385,0.372,576,1.966,586,0.947,671,2.575,690,2.773,695,4.716,696,4.746,697,5.105,699,4.718,702,2.949,703,4.823,704,5.331,705,3.661,706,4.004,707,4.455,708,3.515,709,4.455,714,6.343,715,6.343,716,6.343,717,6.343,718,4.746]],["title/classes/CsdlComplexType.html",[307,0.346,719,2.658]],["body/classes/CsdlComplexType.html",[3,0.1,4,0.1,5,0.1,6,0.094,8,0.076,9,0.821,10,0.233,26,0.132,27,0.009,31,0.675,34,0.326,37,0.128,48,1.814,57,1.608,94,0.236,156,2.778,218,0.785,254,0.171,268,1.336,286,1.19,301,0.15,305,0.007,306,0.007,307,0.668,309,0.255,316,0.303,385,0.372,576,2.688,586,1.27,671,2.198,675,2.05,702,2.717,719,4.378,720,3.084,721,2.901,722,5.992,723,5.952,724,6.295,725,5.952,726,4.523,727,4.523,728,5.842,729,5.158,730,5.158,731,5.158,732,5.158,733,5.158,734,5.158,735,2.901,736,3.116,737,4.026,738,3.521,739,4.586,740,3.88,741,4.103,742,4.586]],["title/classes/CsdlEntityContainer.html",[307,0.346,743,3.3]],["body/classes/CsdlEntityContainer.html",[3,0.106,4,0.106,5,0.106,6,0.117,8,0.08,9,0.681,10,0.235,26,0.134,27,0.009,34,0.453,37,0.093,48,1.812,56,2.975,62,0.948,63,2.174,94,0.23,254,0.166,278,4.795,301,0.159,305,0.007,306,0.007,307,0.486,309,0.271,316,0.307,385,0.329,586,1.292,671,2.719,675,2.174,686,4.993,689,4.993,735,4.03,743,5.636,744,4.347,745,5.47,746,8.651,747,8.651,748,8.651,749,8.651,750,6.474,751,6.474,752,6.195,753,6.195,754,6.195,755,6.195,756,6.195,757,5.47,758,6.195,759,3.733]],["title/classes/CsdlEntitySet.html",[307,0.346,750,3.3]],["body/classes/CsdlEntitySet.html",[3,0.112,4,0.112,5,0.112,6,0.116,8,0.085,9,0.704,10,0.225,26,0.132,27,0.009,31,0.634,34,0.364,37,0.098,48,1.797,57,1.798,94,0.233,254,0.169,287,3.038,301,0.168,302,4.865,305,0.008,306,0.008,307,0.513,309,0.286,316,0.303,385,0.34,586,1.161,671,2.694,675,2.293,688,5.29,735,3.245,744,4.277,750,5.819,760,5.265,761,7.751,762,6.166,763,6.533,764,5.769,765,6.533,766,6.533,767,5.769,768,4.339]],["title/classes/CsdlEntityType.html",[307,0.346,738,2.658]],["body/classes/CsdlEntityType.html",[3,0.097,4,0.097,5,0.097,6,0.106,8,0.074,9,0.817,10,0.235,26,0.134,27,0.009,31,0.679,34,0.316,37,0.127,48,1.819,57,1.559,94,0.235,156,2.763,218,0.774,254,0.17,268,1.295,286,1.717,301,0.145,305,0.007,306,0.007,307,0.662,309,0.248,316,0.308,385,0.369,576,2.668,586,1.304,671,2.476,675,1.989,702,2.635,719,3.415,720,3.473,721,2.814,722,5.963,723,5.921,724,6.262,725,5.921,726,4.493,727,4.493,729,5.004,730,5.004,731,5.004,732,5.004,733,5.004,734,5.004,735,2.814,736,3.023,737,3.95,738,4.295,739,5.323,740,5.6,741,3.98,742,4.5,769,5.667,770,5.667,771,5.004]],["title/classes/CsdlEnumMember.html",[307,0.346,772,3.3]],["body/classes/CsdlEnumMember.html",[3,0.115,4,0.115,5,0.115,6,0.113,8,0.087,9,0.715,10,0.215,26,0.126,27,0.009,31,0.495,37,0.119,48,1.79,51,3.476,60,1.072,94,0.23,141,1.2,254,0.172,283,3.451,301,0.172,305,0.008,306,0.008,307,0.62,309,0.293,316,0.29,385,0.367,586,1.002,671,2.623,675,2.355,721,3.333,772,6.284,773,5.925,774,5.925,775,5.408,776,4.713,777,5.408,778,5.408]],["title/classes/CsdlEnumType.html",[307,0.346,776,3.098]],["body/classes/CsdlEnumType.html",[3,0.111,4,0.111,5,0.111,6,0.115,8,0.084,9,0.701,10,0.225,26,0.132,27,0.009,31,0.633,37,0.117,48,1.806,51,3.566,60,0.788,94,0.234,141,0.899,254,0.171,283,4.508,301,0.167,305,0.008,306,0.008,307,0.608,309,0.284,316,0.302,385,0.362,586,1.157,671,2.691,675,2.28,721,3.227,772,6.56,776,5.444,777,7.064,778,7.064,779,6.498,780,5.737,781,6.498,782,6.498,783,6.498]],["title/classes/CsdlFunction.html",[307,0.346,684,2.545]],["body/classes/CsdlFunction.html",[3,0.098,4,0.098,5,0.098,6,0.115,8,0.075,9,0.65,10,0.229,26,0.134,27,0.009,31,0.671,37,0.13,48,1.838,55,2.729,62,1.356,63,2.016,94,0.239,132,2.459,133,2.459,141,1.195,238,2.398,240,2.459,254,0.172,298,4.016,301,0.225,305,0.007,306,0.007,307,0.678,309,0.251,316,0.302,385,0.383,586,1.227,670,3.315,671,2.68,672,3.814,673,5.452,674,5.452,675,2.016,676,5.204,677,5.204,684,4.149,685,5.344,686,3.315,687,3.814,688,3.461,689,3.315,690,3.143,784,5.744,785,5.744,786,5.744,787,5.744,788,5.744,789,5.744,790,5.744]],["title/classes/CsdlFunctionImport.html",[307,0.346,686,2.545]],["body/classes/CsdlFunctionImport.html",[3,0.101,4,0.101,5,0.101,6,0.113,8,0.077,9,0.663,10,0.219,26,0.133,27,0.009,31,0.663,37,0.131,48,1.838,55,3.304,62,1.332,63,2.079,94,0.24,132,2.507,133,2.507,141,1.204,238,2.445,240,2.507,254,0.173,298,3.407,301,0.204,305,0.007,306,0.007,307,0.683,309,0.259,316,0.295,385,0.386,586,1.094,670,3.419,671,2.633,672,3.934,673,4.626,674,4.626,675,2.079,676,4.795,677,4.795,684,3.419,685,3.74,686,4.229,687,5.673,688,5.148,689,3.419,690,3.204,791,5.924,792,5.924,793,5.924,794,5.924,795,5.924]],["title/classes/CsdlInclude.html",[307,0.346,796,3.098]],["body/classes/CsdlInclude.html",[3,0.113,4,0.113,5,0.113,6,0.112,8,0.085,9,0.706,10,0.213,26,0.125,27,0.009,34,0.366,37,0.125,48,1.798,94,0.237,212,3.504,218,0.652,254,0.126,267,3.452,268,2.01,301,0.169,305,0.008,306,0.008,307,0.653,309,0.287,316,0.287,385,0.376,586,0.981,671,2.605,695,4.324,697,3.791,699,4.161,704,3.959,705,3.791,735,3.263,796,5.845,797,5.294,798,5.8,799,6.569,800,6.569,801,6.569,802,2.788,803,4.614,804,4.916,805,5.294,806,5.48,807,4.916,808,4.916]],["title/classes/CsdlIncludeAnnotations.html",[307,0.346,806,3.098]],["body/classes/CsdlIncludeAnnotations.html",[3,0.111,4,0.111,5,0.111,6,0.114,8,0.084,9,0.699,10,0.225,26,0.129,27,0.009,34,0.36,37,0.124,48,1.805,94,0.239,212,3.447,218,0.642,254,0.124,267,2.591,268,1.477,301,0.166,305,0.008,306,0.008,307,0.649,309,0.283,316,0.295,385,0.374,586,1.153,671,2.648,695,4.282,697,3.73,699,4.121,704,5.275,705,3.73,735,3.21,796,5.426,797,5.208,802,2.743,803,4.539,804,4.836,805,5.208,806,5.805,807,6.408,808,6.55,809,6.463,810,6.463,811,6.463,812,6.463,813,6.463]],["title/classes/CsdlKey.html",[307,0.346,739,2.784]],["body/classes/CsdlKey.html",[3,0.108,4,0.108,5,0.108,6,0.106,8,0.082,9,0.809,10,0.162,26,0.115,27,0.009,31,0.66,34,0.352,37,0.131,48,1.789,57,1.736,94,0.231,156,2.695,218,0.756,254,0.167,268,1.442,286,1.285,301,0.162,305,0.007,306,0.007,307,0.682,309,0.276,316,0.263,385,0.38,671,2.475,702,2.934,719,3.802,720,3.472,721,3.134,722,5.432,723,5.775,724,6.107,725,5.775,726,4.369,727,4.369,735,3.134,736,3.365,737,4.221,738,3.802,739,5.164,740,4.19,741,5.966,742,5.489,814,6.309,815,6.309,816,6.309]],["title/classes/CsdlNavigationProperty.html",[307,0.346,727,2.268]],["body/classes/CsdlNavigationProperty.html",[3,0.099,4,0.099,5,0.099,6,0.112,8,0.075,9,0.654,10,0.232,26,0.139,27,0.009,31,0.669,37,0.128,48,1.826,57,1.596,63,2.035,94,0.239,132,1.984,133,1.984,141,1.09,156,1.798,218,0.782,238,2.987,240,1.984,254,0.169,289,2.697,301,0.149,305,0.007,306,0.007,307,0.666,309,0.254,316,0.306,385,0.371,576,2.442,586,1.267,671,2.619,675,2.035,690,2.536,702,2.697,708,3.214,726,2.983,727,3.719,736,4.618,737,4.008,817,4.073,818,5.831,819,5.638,820,5.638,821,5.638,822,5.963,823,5.36,824,5.36,825,5.8,826,5.8,827,5.8,828,5.8,829,5.8,830,5.121,831,5.121,832,5.121,833,3.661]],["title/classes/CsdlNavigationPropertyBinding.html",[307,0.346,762,3.098]],["body/classes/CsdlNavigationPropertyBinding.html",[3,0.117,4,0.117,5,0.117,6,0.113,8,0.089,9,0.722,10,0.175,26,0.127,27,0.009,29,3.812,37,0.103,48,1.749,57,2.399,94,0.234,254,0.131,287,4.054,301,0.175,305,0.008,306,0.008,307,0.536,309,0.299,316,0.292,344,3.372,385,0.349,671,2.638,762,5.608,834,6.832,835,6.832,836,6.832,837,6.832,838,6.832]],["title/classes/CsdlOnDelete.html",[307,0.346,824,2.784]],["body/classes/CsdlOnDelete.html",[3,0.109,4,0.109,5,0.109,6,0.107,8,0.083,9,0.693,10,0.163,26,0.135,27,0.009,31,0.643,37,0.131,48,1.813,57,1.751,63,2.99,94,0.238,132,2.178,133,2.178,141,1.136,156,1.973,218,0.76,238,2.908,240,2.178,254,0.164,289,2.96,301,0.163,305,0.007,306,0.007,307,0.684,309,0.278,316,0.264,385,0.381,671,2.484,690,2.783,702,2.96,708,3.528,726,3.274,727,3.274,736,4.38,737,4.243,817,4.471,818,5.453,819,4.227,820,4.227,821,4.227,822,4.471,823,4.833,824,5.184,833,4.018,839,6.365,840,6.365,841,6.365]],["title/classes/CsdlParameter.html",[307,0.346,677,2.658]],["body/classes/CsdlParameter.html",[3,0.097,4,0.097,5,0.097,6,0.116,8,0.073,9,0.644,10,0.232,26,0.138,27,0.009,31,0.658,37,0.129,48,1.839,55,2.703,62,1.364,63,1.986,94,0.239,132,2.944,133,2.944,141,1.27,238,2.871,240,2.944,254,0.171,298,3.311,301,0.2,305,0.007,306,0.007,307,0.675,309,0.247,316,0.305,385,0.382,586,1.258,670,3.265,671,2.697,672,3.757,673,4.495,674,4.495,675,1.986,676,4.696,677,4.928,684,3.265,685,3.572,686,3.265,687,3.757,688,3.41,689,3.265,690,3.761,842,5.658,843,5.658,844,5.658,845,5.658,846,5.658,847,5.658,848,5.658,849,5.658]],["title/classes/CsdlProperty.html",[307,0.346,726,2.268]],["body/classes/CsdlProperty.html",[3,0.096,4,0.096,5,0.096,6,0.115,8,0.073,9,0.642,10,0.235,26,0.139,27,0.009,31,0.666,37,0.127,48,1.828,57,1.548,63,1.975,94,0.239,132,2.879,133,2.879,141,1.255,156,1.744,218,0.772,238,2.971,240,2.879,254,0.168,289,2.616,301,0.144,305,0.007,306,0.007,307,0.66,309,0.246,316,0.31,385,0.368,576,2.409,586,1.302,671,2.67,675,1.975,690,3.679,702,2.616,708,4.663,726,3.649,727,2.894,736,4.707,737,3.933,817,3.952,818,5.793,819,3.737,820,3.737,821,3.737,822,3.952,823,4.48,824,4.48,830,4.968,831,4.968,832,4.968,833,5.312,850,5.627,851,5.627,852,5.627,853,5.627,854,5.627,855,5.627,856,5.627]],["title/classes/CsdlPropertyRef.html",[307,0.346,742,2.784]],["body/classes/CsdlPropertyRef.html",[3,0.106,4,0.106,5,0.106,6,0.11,8,0.081,9,0.806,10,0.208,26,0.122,27,0.009,31,0.657,34,0.346,37,0.13,48,1.797,57,1.708,94,0.237,156,2.683,218,0.749,254,0.173,268,1.979,286,1.264,301,0.159,305,0.007,306,0.007,307,0.679,309,0.271,316,0.28,385,0.378,586,0.926,671,2.556,675,2.178,702,2.886,719,3.74,720,3.586,721,3.082,722,5.393,723,5.748,724,6.079,725,5.748,726,4.344,727,4.344,735,3.082,736,3.31,737,4.179,738,3.74,739,4.76,740,4.121,741,4.359,742,5.127,857,6.206,858,6.206,859,5.001]],["title/classes/CsdlReference.html",[307,0.346,803,3.098]],["body/classes/CsdlReference.html",[3,0.109,4,0.109,5,0.109,6,0.113,8,0.082,9,0.692,10,0.23,26,0.131,27,0.009,34,0.354,37,0.123,48,1.809,94,0.233,212,4.646,218,0.759,254,0.122,267,2.545,268,1.451,301,0.163,305,0.007,306,0.007,307,0.644,309,0.278,316,0.301,385,0.372,576,1.968,586,1.224,671,2.635,695,4.718,697,5.027,699,4.646,704,3.826,705,3.664,718,4.751,735,3.153,796,6.118,797,5.116,802,2.695,803,5.369,804,6.37,805,7.02,806,6.118,807,4.751,808,4.751,860,6.348,861,6.348,862,6.348,863,6.348,864,6.348]],["title/classes/CsdlReferentialConstraint.html",[307,0.346,823,2.784]],["body/classes/CsdlReferentialConstraint.html",[3,0.107,4,0.107,5,0.107,6,0.11,8,0.081,9,0.687,10,0.161,26,0.135,27,0.009,31,0.641,37,0.131,48,1.816,57,2.333,63,2.203,94,0.239,132,2.147,133,2.147,141,1.129,156,1.945,218,0.754,238,2.897,240,2.147,254,0.163,289,4.038,301,0.161,305,0.007,306,0.007,307,0.681,309,0.274,316,0.282,385,0.38,671,2.566,690,2.744,702,2.918,708,3.478,726,3.228,727,3.228,736,4.523,737,4.207,817,4.408,818,5.42,819,4.168,820,4.168,821,4.168,822,4.408,823,5.152,824,4.792,833,3.962,865,6.276,866,6.276,867,6.276,868,6.276]],["title/classes/CsdlReturnType.html",[307,0.346,676,2.658]],["body/classes/CsdlReturnType.html",[3,0.098,4,0.098,5,0.098,6,0.115,8,0.074,9,0.649,10,0.232,26,0.137,27,0.009,31,0.659,37,0.13,48,1.838,55,2.725,62,1.355,63,2.011,94,0.239,132,2.953,133,2.953,141,1.272,238,2.88,240,2.953,254,0.166,298,3.338,301,0.201,305,0.007,306,0.007,307,0.677,309,0.25,316,0.302,385,0.383,586,1.263,670,3.307,671,2.679,672,3.805,673,4.531,674,4.531,676,4.951,677,4.723,684,3.307,685,3.617,686,3.307,687,3.805,688,3.453,689,3.307,690,3.774,869,5.73,870,5.73,871,5.73,872,5.73,873,5.73,874,5.73,875,5.73,876,5.73]],["title/classes/CsdlSchema.html",[307,0.346,877,3.554]],["body/classes/CsdlSchema.html",[3,0.094,4,0.094,5,0.094,6,0.118,8,0.071,9,0.632,10,0.239,26,0.138,27,0.009,34,0.476,37,0.083,48,1.828,51,2.203,62,0.841,63,1.928,94,0.225,218,0.694,254,0.106,267,3.244,268,1.91,301,0.141,305,0.007,306,0.007,307,0.431,309,0.24,316,0.313,385,0.306,544,3.088,576,1.703,586,1.342,670,4.821,671,2.747,684,4.821,695,4.484,697,4.821,699,4.456,703,5.274,705,3.17,706,5.274,718,4.111,719,5.034,720,2.332,735,4.241,738,5.034,743,6.251,744,2.638,776,5.867,798,4.85,802,2.332,877,5.632,878,5.493,879,8.353,880,8.353,881,8.353,882,7.376,883,8.353,884,8.353,885,8.353,886,8.353,887,6.251,888,5.493,889,5.493,890,5.493,891,5.493,892,5.493,893,5.493,894,5.493,895,5.493,896,5.493,897,5.493,898,5.493,899,5.493,900,4.427,901,4.427]],["title/classes/CsdlSingleton.html",[307,0.346,751,3.3]],["body/classes/CsdlSingleton.html",[3,0.115,4,0.115,5,0.115,6,0.115,8,0.087,9,0.714,10,0.215,26,0.138,27,0.009,34,0.374,37,0.101,48,1.781,57,1.843,94,0.234,254,0.17,287,3.115,301,0.172,305,0.008,306,0.008,307,0.526,309,0.293,316,0.299,385,0.345,586,1,671,2.674,675,2.351,735,3.327,751,5.906,762,6.207,768,4.448,902,6.698,903,8.837,904,6.698,905,6.698,906,6.698,907,6.698]],["title/classes/CsdlStructuralProperty.html",[307,0.346,818,2.929]],["body/classes/CsdlStructuralProperty.html",[3,0.106,4,0.106,5,0.106,6,0.112,8,0.08,9,0.68,10,0.208,26,0.139,27,0.009,31,0.663,37,0.13,48,1.819,57,1.699,63,2.167,94,0.239,132,2.112,133,2.112,141,1.121,156,1.913,218,0.746,238,3.018,240,2.112,254,0.171,289,2.871,301,0.158,305,0.007,306,0.007,307,0.678,309,0.27,316,0.291,385,0.378,586,0.922,671,2.615,675,2.167,690,2.699,702,2.871,708,3.422,726,3.175,727,3.175,736,4.61,737,4.165,817,4.336,818,5.6,819,4.1,820,4.1,821,4.1,822,4.336,823,4.745,824,4.745,833,3.897,908,6.174,909,6.174,910,6.174,911,6.174]],["title/classes/CsdlStructuredType.html",[307,0.346,722,2.929]],["body/classes/CsdlStructuredType.html",[3,0.1,4,0.1,5,0.1,6,0.115,8,0.076,9,0.82,10,0.233,26,0.132,27,0.009,31,0.675,34,0.325,37,0.128,48,1.814,57,1.602,94,0.235,156,2.776,218,0.72,254,0.171,268,1.331,286,1.186,301,0.149,305,0.007,306,0.007,307,0.667,309,0.255,316,0.303,385,0.372,586,1.269,671,2.687,675,2.044,702,2.708,719,3.509,720,3.77,721,2.892,722,5.487,723,5.948,724,6.291,725,5.948,726,4.52,727,4.52,735,2.892,736,3.106,737,4.018,738,3.509,739,4.577,740,3.867,741,4.09,742,4.577,773,5.142,774,5.142,775,4.693,780,5.142,912,5.823,913,5.142,914,5.823]],["title/classes/CsdlTerm.html",[307,0.346,706,2.784]],["body/classes/CsdlTerm.html",[3,0.098,4,0.098,5,0.098,6,0.118,8,0.074,9,0.649,10,0.237,26,0.139,27,0.009,31,0.606,37,0.124,48,1.831,94,0.241,132,2.894,133,2.894,141,1.258,218,0.568,238,2.822,240,2.894,254,0.163,263,2.009,301,0.147,305,0.007,306,0.007,307,0.644,309,0.25,316,0.312,344,2.174,385,0.359,586,1.322,671,2.75,675,2.009,690,3.698,695,3.976,696,4.285,697,4.14,699,4.179,702,2.662,703,3.615,704,4.323,705,3.304,706,4.529,707,5.94,708,4.687,709,5.94,915,5.726,916,5.726,917,5.726,918,5.726,919,5.726,920,5.726,921,5.726,922,5.726,923,5.726,924,5.726,925,5.726]],["title/classes/CsdlTypeDefinition.html",[307,0.346,887,3.3]],["body/classes/CsdlTypeDefinition.html",[3,0.103,4,0.103,5,0.103,6,0.117,8,0.078,9,0.67,10,0.236,26,0.14,27,0.009,31,0.617,34,0.337,37,0.091,48,1.82,94,0.235,132,2.938,133,2.938,141,1.266,218,0.736,240,2.938,254,0.165,301,0.155,305,0.007,306,0.007,307,0.473,309,0.264,316,0.311,385,0.324,576,1.87,586,1.305,671,2.726,675,2.118,690,3.754,695,4.637,697,4.956,699,4.58,705,3.482,718,4.515,735,2.997,802,2.561,833,5.421,887,5.546,926,6.034,927,8.587,928,6.034,929,6.034,930,6.034,931,6.034,932,6.034,933,6.034,934,6.034,935,6.034]],["title/classes/DateAndTimeFunctions.html",[307,0.346,433,1.928]],["body/classes/DateAndTimeFunctions.html",[0,1.344,3,0.041,4,0.041,5,0.041,6,0.104,8,0.031,10,0.2,19,0.601,26,0.126,27,0.009,31,0.531,34,0.306,37,0.131,46,3.14,60,0.99,62,1.286,94,0.227,108,1.974,110,1.974,130,2.182,141,0.664,159,0.466,209,0.895,218,0.477,222,0.941,224,1.886,230,1.268,239,1.911,242,0.896,249,0.759,254,0.158,268,1.596,284,0.781,286,1.467,294,1.173,301,0.2,305,0.004,306,0.004,307,0.646,308,2.098,309,0.105,310,1.049,311,0.518,314,1.081,315,4.023,316,0.273,318,4.045,319,0.933,320,1.081,322,1.081,324,0.821,325,0.692,326,2.134,327,1.19,328,1.049,329,4.073,330,2.033,331,2.403,332,2.711,333,2.711,334,2.802,335,0.989,336,2.081,337,1.806,338,0.864,339,1.953,340,1.081,341,1.081,342,1.081,343,1.081,344,1.458,345,1.081,346,1.081,347,1.018,348,1.73,349,2.163,350,0.588,351,0.936,352,1.081,353,1.081,354,1.081,355,1.081,356,1.081,357,1.081,358,1.081,359,1.081,360,1.081,361,1.081,362,1.081,363,1.081,364,1.056,365,1.081,366,1.081,367,1.081,368,1.081,369,1.049,370,1.081,371,1.081,372,2.789,373,2.704,374,1.081,375,1.081,376,0.66,377,1.081,378,1.081,379,1.081,380,1.73,381,1.049,382,1.081,383,1.049,384,1.407,385,0.21,386,2.032,387,0.842,388,1.925,389,2.328,390,1.314,391,2.885,392,2.163,393,3.564,394,2.163,395,2.163,396,2.163,397,1.73,398,1.081,399,2.163,400,1.081,401,2.098,402,1.081,403,1.081,404,1.081,405,1.081,406,1.081,407,1.081,408,1.081,409,1.081,410,1.081,411,1.081,412,1.081,413,1.081,414,1.081,415,1.419,416,1.081,417,1.081,418,2.098,419,1.081,420,1.081,421,1.081,422,1.081,423,2.098,424,1.081,425,1.73,426,1.081,427,1.081,428,1.081,429,1.081,430,1.081,431,1.081,432,1.081,433,2.398,434,1.73,435,1.081,436,1.73,437,1.081,438,1.73,439,1.081,440,1.73,441,1.081,442,1.73,443,1.081,444,1.73,445,1.081,446,1.73,447,1.081,448,1.73,449,1.081,450,2.472,451,1.081,452,1.73,453,1.081,454,1.73,455,1.081,456,1.73,457,1.081,458,1.73,459,1.081,460,1.73,461,1.081,462,1.081,463,1.081,464,1.081,465,2.098,466,1.081,467,1.081,468,1.081,469,1.081,470,2.098,471,1.081,472,1.081,473,1.081,474,1.081,475,1.081,476,1.081,477,2.098,478,1.081,479,1.081,480,2.398,481,2.472,482,2.704,483,1.081,484,1.081,485,0.762,486,1.081,487,1.081,488,2.098,489,1.081,490,1.081,491,1.081,492,1.081,493,1.081,494,1.081,495,1.081,496,1.081,497,1.081,498,1.081,499,1.081,500,1.081,501,1.081,502,1.081,503,1.081,504,1.081,505,1.081,506,1.081,507,1.081,508,1.081,509,1.081,510,1.081,511,2.098,512,1.081,513,1.081,514,1.081,515,1.081,516,1.081,517,1.081,518,1.081,519,1.081,520,1.081,521,1.081,522,1.081,523,1.583,524,0.911,525,1.679,526,1.081,527,1.081,528,1.081,529,2.098,530,1.774,531,1.081,532,1.081,533,1.081,534,2.098,535,1.081,536,1.081,537,1.081,538,1.081,539,2.798,540,1.081,541,1.049,542,2.798,543,1.081,544,0.887,545,2.472,546,1.081,547,0.801,936,3.839,937,3.839,938,3.839,939,3.839,940,3.839,941,3.839,942,3.839,943,3.839,944,3.839,945,3.839,946,3.839,947,2.399,948,2.399,949,2.399,950,2.399,951,2.399,952,2.399,953,2.399,954,2.399,955,2.399,956,2.399,957,2.399,958,2.399,959,2.399,960,2.399]],["title/classes/ExpandExpression.html",[307,0.346,961,3.098]],["body/classes/ExpandExpression.html",[3,0.075,4,0.075,5,0.075,6,0.1,8,0.057,9,0.542,10,0.198,19,1.091,25,1.648,26,0.133,27,0.009,28,2.7,31,0.442,34,0.472,37,0.103,49,1.81,60,0.938,61,1.746,62,0.917,64,2.543,65,3.582,67,2.402,68,2.878,70,2.7,94,0.217,130,2.023,141,0.948,157,1.746,159,0.727,209,0.872,218,0.595,222,2.007,224,1.819,230,1.074,239,1.067,242,0.894,246,3.666,247,1.566,249,0.829,254,0.158,281,2.878,286,1.503,294,0.944,301,0.21,305,0.006,306,0.006,307,0.47,309,0.19,311,0.808,316,0.296,319,0.985,324,1.49,325,1.256,326,2.175,327,2.587,330,2.602,331,2.582,332,2.602,333,2.602,334,2.666,336,2.079,337,2.08,338,2.158,350,1.067,351,1.698,384,1.117,385,0.299,386,1.885,388,1.528,415,2.532,485,1.903,547,1.453,569,4.206,570,3.782,571,3.782,572,3.087,573,4.008,574,2.239,576,2.478,577,2.891,579,3.611,584,4.355,586,0.894,589,1.962,591,2.891,592,2.891,593,3.058,596,2.091,599,2.413,602,2.322,603,2.413,605,2.624,606,3.782,607,3.936,614,3.611,620,3.509,623,4.549,624,3.979,626,2.891,627,3.979,628,3.979,629,3.058,630,3.258,631,2.624,632,3.258,633,3.058,634,3.058,635,3.611,636,2.891,637,3.258,639,3.058,640,3.258,641,5.79,642,3.258,643,3.258,644,3.258,645,2.091,646,3.258,648,2.891,649,2.749,650,3.258,651,4.483,653,2.162,655,2.413,656,2.513,961,6.379,962,3.509,963,4.354,964,4.354,965,4.354,966,3.509,967,3.844,968,4.354,969,6.236,970,4.354,971,4.354,972,3.509,973,4.325,974,3.979,975,3.782,976,3.979,977,4.9,978,4.208,979,3.844,980,4.483,981,4.483,982,4.483,983,3.509,984,3.509,985,3.509,986,3.509,987,3.844,988,2.891,989,5.29,990,3.844,991,3.844,992,3.844,993,5.126,994,3.844,995,3.844,996,3.844,997,3.844,998,3.844,999,3.844,1000,3.844,1001,3.844,1002,5.521,1003,3.844,1004,3.844,1005,3.844,1006,3.258,1007,3.844,1008,3.844,1009,3.844,1010,3.844,1011,3.844]],["title/classes/ExpandField.html",[307,0.346,969,3.554]],["body/classes/ExpandField.html",[3,0.07,4,0.07,5,0.07,6,0.115,8,0.053,10,0.219,19,1.025,25,1.604,26,0.136,27,0.009,28,3.237,31,0.489,34,0.466,37,0.1,49,1.769,60,0.871,61,2.879,62,1.157,64,3.048,65,3.52,67,2.879,68,3.449,70,3.237,71,2.507,72,2.585,75,3.179,94,0.214,130,2.234,141,1.195,157,1.639,159,0.695,209,0.866,218,0.406,222,1.921,224,1.8,230,1.263,242,0.856,246,3.698,247,1.792,249,0.994,254,0.168,281,2.584,286,1.463,294,0.919,301,0.228,305,0.006,306,0.006,307,0.45,309,0.179,311,0.773,316,0.304,319,1.027,324,1.399,325,1.179,326,2.104,327,2.676,330,2.402,331,2.523,332,2.557,333,2.557,334,2.621,336,2.023,337,2.033,338,2.065,350,1.002,351,1.595,384,1.472,385,0.29,386,1.125,388,1.435,485,1.821,547,1.364,569,2.848,572,1.843,573,3.449,579,2.464,584,4.141,586,0.61,589,1.843,596,1.964,599,2.266,602,2.181,603,2.266,605,2.464,606,4.95,607,2.181,614,2.464,623,4.769,624,3.809,626,2.715,627,3.809,628,3.809,629,2.871,630,3.059,631,2.464,632,3.059,633,2.871,634,2.871,635,3.456,636,2.715,637,3.059,639,2.871,640,3.059,641,5.66,642,3.059,643,3.059,644,3.059,645,1.964,646,3.059,648,4.399,649,2.581,650,4.292,651,4.292,653,2.03,655,2.266,656,2.36,659,2.065,660,3.295,663,3.295,664,3.61,961,6.189,962,3.295,966,3.295,967,3.61,969,6.319,972,3.295,973,4.534,974,3.809,975,3.621,976,4.399,977,5.207,978,4.028,979,3.61,980,4.292,981,4.292,982,4.292,983,3.295,984,3.295,985,3.295,986,3.295,987,3.61,988,2.715,989,5.064,990,3.61,991,3.61,992,3.61,993,4.957,994,3.61,995,3.61,996,3.61,997,3.61,998,3.61,999,3.61,1000,5.064,1001,3.61,1002,6.319,1003,5.064,1004,3.61,1005,5.064,1006,5.374,1007,3.61,1008,3.61,1009,3.61,1010,3.61,1011,3.61,1012,4.088,1013,4.088,1014,4.088,1015,4.088,1016,4.088,1017,4.088,1018,4.088,1019,3.295,1020,3.61,1021,4.088,1022,4.088,1023,3.295,1024,4.088,1025,3.295,1026,3.61,1027,4.088,1028,4.088,1029,4.088,1030,4.088,1031,4.088]],["title/classes/Expression.html",[307,0.346,569,2.19]],["body/classes/Expression.html",[3,0.105,4,0.105,5,0.105,6,0.117,8,0.08,9,0.677,10,0.192,25,1.879,26,0.135,27,0.009,31,0.453,34,0.451,37,0.092,94,0.207,156,2.754,159,0.744,209,0.81,224,1.754,249,1.036,254,0.144,301,0.192,305,0.007,306,0.007,307,0.481,309,0.268,311,1.009,316,0.309,319,1.018,326,2.377,327,1.9,330,2.787,331,2.696,332,2.377,333,2.377,334,2.436,336,2.37,337,2.261,384,1.92,385,0.327,386,2.223,388,2.152,415,3.11,547,2.046,569,4.284,570,5.1,573,4.339,574,3.153,589,2.763,602,3.27,655,4.148,659,2.695,1032,6.131,1033,7.484,1034,6.131,1035,6.131,1036,6.131,1037,6.131,1038,6.131,1039,6.131,1040,4.941,1041,4.941]],["title/classes/Field.html",[222,1.08,307,0.346]],["body/classes/Field.html",[3,0.069,4,0.069,5,0.069,6,0.093,8,0.085,9,0.514,10,0.103,23,3.876,26,0.121,27,0.009,29,1.761,33,3.505,34,0.484,37,0.061,48,1.618,49,2.204,51,2.276,54,2.962,55,2.155,56,2.726,57,1.963,58,2.149,59,2.233,60,0.489,62,1.006,63,2.307,94,0.206,132,1.378,133,1.378,156,1.249,218,0.4,222,1.61,224,0.84,234,2.001,238,1.344,240,1.378,242,1.197,254,0.15,257,2.482,260,2.428,263,1.992,267,1.615,268,0.921,269,1.414,285,2.233,286,0.821,287,1.873,289,1.873,294,1.156,298,1.873,301,0.103,302,3.146,305,0.006,306,0.006,307,0.445,309,0.176,316,0.227,324,1.378,344,1.529,364,1.562,381,1.761,383,1.761,385,0.248,386,1.562,572,4.245,573,1.935,653,4.682,670,2.325,673,2.543,674,2.543,675,1.414,676,2.428,677,2.428,684,2.325,685,2.543,686,2.325,688,2.428,689,2.325,690,1.761,699,2.149,703,2.543,704,2.428,706,2.543,707,2.83,708,2.233,709,2.83,719,2.428,720,1.71,723,2.675,725,2.675,726,2.072,727,2.072,736,2.149,738,2.428,739,2.543,740,2.675,742,2.543,743,3.015,744,2.726,750,3.015,751,3.015,759,2.428,761,3.557,762,2.83,768,2.675,772,3.015,776,2.83,777,3.247,778,3.247,796,2.83,802,2.409,803,3.987,804,3.015,806,2.83,807,3.015,808,3.015,819,2.675,820,2.675,821,2.675,823,2.543,824,2.543,833,2.543,877,4.574,882,3.557,887,3.015,900,3.247,901,3.247,1042,3.557,1043,7.449,1044,4.029,1045,4.029,1046,4.029,1047,8.611,1048,2.639,1049,4.574,1050,2.001,1051,3.557,1052,5.012,1053,4.029,1054,2.543,1055,4.029,1056,4.029,1057,4.029,1058,4.029,1059,4.029,1060,4.029,1061,4.029,1062,4.029,1063,4.029,1064,4.029,1065,4.029,1066,4.029,1067,4.029,1068,4.029,1069,4.029,1070,2.83,1071,4.029,1072,4.029,1073,4.029,1074,4.029,1075,4.029,1076,4.029,1077,4.029,1078,4.029,1079,4.029,1080,4.029,1081,4.029,1082,4.029,1083,4.029,1084,4.029,1085,4.029,1086,4.029,1087,4.029,1088,4.029,1089,4.029,1090,4.029,1091,4.029,1092,4.029,1093,4.029,1094,4.029,1095,4.029,1096,4.029,1097,3.793,1098,4.029,1099,4.029,1100,4.029,1101,4.029,1102,4.029,1103,4.029,1104,4.029,1105,4.029,1106,4.029,1107,4.029,1108,4.029,1109,4.029,1110,4.029,1111,4.029,1112,4.029,1113,4.029,1114,4.029,1115,4.029,1116,4.029,1117,4.029,1118,4.029,1119,4.029,1120,4.029,1121,4.029,1122,4.029,1123,4.029,1124,4.029,1125,4.029,1126,4.029,1127,4.029,1128,4.029,1129,4.029,1130,4.029,1131,4.029,1132,4.029,1133,4.029,1134,4.029,1135,4.029,1136,4.029,1137,4.029,1138,4.029,1139,4.029,1140,4.029,1141,5.676,1142,6.572,1143,4.029,1144,4.029,1145,4.029,1146,3.247,1147,4.029,1148,4.029,1149,7.135,1150,5.676,1151,4.029,1152,4.029,1153,4.029,1154,4.029,1155,4.029,1156,4.029,1157,8.68,1158,4.029,1159,5.676,1160,4.029,1161,3.987,1162,4.029,1163,4.029,1164,2.919,1165,4.029,1166,4.029,1167,4.029,1168,4.029,1169,4.029,1170,4.029,1171,4.029,1172,4.029,1173,4.029,1174,4.029,1175,4.029,1176,4.029,1177,4.029,1178,4.029,1179,4.118,1180,4.029,1181,3.247,1182,4.029,1183,2.543,1184,4.029,1185,6.572,1186,5.676,1187,5.803,1188,4.029,1189,4.029,1190,4.029,1191,4.029,1192,4.029,1193,4.029,1194,4.029,1195,4.029]],["title/interfaces/FieldParser.html",[0,1.08,237,2.268]],["body/interfaces/FieldParser.html",[0,1.912,1,2.944,2,1.889,3,0.063,4,0.063,5,0.063,6,0.048,7,2.119,8,0.048,9,0.565,10,0.212,11,2.035,12,2.119,13,3.202,14,1.559,15,3.33,16,2.639,17,2.213,18,3.202,19,1.715,20,2.119,21,3.202,22,2.213,23,3.1,24,2.035,26,0.137,27,0.009,28,2.394,29,2.323,30,2.47,31,0.675,32,3.286,33,3.649,34,0.205,35,2.574,36,1.605,37,0.136,38,2.119,39,2.119,40,2.119,41,3.392,42,1.824,43,2.834,44,3.066,45,1.764,46,1.289,47,3.066,48,0.714,49,0.859,50,1.655,51,2.503,52,1.764,53,2.834,54,3.083,55,2.017,56,2.552,57,1.718,58,2.834,59,2.944,60,1.026,61,2.743,62,0.813,63,1.865,64,2.255,65,2.323,66,2.834,67,2.13,68,2.552,69,2.834,70,2.394,71,2.323,72,2.394,73,2.552,74,2.944,75,2.944,76,2.035,77,3.202,78,4.319,79,3.202,80,2.318,81,4.777,82,2.318,83,2.318,84,2.119,85,3.202,86,4.582,87,4.189,88,2.213,89,3.202,90,2.318,91,2.318,92,3.941,93,2.318,94,0.238,95,3.202,96,3.791,97,2.318,98,2.318,99,3.202,100,2.318,101,3.202,102,2.213,103,3.202,104,2.213,105,3.202,106,2.213,107,3.202,108,3.518,109,1.889,110,3.518,111,3.354,112,3.354,113,3.202,114,2.318,115,2.318,116,2.318,117,2.213,118,3.202,119,2.318,120,2.318,121,2.213,122,3.202,123,2.944,124,2.318,125,2.318,126,2.318,127,2.318,128,3.202,129,2.318,130,1.844,131,2.318,132,2.589,133,2.589,134,3.762,135,3.202,136,3.354,137,3.354,138,2.318,139,3.354,140,4.319,141,1.219,142,2.318,143,2.318,144,3.354,145,2.213,146,3.202,147,2.318,148,2.318,149,2.318,150,1.764,151,3.202,152,2.552,153,3.202,154,3.202,155,3.202,156,1.647,157,2.503,158,3.762,159,0.644,160,3.202,161,4.56,162,5.343,163,5.343,164,5.343,165,2.213,166,3.202,167,3.948,168,2.213,169,3.202,170,3.354,171,2.213,172,3.202,173,3.936,174,3.354,175,2.213,176,3.202,177,2.834,178,2.213,179,3.202,180,3.354,181,2.213,182,3.202,183,3.354,184,2.213,185,3.202,186,3.762,187,3.202,188,4.777,189,2.213,190,3.202,191,2.213,192,3.202,193,2.213,194,3.202,195,2.213,196,3.202,197,2.213,198,3.202,199,2.213,200,3.202,201,2.213,202,1.729,203,3.066,204,3.066,205,2.944,206,2.213,207,2.213,208,2.119,209,0.512,210,1.824,211,2.213,212,1.959,213,2.318,214,2.318,215,2.318,216,3.121,217,2.119,218,0.679,219,2.213,220,2.213,221,3.791,222,0.9,223,3.46,224,1.513,225,2.903,226,3.941,227,2.255,228,2.639,229,2.12,230,1.073,231,2.903,232,2.47,233,1.824,234,3.1,235,1.824,236,1.708,237,2.732,238,2.525,239,1.854,240,2.483,241,3.948,242,0.548,243,1.959,244,2.318,245,1.889,246,2.191,247,0.839,248,2.318,249,0.508,250,1.708,251,2.035,252,1.824,253,2.213,254,0.157,255,2.318,256,2.318,257,1.605,258,2.318,259,2.119,260,2.213,261,3.066,262,4.262,263,1.289,264,2.119,265,2.119,266,2.119,267,1.472,268,1.215,269,2.739,270,2.035,271,2.834,272,1.824,273,2.944,274,2.213,275,2.834,276,2.213,277,3.066,278,2.035,279,3.066,280,2.944,281,2.072,282,2.119,283,1.889,284,1.729,285,2.035,286,0.748,287,1.708,288,2.119,289,1.708,290,2.119,291,2.318,292,2.035,293,2.119,294,0.799,295,1.764,296,1.708,297,1.708,298,1.708,299,2.119,300,2.213,301,0.094,302,2.035,303,1.889,304,1.764,305,0.005,306,0.005]],["title/classes/Function.html",[62,0.675,307,0.346]],["body/classes/Function.html",[0,1.403,3,0.044,4,0.044,5,0.044,6,0.086,8,0.034,10,0.105,19,0.649,25,0.911,26,0.118,27,0.009,31,0.569,34,0.319,37,0.133,46,3.073,60,0.694,62,1.13,94,0.231,130,2.348,141,0.698,159,0.495,209,0.898,218,0.501,222,0.999,224,1.897,230,1.288,242,0.93,249,0.916,254,0.142,268,1.64,284,0.843,286,1.504,294,1.178,301,0.105,305,0.004,306,0.004,307,0.655,308,2.207,309,0.113,310,1.132,311,0.55,314,1.167,315,4.016,316,0.215,318,4.033,319,0.596,320,1.167,322,1.167,324,0.886,325,0.747,326,2.199,327,1.264,328,1.132,329,4.085,330,2.199,331,2.571,332,2.741,333,2.762,334,2.831,335,1.068,336,2.239,337,2.031,338,0.933,339,2.027,340,1.167,341,1.167,342,1.167,343,1.167,344,1.549,345,1.167,346,1.167,347,1.099,348,1.838,349,2.275,350,0.634,351,1.01,352,1.167,353,1.167,354,1.167,355,1.167,356,1.167,357,1.167,358,1.167,359,1.167,360,1.167,361,1.167,362,1.167,363,1.167,364,1.122,365,1.167,366,1.167,367,1.167,368,1.167,369,1.132,370,1.167,371,1.167,372,2.849,373,2.807,374,1.167,375,1.167,376,0.713,377,1.167,378,1.167,379,1.167,380,1.838,381,1.132,382,1.167,383,1.132,384,1.598,385,0.25,386,2.079,387,0.909,388,2.01,389,2.431,390,1.396,391,2.982,392,2.275,393,3.627,394,2.275,395,2.275,396,2.275,397,1.838,398,1.167,399,2.275,400,1.167,401,2.207,402,1.167,403,1.167,404,1.167,405,1.167,406,1.167,407,1.167,408,1.167,409,1.167,410,1.167,411,1.167,412,1.167,413,1.167,414,1.167,415,1.508,416,1.167,417,1.167,418,2.207,419,1.167,420,1.167,421,1.167,422,1.167,423,2.207,424,1.167,425,1.838,426,1.167,427,1.167,428,1.167,429,1.167,430,1.167,431,1.167,432,1.167,433,2.207,434,1.167,435,1.167,436,1.167,437,1.167,438,1.167,439,1.167,440,1.167,441,1.167,442,1.167,443,1.167,444,1.167,445,1.167,446,1.167,447,1.167,448,1.167,449,1.167,450,1.167,451,1.167,452,1.167,453,1.167,454,1.167,455,1.167,456,1.167,457,1.167,458,1.167,459,1.167,460,1.167,461,1.167,462,1.167,463,1.167,464,1.167,465,2.207,466,1.167,467,1.167,468,1.167,469,1.167,470,2.207,471,1.167,472,1.167,473,1.167,474,1.167,475,1.167,476,1.167,477,2.207,478,1.167,479,1.167,480,2.504,481,2.581,482,2.807,483,1.167,484,1.167,485,0.822,486,1.167,487,1.167,488,2.207,489,1.167,490,1.167,491,1.167,492,1.167,493,1.167,494,1.167,495,1.167,496,1.167,497,1.167,498,1.167,499,1.167,500,1.167,501,1.167,502,1.167,503,1.167,504,1.167,505,1.167,506,1.167,507,1.167,508,1.167,509,1.167,510,1.167,511,2.207,512,1.167,513,1.167,514,1.167,515,1.167,516,1.167,517,1.167,518,1.167,519,1.167,520,1.167,521,1.167,522,1.167,523,1.682,524,0.983,525,1.783,526,1.167,527,1.167,528,1.167,529,2.207,530,1.866,531,1.167,532,1.167,533,1.167,534,2.207,535,1.167,536,1.167,537,1.167,538,1.167,539,2.893,540,1.167,541,1.132,542,2.893,543,1.167,544,0.957,545,2.581,546,1.167,547,0.864,589,1.167,659,1.469,675,0.909,1196,2.59,1197,2.59,1198,2.59,1199,2.59,1200,2.59]],["title/classes/GeoFunctions.html",[307,0.346,470,1.928]],["body/classes/GeoFunctions.html",[0,1.401,3,0.044,4,0.044,5,0.044,6,0.074,8,0.034,10,0.129,19,0.648,26,0.114,27,0.009,31,0.545,34,0.319,37,0.132,46,3.082,60,0.839,62,1.156,94,0.231,130,2.231,141,0.698,159,0.494,209,0.898,218,0.501,222,0.998,224,1.897,230,1.341,239,1.235,242,0.929,249,0.792,254,0.138,268,1.639,284,0.841,286,1.503,294,1.178,301,0.129,305,0.004,306,0.004,307,0.655,308,2.204,309,0.113,310,1.13,311,0.549,314,1.165,315,4.017,316,0.174,318,4.04,319,0.595,320,1.165,322,1.165,324,0.884,325,0.746,326,2.198,327,1.263,328,1.13,329,4.091,330,2.1,331,2.462,332,2.74,333,2.74,334,2.83,335,1.066,336,2.128,337,1.86,338,0.931,339,2.026,340,1.165,341,1.165,342,1.165,343,1.165,344,1.546,345,1.165,346,1.165,347,1.097,348,1.836,349,2.272,350,0.633,351,1.008,352,1.165,353,1.165,354,1.165,355,1.165,356,1.165,357,1.165,358,1.165,359,1.165,360,1.165,361,1.165,362,1.165,363,1.165,364,1.121,365,1.165,366,1.165,367,1.165,368,1.165,369,1.13,370,1.165,371,1.165,372,2.847,373,2.805,374,1.165,375,1.165,376,0.711,377,1.165,378,1.165,379,1.165,380,1.836,381,1.13,382,1.165,383,1.13,384,1.468,385,0.22,386,2.078,387,0.907,388,2.008,389,2.428,390,1.394,391,2.98,392,2.272,393,3.625,394,2.272,395,2.272,396,2.272,397,1.836,398,1.165,399,2.272,400,1.165,401,2.204,402,1.165,403,1.165,404,1.165,405,1.165,406,1.165,407,1.165,408,1.165,409,1.165,410,1.165,411,1.165,412,1.165,413,1.165,414,1.165,415,1.506,416,1.165,417,1.165,418,2.204,419,1.165,420,1.165,421,1.165,422,1.165,423,2.204,424,1.165,425,1.836,426,1.165,427,1.165,428,1.165,429,1.165,430,1.165,431,1.165,432,1.165,433,2.204,434,1.165,435,1.165,436,1.165,437,1.165,438,1.165,439,1.165,440,1.165,441,1.165,442,1.165,443,1.165,444,1.165,445,1.165,446,1.165,447,1.165,448,1.165,449,1.165,450,1.165,451,1.165,452,1.165,453,1.165,454,1.165,455,1.165,456,1.165,457,1.165,458,1.165,459,1.165,460,1.165,461,1.165,462,1.165,463,1.165,464,1.165,465,2.204,466,1.165,467,1.165,468,1.165,469,1.165,470,2.501,471,1.836,472,1.165,473,1.836,474,1.165,475,1.836,476,1.165,477,2.204,478,1.165,479,1.165,480,2.501,481,2.578,482,2.805,483,1.165,484,1.165,485,0.821,486,1.165,487,1.165,488,2.204,489,1.165,490,1.165,491,1.165,492,1.165,493,1.165,494,1.165,495,1.165,496,1.165,497,1.165,498,1.165,499,1.165,500,1.165,501,1.165,502,1.165,503,1.165,504,1.165,505,1.165,506,1.165,507,1.165,508,1.165,509,1.165,510,1.165,511,2.204,512,1.165,513,1.165,514,1.165,515,1.165,516,1.165,517,1.165,518,1.165,519,1.165,520,1.165,521,1.165,522,1.165,523,1.68,524,0.981,525,1.781,526,1.165,527,1.165,528,1.165,529,2.204,530,1.864,531,1.165,532,1.165,533,1.165,534,2.204,535,1.165,536,1.165,537,1.165,538,1.165,539,2.891,540,1.165,541,1.13,542,2.891,543,1.165,544,0.956,545,2.578,546,1.165,547,0.863,1201,4.074,1202,4.074,1203,4.074,1204,2.585,1205,2.585,1206,2.585]],["title/classes/Grouping.html",[307,0.346,523,1.819]],["body/classes/Grouping.html",[0,1.407,3,0.045,4,0.045,5,0.045,6,0.086,8,0.034,10,0.105,19,0.653,25,0.915,26,0.118,27,0.009,31,0.546,34,0.32,37,0.133,46,3.075,60,0.696,62,1.062,94,0.23,130,2.236,141,0.701,159,0.497,209,0.898,218,0.503,222,1.003,224,1.898,230,1.29,242,0.932,249,0.918,254,0.133,268,1.643,284,0.847,286,1.506,294,1.179,301,0.105,305,0.004,306,0.004,307,0.656,308,2.214,309,0.114,310,1.138,311,0.552,314,1.173,315,4.014,316,0.215,318,4.034,319,0.597,320,1.173,322,1.173,324,0.891,325,0.751,326,2.203,327,1.269,328,1.138,329,4.085,330,2.348,331,2.575,332,2.742,333,2.742,334,2.833,335,1.073,336,2.242,337,2.034,338,0.937,339,2.032,340,1.173,341,1.173,342,1.173,343,1.173,344,1.555,345,1.173,346,1.173,347,1.105,348,1.846,349,2.282,350,0.638,351,1.015,352,1.173,353,1.173,354,1.173,355,1.173,356,1.173,357,1.173,358,1.173,359,1.173,360,1.173,361,1.173,362,1.173,363,1.173,364,1.127,365,1.173,366,1.173,367,1.173,368,1.173,369,1.138,370,1.173,371,1.173,372,2.853,373,2.814,374,1.173,375,1.173,376,0.716,377,1.173,378,1.173,379,1.173,380,1.846,381,1.138,382,1.173,383,1.138,384,1.602,385,0.251,386,2.082,387,0.913,388,2.015,389,2.437,390,1.401,391,2.988,392,2.282,393,3.631,394,2.282,395,2.282,396,2.282,397,1.846,398,1.173,399,2.282,400,1.173,401,2.214,402,1.173,403,1.173,404,1.173,405,1.173,406,1.173,407,1.173,408,1.173,409,1.173,410,1.173,411,1.173,412,1.173,413,1.173,414,1.173,415,1.514,416,1.173,417,1.173,418,2.214,419,1.173,420,1.173,421,1.173,422,1.173,423,2.214,424,1.173,425,1.846,426,1.173,427,1.173,428,1.173,429,1.173,430,1.173,431,1.173,432,1.173,433,2.214,434,1.173,435,1.173,436,1.173,437,1.173,438,1.173,439,1.173,440,1.173,441,1.173,442,1.173,443,1.173,444,1.173,445,1.173,446,1.173,447,1.173,448,1.173,449,1.173,450,1.173,451,1.173,452,1.173,453,1.173,454,1.173,455,1.173,456,1.173,457,1.173,458,1.173,459,1.173,460,1.173,461,1.173,462,1.173,463,1.173,464,1.173,465,2.214,466,1.173,467,1.173,468,1.173,469,1.173,470,2.214,471,1.173,472,1.173,473,1.173,474,1.173,475,1.173,476,1.173,477,2.214,478,1.173,479,1.173,480,2.511,481,2.588,482,2.814,483,1.173,484,1.173,485,0.827,486,1.173,487,1.173,488,2.214,489,1.173,490,1.173,491,1.173,492,1.173,493,1.173,494,1.173,495,1.173,496,1.173,497,1.173,498,1.173,499,1.173,500,1.173,501,1.173,502,1.173,503,1.173,504,1.173,505,1.173,506,1.173,507,1.173,508,1.173,509,1.173,510,1.173,511,2.214,512,1.173,513,1.173,514,1.173,515,1.173,516,1.173,517,1.173,518,1.173,519,1.173,520,1.173,521,1.173,522,1.173,523,2.368,524,0.988,525,2.511,526,1.173,527,1.173,528,1.173,529,2.214,530,1.872,531,1.173,532,1.173,533,1.173,534,2.214,535,1.173,536,1.173,537,1.173,538,1.173,539,2.899,540,1.173,541,1.138,542,2.899,543,1.173,544,0.962,545,2.588,546,1.173,547,0.868,589,1.173,659,1.475,1207,2.603,1208,2.603,1209,2.603,1210,2.603,1211,2.603,1212,2.603]],["title/classes/Lambda.html",[307,0.346,529,1.928]],["body/classes/Lambda.html",[0,1.404,3,0.044,4,0.044,5,0.044,6,0.086,8,0.034,10,0.105,19,0.65,25,0.912,26,0.118,27,0.009,31,0.545,34,0.32,37,0.133,46,3.074,60,0.695,62,1.06,94,0.232,130,2.348,141,0.699,159,0.495,209,0.898,218,0.501,222,1,224,1.897,230,1.289,242,0.93,249,0.916,254,0.133,268,1.762,284,0.844,286,1.504,294,1.178,301,0.105,305,0.004,306,0.004,307,0.655,308,2.208,309,0.113,310,1.133,311,0.551,314,1.168,315,4.014,316,0.215,318,4.033,319,0.596,320,1.168,322,1.168,324,0.887,325,0.748,326,2.2,327,1.265,328,1.133,329,4.085,330,2.2,331,2.572,332,2.741,333,2.741,334,2.831,335,1.069,336,2.24,337,2.032,338,0.934,339,2.029,340,1.168,341,1.168,342,1.168,343,1.168,344,1.55,345,1.168,346,1.168,347,1.1,348,1.84,349,2.276,350,0.635,351,1.011,352,1.168,353,1.168,354,1.168,355,1.168,356,1.168,357,1.168,358,1.168,359,1.168,360,1.168,361,1.168,362,1.168,363,1.168,364,1.123,365,1.168,366,1.168,367,1.168,368,1.168,369,1.133,370,1.168,371,1.168,372,2.85,373,2.809,374,1.168,375,1.168,376,0.713,377,1.168,378,1.168,379,1.168,380,1.84,381,1.133,382,1.168,383,1.133,384,1.599,385,0.25,386,2.08,387,0.91,388,2.011,389,2.432,390,1.397,391,2.983,392,2.276,393,3.627,394,2.276,395,2.276,396,2.276,397,1.84,398,1.168,399,2.276,400,1.168,401,2.208,402,1.168,403,1.168,404,1.168,405,1.168,406,1.168,407,1.168,408,1.168,409,1.168,410,1.168,411,1.168,412,1.168,413,1.168,414,1.168,415,1.509,416,1.168,417,1.168,418,2.208,419,1.168,420,1.168,421,1.168,422,1.168,423,2.208,424,1.168,425,1.84,426,1.168,427,1.168,428,1.168,429,1.168,430,1.168,431,1.168,432,1.168,433,2.208,434,1.168,435,1.168,436,1.168,437,1.168,438,1.168,439,1.168,440,1.168,441,1.168,442,1.168,443,1.168,444,1.168,445,1.168,446,1.168,447,1.168,448,1.168,449,1.168,450,1.168,451,1.168,452,1.168,453,1.168,454,1.168,455,1.168,456,1.168,457,1.168,458,1.168,459,1.168,460,1.168,461,1.168,462,1.168,463,1.168,464,1.168,465,2.208,466,1.168,467,1.168,468,1.168,469,1.168,470,2.208,471,1.168,472,1.168,473,1.168,474,1.168,475,1.168,476,1.168,477,2.208,478,1.168,479,1.168,480,2.505,481,2.983,482,2.809,483,1.168,484,1.168,485,0.823,486,1.168,487,1.168,488,2.208,489,1.168,490,1.168,491,1.168,492,1.168,493,1.168,494,1.168,495,1.168,496,1.168,497,1.168,498,1.168,499,1.168,500,1.168,501,1.168,502,1.168,503,1.168,504,1.168,505,1.168,506,1.168,507,1.168,508,1.168,509,1.168,510,1.168,511,2.208,512,1.168,513,1.168,514,1.168,515,1.168,516,1.168,517,1.168,518,1.168,519,1.168,520,1.168,521,1.168,522,1.168,523,1.684,524,0.984,525,1.785,526,1.168,527,1.168,528,1.168,529,2.725,530,1.867,531,1.168,532,1.168,533,1.168,534,2.208,535,1.168,536,1.168,537,1.168,538,1.168,539,2.894,540,1.168,541,1.133,542,2.894,543,1.168,544,0.958,545,2.582,546,1.168,547,0.865,586,0.387,589,1.168,659,1.47,1213,2.289,1214,2.592,1215,2.592,1216,2.592,1217,2.592,1218,2.592]],["title/classes/LambdaOperators.html",[307,0.346,534,1.928]],["body/classes/LambdaOperators.html",[0,1.412,3,0.045,4,0.045,5,0.045,6,0.066,8,0.034,10,0.106,19,0.657,26,0.111,27,0.009,31,0.547,34,0.321,37,0.133,46,3.077,60,0.699,62,1.064,94,0.231,130,2.24,141,0.703,159,0.499,209,0.898,218,0.505,222,1.008,224,1.899,230,1.329,242,0.935,249,0.797,254,0.134,268,1.796,284,0.852,286,1.509,294,1.179,301,0.106,305,0.004,306,0.004,307,0.656,308,2.223,309,0.114,310,1.145,311,0.555,314,1.18,315,4.015,316,0.142,318,4.04,319,0.486,320,1.18,322,1.18,324,0.896,325,0.755,326,2.208,327,1.276,328,1.145,329,4.091,330,2.111,331,2.472,332,2.745,333,2.745,334,2.835,335,1.08,336,2.136,337,1.869,338,0.943,339,2.038,340,1.18,341,1.18,342,1.18,343,1.18,344,1.562,345,1.18,346,1.18,347,1.112,348,1.855,349,2.291,350,0.642,351,1.022,352,1.18,353,1.18,354,1.18,355,1.18,356,1.18,357,1.18,358,1.18,359,1.18,360,1.18,361,1.18,362,1.18,363,1.18,364,1.132,365,1.18,366,1.18,367,1.18,368,1.18,369,1.145,370,1.18,371,1.18,372,2.857,373,2.823,374,1.18,375,1.18,376,0.721,377,1.18,378,1.18,379,1.18,380,1.855,381,1.145,382,1.18,383,1.145,384,1.478,385,0.222,386,2.086,387,0.919,388,2.022,389,2.446,390,1.408,391,2.996,392,2.291,393,3.636,394,2.291,395,2.291,396,2.291,397,1.855,398,1.18,399,2.291,400,1.18,401,2.223,402,1.18,403,1.18,404,1.18,405,1.18,406,1.18,407,1.18,408,1.18,409,1.18,410,1.18,411,1.18,412,1.18,413,1.18,414,1.18,415,1.521,416,1.18,417,1.18,418,2.223,419,1.18,420,1.18,421,1.18,422,1.18,423,2.223,424,1.18,425,1.855,426,1.18,427,1.18,428,1.18,429,1.18,430,1.18,431,1.18,432,1.18,433,2.223,434,1.18,435,1.18,436,1.18,437,1.18,438,1.18,439,1.18,440,1.18,441,1.18,442,1.18,443,1.18,444,1.18,445,1.18,446,1.18,447,1.18,448,1.18,449,1.18,450,1.18,451,1.18,452,1.18,453,1.18,454,1.18,455,1.18,456,1.18,457,1.18,458,1.18,459,1.18,460,1.18,461,1.18,462,1.18,463,1.18,464,1.18,465,2.223,466,1.18,467,1.18,468,1.18,469,1.18,470,2.223,471,1.18,472,1.18,473,1.18,474,1.18,475,1.18,476,1.18,477,2.223,478,1.18,479,1.18,480,2.519,481,2.597,482,2.823,483,1.18,484,1.18,485,0.832,486,1.18,487,1.18,488,2.223,489,1.18,490,1.18,491,1.18,492,1.18,493,1.18,494,1.18,495,1.18,496,1.18,497,1.18,498,1.18,499,1.18,500,1.18,501,1.18,502,1.18,503,1.18,504,1.18,505,1.18,506,1.18,507,1.18,508,1.18,509,1.18,510,1.18,511,2.223,512,1.18,513,1.18,514,1.18,515,1.18,516,1.18,517,1.18,518,1.18,519,1.18,520,1.18,521,1.18,522,1.18,523,1.697,524,0.994,525,1.799,526,1.18,527,1.18,528,1.18,529,2.738,530,1.879,531,1.18,532,1.18,533,1.18,534,2.519,535,1.855,536,1.18,537,1.855,538,1.18,539,2.907,540,1.18,541,1.145,542,2.907,543,1.18,544,0.968,545,2.597,546,1.18,547,0.874,586,0.614,1219,2.619,1220,2.619]],["title/classes/LogicalOperators.html",[307,0.346,488,1.928]],["body/classes/LogicalOperators.html",[0,1.367,3,0.042,4,0.042,5,0.042,6,0.097,8,0.032,10,0.187,19,0.62,26,0.122,27,0.009,31,0.537,34,0.311,37,0.132,46,3.065,60,0.953,62,1.041,94,0.228,130,2.201,141,0.677,159,0.477,209,0.896,218,0.486,222,0.963,224,1.891,230,1.276,239,1.781,242,0.909,249,0.772,254,0.153,268,1.613,284,0.804,286,1.481,294,1.175,301,0.187,305,0.004,306,0.004,307,0.649,308,2.14,309,0.108,310,1.08,311,0.53,314,1.114,315,4.021,316,0.251,318,4.043,319,0.858,320,1.114,322,1.114,324,0.845,325,0.713,326,2.159,327,1.218,328,1.08,329,4.101,330,2.059,331,2.426,332,2.722,333,2.722,334,2.813,335,1.019,336,2.099,337,1.828,338,0.89,339,1.982,340,1.114,341,1.114,342,1.114,343,1.114,344,1.492,345,1.114,346,1.114,347,1.049,348,1.772,349,2.206,350,0.605,351,0.964,352,1.114,353,1.114,354,1.114,355,1.114,356,1.114,357,1.114,358,1.114,359,1.114,360,1.114,361,1.114,362,1.114,363,1.114,364,1.082,365,1.114,366,1.114,367,1.114,368,1.114,369,1.08,370,1.114,371,1.114,372,2.812,373,2.744,374,1.114,375,1.114,376,0.68,377,1.114,378,1.114,379,1.114,380,1.772,381,1.08,382,1.114,383,1.08,384,1.431,385,0.214,386,2.051,387,0.867,388,1.958,389,2.368,390,1.345,391,2.922,392,2.206,393,3.588,394,2.206,395,2.206,396,2.206,397,1.772,398,1.114,399,2.206,400,1.114,401,2.14,402,1.114,403,1.114,404,1.114,405,1.114,406,1.114,407,1.114,408,1.114,409,1.114,410,1.114,411,1.114,412,1.114,413,1.114,414,1.114,415,1.453,416,1.114,417,1.114,418,2.14,419,1.114,420,1.114,421,1.114,422,1.114,423,2.14,424,1.114,425,1.772,426,1.114,427,1.114,428,1.114,429,1.114,430,1.114,431,1.114,432,1.114,433,2.14,434,1.114,435,1.114,436,1.114,437,1.114,438,1.114,439,1.114,440,1.114,441,1.114,442,1.114,443,1.114,444,1.114,445,1.114,446,1.114,447,1.114,448,1.114,449,1.114,450,1.114,451,1.114,452,1.114,453,1.114,454,1.114,455,1.114,456,1.114,457,1.114,458,1.114,459,1.114,460,1.114,461,1.114,462,1.114,463,1.114,464,1.114,465,2.14,466,1.114,467,1.114,468,1.114,469,1.114,470,2.14,471,1.114,472,1.114,473,1.114,474,1.114,475,1.114,476,1.114,477,2.14,478,1.114,479,1.114,480,3.436,481,2.514,482,2.744,483,1.114,484,1.114,485,0.785,486,1.114,487,1.114,488,2.439,489,1.772,490,1.114,491,1.772,492,1.114,493,1.772,494,1.114,495,1.772,496,1.114,497,1.772,498,1.114,499,1.772,500,1.114,501,1.114,502,1.114,503,1.114,504,1.114,505,1.772,506,1.114,507,1.772,508,1.114,509,1.772,510,1.114,511,2.14,512,1.114,513,1.114,514,1.114,515,1.114,516,1.114,517,1.114,518,1.114,519,1.114,520,1.114,521,1.114,522,1.114,523,1.621,524,0.938,525,1.719,526,1.114,527,1.114,528,1.114,529,2.14,530,1.809,531,1.114,532,1.114,533,1.114,534,2.14,535,1.114,536,1.114,537,1.114,538,1.114,539,2.835,540,1.114,541,1.08,542,2.835,543,1.114,544,0.913,545,2.514,546,1.114,547,0.825,1221,3.931,1222,3.931,1223,3.931,1224,3.931,1225,3.931,1226,3.931,1227,2.471,1228,2.471,1229,2.471,1230,2.471,1231,2.471,1232,2.471,1233,2.471,1234,2.471,1235,2.471]],["title/classes/ODataAnnotatable.html",[307,0.346,1236,2.19]],["body/classes/ODataAnnotatable.html",[3,0.1,4,0.1,5,0.1,6,0.11,8,0.076,9,0.716,10,0.203,25,1.624,26,0.132,27,0.009,31,0.536,34,0.326,37,0.109,60,1.003,62,1.21,94,0.228,141,0.809,159,0.709,202,2.366,209,0.82,230,1.241,242,1.085,247,1.337,249,1.094,254,0.152,262,4.219,263,3.087,264,3.374,265,3.374,266,3.374,269,2.904,294,0.93,301,0.212,305,0.007,306,0.007,307,0.57,309,0.256,311,0.98,316,0.286,319,1.024,350,1.781,385,0.256,802,3.869,1236,3.61,1237,5.163,1238,4.195,1239,4.195,1240,3.491,1241,7.268,1242,2.635,1243,4.539,1244,4.028,1245,4.255,1246,5.847,1247,4.166,1248,4.586,1249,4.586,1250,2.835,1251,4.028,1252,4.808,1253,5.847,1254,3.974,1255,3.276,1256,4.028,1257,5.163,1258,5.163,1259,5.163,1260,5.163,1261,3.691,1262,5.163,1263,1.951,1264,5.163,1265,5.163,1266,5.163,1267,3.007,1268,5.163,1269,5.163,1270,5.163,1271,5.163,1272,5.163,1273,5.163,1274,5.163,1275,5.163]],["title/classes/ODataAnnotation.html",[307,0.346,1243,2.352]],["body/classes/ODataAnnotation.html",[3,0.102,4,0.102,5,0.102,6,0.116,8,0.077,9,0.774,10,0.233,26,0.133,27,0.009,31,0.589,34,0.333,37,0.111,60,0.893,62,0.913,94,0.234,141,1.019,159,0.724,202,2.396,209,0.803,230,0.936,242,1.099,249,1.019,254,0.115,262,4.566,263,3.101,264,4.607,265,4.607,266,4.607,269,2.584,294,0.942,301,0.153,305,0.007,306,0.007,307,0.578,309,0.261,316,0.305,319,0.942,350,1.462,385,0.261,802,3.701,1236,2.964,1237,5.27,1240,2.866,1243,4.445,1244,3.308,1245,3.786,1247,3.834,1248,4.08,1249,4.08,1251,3.308,1252,4.832,1254,3.536,1255,2.69,1256,3.308,1257,6.5,1258,5.27,1259,5.27,1260,5.27,1261,3.768,1262,5.27,1263,1.991,1264,5.27,1265,5.27,1266,5.27,1267,3.069,1268,5.27,1269,5.27,1270,5.27,1271,5.27,1272,5.27,1273,5.27,1274,5.27,1275,5.27,1276,7.362,1277,5.968,1278,5.968,1279,5.968,1280,5.968,1281,5.968]],["title/classes/ODataAnnotations.html",[307,0.346,1282,3.098]],["body/classes/ODataAnnotations.html",[3,0.078,4,0.078,5,0.078,6,0.112,8,0.059,9,0.634,10,0.202,14,1.931,25,1.852,26,0.137,27,0.009,30,2.116,32,3.61,34,0.344,37,0.113,48,1.363,49,1.64,54,3.387,55,2.661,57,1.252,61,1.824,71,1.989,72,2.05,73,2.185,94,0.224,150,2.965,152,3.892,156,2.679,159,0.552,173,3.259,209,0.896,218,0.696,230,1.099,242,0.679,247,1.04,249,1.121,254,0.172,269,2.46,294,1.149,297,3.259,301,0.202,305,0.006,306,0.006,307,0.59,309,0.199,311,0.833,316,0.295,319,0.927,337,2.228,364,1.928,385,0.27,386,1.699,544,2.282,586,0.679,659,2.223,1097,4.045,1255,3.735,1261,3.898,1263,2.704,1282,6.174,1283,3.405,1284,4.535,1285,4.62,1286,3.293,1287,4.55,1288,5.88,1289,3.738,1290,4.991,1291,4.55,1292,4.55,1293,3.405,1294,4.55,1295,4.224,1296,4.55,1297,5.88,1298,4.55,1299,5.88,1300,4.55,1301,4.62,1302,4.55,1303,4.55,1304,4.55,1305,4.55,1306,4.55,1307,3.405,1308,3.405,1309,3.405,1310,3.405,1311,3.405,1312,2.34,1313,5.381,1314,6.064,1315,5.245,1316,5.245,1317,4.654,1318,5.381,1319,5.245,1320,5.245,1321,3.405,1322,5.6,1323,3.405,1324,3.405,1325,3.405,1326,3.405,1327,3.405,1328,3.405,1329,3.405,1330,4.62,1331,4.62,1332,3.405,1333,3.405,1334,3.405,1335,3.405,1336,3.405,1337,3.405,1338,3.405,1339,3.405,1340,3.405,1341,5.245,1342,3.405,1343,4.62,1344,5.6,1345,5.245,1346,3.405,1347,3.405,1348,3.405,1349,4.62,1350,6.064,1351,4.62,1352,4.62,1353,4.62,1354,3.405,1355,3.405,1356,3.405,1357,3.405,1358,3.405,1359,3.405,1360,5.245,1361,3.405,1362,4.62,1363,3.405,1364,3.405,1365,3.405]],["title/classes/ODataApiOptions.html",[307,0.346,1366,3.894]],["body/classes/ODataApiOptions.html",[1,4.494,3,0.078,4,0.078,5,0.078,6,0.117,8,0.059,9,0.635,10,0.213,11,4.359,12,4.05,13,4.534,14,2.979,15,4.325,16,3.906,17,4.229,18,4.534,19,1.972,20,4.05,21,4.534,22,4.229,23,4.028,24,3.889,25,1.757,26,0.137,27,0.009,28,3.163,29,3.438,30,3.499,31,0.66,32,3.614,33,3.743,34,0.391,37,0.069,41,2.625,44,2.633,51,2.48,53,3.299,54,3.163,59,3.428,60,0.75,74,3.889,94,0.219,141,0.631,159,0.553,202,2.013,203,2.633,204,2.633,205,2.528,206,4.229,207,4.229,208,2.633,209,0.676,210,2.265,211,2.749,212,2.433,216,3.243,227,3.671,228,3.072,229,2.332,235,3.072,239,1.719,254,0.088,301,0.18,305,0.006,306,0.006,307,0.358,309,0.199,316,0.311,350,1.515,364,1.255,384,1.587,385,0.199,387,2.76,544,2.286,659,2.227,1050,2.265,1146,4.984,1240,2.97,1242,2.056,1284,4.343,1366,5.461,1367,4.561,1368,4.561,1369,4.561,1370,6.185,1371,4.984,1372,3.906,1373,4.561,1374,7.524,1375,4.561,1376,4.344,1377,4.561,1378,4.561,1379,4.107,1380,4.984,1381,4.561,1382,7.524,1383,7.524,1384,4.561,1385,5.285,1386,4.013,1387,4.561,1388,6.185,1389,5.461,1390,4.561,1391,4.561,1392,4.561,1393,4.561,1394,6.185,1395,3.57,1396,4.561,1397,4.561,1398,4.628,1399,6.185,1400,4.561,1401,4.561,1402,4.027,1403,4.561,1404,6.185,1405,6.185,1406,4.628,1407,3.413,1408,7.45,1409,8.294,1410,4.561,1411,4.561,1412,4.561,1413,8.109,1414,8.109,1415,8.109,1416,8.109,1417,8.109,1418,8.109,1419,8.109,1420,4.561,1421,4.561,1422,4.561,1423,4.561,1424,4.561,1425,4.561,1426,4.561,1427,4.027,1428,4.561,1429,4.561,1430,4.561,1431,4.561,1432,4.027,1433,6.185,1434,4.561,1435,4.561,1436,4.561,1437,4.027,1438,4.561,1439,4.027,1440,4.561,1441,4.561,1442,4.561,1443,4.027,1444,4.561,1445,4.027,1446,4.561,1447,6.185,1448,4.561,1449,4.561,1450,4.561,1451,4.561,1452,4.561,1453,6.185,1454,4.561,1455,6.185,1456,4.561,1457,4.561,1458,4.561,1459,4.027]],["title/classes/ODataBaseService.html",[307,0.346,1460,3.098]],["body/classes/ODataBaseService.html",[3,0.068,4,0.068,5,0.068,6,0.114,8,0.052,10,0.224,19,2.248,26,0.137,27,0.009,34,0.364,35,3.763,36,1.735,37,0.06,46,2.862,57,2.244,60,0.79,94,0.199,156,1.23,209,0.683,229,2.879,239,1.597,254,0.17,272,4.265,296,4.313,301,0.234,305,0.005,306,0.005,307,0.311,309,0.173,311,0.757,316,0.303,319,1.022,364,2.523,385,0.246,386,2.556,586,1.27,659,2.023,744,4.124,1460,3.945,1461,3.969,1462,6.565,1463,6.565,1464,6.207,1465,3.762,1466,3.504,1467,4.978,1468,5.756,1469,3.969,1470,4.578,1471,5.597,1472,4.164,1473,6.601,1474,6.182,1475,6.195,1476,3.969,1477,4.485,1478,3.969,1479,3.969,1480,3.969,1481,3.969,1482,5.597,1483,6.601,1484,6.195,1485,3.969,1486,3.969,1487,3.969,1488,3.969,1489,3.969,1490,4.878,1491,6.293,1492,5.906,1493,3.969,1494,4.115,1495,3.969,1496,3.969,1497,3.504,1498,3.969,1499,3.198,1500,2.787,1501,3.198,1502,2.199,1503,3.969,1504,6.518,1505,6.518,1506,5.616,1507,3.969]],["title/classes/ODataBatchRequest.html",[307,0.346,1508,3.894]],["body/classes/ODataBatchRequest.html",[3,0.057,4,0.057,5,0.057,6,0.105,8,0.095,9,0.449,10,0.152,11,2.749,16,4.27,19,1.244,24,2.749,26,0.11,27,0.009,29,1.462,30,3.042,34,0.468,35,3.125,36,1.462,37,0.075,48,0.964,49,1.712,50,1.507,52,1.606,53,4.431,94,0.224,96,2.749,141,0.818,159,0.405,177,1.783,202,1.925,209,0.852,218,0.587,227,3.649,228,4.076,229,2.464,233,3.763,242,1.24,247,1.134,249,0.967,250,1.555,254,0.134,257,3.402,286,1.01,292,3.873,294,0.996,295,2.382,299,2.863,301,0.152,304,1.606,305,0.005,306,0.005,307,0.389,309,0.146,311,0.669,316,0.274,319,0.894,334,2.274,335,2.698,336,1.843,337,0.899,364,2.435,376,1.627,385,0.146,485,1.575,525,2.585,548,2.502,560,2.111,572,3.149,584,2.551,596,1.606,609,3.997,639,3.484,649,3.733,702,1.555,1049,4.766,1050,1.661,1164,3.041,1179,2.863,1263,1.116,1267,2.551,1289,3.727,1312,3.041,1372,1.661,1376,3.484,1386,2.646,1395,4.845,1398,2.502,1465,2.863,1472,2.236,1474,3.294,1477,3.489,1508,6.69,1509,3.344,1510,5.221,1511,4.96,1512,4.96,1513,6.542,1514,3.344,1515,4.373,1516,4.96,1517,3.344,1518,3.344,1519,4.96,1520,6.69,1521,3.344,1522,4.96,1523,7.577,1524,3.344,1525,3.344,1526,3.344,1527,3.344,1528,5.899,1529,2.952,1530,2.22,1531,3.344,1532,3.344,1533,2.952,1534,3.712,1535,4.96,1536,4.38,1537,5.913,1538,3.344,1539,4.96,1540,3.344,1541,3.344,1542,4.766,1543,4.96,1544,4.96,1545,4.96,1546,3.344,1547,3.344,1548,5.913,1549,3.344,1550,3.344,1551,3.344,1552,2.952,1553,3.344,1554,3.484,1555,3.712,1556,4.211,1557,6.542,1558,4.908,1559,4.96,1560,6.987,1561,4.96,1562,2.952,1563,3.484,1564,3.344,1565,3.712,1566,4.96,1567,4.96,1568,4.225,1569,7.95,1570,4.96,1571,2.952,1572,2.22,1573,4.96,1574,6.542,1575,4.96,1576,5.913,1577,3.344,1578,4.96,1579,3.344,1580,3.344,1581,3.344,1582,3.344,1583,3.344,1584,3.344,1585,3.344,1586,3.344,1587,3.344,1588,3.344,1589,3.344,1590,3.344,1591,3.344,1592,3.344,1593,4.96,1594,3.344,1595,2.952,1596,3.344,1597,4.766,1598,3.344,1599,3.344,1600,5.899,1601,3.344,1602,3.344,1603,3.344,1604,7.95,1605,2.502,1606,2.952,1607,3.294,1608,3.344,1609,3.344,1610,3.344,1611,3.344,1612,5.913,1613,3.344,1614,5.913,1615,2.952,1616,5.913,1617,3.131,1618,2.952,1619,4.425,1620,3.344,1621,3.344,1622,3.344,1623,4.38,1624,3.344,1625,3.344,1626,5.221,1627,3.344,1628,3.344,1629,3.344,1630,3.344,1631,5.913,1632,5.477,1633,6.542,1634,3.344,1635,4.96,1636,2.646,1637,3.344,1638,3.344,1639,2.502,1640,3.344,1641,3.344,1642,3.344,1643,3.344,1644,3.344,1645,3.344,1646,4.96,1647,4.38,1648,3.344,1649,4.96,1650,4.38,1651,4.38,1652,3.997,1653,4.96,1654,3.344,1655,4.96,1656,4.96,1657,4.96,1658,4.96,1659,3.344,1660,3.344,1661,3.344,1662,4.38,1663,3.344,1664,2.952,1665,3.344,1666,3.344,1667,3.344,1668,3.344,1669,4.96,1670,7.95,1671,4.96,1672,6.542,1673,6.987,1674,3.344,1675,5.913,1676,6.542,1677,4.96,1678,3.344,1679,3.344,1680,3.344,1681,3.344,1682,3.344,1683,3.344,1684,3.344,1685,3.344,1686,3.344,1687,3.712,1688,3.344,1689,3.344,1690,3.344,1691,3.344,1692,2.952,1693,3.344,1694,3.344,1695,3.344,1696,3.344,1697,3.344,1698,5.913,1699,3.344,1700,3.344,1701,3.344,1702,3.344,1703,3.344,1704,4.96,1705,8.207,1706,5.913,1707,3.344,1708,3.344,1709,3.344,1710,5.913,1711,4.895,1712,3.712,1713,6.542,1714,4.96,1715,3.344,1716,3.344,1717,3.344,1718,3.344,1719,3.344,1720,3.344]],["title/classes/ODataCache.html",[307,0.346,1721,2.929]],["body/classes/ODataCache.html",[0,0.825,3,0.058,4,0.058,5,0.058,6,0.113,8,0.044,9,0.451,10,0.218,25,1.81,26,0.136,27,0.009,31,0.438,34,0.391,35,3.571,36,1.472,37,0.075,41,3.824,42,1.672,43,3.501,49,1.717,50,3.589,52,1.617,60,0.72,94,0.233,110,2.564,141,1.051,156,2.354,159,0.408,202,2.848,209,0.823,227,3.489,229,2.274,230,1.305,239,1.455,242,1.242,245,4.585,247,1.602,249,1.137,254,0.173,286,1.65,294,0.76,301,0.222,305,0.005,306,0.006,307,0.264,309,0.147,311,0.672,316,0.299,319,1.037,339,2.136,350,0.825,376,0.927,384,1.279,385,0.218,560,4.424,574,1.732,645,3.153,1050,1.672,1054,5.674,1164,2.564,1183,3.148,1250,3.042,1263,2.19,1289,3.167,1372,2.476,1379,2.236,1380,6.285,1395,4.677,1472,2.958,1477,1.796,1494,2.126,1502,1.866,1515,5.026,1556,4.883,1568,5.112,1597,4.018,1600,4.785,1607,2.236,1617,5.115,1636,1.796,1721,3.311,1722,2.973,1723,5.683,1724,6.198,1725,4.443,1726,4.018,1727,4.61,1728,4.912,1729,4.018,1730,4.443,1731,4.443,1732,4.018,1733,4.018,1734,4.018,1735,6.173,1736,4.986,1737,3.367,1738,2.714,1739,3.367,1740,5.843,1741,6.844,1742,4.873,1743,3.731,1744,3.367,1745,3.367,1746,4.144,1747,2.714,1748,3.367,1749,2.564,1750,3.502,1751,3.367,1752,3.731,1753,5.683,1754,3.502,1755,3.367,1756,2.714,1757,3.367,1758,2.714,1759,3.367,1760,2.714,1761,3.367,1762,4.922,1763,2.52,1764,2.714,1765,3.731,1766,3.367,1767,2.763,1768,2.714,1769,3.367,1770,3.502,1771,3.367,1772,3.731,1773,3.367,1774,4.501,1775,5.96,1776,3.731,1777,3.367,1778,4.018,1779,2.973,1780,2.973,1781,2.236,1782,2.973,1783,4.403,1784,2.973,1785,4.018,1786,4.403,1787,5.243,1788,4.403,1789,3.731,1790,2.973,1791,2.973,1792,2.973,1793,2.714,1794,2.714,1795,2.714,1796,2.973,1797,4.403,1798,2.973,1799,2.973,1800,2.973,1801,2.973,1802,2.973,1803,2.973,1804,2.973,1805,2.973,1806,4.403,1807,2.973,1808,4.403,1809,2.973,1810,4.403,1811,2.973,1812,2.973,1813,2.973,1814,2.973,1815,2.973,1816,2.714,1817,2.973,1818,2.973,1819,2.973,1820,2.973,1821,2.973,1822,2.973,1823,2.973,1824,2.973,1825,2.973,1826,2.973,1827,2.973,1828,5.796,1829,2.973,1830,4.403,1831,2.973,1832,2.973,1833,2.973,1834,2.973,1835,2.973,1836,2.973,1837,2.973,1838,2.714,1839,2.973,1840,2.973,1841,2.973]],["title/interfaces/ODataCacheEntry.html",[0,1.08,1742,2.929]],["body/interfaces/ODataCacheEntry.html",[0,1.014,2,2.129,3,0.071,4,0.071,5,0.071,6,0.054,8,0.054,9,0.523,26,0.109,27,0.009,31,0.306,34,0.424,35,3.332,36,1.81,37,0.087,41,3.812,42,2.056,43,3.852,49,1.354,50,3.424,52,1.988,94,0.232,110,3.43,141,1.174,156,2.067,159,0.502,202,2.923,209,0.845,227,3.225,229,2.238,230,1.235,242,1.292,245,4.618,247,0.946,249,1.118,254,0.163,286,1.679,294,0.853,305,0.006,306,0.006,307,0.325,319,0.929,339,1.883,350,1.014,376,1.139,384,1.062,385,0.181,560,3.653,645,3.468,1050,2.056,1054,5.759,1164,2.976,1183,2.614,1250,1.615,1263,2.225,1289,3.086,1372,2.056,1380,6.644,1395,4.168,1472,2.608,1477,2.208,1494,2.614,1502,2.295,1515,4.543,1556,4.579,1568,5.032,1597,4.663,1600,5.375,1607,2.749,1617,4.559,1636,2.208,1721,2.749,1722,3.656,1723,4.991,1724,6.379,1725,3.098,1727,2.908,1728,4.33,1730,3.098,1731,3.098,1735,6.2,1740,5.529,1741,6.852,1742,4.796,1743,3.098,1746,3.653,1749,2.129,1750,2.908,1752,3.098,1753,5.404,1754,2.908,1762,4.064,1765,3.098,1767,2.295,1770,2.908,1772,3.098,1774,4.168,1775,5.686,1776,3.098,1778,4.663,1779,3.656,1780,3.656,1781,2.749,1782,3.656,1783,5.109,1784,5.109,1785,5.375,1786,5.889,1787,6.951,1788,5.109,1789,4.33,1790,3.656,1791,3.656,1792,3.656,1793,3.337,1794,3.337,1795,3.337,1796,3.656,1797,5.109,1798,3.656,1799,3.656,1800,3.656,1801,3.656,1802,3.656,1803,3.656,1804,3.656,1805,3.656,1806,5.109,1807,3.656,1808,5.109,1809,3.656,1810,5.109,1811,3.656,1812,3.656,1813,3.656,1814,3.656,1815,3.656,1816,3.337,1817,3.656,1818,3.656,1819,3.656,1820,3.656,1821,3.656,1822,3.656,1823,3.656,1824,3.656,1825,3.656,1826,3.656,1827,3.656,1828,6.376,1829,3.656,1830,5.109,1831,3.656,1832,3.656,1833,3.656,1834,3.656,1835,3.656,1836,3.656,1837,3.656,1838,3.337,1839,3.656,1840,3.656,1841,3.656]],["title/classes/ODataCallable.html",[307,0.346,1842,3.554]],["body/classes/ODataCallable.html",[3,0.074,4,0.074,5,0.074,6,0.113,8,0.056,9,0.54,10,0.231,25,1.644,26,0.141,27,0.009,29,3.697,31,0.632,34,0.41,37,0.065,45,2.077,60,1.114,62,0.913,94,0.231,159,0.524,202,2.597,209,0.769,210,2.962,216,3.565,218,0.592,224,1.609,225,3.422,229,2.832,230,0.935,231,3.711,232,3.711,234,3.654,236,2.773,239,1.059,247,1.363,249,0.598,254,0.17,259,2.496,263,2.582,269,2.093,275,3.925,294,0.553,298,3.174,299,3.94,300,4.114,301,0.225,305,0.006,306,0.006,307,0.339,309,0.189,311,0.804,316,0.313,319,1.078,350,1.803,385,0.189,390,2.041,576,2.653,586,1.098,720,3.123,768,5.533,802,3.471,1048,3.932,1161,3.038,1236,3.39,1238,3.442,1239,3.442,1240,2.864,1242,2.688,1243,3.181,1244,2.397,1245,3.784,1247,3.534,1248,3.305,1249,3.305,1250,3.19,1251,2.397,1252,2.397,1254,2.864,1255,1.949,1256,2.397,1749,4.483,1767,3.783,1842,4.806,1843,4.325,1844,5.866,1845,3.94,1846,4.189,1847,4.189,1848,3.765,1849,4.114,1850,4.873,1851,5.964,1852,4.325,1853,4.325,1854,4.325,1855,5.506,1856,3.236,1857,3.236,1858,2.606,1859,4.325,1860,5.83,1861,2.872,1862,4.325,1863,3.442,1864,4.325,1865,5.266,1866,5.266,1867,5.266,1868,4.325,1869,5.266,1870,5.266,1871,4.325,1872,3.442,1873,4.325,1874,5.266,1875,4.463,1876,3.038,1877,3.236,1878,3.038,1879,3.038,1880,3.236,1881,3.038,1882,2.307,1883,3.236,1884,2.496,1885,3.236,1886,2.077,1887,2.73,1888,2.73,1889,2.397,1890,2.73,1891,2.606,1892,2.73,1893,2.73,1894,2.73,1895,3.038,1896,3.236,1897,2.872,1898,3.038,1899,2.606,1900,2.606,1901,2.397,1902,6.826,1903,4.325,1904,5.964,1905,4.325,1906,4.325,1907,4.325,1908,2.872,1909,3.819,1910,3.819,1911,3.819,1912,4.325,1913,4.325,1914,3.94,1915,3.94,1916,3.819,1917,2.872,1918,2.872,1919,2.872,1920,4.325]],["title/classes/ODataCallableParser.html",[307,0.346,1855,3.3]],["body/classes/ODataCallableParser.html",[3,0.077,4,0.077,5,0.077,6,0.116,8,0.058,9,0.552,10,0.225,19,1.872,25,1.553,26,0.138,27,0.009,31,0.551,34,0.416,37,0.092,49,1.047,51,2.448,60,0.543,94,0.236,159,0.543,173,2.839,209,0.863,216,3.828,222,1.096,224,1.827,225,3.232,229,2.835,230,0.958,231,3.232,232,3.471,234,3.708,236,2.081,238,1.493,242,1.232,243,3.982,247,1.023,249,0.845,254,0.17,257,1.957,267,3.309,268,1.887,275,3.982,294,0.955,296,3.471,297,2.081,301,0.223,305,0.006,306,0.006,307,0.479,309,0.196,311,0.823,316,0.306,319,0.951,339,1.457,376,1.232,384,1.567,385,0.196,390,2.378,530,2.257,586,1.114,587,3.144,645,3.585,675,1.571,720,2.592,768,4.958,1050,2.223,1070,3.144,1179,4.011,1240,2.933,1242,2.017,1263,1.493,1267,3.14,1477,3.257,1636,2.387,1845,4.309,1848,3.855,1855,4.569,1861,2.972,1863,3.524,1872,2.583,1882,3.257,1908,5.657,1914,4.509,1915,4.509,1917,2.972,1918,2.972,1919,2.972,1921,3.952,1922,6.106,1923,4.476,1924,4.476,1925,4.476,1926,5.601,1927,4.476,1928,4.476,1929,4.476,1930,4.476,1931,4.476,1932,4.476,1933,5.391,1934,4.476,1935,4.476,1936,5.391,1937,4.476,1938,6.592,1939,4.188,1940,5.201,1941,3.349,1942,3.952,1943,3.349,1944,3.952,1945,3.349,1946,3.952,1947,5.481,1948,3.855,1949,4.289,1950,3.952,1951,3.952,1952,3.349,1953,3.349,1954,3.349,1955,3.349,1956,3.349,1957,4.569,1958,3.349,1959,4.569,1960,3.349,1961,3.349,1962,3.144,1963,3.349,1964,2.826,1965,2.826,1966,5.391,1967,3.952,1968,6.136,1969,3.952,1970,3.952,1971,2.972,1972,2.972,1973,2.826,1974,6.592,1975,7.287,1976,5.391,1977,5.391,1978,3.952,1979,3.952,1980,3.952,1981,3.952,1982,3.952,1983,3.952]],["title/classes/ODataConfigAsyncLoader.html",[307,0.346,1984,3.3]],["body/classes/ODataConfigAsyncLoader.html",[3,0.11,4,0.11,5,0.11,6,0.107,8,0.083,10,0.164,26,0.096,27,0.009,34,0.459,35,3.833,36,2.803,37,0.124,49,1.5,60,0.932,156,2.383,159,0.777,209,0.854,242,0.957,251,4.261,252,4.338,254,0.123,301,0.164,305,0.007,306,0.007,307,0.646,309,0.28,311,1.037,316,0.265,319,0.756,384,2.113,385,0.336,653,3.819,1263,2.139,1781,4.257,1948,4.047,1984,5.754,1985,5.166,1986,5.671,1987,7.146,1988,6.411,1989,6.411,1990,6.411,1991,4.797,1992,4.257,1993,4.257,1994,5.166,1995,5.166,1996,5.166,1997,5.166,1998,5.166,1999,5.166,2000,5.166,2001,5.166,2002,5.166,2003,5.166,2004,5.166]],["title/classes/ODataConfigLoader.html",[307,0.346,1986,2.929]],["body/classes/ODataConfigLoader.html",[3,0.112,4,0.112,5,0.112,6,0.101,8,0.085,27,0.009,34,0.463,35,3.764,36,2.856,37,0.125,49,1.528,60,0.943,156,2.664,159,0.792,209,0.858,242,0.975,251,3.621,252,4.36,305,0.008,306,0.008,307,0.652,309,0.286,311,1.049,316,0.225,319,0.771,384,1.995,385,0.286,653,3.862,1263,2.18,1781,4.339,1948,4.125,1984,4.889,1985,5.265,1986,5.707,1987,7.177,1991,4.889,1992,4.339,1993,4.339,1994,5.265,1995,5.265,1996,5.265,1997,5.265,1998,5.265,1999,5.265,2000,5.265,2001,5.265,2002,5.265,2003,5.265,2004,5.265,2005,6.533]],["title/classes/ODataConfigSyncLoader.html",[307,0.346,1992,2.929]],["body/classes/ODataConfigSyncLoader.html",[3,0.11,4,0.11,5,0.11,6,0.107,8,0.084,10,0.165,26,0.097,27,0.009,34,0.46,35,3.755,36,2.813,37,0.124,49,1.505,60,0.934,156,2.388,159,0.78,209,0.855,242,0.96,251,3.566,252,4.522,254,0.124,301,0.165,305,0.007,306,0.007,307,0.647,309,0.281,311,1.039,316,0.266,319,0.759,384,2.116,385,0.337,653,3.827,1263,2.147,1781,4.273,1948,4.062,1984,4.815,1985,5.185,1986,5.678,1987,7.152,1991,4.815,1992,5.117,1993,4.273,1994,6.21,1995,5.185,1996,5.185,1997,5.185,1998,5.185,1999,5.185,2000,5.185,2001,5.185,2002,5.185,2003,5.185,2004,5.185,2006,6.434,2007,6.434,2008,6.434]],["title/classes/ODataEntitiesAnnotations.html",[307,0.346,1344,2.929]],["body/classes/ODataEntitiesAnnotations.html",[3,0.076,4,0.076,5,0.076,6,0.113,8,0.057,9,0.625,10,0.211,14,1.88,25,1.839,26,0.136,27,0.009,30,2.059,32,3.57,34,0.338,37,0.112,48,1.344,49,1.821,54,3.35,55,1.681,57,1.219,61,2.771,62,0.928,71,3.022,72,3.115,73,3.32,94,0.226,150,2.912,152,3.861,156,2.304,159,0.537,173,3.214,209,0.894,218,0.738,230,1.084,242,0.661,247,1.012,249,1.112,254,0.172,269,1.554,294,1.145,297,3.214,301,0.2,305,0.006,306,0.006,307,0.583,309,0.194,311,0.817,316,0.309,319,0.948,337,2.212,364,1.902,385,0.194,386,1.668,544,2.748,576,2.491,659,2.183,1097,3.989,1255,3.709,1261,3.827,1263,2.48,1282,6.226,1283,3.314,1284,4.29,1285,4.536,1286,3.233,1288,5.172,1289,2.362,1290,4.026,1293,3.314,1295,4.165,1297,5.825,1299,5.825,1301,4.536,1307,3.314,1308,3.314,1309,3.314,1310,3.314,1311,3.314,1312,2.278,1313,5.338,1314,6.015,1315,5.172,1316,5.172,1317,4.59,1318,5.338,1319,5.172,1320,5.172,1321,3.314,1322,5.565,1323,3.314,1324,3.314,1325,3.314,1326,3.314,1327,3.314,1328,3.314,1329,3.314,1330,5.562,1331,4.536,1332,3.314,1333,3.314,1334,3.314,1335,3.314,1336,3.314,1337,3.314,1338,3.314,1339,3.314,1340,3.314,1341,5.172,1342,3.314,1343,4.536,1344,5.852,1345,5.172,1346,3.314,1347,3.314,1348,3.314,1349,5.562,1350,6.015,1351,4.536,1352,5.172,1353,4.536,1354,3.314,1355,3.314,1356,5.172,1357,3.314,1358,5.172,1359,3.314,1360,5.172,1361,3.314,1362,4.536,1363,3.314,1364,3.314,1365,3.314,2009,4.429,2010,3.569,2011,4.429,2012,4.429,2013,4.429,2014,4.429,2015,3.569,2016,3.569,2017,3.911,2018,4.429,2019,4.429,2020,4.429,2021,4.429,2022,4.429,2023,4.429,2024,4.429,2025,4.429,2026,4.429,2027,4.429,2028,4.429,2029,4.429,2030,4.429,2031,3.911,2032,4.429]],["title/classes/ODataEntityAnnotations.html",[307,0.346,1322,2.929]],["body/classes/ODataEntityAnnotations.html",[3,0.071,4,0.071,5,0.071,6,0.116,8,0.054,9,0.689,10,0.222,14,2.843,25,1.809,26,0.138,27,0.009,30,3.115,32,3.481,34,0.325,37,0.109,48,1.302,49,1.895,54,3.266,55,1.585,57,2.228,61,1.674,62,0.891,71,1.825,72,1.881,73,2.005,94,0.224,150,3.481,152,3.791,156,2.246,159,0.506,173,3.544,209,0.891,218,0.719,230,1.051,242,0.623,247,0.954,249,1.092,254,0.174,269,1.465,294,1.136,297,3.115,301,0.22,305,0.006,306,0.006,307,0.569,309,0.182,311,0.785,316,0.314,319,0.99,337,2.177,364,1.843,385,0.182,386,1.601,544,2.679,576,2.446,607,3.573,659,2.095,1097,3.866,1255,3.65,1261,3.673,1263,2.543,1282,6.172,1283,3.123,1284,4.182,1285,4.354,1286,3.104,1288,5.013,1289,2.226,1290,3.864,1293,3.123,1295,4.037,1297,5.703,1299,5.703,1301,4.354,1307,3.123,1308,3.123,1309,3.123,1310,3.123,1311,3.123,1312,2.147,1313,5.241,1314,5.906,1315,5.013,1316,5.013,1317,4.449,1318,5.241,1319,5.013,1320,5.013,1321,3.123,1322,5.869,1323,3.123,1324,3.123,1325,3.123,1326,5.013,1327,3.123,1328,5.013,1329,3.123,1330,5.423,1331,4.354,1332,5.013,1333,3.123,1334,5.013,1335,3.123,1336,5.013,1337,3.123,1338,5.013,1339,3.123,1340,5.013,1341,5.013,1342,3.123,1343,5.703,1344,5.643,1345,5.013,1346,3.123,1347,3.123,1348,3.123,1349,5.423,1350,5.906,1351,4.354,1352,5.013,1353,4.354,1354,3.123,1355,3.123,1356,3.123,1357,3.123,1358,3.123,1359,3.123,1360,5.013,1361,3.123,1362,4.354,1363,3.123,1364,3.123,1365,3.123,2010,3.364,2015,3.364,2016,3.364,2017,3.686,2031,3.686,2033,4.174,2034,4.174,2035,4.174,2036,4.174,2037,4.174,2038,4.174,2039,4.174,2040,4.174,2041,4.174,2042,4.174,2043,4.174,2044,4.174,2045,4.174,2046,4.174,2047,4.174,2048,4.174,2049,4.174,2050,4.174,2051,4.174,2052,4.174,2053,4.174,2054,4.174,2055,4.174,2056,4.174,2057,4.174,2058,4.174,2059,4.174,2060,4.174,2061,4.174]],["title/classes/ODataEntityContainer.html",[307,0.346,2062,3.554]],["body/classes/ODataEntityContainer.html",[3,0.092,4,0.092,5,0.092,6,0.099,8,0.07,9,0.624,10,0.224,25,1.54,26,0.141,27,0.009,31,0.627,34,0.448,37,0.081,45,2.583,60,0.923,62,1.055,94,0.231,159,0.652,209,0.518,210,3.424,218,0.685,230,1.081,239,1.317,247,1.229,249,0.744,254,0.171,263,2.817,269,2.42,277,4.633,278,4.218,294,0.688,301,0.227,305,0.007,306,0.007,307,0.422,309,0.235,311,0.93,316,0.311,319,1.064,350,1.966,385,0.235,576,2.76,586,0.803,720,3.407,744,2.583,745,4.749,757,6.088,759,3.241,802,3.665,1048,4.14,1161,3.777,1236,3.78,1238,3.979,1239,3.979,1240,3.311,1242,3.107,1243,3.678,1244,2.981,1245,4.128,1247,3.855,1248,3.821,1249,3.821,1250,3.131,1251,2.981,1252,2.981,1254,3.311,1255,2.424,1256,2.981,1263,1.794,1749,4.367,1767,4.218,1844,6.039,1846,4.843,1847,4.843,1848,4.353,1849,4.586,1850,5.239,1856,4.025,1857,4.025,1858,3.241,1860,5.054,1876,3.777,1877,4.025,1878,3.777,1879,3.777,1880,4.025,1881,3.777,1882,2.869,1883,4.025,1884,3.104,1885,4.025,1886,2.583,1887,3.395,1888,3.395,1889,2.981,1890,3.395,1891,3.241,1892,3.395,1893,3.395,1894,3.395,1895,3.777,1896,4.025,1897,3.571,1898,3.777,1899,3.241,1900,3.241,1901,2.981,2062,5.557,2063,6.72,2064,5.695,2065,5.378,2066,5.378,2067,5.378]],["title/classes/ODataEntityService.html",[307,0.346,2068,3.3]],["body/classes/ODataEntityService.html",[3,0.102,4,0.102,5,0.102,6,0.108,8,0.077,10,0.219,19,1.839,26,0.137,27,0.009,34,0.444,35,3.284,37,0.089,48,1.693,60,0.72,156,2.735,157,2.379,209,0.571,218,0.728,229,2.698,247,1.677,249,1.015,254,0.164,286,1.209,296,4.048,301,0.231,305,0.007,306,0.007,307,0.466,309,0.259,311,0.989,316,0.3,319,1.008,364,2.289,386,2.396,576,2.468,586,1.242,659,2.642,720,3.114,744,3.523,1048,3.411,1460,6.115,1462,5.489,1463,5.489,1464,5.489,1471,4.44,1472,3.852,1473,5.489,1474,5.782,1475,5.152,1477,3.913,1482,4.44,1483,5.489,1484,5.152,1490,4.44,1491,5.489,1492,5.152,1494,3.746,1502,3.289,1555,5.958,2068,5.489,2069,5.934,2070,5.489,2071,7.962,2072,5.934,2073,6.703,2074,5.934,2075,6.477,2076,5.524,2077,5.934,2078,4.782,2079,4.782,2080,4.782,2081,5.934,2082,5.934,2083,4.782,2084,4.782,2085,5.934,2086,4.782,2087,5.934]],["title/classes/ODataEntitySet.html",[307,0.346,2064,3.3]],["body/classes/ODataEntitySet.html",[3,0.092,4,0.092,5,0.092,6,0.104,8,0.07,9,0.623,10,0.224,19,1.344,25,1.698,26,0.141,27,0.009,31,0.626,34,0.424,37,0.081,45,2.575,60,0.922,62,1.053,94,0.233,159,0.65,209,0.516,210,3.418,218,0.683,230,1.079,239,1.314,247,1.226,249,0.742,254,0.171,263,2.814,269,2.415,279,4.628,294,0.686,301,0.226,302,4.212,303,3.908,305,0.007,306,0.007,307,0.421,309,0.234,311,0.928,316,0.312,319,1.063,350,1.964,385,0.234,576,2.758,586,0.8,720,3.403,760,4.321,764,4.734,767,6.076,802,3.663,1048,4.105,1161,3.766,1236,3.774,1238,3.972,1239,3.972,1240,3.305,1242,2.417,1243,3.671,1244,2.972,1245,4.123,1247,3.851,1248,3.814,1249,3.814,1250,3.127,1251,2.972,1252,2.972,1254,3.305,1255,2.417,1256,2.972,1749,4.364,1767,4.212,1844,6.036,1846,4.833,1847,4.833,1848,4.344,1849,4.58,1850,5.235,1856,4.012,1857,4.012,1858,3.231,1860,5.047,1876,3.766,1877,4.012,1878,3.766,1879,3.766,1880,4.012,1881,3.766,1882,2.86,1883,4.012,1884,3.095,1885,4.012,1886,2.575,1887,3.385,1888,3.385,1889,2.972,1890,3.385,1891,3.231,1892,3.385,1893,3.385,1894,3.385,1895,3.766,1896,4.012,1897,3.561,1898,3.766,1899,3.231,1900,3.231,1901,2.972,2063,7.08,2064,5.15,2088,5.362,2089,5.362,2090,5.362,2091,5.362]],["title/classes/ODataEntitySetService.html",[307,0.346,2092,3.554]],["body/classes/ODataEntitySetService.html",[3,0.057,4,0.057,5,0.057,6,0.11,8,0.043,10,0.22,14,3.769,19,1.242,26,0.132,27,0.009,31,0.246,34,0.422,35,3.425,36,1.46,37,0.05,48,1.787,60,0.601,61,1.339,71,2.166,94,0.188,109,3.362,141,0.818,202,2.936,209,0.842,218,0.492,227,3.649,229,2.885,239,1.214,242,0.882,247,1.672,249,1.048,250,1.553,254,0.165,257,2.166,272,3.947,286,1.854,293,4.667,294,0.894,296,3.402,301,0.226,303,3.762,304,1.604,305,0.005,306,0.005,307,0.262,309,0.146,311,0.668,316,0.3,319,1.021,364,1.799,386,2.013,576,2.164,586,1.225,659,1.784,744,4.49,759,5.333,760,2.691,1048,3.247,1097,4.667,1250,3.2,1267,2.548,1286,4.149,1295,5.144,1312,4.271,1376,3.48,1379,2.217,1385,3.48,1460,4.15,1462,3.708,1463,3.708,1464,3.708,1471,2.499,1472,3.743,1473,3.708,1474,4.858,1475,3.48,1477,2.643,1482,2.499,1483,3.708,1484,3.48,1490,2.499,1491,3.708,1492,3.48,1494,2.108,1500,2.345,1502,1.851,1520,4.375,1530,2.217,1558,5.948,1568,3.41,1572,3.291,1652,2.691,1778,6.104,1781,2.217,1886,3.884,2068,5.226,2070,6.051,2073,5.268,2075,4.375,2076,5.708,2078,2.691,2079,2.691,2080,2.691,2083,3.993,2084,2.691,2086,2.691,2092,3.993,2093,8.469,2094,5.217,2095,4.375,2096,5.908,2097,4.955,2098,5.908,2099,4.858,2100,7.316,2101,5.908,2102,5.772,2103,3.339,2104,4.375,2105,5.772,2106,3.339,2107,3.339,2108,3.339,2109,3.339,2110,6.57,2111,3.339,2112,3.339,2113,3.339,2114,5.217,2115,2.948,2116,5.908,2117,4.955,2118,3.339,2119,3.339,2120,3.339,2121,4.955,2122,3.339,2123,3.339,2124,3.339,2125,3.339,2126,3.339,2127,3.339,2128,3.339,2129,3.339,2130,3.339,2131,3.339,2132,3.339,2133,3.339,2134,4.955,2135,3.339,2136,3.339,2137,3.339,2138,2.948,2139,3.339,2140,3.339,2141,3.339,2142,2.948,2143,3.339,2144,3.993,2145,3.339,2146,3.339,2147,3.339,2148,6.537,2149,5.908,2150,3.339,2151,2.948,2152,3.339,2153,2.948,2154,3.339,2155,3.339,2156,3.339,2157,3.339,2158,3.339,2159,3.339,2160,4.955,2161,3.339,2162,3.339,2163,3.339,2164,3.339,2165,3.339,2166,3.339,2167,3.339,2168,3.339,2169,3.339,2170,3.339,2171,3.339,2172,3.339]],["title/classes/ODataEntityTypeKey.html",[307,0.346,2173,3.554]],["body/classes/ODataEntityTypeKey.html",[3,0.041,4,0.041,5,0.041,6,0.071,8,0.031,9,0.496,10,0.123,14,1.018,25,0.857,26,0.13,27,0.009,30,1.115,31,0.624,34,0.375,37,0.09,49,1.497,51,1.539,57,1.509,60,1.04,64,1.018,65,1.678,67,2.199,76,3.546,87,1.384,94,0.23,108,1.973,109,1.233,110,1.973,132,0.82,133,0.82,141,0.83,150,2.304,157,0.961,159,0.582,173,1.115,177,1.279,202,2.343,209,0.867,216,3.63,218,0.381,221,3.039,222,2.1,223,3.039,224,1.668,225,1.784,229,2.713,230,1.24,231,1.784,232,1.784,236,1.784,237,1.973,238,0.8,239,0.587,240,0.82,241,1.384,242,1.274,243,2.559,249,1.229,250,2.55,254,0.166,257,1.678,263,1.684,267,1.924,268,1.646,273,2.127,284,2.656,286,1.222,287,3.571,288,1.384,289,2.55,290,1.384,292,1.329,294,0.893,295,2.634,296,2.975,297,3.348,301,0.062,304,2.634,305,0.004,306,0.004,307,0.43,309,0.105,316,0.166,319,0.793,324,0.82,325,0.692,336,0.675,339,1.249,350,2.045,351,1.871,364,1.761,372,2.581,376,1.849,384,0.985,385,0.262,387,2.45,390,2.189,530,1.773,573,1.152,574,1.233,587,2.695,595,3.092,607,3.724,631,2.312,635,2.312,645,3.073,720,3.056,721,1.191,802,1.629,988,3.641,1048,3.759,1050,1.191,1070,1.684,1097,1.384,1164,3.455,1179,3.462,1181,1.932,1236,2.383,1242,2.703,1245,1.233,1247,1.843,1250,1.497,1254,1.843,1255,2.471,1263,1.601,1267,3.455,1284,1.384,1286,2.047,1295,2.312,1312,3.798,1317,1.592,1386,2.559,1406,1.794,1407,1.794,1565,1.794,1572,1.592,1632,2.872,1636,2.559,1687,3.59,1749,1.233,1774,2.215,1845,2.215,1849,1.445,1863,2.769,1872,2.769,1882,1.279,1884,1.384,1886,3.073,1887,1.514,1888,1.514,1889,2.659,1890,1.514,1891,1.445,1892,1.514,1893,1.514,1894,1.514,1901,1.329,1908,5.25,1914,3.462,1915,3.462,1917,1.592,1918,1.592,1919,1.592,1939,3.305,1940,6.248,1941,5.028,1943,3.59,1945,3.59,1947,4.781,1948,3.029,1949,2.695,1952,1.794,1953,2.872,1954,1.794,1955,1.794,1956,2.872,1957,2.872,1958,1.794,1959,3.59,1960,1.794,1961,1.794,1962,1.684,1963,4.103,1964,1.514,1965,1.514,1971,2.548,1972,1.592,1973,1.514,2099,3.186,2110,3.59,2173,4.419,2174,4.419,2175,3.837,2176,2.398,2177,4.842,2178,2.117,2179,1.445,2180,1.794,2181,3.092,2182,3.092,2183,6.66,2184,3.092,2185,4.419,2186,3.092,2187,2.117,2188,3.092,2189,2.117,2190,2.117,2191,1.794,2192,3.388,2193,2.117,2194,2.117,2195,2.117,2196,2.117,2197,5.296,2198,2.117,2199,5.296,2200,2.117,2201,2.117,2202,2.117,2203,3.388,2204,2.117,2205,2.117,2206,2.117,2207,2.117,2208,2.117,2209,2.872,2210,6.164,2211,2.117,2212,2.117,2213,2.117,2214,2.117,2215,2.117,2216,2.117,2217,2.117,2218,3.388,2219,3.388,2220,3.388,2221,3.388,2222,3.388,2223,3.092,2224,2.117,2225,3.388,2226,2.117,2227,2.117,2228,3.388,2229,2.117,2230,2.117,2231,2.117,2232,3.388,2233,2.117,2234,3.388,2235,3.388,2236,3.388,2237,3.388,2238,3.388,2239,3.388,2240,3.388,2241,5.65,2242,4.236,2243,2.117,2244,4.834,2245,4.834,2246,1.932,2247,3.866,2248,2.117,2249,2.117,2250,2.117,2251,2.117,2252,2.117,2253,2.117,2254,2.117,2255,2.117,2256,2.117,2257,2.117,2258,2.117,2259,2.117,2260,2.117,2261,2.117,2262,2.117,2263,2.117,2264,2.117,2265,7.5,2266,2.117,2267,2.117,2268,2.117,2269,2.117,2270,5.65,2271,2.117,2272,1.794,2273,3.388,2274,2.117,2275,3.388,2276,2.117,2277,2.117,2278,4.236,2279,2.117,2280,2.117,2281,2.117,2282,2.117,2283,2.117,2284,2.117,2285,2.117,2286,2.117,2287,2.117,2288,1.684,2289,1.932,2290,2.117,2291,2.117,2292,5.296,2293,2.117,2294,2.117,2295,2.117,2296,2.117,2297,2.117,2298,2.117,2299,2.117,2300,3.092,2301,2.117,2302,2.117,2303,5.933,2304,7.139,2305,5.837,2306,3.388,2307,3.388,2308,2.117,2309,4.842,2310,2.117,2311,2.117,2312,2.117,2313,2.117,2314,2.117,2315,2.117,2316,5.65,2317,2.117,2318,1.794,2319,2.117,2320,2.117,2321,2.117,2322,2.117,2323,2.117,2324,2.117,2325,2.117,2326,3.388,2327,1.592,2328,1.794,2329,1.794,2330,1.794,2331,2.117,2332,4.842,2333,2.117,2334,2.117,2335,2.117,2336,2.117,2337,2.117,2338,2.117,2339,2.117,2340,2.117,2341,3.388,2342,2.117,2343,2.117,2344,2.117,2345,2.117,2346,1.932,2347,2.117,2348,2.117,2349,2.117,2350,2.117,2351,2.117,2352,2.117,2353,2.117,2354,2.117,2355,2.117,2356,4.236,2357,3.388,2358,3.388,2359,2.117,2360,2.117,2361,1.932,2362,2.117,2363,2.117,2364,2.117,2365,2.117,2366,2.117,2367,3.388,2368,5.296,2369,2.117,2370,2.117,2371,3.388,2372,3.388,2373,2.117,2374,3.388,2375,2.117,2376,3.388,2377,3.388,2378,2.117,2379,2.117,2380,2.117,2381,4.236,2382,2.117,2383,2.117]],["title/classes/ODataEnumType.html",[307,0.346,2384,3.554]],["body/classes/ODataEnumType.html",[3,0.068,4,0.068,5,0.068,6,0.112,8,0.051,9,0.507,10,0.227,25,1.732,26,0.141,27,0.009,31,0.572,34,0.395,37,0.059,45,1.898,51,3.44,60,1.125,62,1.143,94,0.229,141,0.979,159,0.479,202,2.652,209,0.798,210,2.781,216,3.505,218,0.556,222,2.058,224,1.557,225,3.289,229,2.809,230,1.11,231,3.606,232,3.606,236,2.603,239,0.968,247,1.487,249,0.547,254,0.175,259,2.28,263,2.483,269,1.965,271,3.773,281,3.47,283,3.344,284,2.735,294,0.832,301,0.229,305,0.005,306,0.005,307,0.31,309,0.173,311,0.755,316,0.311,319,1.08,350,1.733,385,0.173,576,2.604,586,1.115,720,3.003,721,1.962,802,3.385,913,4.944,1048,3.853,1161,2.775,1236,3.23,1238,3.231,1239,3.231,1240,2.689,1242,2.523,1243,2.986,1244,2.19,1245,3.638,1247,3.724,1248,3.103,1249,3.103,1250,3.232,1251,2.19,1252,2.19,1254,2.689,1255,1.781,1256,2.19,1263,1.868,1749,4.481,1767,3.604,1844,5.786,1845,3.753,1846,3.932,1847,3.932,1848,3.534,1849,3.919,1850,4.714,1856,2.957,1857,2.957,1858,2.381,1860,4.318,1861,2.624,1863,3.231,1865,4.944,1866,4.944,1867,4.944,1869,4.944,1870,4.944,1872,3.231,1874,4.944,1875,4.19,1876,2.775,1877,2.957,1878,2.775,1879,2.775,1880,2.957,1881,2.775,1882,2.107,1883,2.957,1884,2.28,1885,2.957,1886,1.898,1887,2.494,1888,2.494,1889,2.19,1890,2.494,1891,2.381,1892,2.494,1893,2.494,1894,2.494,1895,2.775,1896,2.957,1897,2.624,1898,2.775,1899,2.381,1900,2.381,1901,2.19,1908,2.624,1909,3.489,1910,3.489,1914,3.753,1915,3.753,1916,3.489,1917,2.624,1918,2.624,1919,2.624,1939,4.263,2384,4.512,2385,8.651,2386,4.944,2387,4.944,2388,4.944,2389,3.951,2390,3.951,2391,3.489,2392,3.951,2393,5.599,2394,3.951,2395,5.599,2396,4.512,2397,3.489,2398,5.588,2399,4.512,2400,3.951,2401,5.701,2402,4.512,2403,4.512,2404,4.512,2405,3.951,2406,3.951,2407,4.512,2408,3.951,2409,3.184,2410,3.184,2411,3.951,2412,3.951,2413,3.951,2414,3.951,2415,3.951]],["title/classes/ODataEnumTypeFieldParser.html",[307,0.346,2398,3.3]],["body/classes/ODataEnumTypeFieldParser.html",[3,0.076,4,0.076,5,0.076,6,0.101,8,0.058,9,0.549,10,0.191,26,0.132,27,0.009,31,0.448,34,0.415,37,0.091,49,1.039,51,2.435,57,1.671,60,1.086,62,1.059,94,0.238,141,1.14,159,0.538,202,1.445,209,0.866,216,3.582,218,0.687,222,2.054,224,1.266,225,2.065,229,2.636,230,0.952,231,2.065,232,2.065,236,2.065,237,3.123,242,1.111,247,1.015,249,1.19,254,0.172,257,1.941,263,2.611,267,2.775,268,1.582,269,2.131,270,2.461,271,3.239,280,4.124,281,3.356,282,2.562,283,3.123,284,1.976,285,4.124,287,2.824,294,0.886,301,0.2,305,0.006,306,0.006,307,0.477,309,0.194,311,0.819,316,0.284,319,0.919,325,1.281,339,2.252,347,1.885,350,1.088,372,2.75,376,1.222,384,1.139,385,0.194,387,1.558,390,2.546,530,2.245,576,2.145,586,0.663,607,3.968,645,3.573,675,2.131,721,2.205,775,3.578,802,3.496,1048,2.065,1164,3.559,1179,3.505,1236,4.09,1238,3.505,1239,3.505,1240,2.132,1243,3.239,1244,2.461,1245,4.007,1247,3.324,1248,3.365,1249,3.365,1250,2.369,1251,2.461,1252,2.461,1254,2.916,1255,2.001,1256,2.461,1263,1.481,1286,2.368,1312,3.123,1386,2.368,1477,2.368,1636,2.368,1845,2.562,1849,3.659,1858,2.676,1863,2.562,1872,2.562,1875,4.544,1882,2.368,1884,3.505,1886,2.132,1889,2.461,1899,2.676,1900,2.676,1901,2.461,1914,3.505,1915,3.505,1939,2.676,1947,4.941,1964,2.803,1965,2.803,1971,2.948,1972,2.948,1973,2.803,2099,2.948,2179,2.676,2180,3.322,2191,3.322,2209,3.322,2272,3.322,2288,3.118,2305,4.544,2318,3.322,2327,2.948,2328,3.322,2329,3.322,2330,3.322,2396,3.578,2398,5.83,2399,3.578,2401,4.894,2402,3.578,2403,3.578,2404,3.578,2407,3.578,2409,5.577,2410,3.578,2416,6.879,2417,6.072,2418,4.44,2419,3.322,2420,3.92,2421,6.57,2422,3.92,2423,3.92,2424,3.92,2425,3.92,2426,3.92,2427,3.92,2428,3.92,2429,5.362,2430,3.92,2431,3.92,2432,6.57,2433,5.362,2434,3.92,2435,3.92,2436,3.92,2437,6.111,2438,3.92,2439,3.92,2440,3.92,2441,3.92,2442,3.92,2443,3.92,2444,3.92,2445,3.92,2446,3.92,2447,3.92,2448,5.362]],["title/classes/ODataEnumTypeParser.html",[307,0.346,1939,2.658]],["body/classes/ODataEnumTypeParser.html",[3,0.064,4,0.064,5,0.064,6,0.116,8,0.049,9,0.487,10,0.228,25,1.701,26,0.138,27,0.009,31,0.509,34,0.385,37,0.081,49,1.476,51,2.529,57,1.482,60,1.09,62,1.119,94,0.237,141,1.175,159,0.454,202,1.218,209,0.847,216,3.673,218,0.626,222,2.004,224,1.122,225,2.933,229,2.695,230,0.845,231,2.933,232,2.933,236,2.504,237,3.244,239,0.916,242,1.03,247,1.442,249,1.186,254,0.174,257,1.636,263,2.214,267,3.146,268,1.794,269,1.89,270,2.073,271,3.68,280,2.984,281,3.486,282,3.641,283,3.549,284,2.478,285,4.052,287,2.504,294,0.883,301,0.224,305,0.005,306,0.005,307,0.423,309,0.164,311,0.726,316,0.31,319,1.032,325,1.079,339,2.053,347,1.588,350,0.916,372,2.551,376,1.029,384,1.382,385,0.164,387,1.313,390,2.361,530,1.99,576,1.955,586,1.092,607,3.68,645,3.314,675,1.313,721,1.858,771,3.303,802,3.331,859,3.015,1048,1.74,1164,3.244,1179,3.108,1236,3.897,1238,3.108,1239,3.108,1240,2.586,1242,1.686,1243,2.872,1244,2.073,1245,3.244,1247,3.03,1248,2.984,1249,2.984,1250,2.461,1251,2.073,1252,2.073,1254,2.586,1255,1.686,1256,2.073,1263,1.797,1286,1.995,1312,2.769,1386,1.995,1477,2.872,1636,1.995,1845,3.641,1848,3.399,1858,2.254,1861,2.484,1863,3.108,1872,3.108,1875,4.029,1882,2.872,1884,2.159,1886,1.797,1889,2.073,1899,2.254,1900,2.254,1901,2.073,1914,3.108,1915,3.108,1939,3.245,1947,4.582,1964,2.362,1965,2.362,1971,2.484,1972,2.484,1973,2.362,2099,2.484,2179,2.254,2180,2.799,2191,2.799,2209,4.721,2272,4.721,2288,2.628,2305,4.029,2318,2.799,2327,2.484,2328,2.799,2329,2.799,2330,2.799,2386,4.754,2387,4.754,2388,4.754,2391,3.303,2396,4.339,2397,3.303,2398,5.872,2399,4.339,2401,5.561,2402,4.339,2403,4.339,2404,4.339,2407,4.339,2409,5.084,2410,3.015,2416,7.891,2419,2.799,2420,3.303,2421,6.093,2422,3.303,2423,3.303,2424,3.303,2425,3.303,2426,3.303,2427,4.754,2428,3.303,2429,5.57,2430,3.303,2431,3.303,2432,6.093,2433,4.754,2434,3.303,2435,3.303,2436,3.303,2437,5.57,2438,3.303,2439,3.303,2440,3.303,2441,3.303,2442,3.303,2443,3.303,2444,6.093,2445,3.303,2446,3.303,2447,3.303,2448,4.754,2449,5.385,2450,3.741,2451,3.741,2452,3.741,2453,3.741,2454,3.741,2455,3.741,2456,3.741,2457,3.741,2458,3.741,2459,3.741,2460,3.741,2461,3.741,2462,3.741,2463,3.741,2464,3.741]],["title/classes/ODataInMemoryCache.html",[307,0.346,2465,3.894]],["body/classes/ODataInMemoryCache.html",[3,0.079,4,0.079,5,0.079,6,0.081,8,0.06,9,0.563,10,0.229,25,1.935,26,0.139,27,0.009,31,0.459,34,0.347,35,3.573,37,0.069,41,3.845,49,1.767,50,3.904,60,0.855,94,0.227,141,0.861,202,2.295,209,0.6,218,0.618,227,3.677,229,1.929,230,1.326,239,1.728,245,4.407,247,1.727,249,1.092,254,0.174,286,1.268,301,0.232,305,0.006,306,0.007,307,0.361,309,0.201,311,0.839,316,0.311,319,1.057,339,2.026,385,0.272,560,4.452,574,2.368,576,2.787,596,2.212,1054,5.249,1183,2.907,1250,3.379,1263,1.537,1289,2.456,1372,2.287,1379,3.058,1395,5.227,1472,3.665,1502,2.552,1515,5.169,1556,5.096,1568,5.083,1617,5.338,1639,4.658,1721,6.033,1723,5.653,1724,5.712,1725,4.658,1726,5.017,1727,4.953,1728,4.658,1729,5.017,1730,4.658,1731,4.658,1732,5.017,1733,5.017,1734,5.017,1735,6.019,1738,3.711,1740,5.712,1741,6.59,1742,4.683,1743,3.446,1746,3.93,1747,3.711,1749,2.368,1750,3.234,1752,3.446,1753,5.277,1754,4.372,1756,3.711,1758,3.711,1760,3.711,1762,4.953,1763,3.446,1764,3.711,1765,3.446,1767,2.552,1768,3.711,1770,4.372,1772,3.446,1774,4.36,1775,5.653,1776,3.446,2465,5.497,2466,4.605,2467,4.605,2468,4.066,2469,4.066,2470,4.605,2471,4.605,2472,4.066,2473,4.066,2474,4.605,2475,4.066,2476,4.066,2477,4.066,2478,4.066,2479,4.066,2480,4.066,2481,4.066,2482,4.066,2483,4.066,2484,5.017,2485,3.711,2486,3.711,2487,3.711,2488,3.711]],["title/classes/ODataInStorageCache.html",[307,0.346,2489,3.554]],["body/classes/ODataInStorageCache.html",[0,1.034,3,0.072,4,0.072,5,0.072,6,0.103,8,0.055,9,0.531,10,0.226,16,2.096,25,1.903,26,0.139,27,0.009,31,0.433,34,0.327,35,3.513,37,0.063,41,3.862,49,1.703,50,4.009,60,0.817,94,0.232,141,0.932,152,3.236,202,2.193,209,0.565,218,0.582,227,3.615,228,2.096,229,1.817,230,1.299,233,2.096,239,1.651,242,1.087,245,4.326,247,1.811,249,1.124,254,0.176,286,1.194,294,0.54,301,0.229,305,0.006,306,0.007,307,0.331,309,0.185,311,0.791,316,0.312,319,1.054,339,1.909,364,1.614,385,0.256,390,2.006,560,4.254,574,2.171,576,2.757,596,2.027,1054,5.128,1183,2.664,1250,3.322,1263,1.957,1289,2.251,1372,2.096,1379,2.803,1395,5.176,1472,3.569,1502,2.339,1515,5.108,1556,4.992,1563,2.964,1568,4.967,1617,5.229,1639,6.198,1711,3.158,1712,3.158,1721,5.976,1723,5.043,1724,5.563,1725,4.388,1726,4.726,1727,5.563,1728,4.388,1729,4.726,1730,4.388,1731,4.388,1732,4.726,1733,4.726,1734,4.726,1735,5.908,1738,3.401,1740,5.563,1741,6.496,1742,4.836,1743,3.158,1746,2.664,1747,3.401,1749,2.171,1750,2.964,1752,3.158,1753,5.043,1754,4.119,1756,3.401,1758,3.401,1760,3.401,1762,4.733,1763,3.158,1764,3.401,1765,3.158,1767,2.339,1768,3.401,1770,4.119,1772,3.158,1774,4.203,1775,5.449,1776,3.158,1789,3.158,2468,3.727,2469,3.727,2472,3.727,2473,3.727,2475,3.727,2476,3.727,2477,3.727,2478,3.727,2479,3.727,2480,3.727,2481,3.727,2482,3.727,2483,3.727,2484,4.726,2485,3.401,2486,3.401,2487,3.401,2488,3.401,2489,4.726,2490,3.727,2491,7.815,2492,5.864,2493,4.221,2494,4.221,2495,5.178,2496,4.221,2497,4.221,2498,4.221,2499,4.221,2500,3.401,2501,3.727,2502,3.727,2503,3.727,2504,3.727,2505,5.178,2506,3.727,2507,3.727,2508,3.727,2509,3.727,2510,3.727,2511,3.727]],["title/modules/ODataModule.html",[2512,3.554,2513,3.098]],["body/modules/ODataModule.html",[0,1.54,3,0.108,4,0.108,5,0.108,6,0.099,10,0.161,26,0.114,27,0.009,34,0.498,37,0.128,62,1.163,159,0.762,167,3.629,209,0.787,242,0.939,252,4.056,254,0.121,294,0.972,301,0.161,305,0.007,306,0.007,307,0.493,311,0.848,316,0.217,319,0.742,572,3.425,1242,2.834,1467,5.959,1470,4.416,1530,4.175,1886,3.02,1986,5.047,1992,4.175,2513,5.736,2514,5.067,2515,5.551,2516,7.212,2517,5.959,2518,6.71,2519,6.287,2520,7.001,2521,6.287,2522,7.212,2523,7.212,2524,6.71,2525,5.067,2526,6.71,2527,5.551,2528,6.582,2529,6.71,2530,4.416,2531,5.551,2532,5.551,2533,6.71,2534,7.492,2535,5.551,2536,5.551,2537,5.551,2538,5.551,2539,5.067,2540,5.551,2541,5.551,2542,5.551,2543,5.067,2544,5.551,2545,5.551,2546,5.551,2547,5.551,2548,6.71,2549,5.551,2550,6.124,2551,4.705,2552,5.551,2553,5.067,2554,5.551,2555,5.551,2556,5.551,2557,5.551]],["title/classes/ODataParameterParser.html",[307,0.346,1926,3.554]],["body/classes/ODataParameterParser.html",[3,0.076,4,0.076,5,0.076,6,0.117,8,0.058,9,0.551,10,0.223,19,1.526,25,1.359,26,0.138,27,0.009,31,0.608,34,0.416,37,0.092,49,1.622,51,3.127,60,0.738,94,0.235,159,0.54,173,3.464,209,0.854,216,3.818,222,1.698,224,1.811,225,2.071,229,2.821,230,1.169,231,3.223,232,3.464,234,4.167,236,2.83,238,2.313,242,1.23,243,3.974,247,1.018,249,0.842,254,0.171,257,1.947,267,2.779,268,1.585,275,3.246,294,0.953,296,3.464,297,2.071,301,0.218,305,0.006,306,0.006,307,0.478,309,0.195,311,0.821,316,0.309,319,1.004,339,1.45,376,1.225,384,1.143,385,0.195,390,2.372,530,2.25,586,0.908,587,4.274,607,2.376,645,3.578,675,2.136,720,3.311,768,2.958,1050,2.212,1070,3.128,1179,4.001,1240,2.139,1263,1.486,1267,3.13,1477,2.376,1636,2.376,1845,4.3,1855,3.333,1861,2.958,1863,2.57,1872,3.512,1882,2.376,1908,5.651,1914,4.502,1915,4.502,1917,2.958,1918,2.958,1919,2.958,1921,3.932,1926,5.586,1933,3.932,1936,3.932,1938,6.578,1939,4.49,1940,5.575,1941,3.333,1942,3.932,1943,3.333,1944,3.932,1945,3.333,1946,3.932,1947,5.473,1948,3.842,1949,4.274,1950,3.932,1951,3.932,1952,3.333,1953,5.575,1954,3.333,1955,5.575,1956,3.333,1957,4.554,1958,5.575,1959,4.554,1960,3.333,1961,3.333,1962,3.128,1963,3.333,1964,2.812,1965,2.812,1966,5.373,1967,3.932,1968,6.121,1969,3.932,1970,3.932,1971,2.958,1972,2.958,1973,2.812,1974,6.578,1975,7.278,1976,5.373,1977,5.373,1978,3.932,1979,3.932,1980,3.932,1981,3.932,1982,3.932,1983,3.932,2558,6.085,2559,4.454,2560,4.454,2561,4.454,2562,4.454,2563,4.454,2564,4.454,2565,4.454,2566,4.454,2567,4.454,2568,4.454,2569,4.454,2570,4.454,2571,4.454,2572,4.454]],["title/classes/ODataPathSegments.html",[307,0.346,1554,3.098]],["body/classes/ODataPathSegments.html",[3,0.07,4,0.07,5,0.07,6,0.114,8,0.074,9,0.519,10,0.219,19,2.06,25,1.929,26,0.137,27,0.009,29,3.83,31,0.607,34,0.437,37,0.086,42,3.29,49,1.55,52,2.754,60,1.013,62,0.878,67,1.639,84,2.36,94,0.234,130,1.694,159,0.871,209,0.853,224,1.783,230,0.641,235,2.03,239,1.921,242,1.247,247,0.935,249,1.204,254,0.174,286,1.843,294,0.919,295,2.754,301,0.221,305,0.006,306,0.006,307,0.321,309,0.179,311,0.773,316,0.302,319,1.009,324,1.399,325,1.179,333,2.687,335,2.732,336,2.023,337,1.93,350,1.002,376,1.578,385,0.179,387,2.654,485,1.298,548,4.292,586,0.856,645,2.754,988,2.715,1050,2.03,1164,4.141,1179,2.36,1183,2.581,1247,3.182,1254,1.964,1386,3.059,1472,1.843,1494,2.581,1554,4.653,1607,5.681,1632,3.059,1750,4.028,1785,5.339,1793,4.622,1794,3.295,1795,3.295,2076,5.022,2179,2.464,2244,6.095,2245,6.095,2246,3.295,2247,5.339,2327,2.715,2573,3.61,2574,6.625,2575,5.849,2576,5.064,2577,6.332,2578,5.735,2579,5.735,2580,4.088,2581,4.088,2582,5.064,2583,6.623,2584,4.088,2585,4.088,2586,4.088,2587,4.088,2588,4.622,2589,4.088,2590,4.088,2591,4.088,2592,3.61,2593,4.088,2594,4.088,2595,4.088,2596,4.088,2597,3.61,2598,4.088,2599,4.088,2600,4.088,2601,4.088,2602,6.341,2603,3.059,2604,3.61,2605,4.088,2606,4.088,2607,4.088,2608,5.735,2609,5.735,2610,6.625,2611,4.088,2612,4.088,2613,4.088,2614,4.088,2615,4.088,2616,4.088,2617,5.735,2618,4.088,2619,4.088,2620,4.088,2621,4.088,2622,4.088,2623,4.088,2624,4.088,2625,4.088,2626,7.182,2627,4.088,2628,6.625,2629,4.088,2630,4.088,2631,4.088,2632,4.088,2633,4.088,2634,5.735,2635,6.625,2636,3.61,2637,3.61,2638,3.61,2639,3.61,2640,4.088,2641,4.088,2642,4.088,2643,5.735,2644,4.088,2645,4.088,2646,4.088,2647,4.088,2648,4.088,2649,4.088,2650,4.088,2651,4.088,2652,4.088,2653,4.088,2654,5.735,2655,4.088,2656,4.088,2657,4.088,2658,5.735,2659,4.088,2660,4.088]],["title/classes/ODataPathSegmentsHandler.html",[307,0.346,2661,3.554]],["body/classes/ODataPathSegmentsHandler.html",[3,0.101,4,0.101,5,0.101,6,0.116,8,0.076,10,0.187,26,0.119,27,0.009,34,0.462,37,0.11,52,2.82,55,3.146,56,3.98,57,2.28,58,4.42,60,1.079,62,1.268,63,2.908,94,0.187,130,1.734,159,0.884,209,0.885,230,1.143,249,1.218,254,0.152,295,3.5,301,0.187,305,0.007,306,0.007,307,0.572,309,0.257,311,0.983,316,0.307,319,1.039,325,1.693,385,0.257,524,2.229,586,0.876,1376,5.118,1472,2.646,1554,5.82,1607,5.262,1993,3.899,2076,5.766,2576,5.184,2577,5.453,2583,4.731,2588,5.872,2603,4.393,2661,5.872,2662,5.184,2663,5.871,2664,5.871,2665,5.871,2666,5.871,2667,5.871,2668,5.871,2669,5.871,2670,5.871,2671,5.184,2672,5.184,2673,6.434,2674,5.184,2675,6.434,2676,5.184,2677,6.997,2678,5.184,2679,5.184,2680,5.184,2681,5.184,2682,6.997,2683,5.184,2684,5.184,2685,5.184,2686,5.184,2687,5.184,2688,5.184,2689,5.184,2690,5.184,2691,5.184,2692,5.184]],["title/classes/ODataPropertyAnnotations.html",[307,0.346,1313,2.929]],["body/classes/ODataPropertyAnnotations.html",[3,0.08,4,0.08,5,0.08,6,0.06,8,0.06,9,0.642,10,0.195,14,1.976,25,1.823,26,0.135,27,0.009,30,2.165,32,3.644,34,0.35,37,0.114,48,1.379,49,1.659,54,3.42,55,1.768,57,1.281,61,1.867,71,2.036,72,2.098,73,2.236,94,0.225,150,3.012,152,3.918,156,2.352,159,0.565,173,3.298,209,0.897,218,0.753,230,1.112,242,0.695,247,1.064,249,1.129,254,0.172,269,1.634,294,1.152,297,3.298,301,0.195,305,0.006,306,0.006,307,0.595,309,0.204,311,0.846,316,0.282,319,0.935,337,2.241,364,1.951,385,0.204,386,1.726,544,2.318,576,2.529,1097,4.093,1255,3.758,1261,3.959,1263,2.532,1282,6.269,1283,3.484,1284,4.379,1285,4.693,1286,3.345,1288,5.307,1289,2.483,1290,4.165,1293,3.484,1295,4.274,1297,5.927,1299,5.927,1301,4.693,1307,3.484,1308,3.484,1309,3.484,1310,3.484,1311,3.484,1312,2.394,1313,5.816,1314,6.105,1315,5.307,1316,5.307,1317,4.709,1318,5.418,1319,5.307,1320,5.307,1321,3.484,1322,5.63,1323,3.484,1324,3.484,1325,3.484,1326,3.484,1327,3.484,1328,3.484,1329,3.484,1330,4.693,1331,4.693,1332,3.484,1333,3.484,1334,3.484,1335,3.484,1336,3.484,1337,3.484,1338,3.484,1339,3.484,1340,3.484,1341,5.307,1342,3.484,1343,4.693,1344,5.63,1345,5.307,1346,3.484,1347,3.484,1348,3.484,1349,4.693,1350,6.105,1351,4.693,1352,4.693,1353,4.693,1354,3.484,1355,3.484,1356,3.484,1357,3.484,1358,3.484,1359,3.484,1360,5.307,1361,3.484,1362,4.693,1363,3.484,1364,3.484,1365,3.484,2010,3.752,2015,3.752,2016,3.752,2693,4.656,2694,4.656,2695,4.656]],["title/classes/ODataQueryOptionHandler.html",[307,0.346,2696,3.554]],["body/classes/ODataQueryOptionHandler.html",[3,0.043,4,0.043,5,0.043,6,0.109,8,0.089,10,0.205,25,1.103,26,0.125,27,0.009,28,2.533,29,3.755,31,0.552,34,0.364,37,0.06,49,1.659,60,1.135,62,1.118,64,2.902,65,2.989,66,2.998,67,2.741,68,2.7,69,3.646,70,3.081,71,3.271,72,3.372,73,3.594,74,3.115,94,0.223,96,3.115,123,3.115,130,1.811,141,1.057,159,0.482,202,2.856,209,0.875,229,1.531,233,2.453,234,1.244,235,4.412,239,0.973,246,3.726,247,1.621,249,1.057,250,2.296,254,0.165,268,1.401,294,0.994,301,0.205,304,2.372,305,0.004,306,0.004,307,0.312,309,0.109,311,0.536,315,1.687,316,0.288,319,1.038,324,0.857,325,0.722,327,2.444,328,1.095,336,1.583,350,0.973,364,2.17,369,1.095,372,2.266,376,1.093,385,0.174,524,0.951,567,5.115,582,3.508,584,3.516,586,0.593,594,3.202,606,2.508,623,4.54,624,2.639,627,2.639,628,2.639,648,5.945,649,4.821,659,1.431,663,3.202,759,5.255,961,4.801,966,3.202,973,4.315,974,2.639,975,4.315,976,2.639,977,4.54,978,2.791,980,2.973,981,2.973,982,2.973,993,2.973,1002,3.98,1019,3.202,1023,3.202,1025,3.202,1048,1.165,1187,2.212,1247,1.908,1250,2.766,1254,2.372,1263,1.648,1267,3.354,1372,4.392,1386,2.119,1389,6.261,1408,4.36,1687,4.881,1740,5.363,1746,4.118,1749,4.055,1767,3.115,1774,2.293,1886,3.133,2179,3.387,2327,2.639,2346,2.019,2550,2.019,2582,3.508,2696,6.922,2697,2.505,2698,5.621,2699,3.973,2700,3.973,2701,6.449,2702,6.523,2703,6.129,2704,2.505,2705,2.505,2706,2.505,2707,3.973,2708,2.505,2709,3.973,2710,2.505,2711,4.963,2712,8.721,2713,3.973,2714,2.505,2715,2.505,2716,2.505,2717,3.973,2718,2.505,2719,2.505,2720,3.973,2721,6.129,2722,2.505,2723,3.973,2724,2.505,2725,5.621,2726,3.973,2727,3.973,2728,2.505,2729,3.973,2730,2.505,2731,3.973,2732,2.505,2733,3.973,2734,2.505,2735,2.505,2736,3.973,2737,3.973,2738,2.505,2739,3.973,2740,2.505,2741,2.212,2742,2.505,2743,2.212,2744,2.019,2745,3.202,2746,3.202,2747,4.938,2748,6.129,2749,2.505,2750,2.505,2751,5.621,2752,4.938,2753,2.505,2754,2.505,2755,3.973,2756,2.505,2757,2.505,2758,3.973,2759,2.505,2760,3.973,2761,2.505,2762,2.505,2763,2.505,2764,2.505,2765,2.505,2766,2.505,2767,2.505,2768,2.505,2769,7.304,2770,2.505,2771,2.505,2772,4.938,2773,2.505,2774,3.973,2775,2.505,2776,2.505,2777,2.505,2778,2.505,2779,2.505,2780,2.505,2781,2.505,2782,2.505,2783,3.973,2784,4.938,2785,4.938,2786,4.938,2787,4.938,2788,2.505,2789,3.973,2790,3.973,2791,3.973,2792,2.505,2793,2.505,2794,2.505,2795,7.636,2796,7.636,2797,6.523,2798,7.636,2799,2.505,2800,2.505,2801,2.505,2802,2.505,2803,2.505,2804,2.505,2805,2.505,2806,3.508,2807,2.505,2808,2.505,2809,3.973,2810,2.505,2811,3.973,2812,2.505,2813,3.973,2814,2.505,2815,2.505,2816,2.505,2817,3.973,2818,2.505,2819,2.505,2820,2.505,2821,2.505,2822,2.505,2823,2.505,2824,2.505,2825,3.973,2826,2.505,2827,3.973,2828,2.505,2829,3.973,2830,2.505,2831,4.938,2832,2.505,2833,2.505,2834,2.505,2835,3.973,2836,2.505,2837,3.973,2838,2.505,2839,3.973,2840,2.505,2841,2.505,2842,2.505,2843,2.505,2844,2.505,2845,2.505,2846,2.505,2847,2.505,2848,6.129,2849,2.505,2850,2.505,2851,6.129,2852,2.505,2853,2.505,2854,6.129,2855,2.505,2856,4.938,2857,2.505,2858,2.505,2859,6.129,2860,2.505,2861,6.129,2862,2.505,2863,2.505,2864,6.129,2865,2.505,2866,2.505,2867,2.505]],["title/classes/ODataQueryOptions.html",[307,0.346,2746,3.554]],["body/classes/ODataQueryOptions.html",[3,0.075,4,0.075,5,0.075,6,0.115,8,0.057,9,0.542,10,0.214,19,1.502,25,1.786,26,0.135,27,0.009,28,4.025,29,2.619,31,0.506,34,0.457,37,0.09,60,1.058,61,1.746,64,2.908,65,2.995,66,2.322,67,2.959,68,2.091,69,3.654,70,3.087,71,1.903,72,1.962,73,2.091,75,2.413,94,0.217,130,2.362,141,0.948,159,0.727,209,0.825,224,1.786,229,2.123,235,2.162,239,1.468,242,0.65,246,3.191,247,1.566,249,0.829,254,0.165,286,1.7,294,0.877,295,2.878,301,0.22,305,0.006,306,0.006,307,0.342,309,0.19,311,0.808,316,0.303,319,1.011,324,1.49,325,1.256,326,1.903,327,1.349,330,1.383,332,2.343,333,2.65,335,2.825,336,2.18,337,1.983,364,2.521,372,1.609,376,1.649,385,0.19,485,1.383,567,4.483,569,4.069,586,1.023,606,4.885,623,3.979,627,3.979,628,3.979,629,3.058,631,2.624,633,3.058,634,3.058,635,3.611,648,4.549,649,2.749,759,2.624,961,4.208,973,3.782,975,3.782,977,3.979,980,4.483,981,4.483,982,4.483,983,4.828,984,4.828,985,4.828,986,4.828,1006,3.258,1263,2.668,1267,2.239,1746,3.782,1774,2.513,1949,3.058,2179,2.624,2361,3.509,2575,6.049,2592,3.844,2597,3.844,2602,5.29,2604,3.844,2636,3.844,2637,3.844,2638,3.844,2639,3.844,2696,3.509,2701,6.832,2744,3.509,2745,5.947,2746,5.521,2806,5.29,2868,3.844,2869,5.991,2870,7.379,2871,5.991,2872,5.991,2873,4.354,2874,4.354,2875,5.991,2876,6.236,2877,4.354,2878,5.991,2879,4.354,2880,4.354,2881,4.354,2882,5.991,2883,4.354,2884,4.354,2885,4.354,2886,4.354,2887,4.354,2888,4.354,2889,4.354,2890,4.354,2891,4.354,2892,5.991,2893,5.991,2894,5.991,2895,4.354,2896,4.354,2897,4.354,2898,6.85,2899,5.991,2900,4.354,2901,5.991,2902,4.354,2903,4.354,2904,4.354,2905,4.354,2906,4.354,2907,4.354,2908,4.354,2909,4.354,2910,4.354,2911,4.354,2912,4.354,2913,4.354,2914,4.354,2915,4.354,2916,4.354,2917,4.354,2918,4.354,2919,5.991,2920,4.354,2921,4.354,2922,4.354,2923,4.354,2924,5.991,2925,5.991,2926,5.991,2927,5.991,2928,5.991,2929,4.354,2930,4.354]],["title/classes/ODataReferential.html",[307,0.346,2188,3.554]],["body/classes/ODataReferential.html",[3,0.041,4,0.041,5,0.041,6,0.071,8,0.031,9,0.496,10,0.062,14,1.018,25,0.858,26,0.13,27,0.009,30,1.116,31,0.624,34,0.375,37,0.09,49,1.497,51,1.539,57,1.761,60,1.04,64,1.018,65,1.679,67,2.199,76,3.547,87,1.385,94,0.23,108,1.974,109,1.234,110,1.974,132,0.821,133,0.821,141,0.83,150,2.305,157,0.962,159,0.582,173,1.116,177,1.28,202,2.344,209,0.867,216,3.63,218,0.381,221,3.04,222,2.1,223,3.04,224,1.668,225,1.785,229,2.714,230,1.24,231,1.785,232,1.785,236,1.785,237,1.974,238,0.801,239,0.588,240,0.821,241,1.385,242,1.274,243,2.56,249,1.229,250,2.551,254,0.165,257,1.679,263,1.684,267,1.924,268,1.536,273,2.128,284,2.656,286,1.222,287,3.572,288,1.385,289,2.976,290,1.385,292,1.33,294,0.893,295,2.635,296,2.976,297,3.348,301,0.062,304,2.635,305,0.004,306,0.004,307,0.43,309,0.105,316,0.166,319,0.793,324,0.821,325,0.692,336,0.676,339,1.25,350,2.046,351,1.872,364,1.761,372,2.581,376,1.849,384,0.985,385,0.262,387,2.451,390,2.19,530,1.774,573,1.152,574,1.234,587,2.697,595,3.094,607,3.724,631,2.314,635,2.314,645,3.074,720,3.057,721,1.192,802,1.63,859,3.094,988,3.643,1048,3.76,1050,1.192,1070,1.685,1097,1.385,1164,3.456,1179,3.463,1181,1.934,1236,2.384,1242,2.704,1245,1.234,1247,1.844,1250,1.497,1254,1.844,1255,2.472,1263,1.601,1267,3.456,1284,1.385,1286,2.048,1295,2.314,1312,3.798,1317,1.593,1386,2.56,1406,1.795,1407,1.795,1565,1.795,1572,1.593,1632,2.873,1636,2.56,1687,3.592,1749,1.234,1774,2.216,1845,2.216,1849,1.446,1863,2.77,1872,2.77,1882,1.28,1884,1.385,1886,3.074,1887,1.515,1888,1.515,1889,2.66,1890,1.515,1891,1.446,1892,1.515,1893,1.515,1894,1.515,1901,1.33,1908,5.251,1914,3.463,1915,3.463,1917,1.593,1918,1.593,1919,1.593,1939,3.306,1940,6.248,1941,5.029,1943,3.592,1945,3.592,1947,4.782,1948,3.03,1949,2.697,1952,1.795,1953,2.873,1954,1.795,1955,1.795,1956,2.873,1957,2.873,1958,1.795,1959,3.592,1960,1.795,1961,1.795,1962,1.685,1963,4.105,1964,1.515,1965,1.515,1971,2.55,1972,1.593,1973,1.515,2099,3.187,2110,3.592,2173,3.868,2174,4.421,2177,4.844,2178,2.118,2179,1.446,2180,1.795,2181,3.094,2182,3.094,2183,6.661,2184,3.094,2185,4.421,2186,3.094,2187,2.118,2188,3.868,2189,2.118,2190,2.118,2191,1.795,2192,3.39,2193,2.118,2194,2.118,2195,2.118,2196,2.118,2197,5.298,2198,2.118,2199,5.298,2200,2.118,2201,2.118,2202,2.118,2203,3.39,2204,2.118,2205,2.118,2206,2.118,2207,2.118,2208,2.118,2209,2.873,2210,6.165,2211,2.118,2212,2.118,2213,2.118,2214,2.118,2215,2.118,2216,2.118,2217,2.118,2218,3.39,2219,3.39,2220,3.39,2221,3.39,2222,3.39,2223,3.094,2224,2.118,2225,3.39,2226,2.118,2227,2.118,2228,3.39,2229,2.118,2230,2.118,2231,2.118,2232,3.39,2233,2.118,2234,3.39,2235,3.39,2236,3.39,2237,3.39,2238,3.39,2239,3.39,2240,3.39,2241,5.651,2242,4.238,2243,2.118,2244,4.835,2245,4.835,2246,1.934,2247,3.868,2248,2.118,2249,2.118,2250,2.118,2251,2.118,2252,2.118,2253,2.118,2254,2.118,2255,2.118,2256,2.118,2257,2.118,2258,2.118,2259,2.118,2260,2.118,2261,2.118,2262,2.118,2263,2.118,2264,2.118,2265,7.5,2266,2.118,2267,2.118,2268,2.118,2269,2.118,2270,5.651,2271,2.118,2272,1.795,2273,3.39,2274,2.118,2275,3.39,2276,2.118,2277,2.118,2278,4.238,2279,2.118,2280,2.118,2281,2.118,2282,2.118,2283,2.118,2284,2.118,2285,2.118,2286,2.118,2287,2.118,2288,1.685,2289,1.934,2290,2.118,2291,2.118,2292,5.298,2293,2.118,2294,2.118,2295,2.118,2296,2.118,2297,2.118,2298,2.118,2299,2.118,2300,3.094,2301,2.118,2302,2.118,2303,5.934,2304,7.14,2305,5.838,2306,3.39,2307,3.39,2308,2.118,2309,4.844,2310,2.118,2311,2.118,2312,2.118,2313,2.118,2314,2.118,2315,2.118,2316,5.651,2317,2.118,2318,1.795,2319,2.118,2320,2.118,2321,2.118,2322,2.118,2323,2.118,2324,2.118,2325,2.118,2326,3.39,2327,1.593,2328,1.795,2329,1.795,2330,1.795,2331,2.118,2332,4.844,2333,2.118,2334,2.118,2335,2.118,2336,2.118,2337,2.118,2338,2.118,2339,2.118,2340,2.118,2341,3.39,2342,2.118,2343,2.118,2344,2.118,2345,2.118,2346,1.934,2347,2.118,2348,2.118,2349,2.118,2350,2.118,2351,2.118,2352,2.118,2353,2.118,2354,2.118,2355,2.118,2356,4.238,2357,3.39,2358,3.39,2359,2.118,2360,2.118,2361,1.934,2362,2.118,2363,2.118,2364,2.118,2365,2.118,2366,2.118,2367,3.39,2368,5.298,2369,2.118,2370,2.118,2371,3.39,2372,3.39,2373,2.118,2374,3.39,2375,2.118,2376,3.39,2377,3.39,2378,2.118,2379,2.118,2380,2.118,2381,4.238,2382,2.118,2383,2.118,2931,2.399]],["title/classes/ODataRequest.html",[307,0.346,1515,2.545]],["body/classes/ODataRequest.html",[1,1.89,3,0.058,4,0.058,5,0.058,6,0.118,8,0.044,9,0.455,10,0.208,11,2.79,12,4.255,14,3.129,15,3.758,16,3.661,19,2.066,20,3.453,24,3.904,25,1.124,26,0.132,27,0.009,28,3.175,29,2.888,31,0.6,34,0.425,37,0.051,41,3.541,42,2.971,43,3.932,49,2.041,53,1.819,54,1.537,57,1.938,60,0.854,61,1.367,64,1.448,65,1.491,67,1.367,70,1.537,71,1.491,72,1.537,94,0.228,130,1.007,141,0.472,159,0.725,202,1.11,203,1.968,205,1.89,208,1.968,209,0.831,228,3.787,229,1.854,233,2.971,235,1.694,242,1.138,249,1.125,250,2.341,254,0.142,257,2.201,269,1.197,272,3.28,294,0.436,301,0.129,304,2.417,305,0.005,306,0.005,307,0.268,309,0.149,311,0.679,316,0.312,319,0.831,325,0.984,350,1.233,364,1.938,376,2.319,385,0.149,560,4.17,572,2.696,653,4.572,659,1.813,744,3.541,988,2.265,1050,1.694,1164,3.791,1289,3.758,1312,4.025,1318,2.265,1371,2.748,1386,3.932,1395,4.066,1398,2.552,1427,3.011,1439,3.011,1443,3.011,1445,3.011,1465,4.517,1472,3.663,1474,4.896,1515,3.812,1528,5.323,1530,2.265,1534,5.706,1542,2.748,1555,5.706,1558,3.535,1571,5.832,1572,3.343,1605,4.477,1606,3.011,1619,2.552,1623,5.832,1626,6.51,1647,3.011,1650,3.011,1651,3.011,1662,6.51,2144,2.748,2932,3.41,2933,5.982,2934,5.982,2935,5.982,2936,5.982,2937,5.982,2938,5.982,2939,7.045,2940,6.605,2941,6.605,2942,6.605,2943,6.605,2944,5.982,2945,5.982,2946,5.982,2947,4.444,2948,5.033,2949,3.011,2950,3.41,2951,3.41,2952,3.41,2953,6.605,2954,3.41,2955,7.045,2956,7.045,2957,3.41,2958,3.41,2959,3.41,2960,6.605,2961,3.41,2962,3.41,2963,3.41,2964,3.41,2965,3.41,2966,3.41,2967,3.41,2968,3.41,2969,3.41,2970,3.41,2971,3.41,2972,3.41,2973,3.41,2974,3.41,2975,3.41,2976,3.41,2977,3.41,2978,3.41,2979,3.41,2980,3.41,2981,3.41,2982,3.41,2983,3.41,2984,3.41,2985,3.41,2986,3.41,2987,3.41,2988,3.41,2989,3.41,2990,3.41,2991,3.41,2992,3.41,2993,3.41,2994,5.033,2995,3.41,2996,5.982,2997,3.41,2998,3.011,2999,3.011,3000,3.011,3001,3.41,3002,3.41,3003,3.41,3004,3.41,3005,3.41,3006,7.045,3007,3.41,3008,6.605,3009,5.033,3010,3.41,3011,5.033,3012,3.41,3013,3.41,3014,3.41,3015,3.41,3016,3.41,3017,5.033,3018,6.605,3019,3.41,3020,5.982,3021,5.033,3022,5.982,3023,3.41,3024,5.033,3025,3.41,3026,3.41,3027,7.372,3028,3.41,3029,3.41,3030,3.41,3031,3.41,3032,3.41,3033,5.033,3034,3.41,3035,3.41,3036,3.41,3037,3.41,3038,3.41,3039,3.41,3040,3.41,3041,3.41,3042,3.41,3043,3.41,3044,5.033,3045,3.41,3046,3.41,3047,3.41,3048,3.41,3049,3.41,3050,3.41,3051,3.41,3052,3.41,3053,3.41,3054,3.41,3055,3.41,3056,3.41,3057,5.033,3058,3.41,3059,3.41,3060,3.41,3061,5.033,3062,3.41,3063,3.41,3064,3.41,3065,5.033,3066,3.41,3067,3.41,3068,3.41,3069,3.41,3070,3.41,3071,3.41,3072,3.41,3073,3.41,3074,6.605,3075,3.41,3076,3.41,3077,3.41,3078,3.41,3079,3.41,3080,3.41,3081,3.41,3082,3.41,3083,3.41,3084,3.41,3085,3.41,3086,3.41,3087,3.41,3088,3.41,3089,3.41,3090,3.41,3091,7.045,3092,3.41,3093,5.033,3094,5.033,3095,3.41,3096,3.41,3097,3.41,3098,3.41,3099,3.41,3100,3.41,3101,3.41,3102,3.41,3103,3.41,3104,3.41,3105,3.41,3106,3.41,3107,3.41]],["title/classes/ODataResponse.html",[307,0.346,1556,2.658]],["body/classes/ODataResponse.html",[3,0.066,4,0.066,5,0.066,6,0.115,8,0.05,9,0.495,10,0.217,14,2.712,16,3.811,23,1.901,25,1.558,26,0.131,27,0.009,34,0.471,37,0.058,38,3.159,39,2.209,40,2.209,49,1.996,57,2.296,60,1.012,94,0.211,141,0.757,152,3.794,159,0.664,209,0.813,218,0.543,227,1.624,228,4.305,229,2.667,230,1.36,233,3.811,242,1.345,245,4.387,249,1.062,254,0.148,269,2.447,272,4.144,286,1.42,294,1.011,295,1.838,301,0.189,305,0.005,306,0.005,307,0.3,309,0.167,311,0.738,316,0.306,319,0.996,336,1.964,364,2.438,376,1.053,385,0.167,572,3.458,600,3.379,631,2.306,635,2.306,653,3.811,659,1.971,744,4.007,1050,1.901,1250,1.493,1261,4.033,1263,2.132,1284,2.209,1289,3.408,1290,3.634,1313,3.634,1318,4.243,1322,3.634,1344,3.634,1371,4.411,1372,2.718,1386,3.408,1395,4.816,1398,2.864,1437,4.832,1465,4.559,1472,3.56,1499,5.149,1500,4.487,1501,5.149,1515,4.559,1528,4.411,1529,6.775,1530,2.541,1534,5.218,1536,3.379,1542,3.084,1552,3.379,1555,5.218,1556,4.624,1562,3.379,1568,3.687,1617,4.033,1618,4.832,1619,2.864,1692,5.641,1711,5.742,1712,5.742,1763,6.046,1838,4.411,2947,4.832,2949,3.379,2998,3.379,2999,3.379,3000,3.379,3108,3.827,3109,6.389,3110,6.389,3111,6.389,3112,6.389,3113,5.473,3114,6.389,3115,5.473,3116,3.827,3117,3.827,3118,5.619,3119,3.827,3120,3.827,3121,3.827,3122,3.827,3123,3.827,3124,5.473,3125,3.827,3126,3.827,3127,3.827,3128,3.827,3129,3.827,3130,3.827,3131,3.827,3132,3.827,3133,3.827,3134,3.827,3135,3.827,3136,3.827,3137,3.827,3138,3.827,3139,3.827,3140,5.473,3141,3.827,3142,3.827,3143,5.473,3144,5.473,3145,3.827,3146,3.827,3147,3.827,3148,3.827,3149,3.827,3150,3.827,3151,3.827,3152,3.827,3153,3.827,3154,3.827,3155,3.827,3156,3.827,3157,6.389,3158,3.827,3159,3.827,3160,3.827,3161,3.827,3162,6.389,3163,3.827,3164,3.827,3165,3.827,3166,3.379,3167,3.827,3168,3.827,3169,3.827,3170,3.827,3171,5.473,3172,3.827,3173,3.827,3174,3.827,3175,3.827,3176,5.473,3177,3.827,3178,3.827,3179,4.411,3180,3.827,3181,3.827,3182,4.832,3183,3.827,3184,3.827,3185,6.389,3186,3.827,3187,3.827,3188,6.389,3189,3.827,3190,3.827,3191,7.376,3192,6.389,3193,7.376,3194,3.827,3195,5.473,3196,5.473,3197,3.827,3198,6.389,3199,3.827,3200,6.775,3201,6.389,3202,6.389,3203,5.473,3204,3.827,3205,6.389,3206,3.827,3207,3.827,3208,3.827,3209,3.827,3210,3.827,3211,3.827,3212,3.827]],["title/classes/ODataResponseOptions.html",[307,0.346,3118,3.554]],["body/classes/ODataResponseOptions.html",[3,0.09,4,0.09,5,0.09,6,0.118,8,0.068,9,0.614,10,0.235,23,3.949,26,0.136,27,0.009,31,0.587,32,3.819,33,4.241,34,0.419,37,0.079,41,3.375,47,3.915,48,1.462,49,1.759,50,3.057,54,3.389,60,0.823,94,0.235,141,0.939,159,0.636,204,4.589,205,4.168,209,0.653,216,3.279,217,4.34,219,4.532,220,4.962,242,0.783,247,1.882,254,0.162,294,0.671,301,0.216,305,0.007,306,0.007,307,0.412,309,0.229,311,0.915,316,0.314,319,0.995,337,2.137,350,1.662,351,2.646,372,2.939,376,1.867,384,1.741,385,0.229,609,6.06,659,2.443,1049,4.226,1050,2.605,1146,5.467,1240,3.258,1242,2.364,1284,4.589,1372,2.605,1402,4.631,1406,5.077,1407,3.925,1432,4.631,1459,4.631,1565,5.077,1615,4.631,1816,4.226,2300,6.06,3118,6.06,3166,4.631,3179,6.918,3182,4.631,3213,5.244,3214,6.784,3215,6.784,3216,6.784,3217,6.784,3218,6.784,3219,6.784,3220,5.244,3221,5.244,3222,5.244,3223,5.244,3224,5.244,3225,5.244,3226,5.244,3227,6.784,3228,5.244,3229,6.784,3230,5.244,3231,6.784,3232,5.244,3233,6.784,3234,5.244,3235,6.784,3236,6.784,3237,5.244,3238,5.244,3239,5.244,3240,6.784,3241,6.784,3242,5.244,3243,5.244,3244,5.244,3245,5.244,3246,5.244,3247,5.244,3248,5.244,3249,5.244,3250,5.244,3251,5.244,3252,4.631,3253,5.244,3254,5.244,3255,5.244,3256,5.244,3257,5.244,3258,5.244,3259,5.244,3260,5.244,3261,5.244,3262,5.244,3263,5.244]],["title/classes/ODataSchema.html",[307,0.346,1850,2.784]],["body/classes/ODataSchema.html",[3,0.078,4,0.078,5,0.078,6,0.117,8,0.059,9,0.559,10,0.224,25,1.379,26,0.14,27,0.009,34,0.477,37,0.068,48,1.709,51,1.824,60,0.749,62,0.945,94,0.236,159,0.552,209,0.812,216,2.546,218,0.613,224,1.287,229,2.435,230,1.233,242,1.122,247,1.411,249,1.167,250,2.116,254,0.164,261,4.338,263,2.167,267,2.81,268,1.602,269,2.167,270,4.166,272,3.733,274,4.529,276,4.224,278,3.884,294,0.962,301,0.227,304,2.185,305,0.006,306,0.006,307,0.357,309,0.199,311,0.833,316,0.312,319,1.009,350,1.115,385,0.199,530,2.282,576,2.172,586,0.679,645,2.965,659,2.223,720,1.931,744,2.965,759,2.742,802,3.518,901,4.976,1236,4.025,1238,3.563,1239,3.563,1240,2.965,1242,3.541,1243,3.293,1244,2.522,1245,3.175,1247,3.61,1248,3.422,1249,3.422,1250,2.408,1251,2.522,1252,2.522,1254,2.965,1255,2.05,1256,2.522,1263,2.508,1372,2.26,1465,4.867,1534,6.064,1619,3.405,1842,6.057,1845,4.677,1850,3.898,1858,2.742,1860,3.021,1861,3.021,1899,2.742,1900,2.742,1901,2.522,1914,4.535,1915,4.535,1965,2.872,2062,5.648,2064,4.62,2223,3.667,2384,6.057,2743,6.637,3264,4.55,3265,6.174,3266,6.174,3267,6.174,3268,6.174,3269,6.174,3270,6.174,3271,4.55,3272,4.55,3273,4.55,3274,4.55,3275,4.55,3276,4.55,3277,4.55,3278,6.174,3279,7.516,3280,4.55,3281,6.174,3282,4.55,3283,6.174,3284,4.55,3285,6.174,3286,4.55,3287,6.174,3288,4.55,3289,4.55,3290,4.55,3291,4.55,3292,4.55,3293,4.55,3294,4.55,3295,4.55,3296,4.55,3297,4.55,3298,4.55,3299,4.55,3300,4.55,3301,4.55,3302,4.55,3303,4.55,3304,4.55,3305,4.55,3306,4.55,3307,4.55,3308,4.55,3309,4.55,3310,4.55,3311,7.008,3312,4.55,3313,6.174,3314,4.55,3315,4.55,3316,6.174,3317,6.174,3318,4.55,3319,6.174,3320,4.55,3321,4.55,3322,4.55,3323,4.55,3324,4.55,3325,4.55,3326,4.55,3327,4.55,3328,4.55]],["title/classes/ODataSchemaElement.html",[307,0.346,1844,2.929]],["body/classes/ODataSchemaElement.html",[3,0.081,4,0.081,5,0.081,6,0.113,8,0.061,9,0.573,10,0.218,25,1.706,26,0.142,27,0.009,31,0.657,34,0.426,37,0.071,45,3.044,60,0.867,62,0.97,94,0.235,159,0.574,177,2.523,202,2.592,209,0.83,210,4.07,218,0.629,230,0.994,239,1.159,247,1.081,249,0.654,254,0.17,262,3.38,263,2.938,267,2.541,268,1.82,269,2.509,301,0.221,305,0.006,306,0.006,307,0.371,309,0.207,311,0.855,316,0.305,319,1.08,325,1.364,339,1.539,350,2.111,376,1.301,385,0.277,387,2.509,390,1.618,576,2.215,586,0.706,659,2.282,720,3.611,802,3.658,1048,4.048,1236,4.07,1238,3.658,1239,3.658,1240,2.271,1242,2.856,1243,3.38,1244,2.621,1245,4.095,1247,3.824,1248,3.513,1249,3.513,1250,2.978,1251,2.621,1252,2.621,1254,3.044,1255,2.132,1256,2.621,1385,3.322,1465,4.125,1497,4.176,1636,2.523,1749,4.548,1767,4.542,1844,5.65,1846,4.451,1847,4.451,1848,4.001,1849,4.602,1850,5.174,1858,2.85,1860,5.443,1876,4.451,1878,4.451,1879,4.451,1881,4.451,1882,3.38,1884,3.658,1886,3.044,1887,4.001,1888,4.001,1889,3.513,1890,4.001,1891,3.819,1892,4.001,1893,4.001,1894,4.001,1895,3.322,1897,4.209,1898,4.451,1899,2.85,1900,2.85,1901,2.621,1911,5.596,1964,2.986,1973,2.986,2288,3.322,2289,3.812,3329,4.73,3330,6.338,3331,4.73,3332,4.73,3333,4.73,3334,4.73,3335,4.73,3336,4.73,3337,4.73,3338,4.73,3339,4.73,3340,4.73,3341,6.338,3342,4.73,3343,6.338]],["title/injectables/ODataServiceFactory.html",[2517,3.098,3344,3.894]],["body/injectables/ODataServiceFactory.html",[3,0.103,4,0.103,5,0.103,6,0.109,8,0.078,10,0.206,26,0.136,27,0.009,34,0.467,37,0.091,55,3.046,56,4.295,94,0.235,202,2.724,209,0.714,218,0.736,230,1.163,254,0.175,294,0.949,301,0.22,303,4.304,305,0.007,306,0.007,307,0.63,311,1,316,0.277,319,0.875,385,0.264,524,2.292,586,1.107,744,4.328,759,5.176,1250,2.892,1312,4.304,1465,4.83,1466,5.332,1467,5.878,1468,8.007,1470,5.636,1605,6.262,1886,4.019,2092,6.744,2517,5.208,2530,4.241,3344,6.547,3345,5.332,3346,6.039,3347,6.039,3348,6.039,3349,6.039,3350,8.368,3351,6.039,3352,6.039,3353,8.368,3354,6.744,3355,7.415]],["title/classes/ODataSingletonService.html",[307,0.346,3354,3.554]],["body/classes/ODataSingletonService.html",[3,0.088,4,0.088,5,0.088,6,0.102,8,0.067,10,0.215,14,3.56,19,1.678,26,0.135,27,0.009,34,0.44,35,3.572,36,2.245,37,0.077,48,1.741,56,4.16,94,0.172,202,2.819,209,0.76,218,0.664,227,3.348,229,2.852,242,0.999,247,1.174,254,0.161,286,1.363,293,4.841,296,3.9,301,0.227,303,4.313,305,0.007,306,0.007,307,0.403,309,0.225,311,0.902,316,0.299,319,1.008,364,2.17,386,2.308,576,2.535,586,1.221,659,2.41,744,4.4,1048,3.112,1097,4.553,1250,3.077,1286,4.363,1295,5.054,1372,3.324,1460,5.229,1462,5.008,1463,5.008,1464,5.008,1471,3.843,1472,3.85,1473,5.008,1474,5.57,1475,4.7,1477,3.57,1482,3.843,1483,5.008,1484,4.7,1490,3.843,1491,5.008,1492,4.7,1494,3.242,1500,3.607,1502,2.846,1558,5.229,1568,3.863,1572,5.432,1595,5.909,2068,6.121,2070,6.276,2073,6.357,2078,4.139,2079,4.139,2080,4.139,2083,4.139,2084,4.139,2086,4.139,2102,4.535,2104,5.909,2110,6.276,2115,4.535,2138,4.535,2142,4.535,2151,4.535,2153,4.535,3354,5.393,3356,5.136,3357,6.692,3358,6.692,3359,7.445,3360,5.136,3361,7.445,3362,5.136,3363,5.136,3364,5.136,3365,5.136,3366,5.136,3367,5.136,3368,5.136,3369,5.136,3370,6.692]],["title/classes/Operator.html",[307,0.346,480,1.928]],["body/classes/Operator.html",[0,1.404,3,0.044,4,0.044,5,0.044,6,0.086,8,0.034,10,0.105,19,0.65,25,0.912,26,0.118,27,0.009,31,0.545,34,0.32,37,0.133,46,3.074,60,0.695,62,1.06,94,0.231,130,2.348,141,0.699,159,0.495,209,0.898,218,0.502,222,1,224,1.897,230,1.289,242,0.931,249,0.916,254,0.133,268,1.641,284,0.844,286,1.504,294,1.178,301,0.105,305,0.004,306,0.004,307,0.655,308,2.209,309,0.113,310,1.134,311,0.551,314,1.169,315,4.016,316,0.215,318,4.033,319,0.596,320,1.169,322,1.169,324,0.887,325,0.748,326,2.2,327,1.266,328,1.134,329,4.085,330,2.2,331,2.572,332,2.741,333,2.741,334,2.831,335,1.07,336,2.24,337,2.032,338,0.934,339,2.029,340,1.169,341,1.169,342,1.169,343,1.169,344,1.55,345,1.169,346,1.169,347,1.101,348,1.841,349,2.277,350,0.635,351,1.012,352,1.169,353,1.169,354,1.169,355,1.169,356,1.169,357,1.169,358,1.169,359,1.169,360,1.169,361,1.169,362,1.169,363,1.169,364,1.124,365,1.169,366,1.169,367,1.169,368,1.169,369,1.134,370,1.169,371,1.169,372,2.85,373,2.809,374,1.169,375,1.169,376,0.714,377,1.169,378,1.169,379,1.169,380,1.841,381,1.134,382,1.169,383,1.134,384,1.599,385,0.251,386,2.08,387,0.91,388,2.011,389,2.433,390,1.397,391,2.984,392,2.277,393,3.628,394,2.277,395,2.277,396,2.277,397,1.841,398,1.169,399,2.277,400,1.169,401,2.209,402,1.169,403,1.169,404,1.169,405,1.169,406,1.169,407,1.169,408,1.169,409,1.169,410,1.169,411,1.169,412,1.169,413,1.169,414,1.169,415,1.51,416,1.169,417,1.169,418,2.209,419,1.169,420,1.169,421,1.169,422,1.169,423,2.209,424,1.169,425,1.841,426,1.169,427,1.169,428,1.169,429,1.169,430,1.169,431,1.169,432,1.169,433,2.209,434,1.169,435,1.169,436,1.169,437,1.169,438,1.169,439,1.169,440,1.169,441,1.169,442,1.169,443,1.169,444,1.169,445,1.169,446,1.169,447,1.169,448,1.169,449,1.169,450,1.169,451,1.169,452,1.169,453,1.169,454,1.169,455,1.169,456,1.169,457,1.169,458,1.169,459,1.169,460,1.169,461,1.169,462,1.169,463,1.169,464,1.169,465,2.209,466,1.169,467,1.169,468,1.169,469,1.169,470,2.209,471,1.169,472,1.169,473,1.169,474,1.169,475,1.169,476,1.169,477,2.209,478,1.169,479,1.169,480,2.895,481,2.984,482,2.809,483,1.169,484,1.169,485,0.824,486,1.169,487,1.169,488,2.209,489,1.169,490,1.169,491,1.169,492,1.169,493,1.169,494,1.169,495,1.169,496,1.169,497,1.169,498,1.169,499,1.169,500,1.169,501,1.169,502,1.169,503,1.169,504,1.169,505,1.169,506,1.169,507,1.169,508,1.169,509,1.169,510,1.169,511,2.209,512,1.169,513,1.169,514,1.169,515,1.169,516,1.169,517,1.169,518,1.169,519,1.169,520,1.169,521,1.169,522,1.169,523,1.684,524,0.985,525,1.786,526,1.169,527,1.169,528,1.169,529,2.209,530,1.867,531,1.169,532,1.169,533,1.169,534,2.209,535,1.169,536,1.169,537,1.169,538,1.169,539,2.895,540,1.169,541,1.134,542,2.895,543,1.169,544,0.959,545,2.583,546,1.169,547,0.865,589,1.169,659,1.471,1213,2.29,3371,2.593,3372,2.593,3373,2.593,3374,2.593,3375,2.593]],["title/classes/OrderByExpression.html",[307,0.346,973,2.784]],["body/classes/OrderByExpression.html",[3,0.089,4,0.089,5,0.089,6,0.109,8,0.067,9,0.609,10,0.216,25,1.768,26,0.136,27,0.009,31,0.497,34,0.441,37,0.112,49,1.749,60,0.628,62,0.793,70,3.369,94,0.21,157,2.077,159,0.628,209,0.852,218,0.668,222,1.939,224,1.828,230,1.173,239,1.269,246,3.083,247,1.184,254,0.162,281,2.625,294,0.957,301,0.22,305,0.007,306,0.007,307,0.528,309,0.226,311,0.908,316,0.308,319,1.035,326,2.374,327,2.317,330,2.756,331,2.737,332,2.67,333,2.67,334,2.736,336,2.229,337,2.205,338,2.424,384,1.329,385,0.327,386,2.178,388,1.818,415,2.763,485,1.645,547,1.728,569,4.356,570,4.249,571,4.249,572,3.369,573,4.168,574,2.664,576,2.606,577,3.44,579,3.122,584,4.218,586,0.773,589,2.335,591,3.44,592,3.44,593,3.638,596,2.488,599,2.871,602,2.763,603,2.871,605,3.122,614,4.056,626,3.44,636,3.44,653,2.573,654,4.469,655,2.871,656,2.99,973,5.802,974,4.469,1019,4.175,1020,4.574,3376,4.175,3377,6.73,3378,6.73,3379,5.18,3380,5.18,3381,5.942,3382,5.18,3383,5.18,3384,5.942,3385,5.18,3386,5.18,3387,5.18,3388,5.424,3389,5.942,3390,5.942,3391,5.942,3392,6.601,3393,4.574,3394,5.036,3395,5.942]],["title/classes/OrderByField.html",[307,0.346,3388,3.554]],["body/classes/OrderByField.html",[3,0.096,4,0.096,5,0.096,6,0.111,8,0.073,10,0.181,25,1.578,26,0.129,27,0.009,31,0.521,34,0.454,37,0.117,49,1.307,70,2.518,94,0.215,157,2.24,159,0.678,209,0.863,218,0.555,222,1.994,224,1.854,230,1.108,246,2.913,249,0.978,254,0.136,281,2.755,294,0.991,301,0.181,305,0.007,306,0.007,307,0.554,309,0.244,311,0.953,316,0.29,319,0.914,326,2.46,327,2.19,330,2.798,331,2.802,332,2.724,333,2.724,334,2.791,336,2.293,337,2.257,338,2.544,384,1.813,385,0.339,386,1.944,388,1.961,485,1.774,547,1.864,569,3.509,572,2.518,573,3.91,584,3.984,589,2.518,596,2.684,599,3.097,602,2.98,603,3.097,605,3.367,614,3.367,626,3.71,636,3.71,653,2.775,654,4.691,655,3.097,656,3.225,659,2.544,660,4.503,973,5.656,974,4.691,3376,4.503,3381,4.934,3384,4.934,3388,6.561,3389,7.414,3390,7.414,3391,7.414,3392,6.841,3393,4.934,3394,5.287,3395,6.238,3396,5.587,3397,5.587,3398,5.587,3399,5.587,3400,5.587]],["title/interfaces/Parser.html",[0,1.08,224,0.919]],["body/interfaces/Parser.html",[0,1.905,1,2.922,2,1.868,3,0.062,4,0.062,5,0.062,6,0.088,7,2.097,8,0.047,9,0.329,10,0.159,11,2.014,12,2.097,13,3.177,14,1.542,15,3.309,16,2.618,17,2.189,18,3.177,19,1.707,20,2.097,21,3.177,22,2.189,23,3.082,24,2.014,26,0.136,27,0.009,28,2.376,29,2.305,30,2.451,31,0.672,32,3.269,33,3.631,34,0.203,35,2.559,36,1.588,37,0.136,38,2.097,39,2.097,40,2.097,41,3.382,42,1.804,43,2.812,44,3.043,45,1.745,46,1.275,47,3.043,48,0.706,49,0.85,50,1.637,51,2.488,52,1.745,53,2.812,54,3.068,55,2.001,56,2.532,57,1.707,58,2.812,59,2.922,60,1.05,61,2.729,62,0.807,63,1.85,64,2.238,65,2.305,66,2.812,67,2.114,68,2.532,69,2.812,70,2.376,71,2.305,72,2.376,73,2.532,74,2.922,75,2.922,76,2.014,77,3.177,78,4.297,79,3.177,80,2.294,81,4.759,82,2.294,83,2.294,84,2.097,85,3.177,86,4.563,87,4.172,88,2.189,89,3.177,90,2.294,91,2.294,92,3.917,93,2.294,94,0.237,95,3.177,96,3.773,97,2.294,98,2.294,99,3.177,100,2.294,101,3.177,102,2.189,103,3.177,104,2.189,105,3.177,106,2.189,107,3.177,108,3.501,109,1.868,110,3.501,111,3.328,112,3.328,113,3.177,114,2.294,115,2.294,116,2.294,117,2.189,118,3.177,119,2.294,120,2.294,121,2.189,122,3.177,123,2.922,124,2.294,125,2.294,126,2.294,127,2.294,128,3.177,129,2.294,130,1.833,131,2.294,132,2.123,133,2.123,134,3.739,135,3.177,136,3.328,137,3.328,138,2.294,139,3.328,140,4.297,141,1.169,142,2.294,143,2.294,144,3.328,145,2.189,146,3.177,147,2.294,148,2.294,149,2.294,150,1.745,151,3.177,152,2.532,153,3.177,154,3.177,155,3.177,156,1.634,157,2.488,158,3.739,159,0.639,160,3.177,161,4.543,162,5.332,163,5.332,164,5.332,165,2.189,166,3.177,167,3.929,168,2.189,169,3.177,170,3.328,171,2.189,172,3.177,173,3.928,174,3.328,175,2.189,176,3.177,177,2.812,178,2.189,179,3.177,180,3.328,181,2.189,182,3.177,183,3.328,184,2.189,185,3.177,186,3.739,187,3.177,188,4.759,189,2.189,190,3.177,191,2.189,192,3.177,193,2.189,194,3.177,195,2.189,196,3.177,197,2.189,198,3.177,199,2.189,200,3.177,201,2.189,202,1.716,203,3.043,204,3.043,205,2.922,206,2.189,207,2.189,208,2.097,209,0.508,210,1.804,211,2.189,212,1.938,213,2.294,214,2.294,215,2.294,216,3.484,217,2.097,218,0.616,219,2.189,220,2.189,221,4.571,222,0.89,223,3.439,224,1.507,225,3.361,226,3.917,227,2.238,228,2.618,229,2.556,230,1.134,231,3.361,232,3.165,233,1.804,234,3.082,235,1.804,236,2.451,237,1.868,238,2.07,239,1.52,240,1.804,241,3.043,242,0.542,243,1.938,244,2.294,245,1.868,246,2.174,247,0.831,248,2.294,249,0.503,250,1.689,251,2.014,252,1.804,253,2.189,254,0.162,255,2.294,256,2.294,257,1.588,258,2.294,259,2.097,260,2.189,261,3.043,262,4.249,263,1.275,264,2.097,265,2.097,266,2.097,267,1.457,268,1.205,269,2.73,270,2.014,271,2.812,272,1.804,273,2.922,274,2.189,275,2.812,276,2.189,277,3.043,278,2.014,279,3.043,280,2.922,281,2.056,282,2.097,283,1.868,284,1.716,285,2.014,286,0.74,287,1.689,288,2.097,289,1.689,290,2.097,291,2.294,292,2.014,293,2.097,294,0.794,295,1.745,296,1.689,297,1.689,298,1.689,299,2.097,300,2.189,301,0.175,302,2.014,303,1.868,304,1.745,305,0.005,306,0.005,311,0.711,316,0.214,319,0.732,586,0.926,1863,2.097,1872,2.097,3401,3.633,3402,3.633,3403,3.633]],["title/interfaces/ParserOptions.html",[0,1.08,216,1.819]],["body/interfaces/ParserOptions.html",[0,1.904,1,2.915,2,1.863,3,0.062,4,0.062,5,0.062,6,0.047,7,2.09,8,0.047,9,0.56,10,0.223,11,2.007,12,2.09,13,4.351,14,1.537,15,3.304,16,2.612,17,2.183,18,4.351,19,1.704,20,2.09,21,4.351,22,2.183,23,3.74,24,2.007,26,0.137,27,0.009,28,2.371,29,2.972,30,3.161,31,0.681,32,3.617,33,4.017,34,0.202,35,2.554,36,1.584,37,0.136,38,2.09,39,2.09,40,2.09,41,3.379,42,1.799,43,2.806,44,3.036,45,1.74,46,1.271,47,3.036,48,0.704,49,0.847,50,1.632,51,2.484,52,1.74,53,2.806,54,3.502,55,1.997,56,2.526,57,1.704,58,2.806,59,2.915,60,1.024,61,2.725,62,0.805,63,1.846,64,2.233,65,2.3,66,2.806,67,2.109,68,2.526,69,2.806,70,2.371,71,2.3,72,2.371,73,2.526,74,2.915,75,2.915,76,2.007,77,3.17,78,4.291,79,3.17,80,2.287,81,4.754,82,2.287,83,2.287,84,2.09,85,3.17,86,4.557,87,4.167,88,2.183,89,3.17,90,2.287,91,2.287,92,3.91,93,2.287,94,0.237,95,3.17,96,3.767,97,2.287,98,2.287,99,3.17,100,2.287,101,3.17,102,2.183,103,3.17,104,2.183,105,3.17,106,2.183,107,3.17,108,3.496,109,1.863,110,3.496,111,3.321,112,3.321,113,3.17,114,2.287,115,2.287,116,2.287,117,2.183,118,3.17,119,2.287,120,2.287,121,2.183,122,3.17,123,2.915,124,2.287,125,2.287,126,2.287,127,2.287,128,3.17,129,2.287,130,1.83,131,2.287,132,2.119,133,2.119,134,3.733,135,3.17,136,3.321,137,3.321,138,2.287,139,3.321,140,4.291,141,1.168,142,2.287,143,2.287,144,3.321,145,2.183,146,3.17,147,2.287,148,2.287,149,2.287,150,1.74,151,3.17,152,2.526,153,3.17,154,3.17,155,3.17,156,1.63,157,2.484,158,3.733,159,0.638,160,3.17,161,4.538,162,5.329,163,5.329,164,5.329,165,2.183,166,3.17,167,3.923,168,2.183,169,3.17,170,3.321,171,2.183,172,3.17,173,3.925,174,3.321,175,2.183,176,3.17,177,2.806,178,2.183,179,3.17,180,3.321,181,2.183,182,3.17,183,3.321,184,2.183,185,3.17,186,3.733,187,3.17,188,4.754,189,2.183,190,3.17,191,2.183,192,3.17,193,2.183,194,3.17,195,2.183,196,3.17,197,2.183,198,3.17,199,2.183,200,3.17,201,2.183,202,1.712,203,4.167,204,4.167,205,4.001,206,2.183,207,2.183,208,2.09,209,0.507,210,1.799,211,2.183,212,1.932,213,2.287,214,2.287,215,2.287,216,3.205,217,2.09,218,0.615,219,2.183,220,2.183,221,3.767,222,0.887,223,3.433,224,1.417,225,2.88,226,3.91,227,2.233,228,2.612,229,2.107,230,1.066,231,2.88,232,2.446,233,1.799,234,3.076,235,1.799,236,1.684,237,1.863,238,2.067,239,1.517,240,1.8,241,3.036,242,0.541,243,1.932,244,2.287,245,1.863,246,2.169,247,0.828,248,2.287,249,0.501,250,1.684,251,2.007,252,1.799,253,2.183,254,0.156,255,2.287,256,2.287,257,1.584,258,2.287,259,2.09,260,2.183,261,3.036,262,4.246,263,1.271,264,2.09,265,2.09,266,2.09,267,1.452,268,1.203,269,2.727,270,2.007,271,2.806,272,1.799,273,2.915,274,2.183,275,2.806,276,2.183,277,3.036,278,2.007,279,3.036,280,2.915,281,2.052,282,2.09,283,1.863,284,1.712,285,2.007,286,0.738,287,1.684,288,2.09,289,1.684,290,2.09,291,2.287,292,2.007,293,2.09,294,0.793,295,1.74,296,1.684,297,1.684,298,1.684,299,2.09,300,2.183,301,0.093,302,2.007,303,1.863,304,1.74,305,0.005,306,0.005]],["title/interfaces/PassedInitialConfig.html",[0,1.08,2520,3.554]],["body/interfaces/PassedInitialConfig.html",[0,1.535,2,3.222,3,0.107,4,0.107,5,0.107,6,0.081,8,0.081,9,0.686,10,0.217,26,0.123,27,0.009,34,0.498,37,0.127,62,1.161,159,0.76,167,3.616,209,0.785,242,0.935,252,4.432,294,0.97,305,0.007,306,0.007,307,0.492,572,2.824,1242,3.819,1467,5.728,1470,4.4,1530,4.161,1886,3.009,1986,5.036,1992,4.161,2513,5.326,2515,5.532,2516,6.696,2517,5.728,2518,5.532,2520,6.83,2522,6.696,2523,6.696,2524,6.696,2525,5.049,2526,6.696,2527,5.532,2528,6.572,2529,7.483,2530,4.4,2531,5.532,2532,5.532,2533,7.663,2534,7.483,2535,5.532,2536,5.532,2537,5.532,2538,5.532,2539,5.049,2540,5.532,2541,5.532,2542,5.532,2543,5.049,2544,5.532,2545,5.532,2546,5.532,2547,5.532,2548,6.696,2549,5.532,2550,6.111,2551,4.688,2552,5.532,2553,5.049,2554,5.532,2555,5.532,2556,5.532,2557,5.532]],["title/interfaces/Renderable.html",[0,1.08,330,1.401]],["body/interfaces/Renderable.html",[0,1.412,2,1.347,3,0.045,4,0.045,5,0.045,6,0.081,8,0.034,10,0.067,19,0.657,25,0.92,26,0.114,27,0.009,31,0.547,34,0.321,37,0.133,46,3.077,60,0.699,62,1.064,94,0.23,130,2.24,141,0.704,159,0.499,209,0.898,218,0.505,222,1.009,224,1.899,230,1.291,242,0.935,249,0.797,254,0.128,268,1.647,284,0.853,286,1.509,294,1.179,301,0.067,305,0.004,306,0.004,307,0.656,308,2.223,310,1.145,311,0.555,314,1.181,315,4.015,316,0.199,318,4.036,319,0.68,320,1.181,322,1.181,324,0.896,325,0.756,326,2.209,327,1.276,328,1.145,329,4.086,330,2.209,331,2.579,332,2.745,333,2.745,334,2.835,335,2.377,336,2.245,337,2.038,338,0.943,339,2.039,340,1.181,341,1.181,342,1.181,343,1.181,344,1.563,345,1.181,346,1.181,347,1.112,348,1.855,349,2.292,350,0.642,351,1.022,352,1.181,353,1.181,354,1.181,355,1.181,356,1.181,357,1.181,358,1.181,359,1.181,360,1.181,361,1.181,362,1.181,363,1.181,364,1.133,365,1.181,366,1.181,367,1.181,368,1.181,369,1.145,370,1.181,371,1.181,372,2.858,373,2.823,374,1.181,375,1.181,376,0.721,377,1.181,378,1.181,379,1.181,380,1.855,381,1.145,382,1.181,383,1.145,384,1.479,385,0.222,386,2.086,387,0.919,388,2.023,389,2.446,390,1.409,391,2.997,392,2.292,393,3.636,394,2.292,395,2.292,396,2.292,397,1.855,398,1.181,399,2.292,400,1.181,401,2.223,402,1.181,403,1.181,404,1.181,405,1.181,406,1.181,407,1.181,408,1.181,409,1.181,410,1.181,411,1.181,412,1.181,413,1.181,414,1.181,415,1.522,416,1.181,417,1.181,418,2.223,419,1.181,420,1.181,421,1.181,422,1.181,423,2.223,424,1.181,425,1.855,426,1.181,427,1.181,428,1.181,429,1.181,430,1.181,431,1.181,432,1.181,433,2.223,434,1.181,435,1.181,436,1.181,437,1.181,438,1.181,439,1.181,440,1.181,441,1.181,442,1.181,443,1.181,444,1.181,445,1.181,446,1.181,447,1.181,448,1.181,449,1.181,450,1.181,451,1.181,452,1.181,453,1.181,454,1.181,455,1.181,456,1.181,457,1.181,458,1.181,459,1.181,460,1.181,461,1.181,462,1.181,463,1.181,464,1.181,465,2.223,466,1.181,467,1.181,468,1.181,469,1.181,470,2.223,471,1.181,472,1.181,473,1.181,474,1.181,475,1.181,476,1.181,477,2.223,478,1.181,479,1.181,480,2.52,481,2.597,482,2.823,483,1.181,484,1.181,485,0.832,486,1.181,487,1.181,488,2.223,489,1.181,490,1.181,491,1.181,492,1.181,493,1.181,494,1.181,495,1.181,496,1.181,497,1.181,498,1.181,499,1.181,500,1.181,501,1.181,502,1.181,503,1.181,504,1.181,505,1.181,506,1.181,507,1.181,508,1.181,509,1.181,510,1.181,511,2.223,512,1.181,513,1.181,514,1.181,515,1.181,516,1.181,517,1.181,518,1.181,519,1.181,520,1.181,521,1.181,522,1.181,523,1.698,524,0.995,525,1.8,526,1.181,527,1.181,528,1.181,529,2.223,530,1.88,531,1.181,532,1.181,533,1.181,534,2.223,535,1.181,536,1.181,537,1.181,538,1.181,539,2.907,540,1.181,541,1.145,542,2.907,543,1.181,544,0.969,545,2.597,546,1.181,547,0.874,589,1.181,3404,2.62,3405,2.62,3406,2.62,3407,2.62]],["title/interfaces/ResponseJson.html",[0,1.08,2500,3.554]],["body/interfaces/ResponseJson.html",[0,1.424,2,2.99,3,0.1,4,0.1,5,0.1,6,0.075,8,0.075,9,0.655,16,4.101,25,1.618,26,0.132,27,0.009,34,0.404,37,0.087,41,3.769,50,3.829,94,0.233,141,1.143,152,3.789,202,2.568,209,0.56,218,0.577,227,3.074,228,4.101,233,4.101,242,1.233,249,1.092,254,0.163,294,0.744,305,0.007,306,0.007,307,0.456,319,0.686,364,2.384,385,0.254,390,2.478,596,2.792,1054,4.572,1263,1.94,1395,4.999,1472,3.264,1502,3.222,1515,4.553,1556,4.754,1563,4.083,1568,4.18,1617,4.572,1639,5.904,1711,6.179,1712,6.179,1721,4.81,1724,5.8,1727,5.087,1735,5.8,1742,3.861,1754,4.083,1770,4.083,1789,4.35,2484,5.837,2485,4.685,2486,4.685,2487,4.685,2488,4.685,2489,4.685,2490,5.133,2491,7.907,2495,5.133,2500,5.837,2501,5.133,2502,5.133,2503,5.133,2504,5.133,2505,6.395,2506,5.133,2507,5.133,2508,5.133,2509,5.133,2510,5.133,2511,5.133]],["title/interfaces/ResponseOptions.html",[0,1.08,217,2.545]],["body/interfaces/ResponseOptions.html",[0,1.92,1,2.976,2,1.917,3,0.064,4,0.064,5,0.064,6,0.048,7,2.151,8,0.048,9,0.57,10,0.177,11,2.066,12,2.151,13,3.236,14,1.582,15,3.358,16,2.667,17,2.246,18,3.236,19,1.727,20,2.151,21,3.236,22,2.246,23,3.127,24,2.066,26,0.136,27,0.009,28,2.42,29,2.348,30,2.497,31,0.673,32,3.308,33,3.674,34,0.208,35,2.596,36,1.63,37,0.136,38,2.151,39,2.151,40,2.151,41,3.405,42,1.851,43,2.864,44,3.1,45,1.79,46,1.308,47,3.976,48,0.725,49,0.872,50,1.68,51,2.524,52,1.79,53,2.864,54,3.105,55,2.039,56,2.579,57,1.732,58,2.864,59,2.976,60,1.029,61,2.762,62,0.822,63,1.885,64,2.28,65,2.348,66,2.864,67,2.153,68,2.579,69,2.864,70,2.42,71,2.348,72,2.42,73,2.579,74,2.976,75,2.976,76,2.066,77,3.236,78,4.349,79,3.236,80,2.353,81,4.801,82,2.353,83,2.353,84,2.151,85,3.236,86,4.609,87,4.214,88,2.246,89,3.236,90,2.353,91,2.353,92,3.974,93,2.353,94,0.238,95,3.236,96,3.818,97,2.353,98,2.353,99,3.236,100,2.353,101,3.236,102,2.246,103,3.236,104,2.246,105,3.236,106,2.246,107,3.236,108,3.543,109,1.917,110,3.543,111,3.39,112,3.39,113,3.236,114,2.353,115,2.353,116,2.353,117,2.246,118,3.236,119,2.353,120,2.353,121,2.246,122,3.236,123,2.976,124,2.353,125,2.353,126,2.353,127,2.353,128,3.236,129,2.353,130,1.86,131,2.353,132,2.154,133,2.154,134,3.794,135,3.236,136,3.39,137,3.39,138,2.353,139,3.39,140,4.349,141,1.194,142,2.353,143,2.353,144,3.39,145,2.246,146,3.236,147,2.353,148,2.353,149,2.353,150,1.79,151,3.236,152,2.579,153,3.236,154,3.236,155,3.236,156,1.665,157,2.524,158,3.794,159,0.651,160,3.236,161,4.583,162,5.359,163,5.359,164,5.359,165,2.246,166,3.236,167,3.976,168,2.246,169,3.236,170,3.39,171,2.246,172,3.236,173,3.947,174,3.39,175,2.246,176,3.236,177,2.864,178,2.246,179,3.236,180,3.39,181,2.246,182,3.236,183,3.39,184,2.246,185,3.236,186,3.794,187,3.236,188,4.801,189,2.246,190,3.236,191,2.246,192,3.236,193,2.246,194,3.236,195,2.246,196,3.236,197,2.246,198,3.236,199,2.246,200,3.236,201,2.246,202,1.748,203,3.1,204,3.1,205,2.976,206,2.246,207,2.246,208,2.151,209,0.517,210,1.851,211,2.246,212,1.988,213,2.353,214,2.353,215,2.353,216,3.233,217,3.1,218,0.684,219,4.151,220,4.151,221,3.818,222,0.913,223,3.489,224,1.436,225,2.927,226,3.974,227,2.28,228,2.667,229,2.135,230,1.081,231,2.927,232,2.497,233,1.851,234,3.127,235,1.851,236,1.733,237,1.917,238,2.101,239,1.542,240,1.837,241,3.1,242,0.556,243,1.988,244,2.353,245,1.917,246,2.215,247,0.852,248,2.353,249,0.516,250,1.733,251,2.066,252,1.851,253,2.246,254,0.157,255,2.353,256,2.353,257,1.63,258,2.353,259,2.151,260,2.246,261,3.1,262,4.279,263,1.308,264,2.151,265,2.151,266,2.151,267,1.495,268,1.228,269,2.751,270,2.066,271,2.864,272,1.851,273,2.976,274,2.246,275,2.864,276,2.246,277,3.1,278,2.066,279,3.1,280,2.976,281,2.095,282,2.151,283,1.917,284,1.748,285,2.066,286,0.759,287,1.733,288,2.151,289,1.733,290,2.151,291,2.353,292,2.066,293,2.151,294,0.806,295,1.79,296,1.733,297,1.733,298,1.733,299,2.151,300,2.246,301,0.096,302,2.066,303,1.917,304,1.79,305,0.005,306,0.005]],["title/classes/SearchExpression.html",[307,0.346,975,2.784]],["body/classes/SearchExpression.html",[3,0.074,4,0.074,5,0.074,6,0.113,8,0.056,9,0.54,10,0.214,25,1.645,26,0.136,27,0.009,31,0.604,34,0.431,37,0.111,49,1.979,60,0.893,62,0.663,68,3.282,94,0.205,157,1.737,159,0.724,209,0.856,218,0.593,224,1.764,230,0.68,239,1.061,242,0.647,246,2.818,247,0.99,249,0.6,254,0.16,263,2.096,281,2.329,294,1.022,301,0.217,305,0.006,306,0.006,307,0.469,309,0.189,311,0.805,316,0.309,319,1.036,325,1.25,326,2.17,327,2.118,330,2.647,331,2.577,332,2.536,333,2.536,334,2.599,336,2.176,337,2.076,350,1.061,376,2.026,384,1.112,385,0.261,386,1.643,387,1.521,388,1.521,389,1.839,415,2.526,485,1.376,523,1.787,524,1.645,547,1.446,569,4.202,570,3.77,571,4.314,572,3.079,573,4.286,574,2.228,576,2.475,577,2.877,579,4.812,584,3.972,586,0.891,589,1.953,591,2.877,592,2.877,596,2.081,599,2.401,602,3.185,603,2.401,614,2.611,654,3.965,655,4.425,656,2.501,975,5.875,976,3.965,1023,3.492,1040,4.812,1041,3.492,1164,2.228,1267,3.514,1563,3.043,2419,3.242,2876,5.935,3394,3.242,3408,3.492,3409,6.033,3410,6.033,3411,8.054,3412,7.699,3413,5.971,3414,6.969,3415,4.333,3416,4.333,3417,5.273,3418,4.333,3419,4.333,3420,4.333,3421,4.333,3422,5.273,3423,4.333,3424,5.273,3425,4.333,3426,4.333,3427,4.333,3428,4.333,3429,5.273,3430,4.333,3431,4.333,3432,4.812,3433,3.826,3434,3.826,3435,7.47,3436,6.82,3437,3.826,3438,5.273,3439,3.826,3440,3.826,3441,5.273,3442,5.273,3443,5.273,3444,5.273,3445,5.273,3446,3.826,3447,5.273,3448,3.826,3449,3.826,3450,3.826,3451,3.826,3452,3.826]],["title/classes/SearchTerm.html",[307,0.346,3432,3.554]],["body/classes/SearchTerm.html",[3,0.084,4,0.084,5,0.084,6,0.107,8,0.063,10,0.166,25,1.447,26,0.13,27,0.009,31,0.571,34,0.449,37,0.116,49,1.7,60,0.938,68,2.347,94,0.222,157,1.96,159,0.786,209,0.869,218,0.485,224,1.808,242,0.73,246,2.672,249,1.005,254,0.125,281,2.527,294,1.059,301,0.166,305,0.006,306,0.006,307,0.508,309,0.214,311,0.874,316,0.278,319,0.857,325,1.41,326,2.308,327,2.008,330,2.627,331,2.686,332,2.627,333,2.627,334,2.693,336,2.268,337,2.164,350,1.197,376,2.129,384,1.662,385,0.283,387,1.715,388,1.715,389,2.075,485,1.552,523,2.016,524,1.855,547,1.631,569,3.217,571,3.085,572,2.203,573,4.269,579,4.851,584,3.737,589,2.203,596,2.347,599,2.709,602,3.455,603,2.709,654,4.302,655,4.585,656,2.821,659,2.333,975,5.796,976,4.302,1040,5.221,1041,3.939,1164,2.513,1267,3.737,1563,3.433,2419,3.657,2876,3.939,3394,3.657,3408,3.939,3409,4.315,3410,4.315,3411,8.024,3412,7.567,3414,6.667,3417,4.315,3422,4.315,3424,4.315,3429,4.315,3432,6.235,3433,4.315,3434,4.315,3435,7.659,3436,7.108,3437,4.315,3438,5.72,3439,4.315,3440,4.315,3441,5.72,3442,5.72,3443,5.72,3444,5.72,3445,5.72,3446,4.315,3447,5.72,3448,4.315,3449,4.315,3450,4.315,3451,4.315,3452,4.315,3453,4.887,3454,4.887,3455,4.887,3456,4.887,3457,4.887,3458,4.887]],["title/classes/SegmentHandler.html",[307,0.346,2603,3.3]],["body/classes/SegmentHandler.html",[3,0.096,4,0.096,5,0.096,6,0.117,8,0.073,10,0.216,26,0.135,27,0.009,29,3.102,31,0.524,34,0.455,37,0.107,52,2.702,55,2.136,56,2.702,57,1.548,58,3.001,60,1.1,62,0.861,63,1.975,94,0.22,159,0.861,209,0.88,230,1.368,247,1.622,249,1.164,254,0.17,286,1.445,301,0.228,305,0.007,306,0.007,307,0.557,309,0.246,311,0.957,316,0.31,319,1.041,325,1.623,385,0.246,524,2.136,586,1.218,659,2.555,1376,4.984,1472,2.536,1554,4.984,1607,4.712,1993,3.737,2076,5.793,2577,6.107,2583,5.719,2588,4.535,2603,5.31,2661,4.535,2662,4.968,2671,4.968,2672,6.266,2673,6.266,2674,6.266,2675,6.266,2676,6.266,2677,6.863,2678,7.206,2679,4.968,2680,7.206,2681,6.266,2682,6.863,2683,7.206,2684,4.968,2685,7.206,2686,4.968,2687,4.968,2688,4.968,2689,4.968,2690,4.968,2691,4.968,2692,4.968,2741,4.968,3459,5.627,3460,5.627,3461,5.627,3462,5.627,3463,5.627,3464,5.627,3465,5.627,3466,5.627,3467,5.627,3468,5.627,3469,5.627]],["title/classes/SelectExpression.html",[307,0.346,977,2.929]],["body/classes/SelectExpression.html",[3,0.095,4,0.095,5,0.095,6,0.109,8,0.072,9,0.638,10,0.215,25,1.817,26,0.137,27,0.009,31,0.411,34,0.454,37,0.106,49,1.81,60,0.675,62,0.852,64,3.284,94,0.198,157,2.233,159,0.675,209,0.808,218,0.7,222,1.895,224,1.749,230,1.213,239,1.365,246,3.19,247,1.273,254,0.161,281,2.75,294,0.902,301,0.22,305,0.007,306,0.007,307,0.437,309,0.244,311,0.951,316,0.309,319,1.039,326,2.239,327,2.398,330,2.721,331,2.581,332,2.457,333,2.457,334,2.518,336,2.179,337,2.186,338,2.539,385,0.308,386,1.94,415,2.86,485,1.769,547,1.858,569,4.414,570,4.451,571,4.451,572,3.487,573,4.23,574,2.865,576,2.656,577,3.699,579,3.357,584,4.314,586,0.831,589,2.51,591,3.699,592,3.699,593,3.912,596,2.675,599,3.087,602,2.971,603,3.087,605,3.357,614,4.249,620,5.682,653,2.766,655,3.087,656,3.215,977,6.143,978,4.952,1025,4.489,1026,4.918,3470,4.918,3471,5.57,3472,5.57,3473,5.57,3474,5.57,3475,5.57,3476,5.57,3477,5.57]],["title/classes/StringAndCollectionFunctions.html",[307,0.346,401,1.928]],["body/classes/StringAndCollectionFunctions.html",[0,1.376,3,0.043,4,0.043,5,0.043,6,0.092,8,0.032,10,0.175,19,0.627,26,0.12,27,0.009,31,0.539,34,0.313,37,0.132,46,3.07,60,0.926,62,1.222,94,0.228,130,2.209,141,0.945,159,0.481,209,0.897,218,0.49,222,0.972,224,1.892,230,1.279,239,1.674,242,0.914,249,0.777,254,0.149,268,1.62,284,0.814,286,1.487,294,1.176,301,0.175,305,0.004,306,0.004,307,0.651,308,2.157,309,0.109,310,1.094,311,0.535,314,1.127,315,4.02,316,0.236,318,4.041,319,0.806,320,1.127,322,1.127,324,0.856,325,0.721,326,2.17,327,1.23,328,1.094,329,4.097,330,2.07,331,2.436,332,2.727,333,2.727,334,2.818,335,1.032,336,2.107,337,1.836,338,0.901,339,1.994,340,1.127,341,1.127,342,1.127,343,1.127,344,1.507,345,1.127,346,1.127,347,1.062,348,1.789,349,2.224,350,0.613,351,0.976,352,1.127,353,1.127,354,1.127,355,1.127,356,1.127,357,1.127,358,1.127,359,1.127,360,1.127,361,1.127,362,1.127,363,1.127,364,1.092,365,1.127,366,1.127,367,1.127,368,1.127,369,1.094,370,1.127,371,1.127,372,2.822,373,2.76,374,1.127,375,1.127,376,0.688,377,1.127,378,1.127,379,1.127,380,1.789,381,1.094,382,1.127,383,1.094,384,1.441,385,0.216,386,2.058,387,0.878,388,1.971,389,2.384,390,1.358,391,2.938,392,2.224,393,3.598,394,2.224,395,2.224,396,2.224,397,1.789,398,1.127,399,2.224,400,1.127,401,2.456,402,1.789,403,1.127,404,1.789,405,1.127,406,1.789,407,1.127,408,1.789,409,1.127,410,1.789,411,1.127,412,1.789,413,1.127,414,2.224,415,2.41,416,1.127,417,1.127,418,2.157,419,1.127,420,1.127,421,1.127,422,1.127,423,2.157,424,1.127,425,1.789,426,1.127,427,1.127,428,1.127,429,1.127,430,1.127,431,1.127,432,1.127,433,2.157,434,1.127,435,1.127,436,1.127,437,1.127,438,1.127,439,1.127,440,1.127,441,1.127,442,1.127,443,1.127,444,1.127,445,1.127,446,1.127,447,1.127,448,1.127,449,1.127,450,1.127,451,1.127,452,1.127,453,1.127,454,1.127,455,1.127,456,1.127,457,1.127,458,1.127,459,1.127,460,1.127,461,1.127,462,1.127,463,1.127,464,1.127,465,2.157,466,1.127,467,1.127,468,1.127,469,1.127,470,2.157,471,1.127,472,1.127,473,1.127,474,1.127,475,1.127,476,1.127,477,2.157,478,1.127,479,1.127,480,2.456,481,2.531,482,2.76,483,1.127,484,1.127,485,0.794,486,1.127,487,1.127,488,2.157,489,1.127,490,1.127,491,1.127,492,1.127,493,1.127,494,1.127,495,1.127,496,1.127,497,1.127,498,1.127,499,1.127,500,1.127,501,1.127,502,1.127,503,1.127,504,1.127,505,1.127,506,1.127,507,1.127,508,1.127,509,1.127,510,1.127,511,2.157,512,1.127,513,1.127,514,1.127,515,1.127,516,1.127,517,1.127,518,1.127,519,1.127,520,1.127,521,1.127,522,1.127,523,1.637,524,0.95,525,1.735,526,1.127,527,1.127,528,1.127,529,2.157,530,1.824,531,1.127,532,1.127,533,1.127,534,2.157,535,1.127,536,1.127,537,1.127,538,1.127,539,2.85,540,1.127,541,1.094,542,2.85,543,1.127,544,0.925,545,2.531,546,1.127,547,0.835,586,0.373,3478,3.969,3479,3.969,3480,3.969,3481,3.969,3482,3.969,3483,2.501,3484,2.501,3485,2.501,3486,2.501,3487,2.501,3488,2.501,3489,2.501,3490,2.501]],["title/classes/StringFunctions.html",[307,0.346,423,1.928]],["body/classes/StringFunctions.html",[0,1.397,3,0.044,4,0.044,5,0.044,6,0.081,8,0.033,10,0.146,19,0.644,26,0.116,27,0.009,31,0.544,34,0.318,37,0.132,46,3.105,60,0.868,62,1.177,94,0.231,130,2.227,141,0.695,159,0.492,209,0.898,218,0.499,222,0.993,224,1.896,230,1.286,239,1.397,242,0.927,249,0.789,254,0.142,268,1.636,284,0.837,286,1.5,294,1.178,301,0.146,305,0.004,306,0.004,307,0.654,308,2.196,309,0.112,310,1.124,311,0.547,314,1.158,315,4.018,316,0.197,318,4.041,319,0.673,320,1.158,322,1.158,324,0.879,325,0.741,326,2.193,327,1.257,328,1.124,329,4.083,330,2.095,331,2.457,332,2.738,333,2.738,334,2.828,335,1.06,336,2.124,337,1.856,338,0.926,339,2.02,340,1.158,341,1.158,342,1.158,343,1.158,344,1.539,345,1.158,346,1.158,347,1.091,348,1.828,349,2.263,350,0.63,351,1.002,352,1.158,353,1.158,354,1.158,355,1.158,356,1.158,357,1.158,358,1.158,359,1.158,360,1.158,361,1.158,362,1.158,363,1.158,364,1.116,365,1.158,366,1.158,367,1.158,368,1.158,369,1.124,370,1.158,371,1.158,372,2.843,373,2.797,374,1.158,375,1.158,376,0.707,377,1.158,378,1.158,379,1.158,380,1.828,381,1.124,382,1.158,383,1.124,384,1.463,385,0.22,386,2.075,387,0.902,388,2.001,389,2.42,390,1.387,391,2.972,392,2.263,393,3.62,394,2.263,395,2.263,396,2.263,397,1.828,398,1.158,399,2.263,400,1.158,401,2.196,402,1.158,403,1.158,404,1.158,405,1.158,406,1.158,407,1.158,408,1.158,409,1.158,410,1.158,411,1.158,412,1.158,413,1.158,414,1.158,415,1.499,416,1.158,417,1.158,418,2.196,419,1.158,420,1.158,421,1.158,422,1.158,423,2.493,424,2.263,425,2.57,426,1.158,427,1.828,428,1.158,429,1.828,430,1.158,431,1.828,432,1.158,433,2.196,434,1.158,435,1.158,436,1.158,437,1.158,438,1.158,439,1.158,440,1.158,441,1.158,442,1.158,443,1.158,444,1.158,445,1.158,446,1.158,447,1.158,448,1.158,449,1.158,450,1.158,451,1.158,452,1.158,453,1.158,454,1.158,455,1.158,456,1.158,457,1.158,458,1.158,459,1.158,460,1.158,461,1.158,462,1.158,463,1.158,464,1.158,465,2.196,466,1.158,467,1.158,468,1.158,469,1.158,470,2.196,471,1.158,472,1.158,473,1.158,474,1.158,475,1.158,476,1.158,477,2.196,478,1.158,479,1.158,480,2.493,481,2.57,482,2.797,483,1.158,484,1.158,485,0.816,486,1.158,487,1.158,488,2.196,489,1.158,490,1.158,491,1.158,492,1.158,493,1.158,494,1.158,495,1.158,496,1.158,497,1.158,498,1.158,499,1.158,500,1.158,501,1.158,502,1.158,503,1.158,504,1.158,505,1.158,506,1.158,507,1.158,508,1.158,509,1.158,510,1.158,511,2.196,512,1.158,513,1.158,514,1.158,515,1.158,516,1.158,517,1.158,518,1.158,519,1.158,520,1.158,521,1.158,522,1.158,523,1.672,524,0.976,525,1.773,526,1.158,527,1.158,528,1.158,529,2.196,530,1.857,531,1.158,532,1.158,533,1.158,534,2.196,535,1.158,536,1.158,537,1.158,538,1.158,539,2.884,540,1.158,541,1.124,542,2.884,543,1.158,544,0.95,545,2.57,546,1.158,547,0.858,3252,3.581,3491,4.055,3492,4.055,3493,2.57,3494,2.57,3495,2.57,3496,2.57,3497,2.57]],["title/interfaces/StructuredTypeFieldOptions.html",[0,1.08,221,2.444]],["body/interfaces/StructuredTypeFieldOptions.html",[0,1.924,1,2.989,2,1.928,3,0.064,4,0.064,5,0.064,6,0.049,7,2.164,8,0.049,9,0.571,11,2.078,12,2.164,13,3.25,14,1.591,15,3.369,16,2.678,17,2.259,18,3.25,19,1.732,20,2.164,21,3.25,22,2.259,23,3.137,24,2.078,26,0.136,27,0.009,28,2.43,29,2.358,30,2.508,31,0.674,32,3.317,33,3.684,34,0.209,35,2.605,36,1.639,37,0.136,38,2.164,39,2.164,40,2.164,41,3.411,42,1.862,43,2.876,44,3.112,45,1.8,46,1.316,47,3.112,48,0.729,49,0.877,50,1.69,51,2.532,52,1.8,53,2.876,54,3.113,55,2.047,56,2.59,57,1.738,58,2.876,59,2.989,60,1.03,61,2.769,62,0.825,63,1.893,64,2.289,65,2.358,66,2.876,67,2.162,68,2.59,69,2.876,70,2.43,71,2.358,72,2.43,73,2.59,74,2.989,75,2.989,76,2.078,77,3.25,78,4.36,79,3.25,80,2.367,81,4.811,82,2.367,83,2.367,84,2.164,85,3.25,86,4.62,87,4.223,88,2.259,89,3.25,90,2.367,91,2.367,92,3.987,93,2.367,94,0.238,95,3.25,96,3.828,97,2.367,98,2.367,99,3.25,100,2.367,101,3.25,102,2.259,103,3.25,104,2.259,105,3.25,106,2.259,107,3.25,108,3.552,109,1.928,110,3.552,111,3.404,112,3.404,113,3.25,114,2.367,115,2.367,116,2.367,117,2.259,118,3.25,119,2.367,120,2.367,121,2.259,122,3.25,123,2.989,124,2.367,125,2.367,126,2.367,127,2.367,128,3.25,129,2.367,130,1.866,131,2.367,132,2.161,133,2.161,134,3.806,135,3.25,136,3.404,137,3.404,138,2.367,139,3.404,140,4.36,141,1.176,142,2.367,143,2.367,144,3.404,145,2.259,146,3.25,147,2.367,148,2.367,149,2.367,150,1.8,151,3.25,152,2.59,153,3.25,154,3.25,155,3.25,156,1.671,157,2.532,158,3.806,159,0.654,160,3.25,161,4.592,162,5.365,163,5.365,164,5.365,165,2.259,166,3.25,167,3.986,168,2.259,169,3.25,170,3.404,171,2.259,172,3.25,173,3.951,174,3.404,175,2.259,176,3.25,177,2.876,178,2.259,179,3.25,180,3.404,181,2.259,182,3.25,183,3.404,184,2.259,185,3.25,186,3.806,187,3.25,188,4.811,189,2.259,190,3.25,191,2.259,192,3.25,193,2.259,194,3.25,195,2.259,196,3.25,197,2.259,198,3.25,199,2.259,200,3.25,201,2.259,202,1.755,203,3.112,204,3.112,205,2.989,206,2.259,207,2.259,208,2.164,209,0.519,210,1.862,211,2.259,212,2,213,2.367,214,2.367,215,2.367,216,3.238,217,2.164,218,0.686,219,2.259,220,2.259,221,4.056,222,1.692,223,4.056,224,1.44,225,2.937,226,3.987,227,2.289,228,2.678,229,2.141,230,1.083,231,2.937,232,2.508,233,1.862,234,3.137,235,1.862,236,1.743,237,1.928,238,2.107,239,1.547,240,1.845,241,3.112,242,0.56,243,2,244,2.367,245,1.928,246,2.224,247,0.857,248,2.367,249,0.519,250,1.743,251,2.078,252,1.862,253,2.259,254,0.157,255,2.367,256,2.367,257,1.639,258,2.367,259,2.164,260,2.259,261,3.112,262,4.286,263,1.316,264,2.164,265,2.164,266,2.164,267,1.503,268,1.233,269,2.756,270,2.078,271,2.876,272,1.862,273,2.989,274,2.259,275,2.876,276,2.259,277,3.112,278,2.078,279,3.112,280,2.989,281,2.103,282,2.164,283,1.928,284,1.755,285,2.078,286,0.764,287,1.743,288,2.164,289,1.743,290,2.164,291,2.367,292,2.078,293,2.164,294,0.808,295,1.8,296,1.743,297,1.743,298,1.743,299,2.164,300,2.259,301,0.096,302,2.078,303,1.928,304,1.8,305,0.005,306,0.005]],["title/classes/TypeFunctions.html",[307,0.346,465,1.928]],["body/classes/TypeFunctions.html",[0,1.405,3,0.044,4,0.044,5,0.044,6,0.066,8,0.034,10,0.105,19,0.651,26,0.111,27,0.009,31,0.545,34,0.32,37,0.133,46,3.074,60,0.804,62,1.131,94,0.232,130,2.234,141,0.7,159,0.496,209,0.898,218,0.502,222,1.002,224,1.897,230,1.327,239,1.002,242,0.931,249,0.794,254,0.133,268,1.642,284,0.846,286,1.505,294,1.178,301,0.105,305,0.004,306,0.004,307,0.655,308,2.211,309,0.114,310,1.136,311,0.551,314,1.171,315,4.017,316,0.141,318,4.039,319,0.483,320,1.171,322,1.171,324,0.889,325,0.749,326,2.202,327,1.268,328,1.136,329,4.092,330,2.104,331,2.466,332,2.742,333,2.742,334,2.832,335,1.071,336,2.131,337,1.864,338,0.936,339,2.031,340,1.171,341,1.171,342,1.171,343,1.171,344,1.553,345,1.171,346,1.171,347,1.103,348,1.843,349,2.279,350,0.636,351,1.013,352,1.171,353,1.171,354,1.171,355,1.171,356,1.171,357,1.171,358,1.171,359,1.171,360,1.171,361,1.171,362,1.171,363,1.171,364,1.125,365,1.171,366,1.171,367,1.171,368,1.171,369,1.136,370,1.171,371,1.171,372,2.851,373,2.812,374,1.171,375,1.171,376,0.715,377,1.171,378,1.171,379,1.171,380,1.843,381,1.136,382,1.171,383,1.136,384,1.472,385,0.221,386,2.081,387,0.912,388,2.013,389,2.435,390,1.399,391,2.986,392,2.279,393,3.629,394,2.279,395,2.279,396,2.279,397,1.843,398,1.171,399,2.279,400,1.171,401,2.211,402,1.171,403,1.171,404,1.171,405,1.171,406,1.171,407,1.171,408,1.171,409,1.171,410,1.171,411,1.171,412,1.171,413,1.171,414,1.171,415,1.512,416,1.171,417,1.171,418,2.211,419,1.171,420,1.171,421,1.171,422,1.171,423,2.211,424,1.171,425,1.843,426,1.171,427,1.171,428,1.171,429,1.171,430,1.171,431,1.171,432,1.171,433,2.211,434,1.171,435,1.171,436,1.171,437,1.171,438,1.171,439,1.171,440,1.171,441,1.171,442,1.171,443,1.171,444,1.171,445,1.171,446,1.171,447,1.171,448,1.171,449,1.171,450,1.171,451,1.171,452,1.171,453,1.171,454,1.171,455,1.171,456,1.171,457,1.171,458,1.171,459,1.171,460,1.171,461,1.171,462,1.171,463,1.171,464,1.171,465,2.508,466,1.843,467,1.171,468,1.843,469,1.171,470,2.211,471,1.171,472,1.171,473,1.171,474,1.171,475,1.171,476,1.171,477,2.211,478,1.171,479,1.171,480,2.508,481,2.585,482,2.812,483,1.171,484,1.171,485,0.825,486,1.171,487,1.171,488,2.211,489,1.171,490,1.171,491,1.171,492,1.171,493,1.171,494,1.171,495,1.171,496,1.171,497,1.171,498,1.171,499,1.171,500,1.171,501,1.171,502,1.171,503,1.171,504,1.171,505,1.171,506,1.171,507,1.171,508,1.171,509,1.171,510,1.171,511,2.211,512,1.171,513,1.171,514,1.171,515,1.171,516,1.171,517,1.171,518,1.171,519,1.171,520,1.171,521,1.171,522,1.171,523,1.687,524,0.986,525,1.788,526,1.171,527,1.171,528,1.171,529,2.211,530,1.87,531,1.171,532,1.171,533,1.171,534,2.211,535,1.171,536,1.171,537,1.171,538,1.171,539,2.897,540,1.171,541,1.136,542,2.897,543,1.171,544,0.96,545,2.585,546,1.171,547,0.867,586,0.611,3498,4.09,3499,4.09,3500,2.598,3501,2.598]],["title/dependencies.html",[3502,3.241,3503,4.69]],["body/dependencies.html",[27,0.009,36,3.084,305,0.008,306,0.008,2525,5.684,2530,4.954,3503,6.228,3504,7.053,3505,9.188,3506,7.053,3507,7.053,3508,8.133,3509,8.133,3510,7.053,3511,7.053,3512,7.053,3513,7.053,3514,7.053,3515,7.053,3516,7.053,3517,7.053,3518,7.053]],["title/miscellaneous/enumerations.html",[3519,2.747,3520,4.69]],["body/miscellaneous/enumerations.html",[6,0.105,7,3.154,8,0.071,26,0.105,27,0.009,28,3.139,31,0.403,52,3.345,53,3.715,54,3.139,55,2.644,56,3.345,57,1.917,58,3.715,59,3.86,60,1.153,61,3.237,62,1.066,63,2.444,64,2.956,65,3.045,66,3.715,67,2.793,68,3.345,69,3.715,70,3.139,71,3.045,72,3.139,73,3.345,74,3.86,75,3.86,76,3.86,77,3.293,79,3.293,84,3.154,85,3.293,88,3.293,89,3.293,94,0.14,95,3.293,96,3.86,99,3.293,101,3.293,102,3.293,103,3.293,104,3.293,105,3.293,106,3.293,107,3.293,108,2.81,113,3.293,117,3.293,118,3.293,121,3.293,122,3.293,123,3.86,128,3.293,134,3.293,135,3.293,145,3.293,146,3.293,150,2.624,151,3.293,153,3.293,154,3.293,155,3.293,158,3.293,160,3.293,165,3.293,166,3.293,168,3.293,169,3.293,171,3.293,172,3.293,175,3.293,176,3.293,178,3.293,179,3.293,181,3.293,182,3.293,184,3.293,185,3.293,186,3.293,187,3.293,189,3.293,190,3.293,191,3.293,192,3.293,193,3.293,194,3.293,195,3.293,196,3.293,197,3.293,198,3.293,199,3.293,200,3.293,201,3.293,227,2.956,268,1.249,305,0.007,306,0.007,548,5.212,1006,5.212,1042,4.825,1043,6.15,1051,4.825,1052,4.825,1286,3.715,1746,4.397,2070,5.212,2094,6.15,2179,3.293,2553,5.613,3519,4.089,3520,4.825,3521,6.77,3522,5.464,3523,6.965,3524,6.15,3525,6.965,3526,6.965,3527,6.15,3528,6.965,3529,4.825,3530,6.15,3531,6.965,3532,6.965,3533,5.464,3534,5.464,3535,5.464,3536,4.825,3537,6.965,3538,6.965,3539,6.965,3540,6.965]],["title/index.html",[8,0.048,2551,2.747,3541,3.241]],["body/index.html",[15,2.511,23,3.542,27,0.009,34,0.485,37,0.107,41,3.027,42,2.338,45,2.261,50,2.122,61,1.888,64,2.682,65,2.762,67,3.056,109,2.421,235,4.153,250,2.189,253,3.808,254,0.091,269,2.934,272,4.44,281,1.836,286,0.959,294,0.602,303,3.249,305,0.006,306,0.006,307,0.56,327,2.464,337,2.2,350,1.747,744,3.035,900,6.143,1048,3.544,1054,2.972,1183,2.972,1242,3.583,1372,4.479,1379,5.964,1385,5.353,1386,2.511,1465,3.647,1467,3.307,1472,3.83,1502,2.609,1533,4.157,1605,4.728,1636,2.511,1652,3.794,1664,4.157,1762,3.307,1889,2.609,1891,2.837,1962,3.307,1991,3.523,1993,3.126,2095,4.157,2114,4.157,2144,5.747,2512,6.596,2513,5.584,2517,4.438,2528,6.143,2530,5.009,2543,5.092,2744,3.794,3179,5.092,3200,7.893,3530,5.579,3542,7.601,3543,4.708,3544,4.708,3545,4.708,3546,4.708,3547,4.708,3548,4.708,3549,6.318,3550,4.708,3551,4.708,3552,6.73,3553,4.708,3554,4.708,3555,4.708,3556,6.318,3557,6.318,3558,6.73,3559,4.708,3560,6.318,3561,4.708,3562,6.318,3563,6.318,3564,6.318,3565,4.708,3566,6.318,3567,4.708,3568,4.708,3569,6.318,3570,6.318,3571,6.318,3572,4.708,3573,6.318,3574,4.708,3575,4.708,3576,4.708,3577,4.708,3578,4.708,3579,4.708,3580,4.708,3581,4.708,3582,4.708,3583,4.708,3584,4.708,3585,4.708,3586,6.318,3587,9.17,3588,4.708,3589,4.708,3590,4.708,3591,7.131,3592,8.499,3593,4.708,3594,4.708,3595,4.708,3596,7.131,3597,4.708,3598,4.708,3599,4.708,3600,7.131,3601,6.318,3602,6.318,3603,4.708,3604,6.318,3605,6.318,3606,7.622,3607,6.318,3608,4.708,3609,6.318,3610,4.708,3611,4.708,3612,4.708,3613,4.708,3614,4.708,3615,8.609,3616,4.708,3617,4.708,3618,4.708,3619,7.622,3620,4.708,3621,7.131,3622,4.708,3623,4.708,3624,4.708,3625,4.708,3626,4.708,3627,4.708,3628,4.708,3629,4.708,3630,4.708,3631,4.708,3632,4.708,3633,4.708,3634,4.708,3635,4.708,3636,4.708,3637,4.157,3638,4.708,3639,4.708,3640,4.708,3641,4.157,3642,4.708,3643,4.708,3644,6.318,3645,6.318,3646,4.708,3647,4.708,3648,4.708,3649,4.157,3650,4.708]],["title/license.html",[2551,2.747,3541,3.241,3651,2.958]],["body/license.html",[27,0.008,63,2.351,109,4.315,305,0.008,306,0.008,1385,5.543,1510,5.914,1897,5.241,2099,4.448,2105,5.914,2711,5.914,3558,5.914,3651,5.398,3652,5.914,3653,8.39,3654,6.698,3655,5.914,3656,5.914,3657,5.914,3658,7.892,3659,6.698,3660,6.698,3661,6.698,3662,6.698,3663,6.698,3664,6.698,3665,7.892,3666,9.162,3667,6.698,3668,6.698,3669,6.698,3670,6.698,3671,6.698,3672,6.698,3673,6.698,3674,6.698,3675,6.698,3676,6.698,3677,6.698,3678,7.892,3679,6.698,3680,6.698,3681,6.698,3682,6.698,3683,6.698,3684,6.698,3685,7.892,3686,7.892,3687,6.698,3688,6.698,3689,6.698,3690,6.698,3691,6.698,3692,6.698,3693,6.698,3694,6.698,3695,6.698,3696,6.698,3697,6.698,3698,6.698,3699,6.698,3700,6.698,3701,6.698,3702,6.698,3703,6.698,3704,6.698,3705,6.698,3706,6.698,3707,6.698,3708,6.698,3709,6.698,3710,6.698,3711,6.698,3712,6.698,3713,6.698,3714,6.698,3715,6.698,3716,6.698]],["title/modules.html",[2514,4.871]],["body/modules.html",[27,0.008,305,0.008,306,0.008,2513,5.141,2514,5.899,3717,7.319]],["title/overview.html",[3718,5.337]],["body/overview.html",[2,3.741,27,0.008,305,0.008,306,0.008,309,0.318,376,2.002,2512,5.863,3345,6.424,3637,6.424,3718,6.424,3719,7.275,3720,7.275]],["title/properties.html",[9,0.481,3502,3.241]],["body/properties.html",[9,0.634,23,3.483,27,0.009,305,0.008,306,0.008,1250,2.735,1372,4.493,1465,4.047,1470,5.693,2539,6.532,3542,7.55,3552,6.191,3641,6.191,3649,7.157,3651,5.651,3652,6.191,3655,6.191,3656,6.191,3657,6.191,3721,7.012,3722,7.012,3723,7.012,3724,7.012,3725,7.012,3726,7.012,3727,7.012,3728,7.012,3729,7.012,3730,7.012,3731,7.012,3732,7.012]],["title/miscellaneous/typealiases.html",[3519,2.747,3733,5.311]],["body/miscellaneous/typealiases.html",[6,0.119,7,2.988,8,0.067,15,3.588,25,2.096,26,0.141,27,0.009,31,0.382,32,3.231,33,3.588,38,2.988,39,2.988,40,2.988,41,3.481,42,2.571,43,3.588,44,2.988,45,2.486,46,2.361,47,3.882,48,1.006,49,1.211,50,2.333,60,0.816,64,2.855,65,2.941,67,2.697,69,3.588,70,3.032,94,0.22,108,2.662,123,3.728,141,0.931,223,3.728,234,3.341,252,3.341,261,3.882,262,3.588,271,3.588,273,3.728,275,3.588,277,3.882,279,3.882,280,3.728,305,0.007,306,0.007,310,2.263,315,2.855,318,2.263,326,2.513,329,2.263,332,1.644,568,4.571,594,5.421,612,4.172,624,4.467,652,5.421,721,4.175,962,4.172,972,5.421,974,4.467,976,4.467,978,4.725,993,5.034,1290,4.467,1475,4.725,1484,4.725,1492,5.249,1499,5.421,1500,4.725,1501,5.421,1558,4.725,1774,2.988,2076,4.467,2174,4.172,2181,5.421,2182,5.421,2184,5.421,2185,5.421,2186,5.421,2573,4.571,2577,5.034,2745,5.421,2868,4.571,3376,4.172,3408,4.172,3414,5.421,3470,4.571,3519,3.874,3521,8.095,3524,7.916,3527,8.132,3529,4.571,3536,4.571,3734,6.727,3735,5.176,3736,5.176,3737,5.176,3738,5.176,3739,5.176,3740,7.473,3741,6.727,3742,7.912,3743,6.727,3744,6.727,3745,7.912,3746,6.727,3747,8.201,3748,6.727,3749,6.727,3750,7.473,3751,7.473,3752,5.176,3753,5.176,3754,6.727,3755,6.727,3756,6.727,3757,6.727,3758,6.727,3759,5.176,3760,5.176,3761,7.473,3762,7.912,3763,6.727,3764,6.727,3765,5.176,3766,7.912,3767,5.176,3768,5.176,3769,5.176,3770,5.176,3771,5.176,3772,5.176]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":1164,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["0.125.0",{"_index":3721,"title":{},"body":{"properties.html":{}}}],["0.13.0",{"_index":3518,"title":{},"body":{"dependencies.html":{}}}],["00:00",{"_index":115,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["07/schema",{"_index":2364,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["1",{"_index":376,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["1.1.21",{"_index":3513,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3720,"title":{},"body":{"overview.html":{}}}],["125",{"_index":3719,"title":{},"body":{"overview.html":{}}}],["128",{"_index":80,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["15",{"_index":142,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["16",{"_index":78,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["16.2.0",{"_index":3505,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":143,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["1].tostring",{"_index":3095,"title":{},"body":{"classes/ODataRequest.html":{}}}],["1}\\$skiptoken=([\\d\\w\\s",{"_index":1364,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["2",{"_index":3637,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0",{"_index":38,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":3516,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1710,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3654,"title":{},"body":{"license.html":{}}}],["23:59:59.999999999999",{"_index":116,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["3",{"_index":3636,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":39,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":3631,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":40,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["404",{"_index":2159,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["6",{"_index":148,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["7.8.0",{"_index":3514,"title":{},"body":{"dependencies.html":{}}}],["754",{"_index":137,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["8",{"_index":92,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["9",{"_index":149,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["9a",{"_index":2244,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["_add",{"_index":571,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["_add(name",{"_index":578,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["_add(node",{"_index":614,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_annotations",{"_index":3109,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2933,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_children",{"_index":570,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_connector",{"_index":3409,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_context",{"_index":3110,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_fields",{"_index":2272,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["_functions",{"_index":1349,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2934,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_keys",{"_index":2271,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["_method",{"_index":2935,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_names",{"_index":341,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["_negated",{"_index":3410,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_options",{"_index":3111,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2936,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2937,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":3112,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":1340,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_requests",{"_index":1599,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responses",{"_index":1603,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2938,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2574,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["above",{"_index":3684,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1567,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":156,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["acc",{"_index":645,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["acc.field(name",{"_index":353,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["acc.params",{"_index":2621,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2620,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["accept",{"_index":11,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":3039,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":3033,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":3030,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":3036,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":659,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByField.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["action.ts",{"_index":672,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":784,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":678,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":681,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":683,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":680,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":679,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":682,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":791,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":795,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":793,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":792,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":794,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":788,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":691,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":694,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":692,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":693,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":842,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":790,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":844,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":849,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":845,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":843,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":846,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":847,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":848,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":786,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":870,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":876,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":872,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":871,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":873,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":874,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":875,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":785,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":787,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":789,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":1093,"title":{},"body":{"classes/Field.html":{}}}],["actionimports",{"_index":746,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":879,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":548,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"miscellaneous/enumerations.html":{}}}],["add(ctx",{"_index":1634,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["add(left",{"_index":512,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2579,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["added",{"_index":3533,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["addfield",{"_index":2285,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["additionalitems",{"_index":2263,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["addressinfo",{"_index":3620,"title":{},"body":{"index.html":{}}}],["again",{"_index":3596,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":3734,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["airport",{"_index":3595,"title":{},"body":{"index.html":{}}}],["airports",{"_index":3587,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":3598,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":3627,"title":{},"body":{"index.html":{}}}],["airports.fetch().subscribe",{"_index":3590,"title":{},"body":{"index.html":{}}}],["airports.query((q",{"_index":3607,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":3610,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":3585,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":3589,"title":{},"body":{"index.html":{}}}],["alias",{"_index":268,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["alias(value",{"_index":2789,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["aliases",{"_index":332,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["all(left",{"_index":537,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1625,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["along",{"_index":3568,"title":{},"body":{"index.html":{}}}],["and(exp",{"_index":3417,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["and(left",{"_index":501,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3676,"title":{},"body":{"license.html":{}}}],["angular",{"_index":3542,"title":{},"body":{"index.html":{},"properties.html":{}}}],["angular/animations",{"_index":3504,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2525,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1530,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/PassedInitialConfig.html":{}}}],["angular/compiler",{"_index":3506,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2530,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":3507,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":3508,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":3511,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":3553,"title":{},"body":{"index.html":{}}}],["annot",{"_index":1252,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annot.bool",{"_index":1272,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.int",{"_index":1273,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.permissions",{"_index":1274,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.properties",{"_index":1275,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.string",{"_index":1271,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.term",{"_index":1259,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annotatable",{"_index":1249,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue",{"_index":1238,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue(term",{"_index":1244,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation",{"_index":802,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation.ts",{"_index":696,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":700,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":711,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:17",{"_index":713,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:18",{"_index":712,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:2",{"_index":701,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:22",{"_index":915,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":920,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":925,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":917,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":918,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":916,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":921,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":919,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:31",{"_index":922,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:32",{"_index":923,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:33",{"_index":924,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":715,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":717,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":716,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":262,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":697,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":269,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":3051,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":880,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":3200,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":3202,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(left",{"_index":535,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)['_names",{"_index":345,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":2309,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["any[]).map((v",{"_index":2227,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["api",{"_index":1465,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{},"properties.html":{}}}],["api.options",{"_index":3076,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apiconfig",{"_index":252,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":1468,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":1,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["apioptions.helper.countparam",{"_index":3079,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apioptions.helper.etag(options.body",{"_index":3082,"title":{},"body":{"classes/ODataRequest.html":{}}}],["app",{"_index":3576,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":3581,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":3579,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":3582,"title":{},"body":{"index.html":{}}}],["application",{"_index":3562,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":3041,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1535,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1536,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["applied",{"_index":2846,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["appliesto",{"_index":709,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["apply",{"_index":2845,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["apply(query",{"_index":2847,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["applymixins(derivedctor",{"_index":356,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatafunctions",{"_index":543,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":540,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":546,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":3566,"title":{},"body":{"index.html":{}}}],["arbitrary",{"_index":183,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["arising",{"_index":3713,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":308,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":511,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arr",{"_index":2767,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.find((v",{"_index":2770,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.push(obj",{"_index":2771,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["array",{"_index":1774,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":2277,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(right",{"_index":483,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.configs",{"_index":1998,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(this.passedconfigs",{"_index":1995,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(value",{"_index":1948,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["arraybuffer",{"_index":2955,"title":{},"body":{"classes/ODataRequest.html":{}}}],["arrays",{"_index":1550,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["arrays.zip(this._requests",{"_index":1655,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["asc",{"_index":3390,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["ascending",{"_index":3377,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["ascending(field",{"_index":3381,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["asp",{"_index":1428,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["assertarray",{"_index":2698,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject",{"_index":2699,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject(create",{"_index":2707,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign",{"_index":2700,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign(values",{"_index":2709,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["associated",{"_index":3667,"title":{},"body":{"license.html":{}}}],["at(index",{"_index":2713,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["atomicitygroup",{"_index":1579,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["attach",{"_index":2070,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/enumerations.html":{}}}],["attach(model",{"_index":2102,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":2072,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":2138,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":2085,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>>(model",{"_index":2139,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["attr",{"_index":1187,"title":{},"body":{"classes/Field.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["attr?.nodevalue",{"_index":1189,"title":{},"body":{"classes/Field.html":{}}}],["attribute",{"_index":1051,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":1133,"title":{},"body":{"classes/Field.html":{}}}],["attribute_action",{"_index":1130,"title":{},"body":{"classes/Field.html":{}}}],["attribute_alias",{"_index":1100,"title":{},"body":{"classes/Field.html":{}}}],["attribute_applies_to",{"_index":1138,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_term",{"_index":1137,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_type",{"_index":1108,"title":{},"body":{"classes/Field.html":{}}}],["attribute_contains_target",{"_index":1122,"title":{},"body":{"classes/Field.html":{}}}],["attribute_default_value",{"_index":1117,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set",{"_index":1131,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set_path",{"_index":1124,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_type",{"_index":1126,"title":{},"body":{"classes/Field.html":{}}}],["attribute_extends",{"_index":1136,"title":{},"body":{"classes/Field.html":{}}}],["attribute_function",{"_index":1129,"title":{},"body":{"classes/Field.html":{}}}],["attribute_has_stream",{"_index":1121,"title":{},"body":{"classes/Field.html":{}}}],["attribute_include_in_service_document",{"_index":1132,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_bound",{"_index":1123,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_composable",{"_index":1125,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_flags",{"_index":1135,"title":{},"body":{"classes/Field.html":{}}}],["attribute_max_length",{"_index":1112,"title":{},"body":{"classes/Field.html":{}}}],["attribute_name",{"_index":1106,"title":{},"body":{"classes/Field.html":{}}}],["attribute_namespace",{"_index":1101,"title":{},"body":{"classes/Field.html":{}}}],["attribute_nullable",{"_index":1111,"title":{},"body":{"classes/Field.html":{}}}],["attribute_open_type",{"_index":1109,"title":{},"body":{"classes/Field.html":{}}}],["attribute_partner",{"_index":1118,"title":{},"body":{"classes/Field.html":{}}}],["attribute_path",{"_index":1127,"title":{},"body":{"classes/Field.html":{}}}],["attribute_precision",{"_index":1113,"title":{},"body":{"classes/Field.html":{}}}],["attribute_property",{"_index":1119,"title":{},"body":{"classes/Field.html":{}}}],["attribute_qualifier",{"_index":1103,"title":{},"body":{"classes/Field.html":{}}}],["attribute_referenced_property",{"_index":1120,"title":{},"body":{"classes/Field.html":{}}}],["attribute_scale",{"_index":1114,"title":{},"body":{"classes/Field.html":{}}}],["attribute_srid",{"_index":1116,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target",{"_index":1128,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target_namespace",{"_index":1104,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term",{"_index":1105,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term_namespace",{"_index":1102,"title":{},"body":{"classes/Field.html":{}}}],["attribute_type",{"_index":1110,"title":{},"body":{"classes/Field.html":{}}}],["attribute_underlying_type",{"_index":1134,"title":{},"body":{"classes/Field.html":{}}}],["attribute_unicode",{"_index":1115,"title":{},"body":{"classes/Field.html":{}}}],["attribute_uri",{"_index":1099,"title":{},"body":{"classes/Field.html":{}}}],["attribute_value",{"_index":1107,"title":{},"body":{"classes/Field.html":{}}}],["attribute_version",{"_index":1098,"title":{},"body":{"classes/Field.html":{}}}],["attributes",{"_index":1097,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":1293,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":1188,"title":{},"body":{"classes/Field.html":{}}}],["attrs",{"_index":2110,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attrs[field.name",{"_index":2380,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["attrs[key",{"_index":2339,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["author",{"_index":3732,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":3703,"title":{},"body":{"license.html":{}}}],["available",{"_index":2545,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["average",{"_index":3539,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["backward",{"_index":2647,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":157,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":2250,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["baseterm",{"_index":707,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["basetype",{"_index":723,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["basic",{"_index":3633,"title":{},"body":{"index.html":{}}}],["batch",{"_index":53,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":3626,"title":{},"body":{"index.html":{}}}],["batch._requests",{"_index":1611,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1537,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1669,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":96,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["binary(value",{"_index":2791,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["binary32",{"_index":147,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["binary64",{"_index":138,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["binding",{"_index":768,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":834,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":836,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:3",{"_index":837,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:4",{"_index":838,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingstructuredtype",{"_index":3313,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingstructuredtype.issubtypeof(callablebindingstructuredtype",{"_index":3321,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingtype",{"_index":3279,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bit",{"_index":81,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["blob",{"_index":2956,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":228,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bodyqueryoptions",{"_index":12,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":264,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":31,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["boolean((f.value",{"_index":2426,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["boolean(field.collection",{"_index":2202,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["boolean(field.navigation",{"_index":2204,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["bound",{"_index":299,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1673,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1538,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1685,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1677,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":2300,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["browse",{"_index":3717,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3509,"title":{},"body":{"dependencies.html":{}}}],["bugs",{"_index":3727,"title":{},"body":{"properties.html":{}}}],["build",{"_index":1740,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["buildentry",{"_index":1725,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1738,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":327,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3640,"title":{},"body":{"index.html":{}}}],["buildjsonbody(requests",{"_index":1686,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildkey",{"_index":1726,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1743,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildlegacybody",{"_index":1668,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildpathandquery",{"_index":2602,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["byte",{"_index":79,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["c",{"_index":2105,"title":{},"body":{"classes/ODataEntitySetService.html":{},"license.html":{}}}],["c.binding()?.type",{"_index":3318,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.clone",{"_index":603,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["c.istypeof(type",{"_index":2223,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["c.tojson",{"_index":1041,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["cache",{"_index":41,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":3141,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1782,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":219,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":47,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":3182,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":3256,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1828,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cachekey",{"_index":2946,"title":{},"body":{"classes/ODataRequest.html":{}}}],["california",{"_index":3609,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1860,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["callable.configure",{"_index":3328,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":1938,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callablebindingstructuredtype",{"_index":3319,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callablebindingtype",{"_index":3317,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callableconfig",{"_index":275,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":274,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":1462,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":1471,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":1463,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":1482,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["can't",{"_index":2169,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["case",{"_index":609,"title":{},"body":{"classes/ConditionalFunctions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["case(left",{"_index":478,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":3498,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(left",{"_index":466,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":383,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["catcherror",{"_index":2133,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["catcherror((error",{"_index":2157,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["caught",{"_index":258,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":312,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(left",{"_index":314,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":2297,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ch.findchildparser(predicate",{"_index":2299,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["change",{"_index":3530,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["changeset",{"_index":1672,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1539,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1670,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1702,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1671,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1700,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1592,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["characters",{"_index":93,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["charge",{"_index":3662,"title":{},"body":{"license.html":{}}}],["check",{"_index":1183,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":1182,"title":{},"body":{"classes/Field.html":{}}}],["childparser",{"_index":2301,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["childparser((c",{"_index":2222,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["children",{"_index":573,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["children.push(exp",{"_index":3440,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children.push(new",{"_index":3438,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children[index",{"_index":601,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["chunk",{"_index":1708,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunk.slice(1",{"_index":1709,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunks",{"_index":1691,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["city",{"_index":3602,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3706,"title":{},"body":{"license.html":{}}}],["class",{"_index":307,"title":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":309,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clean",{"_index":2495,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["clear",{"_index":2701,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2680,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearpaging",{"_index":2841,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["clearparameters",{"_index":2685,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":1470,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["clock",{"_index":114,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["clone",{"_index":337,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["close",{"_index":1674,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1705,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":173,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":418,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["commonmodule",{"_index":2524,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["complete.html#_toc406398229",{"_index":1420,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1421,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1424,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1425,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1422,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1423,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complextype",{"_index":1073,"title":{},"body":{"classes/Field.html":{}}}],["complextypes",{"_index":881,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3643,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":3512,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":3573,"title":{},"body":{"index.html":{}}}],["composable",{"_index":300,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["composite",{"_index":2163,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["compute",{"_index":66,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["compute(opts",{"_index":582,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["computed",{"_index":2177,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["computeexpression",{"_index":567,"title":{"classes/ComputeExpression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["computeexpression.compute",{"_index":2807,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["computeexpressionbuilder",{"_index":594,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["computeexpressionbuilder,current",{"_index":583,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["concat",{"_index":3478,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["concat(left",{"_index":402,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["concatmap",{"_index":1531,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["conditionalfunctions",{"_index":477,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3683,"title":{},"body":{"license.html":{}}}],["config",{"_index":1242,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["config.accept",{"_index":1448,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.alias",{"_index":3293,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":1262,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["config.base",{"_index":2274,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.bodyqueryoptions",{"_index":1446,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.bound",{"_index":1905,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":1907,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":3326,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":3304,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.deleterefby",{"_index":1454,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.entities",{"_index":3298,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":1903,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":2066,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":2089,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":3295,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1450,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fetchpolicy",{"_index":1444,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fields",{"_index":2282,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.flags",{"_index":2422,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1438,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.jsonbatchformat",{"_index":1458,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.keys.map((key",{"_index":2279,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.members",{"_index":2410,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":1964,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["config.namespace",{"_index":3292,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.nonparenthesisforemptyparameterfunction",{"_index":1456,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.open",{"_index":2276,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.params",{"_index":1436,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.prefer",{"_index":1452,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.return",{"_index":1967,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":2091,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1434,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.stripmetadata",{"_index":1442,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.version",{"_index":1432,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1440,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["configs",{"_index":251,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["configure",{"_index":1845,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["configure(undefined",{"_index":1861,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{}}}],["connection",{"_index":3715,"title":{},"body":{"license.html":{}}}],["connector",{"_index":3411,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["console.log",{"_index":3606,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":3599,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":3591,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":3594,"title":{},"body":{"index.html":{}}}],["const",{"_index":242,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["constants",{"_index":1050,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["constructor",{"_index":385,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":839,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":1257,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":698,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":1466,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":1240,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["constructor(configs",{"_index":1988,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["constructor(field",{"_index":660,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/OrderByField.html":{}}}],["constructor(group",{"_index":1207,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":1287,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2947,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":675,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{}}}],["constructor(namespace",{"_index":798,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(o",{"_index":2704,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["constructor(op",{"_index":1213,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(passedconfigs",{"_index":2006,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["constructor(path",{"_index":835,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":1993,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(property",{"_index":865,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":814,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":524,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":702,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/ODataBatchRequest.html":{}}}],["constructor(request",{"_index":1514,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":3459,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2576,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":714,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":710,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":809,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":869,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":574,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["constructor(uri",{"_index":860,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(value",{"_index":3453,"title":{},"body":{"classes/SearchTerm.html":{}}}],["constructor(values",{"_index":2871,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(xml",{"_index":1140,"title":{},"body":{"classes/Field.html":{}}}],["constructors",{"_index":357,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructors.foreach((basector",{"_index":358,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":901,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":3309,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":745,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":758,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:11",{"_index":756,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":753,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:5",{"_index":752,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":757,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":755,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:9",{"_index":754,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["containers",{"_index":276,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":3479,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(left",{"_index":404,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":819,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["content",{"_index":654,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["content_id",{"_index":1540,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1541,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1542,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1701,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":3555,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1692,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":3165,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":1289,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1797,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1800,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1799,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1801,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continue",{"_index":3055,"title":{},"body":{"classes/ODataRequest.html":{}}}],["continueonerror",{"_index":211,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3710,"title":{},"body":{"license.html":{}}}],["conventions.html#sec_parameteraliases",{"_index":2788,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptioncompute",{"_index":2805,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptionformat",{"_index":2810,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["converts",{"_index":2736,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["coordinate",{"_index":163,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["copies",{"_index":3678,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3665,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3653,"title":{},"body":{"license.html":{}}}],["core",{"_index":1430,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["count",{"_index":61,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["count(opts",{"_index":617,"title":{},"body":{"classes/CountExpression.html":{}}}],["countdistinct",{"_index":3540,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["countexpression",{"_index":611,"title":{"classes/CountExpression.html":{}},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countexpressionbuilder",{"_index":652,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["countexpressionbuilder,current",{"_index":618,"title":{},"body":{"classes/CountExpression.html":{}}}],["countfield",{"_index":625,"title":{"classes/CountField.html":{}},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(field",{"_index":657,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(this.field.clone",{"_index":647,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countryregion",{"_index":3603,"title":{},"body":{"index.html":{}}}],["count}(${object.keys(params",{"_index":638,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["create",{"_index":1886,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{}}}],["create(attrs",{"_index":2108,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["create/update/patch",{"_index":2166,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["createsyncloader",{"_index":2556,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["createsyncloader(passedconfig",{"_index":2541,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["creating",{"_index":1891,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["creation",{"_index":255,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1399,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["csdl",{"_index":735,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":1047,"title":{},"body":{"classes/Field.html":{}}}],["csdlaction",{"_index":670,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlactionimport",{"_index":689,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlannotable",{"_index":695,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":718,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":699,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["csdlannotations",{"_index":703,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdlcomplextype",{"_index":719,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlentitycontainer",{"_index":743,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlentityset",{"_index":750,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["csdlentitytype",{"_index":738,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlenummember",{"_index":772,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["csdlenumtype",{"_index":776,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunction",{"_index":684,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunctionimport",{"_index":686,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlinclude",{"_index":796,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlincludeannotations",{"_index":806,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlkey",{"_index":739,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationproperty",{"_index":727,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationpropertybinding",{"_index":762,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlondelete",{"_index":824,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlparameter",{"_index":677,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlproperty",{"_index":726,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlpropertyref",{"_index":742,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlreference",{"_index":803,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlreferentialconstraint",{"_index":823,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlreturntype",{"_index":676,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlschema",{"_index":877,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlsingleton",{"_index":751,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlstructuralproperty",{"_index":818,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":830,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":832,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":831,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":722,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":732,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":730,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":733,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":729,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":731,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":734,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":706,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdltypedefinition",{"_index":887,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["ctx",{"_index":1631,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1638,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":584,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["custom",{"_index":2187,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["customheaders",{"_index":3021,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":3040,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":3025,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":3028,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":3060,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3639,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1370,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["customparams",{"_index":3065,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":3068,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":3066,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3707,"title":{},"body":{"license.html":{}}}],["data",{"_index":152,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["data(data",{"_index":1297,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":1160,"title":{},"body":{"classes/Field.html":{}}}],["date",{"_index":108,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["date(left",{"_index":434,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1803,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":433,"title":{"classes/DateAndTimeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["datetimeoffset",{"_index":121,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["day",{"_index":936,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["day(left",{"_index":436,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["days",{"_index":124,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deal",{"_index":3669,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3716,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":134,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["deep",{"_index":3638,"title":{},"body":{"index.html":{}}}],["def",{"_index":2721,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["default",{"_index":239,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"interfaces/FieldParser.html":{},"classes/GeoFunctions.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["default_fetch_policy",{"_index":1404,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_strip_metadata",{"_index":1405,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_timeout",{"_index":1783,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1406,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["default_version].odata_etag",{"_index":2338,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["default_version].type(value",{"_index":2221,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaults",{"_index":2355,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaultvalue",{"_index":708,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["defined",{"_index":316,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":900,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"index.html":{}}}],["definition.ts",{"_index":926,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":935,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":933,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":928,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":930,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":934,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":929,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":931,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":932,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1376,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":3024,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleterefby",{"_index":13,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deleting",{"_index":3546,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1591,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":1358,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":3550,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3503,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependson",{"_index":1580,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deps",{"_index":2557,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["derivedctor.prototype",{"_index":361,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["desc",{"_index":3391,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["descending",{"_index":3378,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["descending(field",{"_index":3384,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["description",{"_index":1250,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"properties.html":{}}}],["deseialize",{"_index":1865,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1866,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":225,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1863,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1867,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":2094,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/enumerations.html":{}}}],["destroy(key",{"_index":2111,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["diego",{"_index":3655,"title":{},"body":{"license.html":{},"properties.html":{}}}],["digits",{"_index":144,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["directive",{"_index":3263,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":3257,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["disable",{"_index":2537,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["distribute",{"_index":3674,"title":{},"body":{"license.html":{}}}],["div",{"_index":549,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":518,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":1142,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement",{"_index":1153,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.attributes",{"_index":1150,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":1162,"title":{},"body":{"classes/Field.html":{}}}],["documentation",{"_index":3558,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":1141,"title":{},"body":{"classes/Field.html":{}}}],["double",{"_index":145,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["down",{"_index":2757,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["duration",{"_index":123,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["duration(value",{"_index":2790,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["dynamic",{"_index":3510,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":281,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["e().eq(\"emails",{"_index":3622,"title":{},"body":{"index.html":{}}}],["e.istypeof(type",{"_index":3311,"title":{},"body":{"classes/ODataSchema.html":{}}}],["earth",{"_index":162,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["editlink",{"_index":1332,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":151,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.boolean",{"_index":95,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.byte",{"_index":99,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.date",{"_index":107,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.datetimeoffset",{"_index":118,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.decimal",{"_index":128,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.double",{"_index":135,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.duration",{"_index":122,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geography",{"_index":155,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographycollection",{"_index":182,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographylinestring",{"_index":166,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultilinestring",{"_index":176,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultipoint",{"_index":172,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultipolygon",{"_index":179,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographypoint",{"_index":160,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographypolygon",{"_index":169,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometry",{"_index":185,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrycollection",{"_index":200,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrylinestring",{"_index":190,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultilinestring",{"_index":196,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultipoint",{"_index":194,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultipolygon",{"_index":198,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrypoint",{"_index":187,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrypolygon",{"_index":192,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.guid",{"_index":77,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int16",{"_index":85,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int32",{"_index":103,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int64",{"_index":105,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.sbyte",{"_index":101,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.single",{"_index":146,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.stream",{"_index":153,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.string",{"_index":89,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.timeofday",{"_index":113,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edmtype",{"_index":76,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edmtype.binary",{"_index":2239,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.boolean].indexof(this.type",{"_index":2260,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.byte",{"_index":2255,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.date",{"_index":2235,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.datetimeoffset",{"_index":2237,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.decimal",{"_index":2258,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.double].indexof(this.type",{"_index":2259,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.guid",{"_index":2238,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int16",{"_index":2254,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int32",{"_index":2253,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int64",{"_index":2252,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.sbyte",{"_index":2256,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.string",{"_index":2234,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.timeofday",{"_index":2236,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmx:dataservices",{"_index":1058,"title":{},"body":{"classes/Field.html":{}}}],["edmx:edmx",{"_index":1056,"title":{},"body":{"classes/Field.html":{}}}],["edmx:include",{"_index":1062,"title":{},"body":{"classes/Field.html":{}}}],["edmx:includeannotations",{"_index":1064,"title":{},"body":{"classes/Field.html":{}}}],["edmx:reference",{"_index":1060,"title":{},"body":{"classes/Field.html":{}}}],["element",{"_index":1161,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["empty",{"_index":1389,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["encode",{"_index":232,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encode(params",{"_index":1933,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(this.values",{"_index":395,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["encode(value",{"_index":236,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encode(values",{"_index":379,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["encoded",{"_index":1870,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1869,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1695,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":304,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":3480,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(left",{"_index":406,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":272,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":3090,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":744,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":3597,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":2075,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{}}}],["entitycontainer",{"_index":882,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["entitycontainerconfig",{"_index":277,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":3198,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":2076,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":55,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":3348,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":279,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":3350,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":298,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":278,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysetschema",{"_index":2101,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["entitytype",{"_index":302,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":883,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1723,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry",{"_index":1741,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1822,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1811,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1820,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu",{"_index":2395,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["enu.configure",{"_index":3324,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":51,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":3520,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":270,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toflags(this.members",{"_index":2435,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.toname(this.members",{"_index":2439,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":2434,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":2432,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":1070,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["enumtypeconfig",{"_index":271,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":280,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":884,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["eq",{"_index":1221,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["eq(left",{"_index":489,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1416,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["error",{"_index":257,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1624,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error(\"save",{"_index":2168,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('batch",{"_index":1620,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('destroy",{"_index":2154,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('field",{"_index":1957,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["error('modify",{"_index":2152,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('no",{"_index":1831,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["error('odata",{"_index":1185,"title":{},"body":{"classes/Field.html":{}}}],["error('unable",{"_index":1180,"title":{},"body":{"classes/Field.html":{}}}],["error('update",{"_index":2150,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error(`${this.name",{"_index":2328,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["error(`no",{"_index":2660,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["error.status",{"_index":2158,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["errorhandler",{"_index":256,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":2210,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`maxlength",{"_index":2217,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`required",{"_index":2215,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors[field.name",{"_index":2383,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errs",{"_index":2381,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["escape",{"_index":333,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["eslint",{"_index":2536,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["eslint/explicit",{"_index":2540,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["etag",{"_index":14,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":3143,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3702,"title":{},"body":{"license.html":{}}}],["events",{"_index":1623,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["every(predicate",{"_index":2717,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["examples",{"_index":3551,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1664,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["execute",{"_index":1633,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":2104,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["exists",{"_index":1752,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exp",{"_index":2876,"title":{},"body":{"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.children",{"_index":3449,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.connector",{"_index":3450,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.length",{"_index":3437,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["expand",{"_index":65,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":966,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["expandexpression",{"_index":961,"title":{"classes/ExpandExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["expandexpression.expand",{"_index":2802,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expandexpression.expand(opts",{"_index":994,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandexpressionbuilder",{"_index":993,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["expandexpressionbuilder,current",{"_index":967,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield",{"_index":969,"title":{"classes/ExpandField.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield>(field",{"_index":1009,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandobject",{"_index":3740,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3741,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandtype",{"_index":3742,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expand}(${object.keys(params",{"_index":987,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expired",{"_index":1753,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exponentialdecimals",{"_index":203,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":3038,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":37,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3693,"title":{},"body":{"license.html":{}}}],["expression",{"_index":569,"title":{"classes/Expression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["expression(key",{"_index":2875,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression).render",{"_index":634,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["expression:126",{"_index":3426,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:128",{"_index":622,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:143",{"_index":3419,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:145",{"_index":616,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:151",{"_index":3431,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:193",{"_index":971,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:209",{"_index":965,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:33",{"_index":591,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:35",{"_index":3475,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:37",{"_index":592,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:41",{"_index":593,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:46",{"_index":590,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:51",{"_index":3473,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:6",{"_index":577,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:65",{"_index":581,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:78",{"_index":3387,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expression:95",{"_index":3383,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expressions",{"_index":2744,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"index.html":{}}}],["expressions/expand",{"_index":2890,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expressions/select",{"_index":2891,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["extend",{"_index":747,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":218,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1382,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["f",{"_index":607,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["f.configure",{"_index":2315,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.default",{"_index":2357,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.deserialize(value[f.name",{"_index":2308,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.isstructuredtype",{"_index":2358,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.name",{"_index":2305,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["f.navigation",{"_index":2367,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.nullable",{"_index":2379,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.serialize((value",{"_index":2310,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.structured().defaults",{"_index":2360,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.tojsonschema(expand",{"_index":2373,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.value",{"_index":2430,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["f]{12",{"_index":2248,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f]{12}$/.test",{"_index":2615,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":2247,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["f]{8",{"_index":2246,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fa",{"_index":2245,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["factory",{"_index":1605,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["factory(api",{"_index":1606,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["false",{"_index":387,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["features",{"_index":3166,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":3243,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1379,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["fetchall",{"_index":2095,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["fetchall(options",{"_index":2117,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetching",{"_index":1764,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["fetchmany",{"_index":2096,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany(top",{"_index":2119,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchnavigationproperty",{"_index":1464,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":1490,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchone",{"_index":2097,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchone(options",{"_index":2121,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate",{"_index":2098,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate(key",{"_index":2123,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchpolicy",{"_index":15,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":222,"title":{"classes/Field.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["field(enu",{"_index":2393,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["field(field",{"_index":620,"title":{},"body":{"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/SelectExpression.html":{}}}],["field(name",{"_index":587,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["field(namevalue",{"_index":2427,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["field(odatametadata.attribute_alias",{"_index":1169,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":1168,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_uri",{"_index":1155,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_version",{"_index":1148,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_action",{"_index":1174,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotation",{"_index":1159,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotations",{"_index":1178,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":1171,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":1175,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":1172,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":1170,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_function",{"_index":1173,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include",{"_index":1156,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":1158,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_term",{"_index":1177,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":1176,"title":{},"body":{"classes/Field.html":{}}}],["field.default",{"_index":2198,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.encode(v",{"_index":2351,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.isstructuredtype",{"_index":2348,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.maxlength",{"_index":2200,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.name",{"_index":2326,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.navigation",{"_index":2319,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.nullable",{"_index":2201,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.precision",{"_index":2206,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.referentials",{"_index":2195,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.scale",{"_index":2208,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.structured",{"_index":2349,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.type",{"_index":2193,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.validate(value",{"_index":2382,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.value",{"_index":2420,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldfactory",{"_index":338,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fieldfactory([...names",{"_index":348,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fieldnames",{"_index":1193,"title":{},"body":{"classes/Field.html":{}}}],["fieldparser",{"_index":237,"title":{"interfaces/FieldParser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields",{"_index":284,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["fields(value",{"_index":2396,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fields.length",{"_index":375,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fields.reduce",{"_index":2307,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields.reduce((acc",{"_index":2359,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields[0].resolve(parser",{"_index":378,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fieldtype",{"_index":1043,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":1149,"title":{},"body":{"classes/Field.html":{}}}],["fieldtype.tag",{"_index":1157,"title":{},"body":{"classes/Field.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["files",{"_index":3668,"title":{},"body":{"license.html":{}}}],["filter",{"_index":67,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":2356,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["filter((k",{"_index":2925,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((key",{"_index":629,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":1974,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1839,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2629,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(opts",{"_index":663,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["filterconnector",{"_index":3743,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["filterexpression",{"_index":623,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["filterexpression.filter",{"_index":2818,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["filterexpression.filter(opts",{"_index":642,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["filterexpressionbuilder",{"_index":624,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["filterexpressionbuilder,current",{"_index":664,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{}}}],["filtertype",{"_index":3745,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":1247,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["find((f",{"_index":2345,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((field",{"_index":2325,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((k",{"_index":2266,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((p",{"_index":3168,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2582,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["findannotation",{"_index":1239,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findannotation(predicate",{"_index":1251,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findcallablefortype",{"_index":3265,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":3278,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":2295,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["findentitysetfortype",{"_index":3266,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":3281,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":3267,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":3283,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findoptionsfortype",{"_index":1915,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":3268,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":3285,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":42,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2585,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["firstvaluefrom",{"_index":1532,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["fitness",{"_index":3698,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":131,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["flags",{"_index":282,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["flat",{"_index":188,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floating",{"_index":139,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":313,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(left",{"_index":320,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":3543,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1727,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3682,"title":{},"body":{"license.html":{}}}],["foreach(([name",{"_index":2283,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["foreach((key",{"_index":2927,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["forget",{"_index":1728,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1747,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":1991,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"index.html":{}}}],["forkjoin(this.configs",{"_index":1999,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["format",{"_index":74,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["format(opts",{"_index":2811,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["format/v4.01/odata",{"_index":1411,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["forroot",{"_index":2518,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["forroot(passedconfig",{"_index":2519,"title":{},"body":{"modules/ODataModule.html":{}}}],["fot",{"_index":2726,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["found",{"_index":2327,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["fractionalseconds",{"_index":937,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["fractionalseconds(left",{"_index":438,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3661,"title":{},"body":{"license.html":{}}}],["friends",{"_index":3619,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":3113,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":3124,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":3114,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson(req",{"_index":3126,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":45,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2609,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["function",{"_index":62,"title":{"classes/Function.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["function('case",{"_index":479,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('cast",{"_index":467,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":462,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":403,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":405,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":435,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":437,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":407,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":463,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":439,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.distance",{"_index":472,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.intersects",{"_index":474,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.length",{"_index":476,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":422,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":420,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":441,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":409,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('isof",{"_index":469,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":411,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":426,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":443,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":445,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":447,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":449,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":451,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":464,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":453,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":413,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":417,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":455,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":428,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":457,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":459,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":430,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":432,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":461,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function(name",{"_index":1352,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["functionimport",{"_index":1091,"title":{},"body":{"classes/Field.html":{}}}],["functionimports",{"_index":748,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":687,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":544,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["furnished",{"_index":3681,"title":{},"body":{"license.html":{}}}],["g",{"_index":1562,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["g1",{"_index":1581,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["g2",{"_index":1582,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ge",{"_index":1222,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ge(left",{"_index":495,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["generate",{"_index":3567,"title":{},"body":{"index.html":{}}}],["generated",{"_index":3642,"title":{},"body":{"index.html":{}}}],["generator",{"_index":3549,"title":{},"body":{"index.html":{}}}],["geodistance",{"_index":1201,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geodistance(left",{"_index":471,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geofunctions",{"_index":470,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geography",{"_index":158,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographycollection",{"_index":184,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographylinestring",{"_index":168,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultilinestring",{"_index":178,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultipoint",{"_index":175,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultipolygon",{"_index":181,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographypoint",{"_index":165,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographypolygon",{"_index":171,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geointersects",{"_index":1202,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geointersects(left",{"_index":473,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geolength",{"_index":1203,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geolength(left",{"_index":475,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geometry",{"_index":186,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrycollection",{"_index":201,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrylinestring",{"_index":191,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultilinestring",{"_index":197,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultipoint",{"_index":195,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultipolygon",{"_index":199,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrypoint",{"_index":189,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrypolygon",{"_index":193,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["get'].indexof(this._method",{"_index":3027,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":248,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1750,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(path",{"_index":2720,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["get(target",{"_index":342,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["getannotations",{"_index":3137,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":1497,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataSchemaElement.html":{}}}],["getbody",{"_index":2978,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcachekey",{"_index":2990,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":3135,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":2019,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":2023,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":2051,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":1303,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":3289,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getentitysetschema",{"_index":2131,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["getetag",{"_index":2044,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":2031,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2982,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1402,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":2042,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":2057,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":2055,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":2046,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":2053,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":2048,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2976,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":2741,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":2021,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":1191,"title":{},"body":{"classes/Field.html":{}}}],["getoptions",{"_index":3131,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2980,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getparseroptions",{"_index":1400,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["getpath",{"_index":2974,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2984,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":3133,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":2059,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":2017,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1729,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1754,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2972,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":3366,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":2027,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":2029,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstructuredtypeschema",{"_index":2081,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":2551,"title":{"index.html":{},"license.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["gettop",{"_index":2025,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":1305,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2986,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2988,"title":{},"body":{"classes/ODataRequest.html":{}}}],["git+https://github.com/diegomvh/angular",{"_index":3730,"title":{},"body":{"properties.html":{}}}],["given",{"_index":1749,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["granted",{"_index":3660,"title":{},"body":{"license.html":{}}}],["group",{"_index":525,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":3746,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":523,"title":{"classes/Grouping.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["grouping(exp",{"_index":3439,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(node",{"_index":3444,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(objects.clone(this.group",{"_index":528,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["gt",{"_index":1223,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["gt(left",{"_index":493,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":84,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegments.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["haaster",{"_index":3657,"title":{},"body":{"license.html":{},"properties.html":{}}}],["hack",{"_index":2614,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["handle",{"_index":1763,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1730,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1756,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1731,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1758,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":649,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1732,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1760,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlers",{"_index":2604,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(key",{"_index":2878,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":507,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["has(path",{"_index":2723,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["has(target",{"_index":354,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hashmap",{"_index":2765,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["haskey",{"_index":2678,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2683,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":2268,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["hasstream",{"_index":740,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["hassubsequence",{"_index":563,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(left",{"_index":421,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":564,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(left",{"_index":419,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1371,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headerkey",{"_index":3171,"title":{},"body":{"classes/ODataResponse.html":{}}}],["headers",{"_index":16,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1575,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":1284,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["here",{"_index":3645,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3659,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3704,"title":{},"body":{"license.html":{}}}],["holds",{"_index":1784,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["homepage",{"_index":3726,"title":{},"body":{"properties.html":{}}}],["hour",{"_index":938,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["hour(left",{"_index":440,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hours",{"_index":125,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["htmlcollection",{"_index":1194,"title":{},"body":{"classes/Field.html":{}}}],["http",{"_index":1398,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1694,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1696,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":3062,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpheaders((options",{"_index":1646,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":3096,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":3071,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams(params",{"_index":3078,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1707,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey",{"_index":3172,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":3195,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":3093,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":3075,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1543,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1409,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["http://json",{"_index":2362,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["httpclientmodule",{"_index":2526,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["httpcontext",{"_index":2960,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httperrorresponse",{"_index":1520,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{}}}],["httpheaders",{"_index":1528,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":3153,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpheaders(response['headers",{"_index":1718,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["httpparams",{"_index":2953,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1529,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["httpresponsebase",{"_index":1523,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["https://devblogs.microsoft.com/odata/extension",{"_index":1426,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3646,"title":{},"body":{"index.html":{}}}],["https://docs.oasis",{"_index":2784,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3649,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://github.com/odata/aspnetcoreodata/issues/171",{"_index":215,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1647",{"_index":214,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1974",{"_index":213,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://json",{"_index":2230,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":3565,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1594,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":30,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identifier",{"_index":83,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identify",{"_index":1775,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["ieee",{"_index":136,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754",{"_index":3031,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":204,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":3034,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2992,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2993,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":206,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":207,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implements",{"_index":384,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3694,"title":{},"body":{"license.html":{}}}],["import",{"_index":34,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2543,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["in(left",{"_index":509,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["include",{"_index":2316,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_etag",{"_index":2332,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_navigation",{"_index":2304,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_parents",{"_index":2265,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["includeannotations",{"_index":212,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3687,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":688,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["includes",{"_index":805,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":1897,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"license.html":{}}}],["incorporates",{"_index":3632,"title":{},"body":{"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":3481,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(left",{"_index":408,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2652,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indexof(this.type",{"_index":2240,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["indicating",{"_index":1767,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataSchemaElement.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":576,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["init",{"_index":2949,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":3000,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":3009,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":3016,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.context",{"_index":3005,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":3022,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":3013,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":3064,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2997,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":3004,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":3073,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":3002,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2999,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":3007,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":3011,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":3572,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":3344,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":3345,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["injection",{"_index":2547,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken",{"_index":2527,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken('odata.config",{"_index":2535,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["inside",{"_index":1248,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["install",{"_index":3559,"title":{},"body":{"index.html":{}}}],["installation",{"_index":3556,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1267,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["instead",{"_index":3340,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["int",{"_index":265,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["int16",{"_index":88,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["int32",{"_index":104,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["int64",{"_index":106,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["integer",{"_index":87,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["invalid",{"_index":3532,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isbatch",{"_index":2940,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":673,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["iscallabletype",{"_index":3316,"title":{},"body":{"classes/ODataSchema.html":{}}}],["iscomplextype",{"_index":2323,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["iscomposable",{"_index":685,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["isedmtype",{"_index":1953,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isentitytype",{"_index":2321,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["isenumtype",{"_index":1955,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isexpired",{"_index":1733,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1765,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2941,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isfield",{"_index":349,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["isflags",{"_index":778,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["iskey",{"_index":2264,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ismutate",{"_index":2942,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":3269,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":3287,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":3499,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(left",{"_index":468,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["isopentype",{"_index":2294,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["isquerybody",{"_index":2943,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isstructuredtype",{"_index":1958,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["issubtypeof",{"_index":1846,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(schema",{"_index":1876,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(type",{"_index":2290,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["issupertypeof",{"_index":1847,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issupertypeof(schema",{"_index":1879,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof",{"_index":1848,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof(type",{"_index":1882,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["items",{"_index":2262,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["john",{"_index":3624,"title":{},"body":{"index.html":{}}}],["john@example.com\").or(e().eq(\"username",{"_index":3623,"title":{},"body":{"index.html":{}}}],["join",{"_index":485,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["json",{"_index":1386,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"index.html":{}}}],["json.body",{"_index":3152,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2642,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2644,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2508,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":3154,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":3155,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2507,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2641,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":3156,"title":{},"body":{"classes/ODataResponse.html":{}}}],["jsonbatchformat",{"_index":17,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["jsonschemacustom",{"_index":2182,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":2184,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":2185,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":2186,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":2181,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["k",{"_index":1816,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponseOptions.html":{}}}],["k.name",{"_index":2267,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.startswith(key",{"_index":1817,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":3245,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2869,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...keys",{"_index":2929,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(keys",{"_index":2880,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":286,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["key(value",{"_index":2676,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key.set(kt.alias",{"_index":2350,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["key.size",{"_index":2352,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keyof",{"_index":297,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys",{"_index":295,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2588,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["keys.indexof(k",{"_index":2926,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keytypes",{"_index":2341,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keywords",{"_index":3723,"title":{},"body":{"properties.html":{}}}],["key}=${params[key",{"_index":640,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["key}=${value",{"_index":2639,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3692,"title":{},"body":{"license.html":{}}}],["kt",{"_index":2343,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["kt.name.split",{"_index":2344,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["lambda",{"_index":529,"title":{"classes/Lambda.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":538,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":536,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":534,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["last",{"_index":1785,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2590,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1787,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le",{"_index":1224,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["le(left",{"_index":499,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["leap",{"_index":119,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["left",{"_index":318,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["left.split('/').pop().tolowercase()[0",{"_index":531,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op",{"_index":533,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${render(right",{"_index":532,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":415,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length(left",{"_index":410,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["levels",{"_index":75,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["levels(n",{"_index":1005,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["liability",{"_index":3708,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3705,"title":{},"body":{"license.html":{}}}],["library",{"_index":3552,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":3651,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":3671,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3695,"title":{},"body":{"license.html":{}}}],["line",{"_index":167,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"modules/ODataModule.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["lines",{"_index":1697,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1408,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["literal",{"_index":25,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":3611,"title":{},"body":{"index.html":{}}}],["loadconfigs",{"_index":1987,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["loader",{"_index":2533,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["loaders",{"_index":2531,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["location",{"_index":3179,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":3142,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logic",{"_index":98,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["logicaloperators",{"_index":488,"title":{"classes/LogicalOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["long_description",{"_index":2178,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["looking",{"_index":1888,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["lt",{"_index":1225,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["lt(left",{"_index":497,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":2073,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":3630,"title":{},"body":{"index.html":{}}}],["make",{"_index":2544,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["managed",{"_index":2712,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["map",{"_index":1263,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2638,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":2372,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["map((key",{"_index":639,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{}}}],["map((n",{"_index":656,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["map((name",{"_index":600,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataResponse.html":{}}}],["map((response",{"_index":1653,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["map((s",{"_index":2627,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["map((v",{"_index":484,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["map((value",{"_index":2003,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["map([...this.annotations",{"_index":1315,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["map(object.entries(values",{"_index":2896,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["map(this.annotations",{"_index":1320,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mapfields",{"_index":2386,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapfields(mapper",{"_index":2399,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapped",{"_index":2403,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapper",{"_index":2401,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["maps",{"_index":2402,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["match",{"_index":1255,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":1363,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":1361,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":1365,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":1256,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["matchespattern",{"_index":424,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["matchespattern(left",{"_index":3493,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matching",{"_index":306,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":1006,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/enumerations.html":{}}}],["max_age",{"_index":3239,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":220,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime",{"_index":939,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["maxdatetime(left",{"_index":442,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":240,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":208,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["meant",{"_index":1890,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["mediacontenttype",{"_index":1338,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":1336,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":1326,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":1334,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":285,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":283,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":2447,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3697,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2711,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"license.html":{}}}],["message",{"_index":1706,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":54,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":1328,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":1312,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{}}}],["methods",{"_index":311,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["microsoft.odata.sampleservice.models.trippin.airport",{"_index":3588,"title":{},"body":{"index.html":{}}}],["microsoft.odata.sampleservice.models.trippin.person",{"_index":3616,"title":{},"body":{"index.html":{}}}],["min",{"_index":3538,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mindatetime",{"_index":940,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["mindatetime(left",{"_index":444,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":44,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute",{"_index":941,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["minute(left",{"_index":446,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minutes",{"_index":126,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["miscellaneous",{"_index":3519,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":2448,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3652,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mod",{"_index":550,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":520,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":293,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["model.attach(this.entities",{"_index":2141,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entities().entity",{"_index":2140,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entity",{"_index":3369,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfieldoptions",{"_index":3748,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3749,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/collection",{"_index":2135,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["models/model",{"_index":2084,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":2099,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"license.html":{}}}],["modify(key",{"_index":2125,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["modifying",{"_index":2795,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["module",{"_index":2512,"title":{"modules/ODataModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":2514,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2523,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["month",{"_index":942,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["month(left",{"_index":448,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":551,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":516,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1544,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1545,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1679,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["n",{"_index":1002,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["n.render",{"_index":599,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["name",{"_index":254,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["named",{"_index":2329,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["namednodemap",{"_index":1184,"title":{},"body":{"classes/Field.html":{}}}],["names",{"_index":339,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["names.indexof(key",{"_index":2336,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["names.indexof(type",{"_index":1973,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.join",{"_index":347,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["names.join(cache_key_separator",{"_index":1804,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.length",{"_index":2436,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":1972,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":3342,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["names.reduce((acc",{"_index":352,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["namespace",{"_index":267,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":1898,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["namevalue",{"_index":2429,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["navigation",{"_index":287,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["navigationproperties",{"_index":724,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":58,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":761,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["navigationpropertybindings",{"_index":903,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne",{"_index":1226,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ne(left",{"_index":491,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":552,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":522,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["negated",{"_index":3412,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["nestedexpandoptions",{"_index":3750,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nestedorderby",{"_index":3751,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["net",{"_index":1429,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["network",{"_index":43,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":294,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["newline",{"_index":1546,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1547,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["next",{"_index":2538,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["nextlink",{"_index":1356,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2528,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["nicer",{"_index":1887,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["node",{"_index":579,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["node.children",{"_index":3443,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.connector",{"_index":3441,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.length",{"_index":3442,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.negated",{"_index":3445,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["none",{"_index":46,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBaseService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":243,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3701,"title":{},"body":{"license.html":{}}}],["nonparenthesisforemptyparameterfunction",{"_index":18,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["normalize",{"_index":315,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["normalize(value",{"_index":2794,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["normalized",{"_index":2793,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["normalizevalue",{"_index":328,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue(value",{"_index":369,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["not(exp",{"_index":3422,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["not(left",{"_index":505,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["notexp",{"_index":3448,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["notice",{"_index":3685,"title":{},"body":{"license.html":{}}}],["now",{"_index":450,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["npm",{"_index":3560,"title":{},"body":{"index.html":{}}}],["null",{"_index":364,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["nullable",{"_index":238,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":141,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":3258,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":1362,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":3259,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["numeric",{"_index":129,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["o",{"_index":606,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":3244,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["obj",{"_index":2769,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["object",{"_index":1687,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["object.assign",{"_index":1317,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{}}}],["object.assign(acc",{"_index":635,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["object.assign(acc.params",{"_index":2622,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":3070,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(this",{"_index":1260,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1449,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["object.create(null",{"_index":363,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":360,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":2281,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.entries(config.fields).map",{"_index":2424,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":1969,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(params",{"_index":2637,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.fromentries(key",{"_index":2354,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":362,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":359,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(attrs",{"_index":2335,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.keys(this.values).reduce",{"_index":644,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects",{"_index":324,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this._segments",{"_index":2645,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(this.values[key",{"_index":646,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects.clone(v",{"_index":399,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["objects.get(obj",{"_index":2775,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.has(obj",{"_index":2779,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.merge(obj",{"_index":2780,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.resolvekey(key",{"_index":2353,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["objects.set(obj",{"_index":2773,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.unset(obj",{"_index":2776,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["observable",{"_index":35,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1626,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3664,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1372,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{},"properties.html":{}}}],["odata.git",{"_index":3731,"title":{},"body":{"properties.html":{}}}],["odata.include",{"_index":3050,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":3301,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":3246,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":3248,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3647,"title":{},"body":{"index.html":{}}}],["odata/issues",{"_index":3728,"title":{},"body":{"properties.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1722,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:105",{"_index":1769,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:126",{"_index":1751,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:138",{"_index":1748,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:159",{"_index":1745,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:168",{"_index":1766,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:178",{"_index":1761,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:189",{"_index":1757,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:22",{"_index":1737,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:224",{"_index":1759,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1736,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:30",{"_index":1755,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:31",{"_index":1771,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1773,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:55",{"_index":1777,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:76",{"_index":1739,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:93",{"_index":1744,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":2466,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:4",{"_index":2467,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2490,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2493,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2492,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:35",{"_index":2499,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:45",{"_index":2498,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/helper.ts",{"_index":3771,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/loaders.ts",{"_index":1985,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:12",{"_index":2008,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:21",{"_index":1989,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:29",{"_index":1990,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:6",{"_index":2005,"title":{},"body":{"classes/ODataConfigLoader.html":{}}}],["odata/src/lib/loaders.ts:9",{"_index":2007,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/models/options.ts",{"_index":3529,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2515,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata/src/lib/module.ts:31",{"_index":2521,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":1367,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:103",{"_index":1368,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:123",{"_index":1401,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:134",{"_index":1403,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:21",{"_index":1396,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:25",{"_index":1392,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:29",{"_index":1375,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:33",{"_index":1387,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:37",{"_index":1393,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:41",{"_index":1384,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:45",{"_index":1378,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:49",{"_index":1390,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:53",{"_index":1381,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:57",{"_index":1397,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:61",{"_index":1373,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:66",{"_index":1369,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:72",{"_index":1377,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:82",{"_index":1391,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2662,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:11",{"_index":3468,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:15",{"_index":3467,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:19",{"_index":3465,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:23",{"_index":3463,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:26",{"_index":3461,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:29",{"_index":3466,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:33",{"_index":3464,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:36",{"_index":3462,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:41",{"_index":2663,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:43",{"_index":2665,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:46",{"_index":2670,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:49",{"_index":2664,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:52",{"_index":2666,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:55",{"_index":2667,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:58",{"_index":2669,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:6",{"_index":3460,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:61",{"_index":2668,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:8",{"_index":3469,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2573,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:109",{"_index":2596,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:122",{"_index":2581,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:127",{"_index":2584,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:132",{"_index":2595,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:146",{"_index":2586,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:151",{"_index":2591,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:156",{"_index":2580,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:162",{"_index":2587,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:49",{"_index":2578,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:55",{"_index":2593,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:74",{"_index":2600,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:80",{"_index":2589,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:95",{"_index":2598,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":3536,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts",{"_index":1032,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:15",{"_index":1039,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:19",{"_index":1037,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:31",{"_index":1035,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:33",{"_index":1034,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:37",{"_index":1036,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:41",{"_index":1038,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:6",{"_index":1033,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts",{"_index":568,"title":{},"body":{"classes/ComputeExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:18",{"_index":575,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:30",{"_index":585,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:72",{"_index":580,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:78",{"_index":588,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts",{"_index":612,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:107",{"_index":619,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:123",{"_index":615,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:14",{"_index":669,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:151",{"_index":621,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:18",{"_index":668,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:24",{"_index":667,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:66",{"_index":665,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:78",{"_index":662,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:8",{"_index":661,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:88",{"_index":666,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:98",{"_index":613,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts",{"_index":962,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:108",{"_index":1016,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:11",{"_index":1012,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:120",{"_index":1024,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:129",{"_index":1021,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:141",{"_index":1028,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:145",{"_index":1030,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:149",{"_index":1017,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:153",{"_index":1014,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:158",{"_index":1018,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:168",{"_index":963,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:17",{"_index":1031,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:177",{"_index":968,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:21",{"_index":1029,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:215",{"_index":964,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:220",{"_index":970,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:27",{"_index":1022,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:72",{"_index":1013,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:84",{"_index":1027,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:96",{"_index":1015,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/filter.ts",{"_index":3769,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts",{"_index":3376,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:101",{"_index":3382,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:105",{"_index":3385,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:12",{"_index":3400,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:16",{"_index":3399,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:23",{"_index":3398,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:39",{"_index":3397,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:48",{"_index":3379,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:57",{"_index":3386,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:6",{"_index":3396,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:73",{"_index":3380,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts",{"_index":3408,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:12",{"_index":3458,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:159",{"_index":3420,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:16",{"_index":3457,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:163",{"_index":3421,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:167",{"_index":3425,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:171",{"_index":3418,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:175",{"_index":3423,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:185",{"_index":3430,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:23",{"_index":3456,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:37",{"_index":3455,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:46",{"_index":3415,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:47",{"_index":3413,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:62",{"_index":3428,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:78",{"_index":3416,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:9",{"_index":3454,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts",{"_index":3470,"title":{},"body":{"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:10",{"_index":3471,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:19",{"_index":3476,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:57",{"_index":3472,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:62",{"_index":3474,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts",{"_index":310,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:127",{"_index":1196,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:135",{"_index":1200,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:139",{"_index":1199,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:150",{"_index":1198,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:186",{"_index":1197,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:197",{"_index":3483,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:20",{"_index":3407,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:201",{"_index":3484,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:205",{"_index":3485,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:209",{"_index":3486,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:21",{"_index":3406,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:213",{"_index":3487,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:217",{"_index":3488,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:22",{"_index":3404,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:221",{"_index":3490,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:236",{"_index":566,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:239",{"_index":565,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:245",{"_index":3494,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:252",{"_index":3495,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:255",{"_index":3496,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:258",{"_index":3497,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:264",{"_index":947,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:267",{"_index":948,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:270",{"_index":949,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:273",{"_index":950,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:276",{"_index":951,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:279",{"_index":952,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:282",{"_index":953,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:285",{"_index":954,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:288",{"_index":955,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:291",{"_index":956,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:294",{"_index":957,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:297",{"_index":958,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:300",{"_index":959,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:303",{"_index":960,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:309",{"_index":317,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:312",{"_index":321,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:315",{"_index":323,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:321",{"_index":3500,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:325",{"_index":3501,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:331",{"_index":1204,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:334",{"_index":1205,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:337",{"_index":1206,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:343",{"_index":610,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:348",{"_index":3371,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:355",{"_index":3375,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:359",{"_index":3374,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:370",{"_index":3373,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:417",{"_index":3372,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:427",{"_index":1227,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:430",{"_index":1234,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:433",{"_index":1229,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:436",{"_index":1228,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:439",{"_index":1233,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:442",{"_index":1232,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:453",{"_index":1235,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:456",{"_index":1230,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:459",{"_index":1231,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:465",{"_index":554,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:468",{"_index":559,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:471",{"_index":557,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:474",{"_index":555,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:477",{"_index":556,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:480",{"_index":558,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:485",{"_index":1208,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:488",{"_index":1212,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:492",{"_index":1211,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:499",{"_index":1210,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:513",{"_index":1209,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:518",{"_index":1214,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:525",{"_index":1218,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:529",{"_index":1217,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:540",{"_index":1216,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:568",{"_index":1215,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:578",{"_index":1220,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:582",{"_index":1219,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:9",{"_index":3405,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/handlers.ts",{"_index":2697,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:110",{"_index":2714,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:114",{"_index":2734,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:118",{"_index":2718,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:122",{"_index":2719,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:128",{"_index":2708,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:149",{"_index":2732,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:160",{"_index":2722,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:169",{"_index":2738,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:188",{"_index":2724,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:198",{"_index":2710,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:207",{"_index":2715,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:32",{"_index":2705,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:41",{"_index":2742,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:49",{"_index":2735,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:57",{"_index":2716,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:67",{"_index":2740,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:74",{"_index":2706,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:84",{"_index":2728,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:92",{"_index":2730,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2868,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:109",{"_index":2887,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:117",{"_index":2888,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:134",{"_index":2874,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:139",{"_index":2877,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:145",{"_index":2883,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:151",{"_index":2879,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:155",{"_index":2886,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:163",{"_index":2881,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:172",{"_index":2873,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:41",{"_index":2872,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:51",{"_index":2884,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:95",{"_index":2889,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2932,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2958,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2963,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2961,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2964,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2966,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:226",{"_index":2967,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:23",{"_index":2959,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:24",{"_index":2962,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:276",{"_index":2973,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:285",{"_index":2975,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:289",{"_index":2977,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:293",{"_index":2979,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:30",{"_index":2965,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:302",{"_index":2981,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:31",{"_index":2957,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:311",{"_index":2983,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:317",{"_index":2985,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:323",{"_index":2987,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:327",{"_index":2989,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:331",{"_index":2991,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:337",{"_index":2971,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:345",{"_index":2968,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:349",{"_index":2969,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:353",{"_index":2970,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2952,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2950,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2951,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2954,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:44",{"_index":2948,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3768,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":1283,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:103",{"_index":2052,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:107",{"_index":2054,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:111",{"_index":2056,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:115",{"_index":2058,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:119",{"_index":2034,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":1294,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:120",{"_index":2060,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:127",{"_index":2038,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:128",{"_index":2039,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:129",{"_index":2040,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:139",{"_index":2033,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:140",{"_index":2061,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:147",{"_index":2037,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:173",{"_index":2018,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:177",{"_index":2020,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:181",{"_index":2022,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:185",{"_index":2024,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:189",{"_index":2026,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:19",{"_index":1302,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:194",{"_index":2028,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:199",{"_index":2030,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:206",{"_index":2009,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:207",{"_index":2032,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:214",{"_index":2013,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":1304,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:30",{"_index":1306,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:35",{"_index":1300,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:36",{"_index":1296,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:37",{"_index":1298,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":1291,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":1292,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:83",{"_index":2043,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:87",{"_index":2045,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:91",{"_index":2047,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:95",{"_index":2049,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:99",{"_index":2050,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":671,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":1042,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:46",{"_index":1044,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:48",{"_index":1046,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:49",{"_index":1045,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":3213,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":3225,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":3224,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":3223,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":3221,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:25",{"_index":3222,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:27",{"_index":3220,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":3219,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:34",{"_index":3238,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:38",{"_index":3226,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:42",{"_index":3230,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:59",{"_index":3237,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:65",{"_index":3232,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:70",{"_index":3234,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:76",{"_index":3228,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":3108,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:134",{"_index":3120,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:135",{"_index":3134,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:145",{"_index":3117,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":3136,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:155",{"_index":3116,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:156",{"_index":3138,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:178",{"_index":3123,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:202",{"_index":3122,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:220",{"_index":3128,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:247",{"_index":3130,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":3121,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:31",{"_index":3115,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:47",{"_index":3125,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:59",{"_index":3127,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:80",{"_index":3129,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":3119,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:94",{"_index":3132,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3772,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1509,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:115",{"_index":1524,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:125",{"_index":1521,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:49",{"_index":1517,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:50",{"_index":1516,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:51",{"_index":1518,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:57",{"_index":1527,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:61",{"_index":1526,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:93",{"_index":1525,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3770,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":1237,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:18",{"_index":1241,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:30",{"_index":1253,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:39",{"_index":1246,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":1281,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":1280,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":1277,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":1278,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":1279,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":1276,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1843,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1851,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:24",{"_index":1871,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:36",{"_index":1862,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:58",{"_index":1864,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:68",{"_index":1873,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1854,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:78",{"_index":1868,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1852,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:86",{"_index":1859,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1853,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/element.ts",{"_index":3329,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:19",{"_index":3337,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:29",{"_index":3335,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:38",{"_index":3336,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:47",{"_index":3334,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:58",{"_index":3332,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:68",{"_index":3333,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:7",{"_index":3331,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:8",{"_index":3330,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/entity",{"_index":2063,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":2385,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/parsers/callable.ts",{"_index":1921,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:110",{"_index":1935,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:117",{"_index":1932,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:123",{"_index":1937,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:13",{"_index":2560,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:138",{"_index":1934,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:14",{"_index":2563,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:15",{"_index":2562,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:152",{"_index":1931,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:16",{"_index":2559,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:169",{"_index":1930,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:17",{"_index":2561,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:18",{"_index":2558,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:28",{"_index":2571,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:36",{"_index":2565,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:43",{"_index":2564,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:56",{"_index":2568,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:60",{"_index":2569,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:64",{"_index":2566,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:69",{"_index":2570,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:73",{"_index":2572,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:79",{"_index":2567,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:91",{"_index":1924,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:92",{"_index":1925,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:93",{"_index":1923,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:94",{"_index":1929,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:95",{"_index":1928,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:96",{"_index":1927,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:97",{"_index":1922,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/enum",{"_index":2416,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/schema/parsers/structured",{"_index":2174,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":3264,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:12",{"_index":3272,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":3276,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":3271,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":3275,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":3274,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":3273,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":3270,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:39",{"_index":3288,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:46",{"_index":3290,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:54",{"_index":3284,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:60",{"_index":3286,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:66",{"_index":3280,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":3282,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":3277,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/base.ts",{"_index":1461,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:100",{"_index":1493,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:105",{"_index":1495,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:110",{"_index":1496,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:15",{"_index":1469,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:22",{"_index":1498,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:26",{"_index":1485,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:32",{"_index":1486,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:38",{"_index":1487,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:44",{"_index":1488,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:50",{"_index":1489,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:63",{"_index":1476,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:69",{"_index":1478,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:75",{"_index":1479,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:81",{"_index":1480,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:87",{"_index":1481,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/entity",{"_index":2093,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":2069,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:12",{"_index":2082,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:6",{"_index":2077,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":2074,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":3346,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":3349,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":3352,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":3347,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":3356,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:34",{"_index":3367,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:44",{"_index":3365,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:58",{"_index":3363,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":7,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:168",{"_index":3401,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:173",{"_index":3403,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:178",{"_index":3402,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:196",{"_index":562,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:197",{"_index":561,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3767,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/wiki",{"_index":3650,"title":{},"body":{"index.html":{}}}],["odata_config",{"_index":2534,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata_entityid_headers",{"_index":3144,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":3574,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1548,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":3140,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionoptions",{"_index":1475,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataactionresource",{"_index":1473,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotatable",{"_index":1236,"title":{"classes/ODataAnnotatable.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:18",{"_index":1858,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:30",{"_index":1900,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:39",{"_index":1899,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation",{"_index":1243,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation(annot",{"_index":1264,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odataannotations",{"_index":1282,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:12",{"_index":2015,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:153",{"_index":2014,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:161",{"_index":2011,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:169",{"_index":2012,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:19",{"_index":2016,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:41",{"_index":2695,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:49",{"_index":2693,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:57",{"_index":2694,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:63",{"_index":2041,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":2010,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:71",{"_index":2035,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:79",{"_index":2036,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataapi",{"_index":1534,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":1366,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{}}}],["odatabaseservice",{"_index":1460,"title":{"classes/ODataBaseService.html":{}},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:100",{"_index":2080,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:26",{"_index":2079,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:63",{"_index":2078,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1508,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1628,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1597,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1609,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildjsonbody(this._requests",{"_index":1649,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody",{"_index":1667,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody(bound",{"_index":1661,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parsejsonresponse(this._requests",{"_index":1654,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parselegacyresponse(this._requests",{"_index":1663,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1721,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:105",{"_index":2481,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:126",{"_index":2476,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:138",{"_index":2475,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:14",{"_index":2471,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:159",{"_index":2474,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:168",{"_index":2480,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:178",{"_index":2479,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:189",{"_index":2477,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:22",{"_index":2469,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:224",{"_index":2478,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:23",{"_index":2468,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:29",{"_index":2470,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:38",{"_index":2482,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:54",{"_index":2494,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:55",{"_index":2483,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:64",{"_index":2497,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:76",{"_index":2472,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:79",{"_index":2496,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:93",{"_index":2473,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacacheentry",{"_index":1742,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1842,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":3302,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1855,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":1467,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odatacollection",{"_index":2134,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataconfigasyncloader",{"_index":1984,"title":{"classes/ODataConfigAsyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odataconfigloader",{"_index":1986,"title":{"classes/ODataConfigLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader",{"_index":1992,"title":{"classes/ODataConfigSyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader(passedconfig.config",{"_index":2542,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odatacontext",{"_index":1290,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":1499,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":1344,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesannotations(this.helper",{"_index":1347,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitiesoptions",{"_index":3754,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":1500,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":1322,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentityannotations(this.helper",{"_index":1348,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitycontainer",{"_index":2062,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":3305,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3755,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityresource",{"_index":2116,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice",{"_index":2068,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:19",{"_index":3360,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:27",{"_index":2115,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:35",{"_index":2103,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityset",{"_index":2064,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":2067,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":2114,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["odataentitysetservice",{"_index":2092,"title":{"classes/ODataEntitySetService.html":{}},"body":{"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":2173,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataentitytypekey(key",{"_index":2280,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataenumtype",{"_index":2384,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":3296,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":2398,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":2425,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":1939,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatafunctionoptions",{"_index":1484,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatafunctionresource",{"_index":1483,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":542,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1407,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[options?.version",{"_index":2220,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[parseroptions?.version",{"_index":2337,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[this.version",{"_index":1459,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":2465,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2489,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":1053,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_data_services",{"_index":1163,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_reference",{"_index":1154,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_schema",{"_index":1167,"title":{},"body":{"classes/Field.html":{}}}],["odatametadatatype",{"_index":32,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":2083,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3756,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3523,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodelfieldoptions",{"_index":3757,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":3525,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2513,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":3564,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":1491,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataoperators",{"_index":539,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1558,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":1926,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":1970,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odatapathsegments",{"_index":1554,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2646,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2661,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":1501,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":1313,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3758,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2745,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":1492,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2696,"title":{"classes/ODataQueryOptionHandler.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this.values",{"_index":2920,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2746,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(objects.clone(this.values",{"_index":2918,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionshandler",{"_index":2782,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odatareferential",{"_index":2188,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatareferential(referential",{"_index":2196,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatarequest",{"_index":1515,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1555,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1556,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2511,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":3118,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":3242,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options.parseroptions",{"_index":3163,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1850,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement",{"_index":1844,"title":{"classes/ODataSchemaElement.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement:29",{"_index":1885,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:38",{"_index":1896,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:47",{"_index":1883,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:58",{"_index":1877,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:68",{"_index":1880,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:7",{"_index":1856,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:8",{"_index":1857,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odatasegment",{"_index":2577,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2517,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odatasingletonresource",{"_index":3361,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odatasingletonservice",{"_index":3354,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":2743,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":3299,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":2183,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":2286,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser",{"_index":1940,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser).field",{"_index":1961,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatasyntax",{"_index":545,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataversion",{"_index":33,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":1288,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odatawithout",{"_index":3561,"title":{},"body":{"index.html":{}}}],["of([this.passedconfigs",{"_index":1997,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["of(cached",{"_index":1830,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["of(this.passedconfigs",{"_index":1996,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["offset",{"_index":112,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ok",{"_index":1720,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["omit",{"_index":1427,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["omitnullvalues",{"_index":1431,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["ondelete",{"_index":820,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["one",{"_index":2550,"title":{},"body":{"modules/ODataModule.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/PassedInitialConfig.html":{}}}],["onerror",{"_index":1511,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(response",{"_index":1519,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1512,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(response",{"_index":1522,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":481,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":292,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1410,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1413,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["open.org/odata/odata/v4.01/odata",{"_index":2785,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["opentype",{"_index":725,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["operator",{"_index":480,"title":{"classes/Operator.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":513,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":502,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":519,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":490,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":496,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":494,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":508,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":510,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":500,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":498,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":521,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":517,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":492,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":506,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":504,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":515,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operators",{"_index":541,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":648,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["option(key",{"_index":2882,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":650,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["options",{"_index":229,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["options.body",{"_index":3084,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.bodyqueryoptions",{"_index":3089,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.context",{"_index":3083,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.custom",{"_index":2374,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.custom[f.name",{"_index":2375,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.etag",{"_index":3080,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.expand",{"_index":2368,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.fetchpolicy",{"_index":3088,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.headers",{"_index":1647,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.helper",{"_index":3201,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":3194,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes",{"_index":3208,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":3204,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":3211,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.observe",{"_index":3085,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.params",{"_index":1650,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.reportprogress",{"_index":3086,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.required",{"_index":2377,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.required[f.name",{"_index":2378,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.responsetype",{"_index":3087,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.select",{"_index":2369,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select).indexof(f.name",{"_index":2370,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.withcount",{"_index":3077,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.withcredentials",{"_index":1651,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["opts",{"_index":246,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts(node",{"_index":1010,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["or(exp",{"_index":3424,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["or(left",{"_index":503,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["order",{"_index":3389,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderby",{"_index":70,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":1019,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{}}}],["orderbyexpression",{"_index":973,"title":{"classes/OrderByExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyexpression.orderby",{"_index":2822,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["orderbyexpression.orderby(opts",{"_index":998,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["orderbyexpressionbuilder",{"_index":974,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["orderbyexpressionbuilder,current",{"_index":1020,"title":{},"body":{"classes/ExpandField.html":{},"classes/OrderByExpression.html":{}}}],["orderbyfield",{"_index":3388,"title":{"classes/OrderByField.html":{}},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(field",{"_index":3395,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(this.field.clone",{"_index":3393,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyobject",{"_index":3761,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3762,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1635,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1417,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["other.annotations",{"_index":1316,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["other.context",{"_index":1319,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["otherwise",{"_index":3712,"title":{},"body":{"license.html":{}}}],["out",{"_index":3714,"title":{},"body":{"license.html":{}}}],["output",{"_index":1893,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["override",{"_index":1563,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["overview",{"_index":3718,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":296,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["p.configure",{"_index":1982,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":1979,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.name",{"_index":1975,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":1978,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":3169,"title":{},"body":{"classes/ODataResponse.html":{}}}],["pack",{"_index":2387,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["pack(value",{"_index":2404,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["package",{"_index":3502,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pagination",{"_index":2840,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["paging",{"_index":2833,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["param",{"_index":202,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["param0",{"_index":2832,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["parameter",{"_index":234,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":1946,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":1944,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":1942,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":301,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["parameters(value",{"_index":2681,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":1977,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":19,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["params[p.name",{"_index":1976,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":2270,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parent.children.push(this",{"_index":2313,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parentelement",{"_index":1192,"title":{},"body":{"classes/Field.html":{}}}],["parentelement.children",{"_index":1195,"title":{},"body":{"classes/Field.html":{}}}],["parenthesis",{"_index":1388,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["parse",{"_index":1181,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parsejsonresponse",{"_index":1715,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parselegacyresponse",{"_index":1690,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parser",{"_index":224,"title":{"interfaces/Parser.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["parser.deserialize(value",{"_index":2224,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.encode(v",{"_index":382,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["parser.parsefromstring(xml",{"_index":1143,"title":{},"body":{"classes/Field.html":{}}}],["parser.serialize(value",{"_index":2226,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype",{"_index":1914,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["parserfortype(this.base",{"_index":2312,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype(this.return.type",{"_index":1980,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":1952,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions",{"_index":216,"title":{"interfaces/ParserOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parseroptions?.stringasenum",{"_index":2437,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":259,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1418,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["part2",{"_index":2787,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["partial",{"_index":1295,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["particular",{"_index":3699,"title":{},"body":{"license.html":{}}}],["partner",{"_index":821,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["passed",{"_index":2552,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig",{"_index":2522,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig?.loader",{"_index":2554,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfigs",{"_index":1994,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["passedinitialconfig",{"_index":2520,"title":{"interfaces/PassedInitialConfig.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["patch",{"_index":1572,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["patch'].indexof(this._method",{"_index":3044,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":3362,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":29,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["path(value",{"_index":2674,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.slice(1",{"_index":2612,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2611,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2601,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2575,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["pathandparams(undefined",{"_index":2592,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["paths",{"_index":2623,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment",{"_index":52,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegment.entityset",{"_index":1794,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegment.function",{"_index":2607,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment.navigationproperty",{"_index":2650,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment.property",{"_index":2651,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2605,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder(segment",{"_index":2619,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathwithparams",{"_index":2944,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":425,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["payload",{"_index":245,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":3615,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":3628,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":3614,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":3617,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3658,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":266,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3679,"title":{},"body":{"license.html":{}}}],["person",{"_index":3663,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3680,"title":{},"body":{"license.html":{}}}],["pick",{"_index":2334,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picked",{"_index":2333,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picks",{"_index":2331,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["pipe",{"_index":1652,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"index.html":{}}}],["please",{"_index":3547,"title":{},"body":{"index.html":{}}}],["point",{"_index":140,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["points",{"_index":174,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["policy",{"_index":1380,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["polygon",{"_index":170,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["polygons",{"_index":180,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["portions",{"_index":3689,"title":{},"body":{"license.html":{}}}],["post",{"_index":1571,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":3057,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":132,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":1254,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["predicate(this",{"_index":2296,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["prefer",{"_index":20,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":3059,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":3049,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":3058,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":3047,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`omit",{"_index":3053,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":3045,"title":{},"body":{"classes/ODataRequest.html":{}}}],["preference",{"_index":3235,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference.split(',').foreach((prefer",{"_index":3255,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference_applied",{"_index":3145,"title":{},"body":{"classes/ODataResponse.html":{}}}],["preferenceapplied",{"_index":3176,"title":{},"body":{"classes/ODataResponse.html":{}}}],["prefix",{"_index":334,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["prefix}/${names.join",{"_index":346,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["pretty",{"_index":1892,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["primitive",{"_index":2750,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["private",{"_index":49,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":3548,"title":{},"body":{"index.html":{}}}],["projects/.../builder.ts",{"_index":3527,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../compute.ts",{"_index":3735,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../count.ts",{"_index":3736,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../durations.ts",{"_index":3737,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../expand.ts",{"_index":3739,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../filter.ts",{"_index":3744,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../helper.ts",{"_index":3753,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":3522,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../options.ts",{"_index":3524,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../orderby.ts",{"_index":3760,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3738,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../search.ts",{"_index":3764,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":3759,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../select.ts",{"_index":3765,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../structured",{"_index":3747,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../syntax.ts",{"_index":3752,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":3521,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"properties.html":{}}}],["property",{"_index":57,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":1343,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.enum",{"_index":2445,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["property.ts",{"_index":817,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":908,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":852,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":853,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":854,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":856,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":855,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":851,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":825,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":909,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":828,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":826,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":829,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":827,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":866,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":911,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:41",{"_index":867,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:42",{"_index":868,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:46",{"_index":840,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:47",{"_index":841,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":910,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":850,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":1078,"title":{},"body":{"classes/Field.html":{}}}],["propertyrefs",{"_index":741,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["props",{"_index":1345,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["protected",{"_index":386,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1419,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["protocol/odata",{"_index":1414,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["provide",{"_index":2548,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["provided",{"_index":3690,"title":{},"body":{"license.html":{}}}],["provider",{"_index":2529,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["providers",{"_index":2516,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["proxy",{"_index":340,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["public",{"_index":48,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3673,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3700,"title":{},"body":{"license.html":{}}}],["push",{"_index":2702,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["push(value",{"_index":2727,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["put",{"_index":560,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":244,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1768,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1734,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1770,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.apply(options",{"_index":1505,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["q.expand",{"_index":3618,"title":{},"body":{"index.html":{}}}],["q.filter",{"_index":3601,"title":{},"body":{"index.html":{}}}],["q.filter().clear",{"_index":3613,"title":{},"body":{"index.html":{}}}],["q.filter().push",{"_index":3608,"title":{},"body":{"index.html":{}}}],["qualifier",{"_index":704,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["queries",{"_index":3584,"title":{},"body":{"index.html":{}}}],["query",{"_index":235,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query((q",{"_index":3600,"title":{},"body":{"index.html":{}}}],["query.compute",{"_index":2854,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.expand",{"_index":2851,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.filter",{"_index":2861,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.orderby",{"_index":2864,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.search",{"_index":2859,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.select",{"_index":2848,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.transform",{"_index":2856,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["querycustomtype",{"_index":326,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":3526,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":3544,"title":{},"body":{"index.html":{}}}],["queryoption",{"_index":28,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoption.compute",{"_index":2806,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.count",{"_index":985,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.expand",{"_index":981,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.filter",{"_index":627,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.format",{"_index":2894,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.levels",{"_index":986,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.orderby",{"_index":982,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.search",{"_index":628,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.select",{"_index":980,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.skip",{"_index":983,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.skiptoken",{"_index":2893,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.top",{"_index":984,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.transform",{"_index":2892,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":3763,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["r",{"_index":1477,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1840,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1602,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["r2",{"_index":1583,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":2257,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw",{"_index":2179,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"miscellaneous/enumerations.html":{}}}],["raw((value",{"_index":2903,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["raw(`'${serialized",{"_index":2442,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":2311,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw(key",{"_index":2616,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":2443,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(v.render",{"_index":2902,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["raw(value",{"_index":2783,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["read",{"_index":1786,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["readlink",{"_index":1330,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":653,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["readonlyarray",{"_index":2995,"title":{},"body":{"classes/ODataRequest.html":{}}}],["reduce",{"_index":1792,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":631,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["reference",{"_index":59,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":797,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":799,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:16",{"_index":801,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:17",{"_index":800,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:21",{"_index":810,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:23",{"_index":813,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:24",{"_index":811,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:25",{"_index":812,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":861,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":864,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":863,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":862,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":291,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":289,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":1139,"title":{},"body":{"classes/Field.html":{}}}],["referential",{"_index":290,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":1081,"title":{},"body":{"classes/Field.html":{}}}],["referentialconstraints",{"_index":822,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":288,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["reg",{"_index":1266,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["reg.test(a.term",{"_index":1270,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["regexp",{"_index":1245,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["regexp(`^${term",{"_index":1268,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["region",{"_index":250,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":1962,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"index.html":{}}}],["relative",{"_index":1566,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["remove",{"_index":1746,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/enumerations.html":{}}}],["remove(...keys",{"_index":2923,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(keys",{"_index":2885,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(value",{"_index":2729,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["removed",{"_index":3534,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":331,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":396,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":486,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.field",{"_index":636,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["render(this.group",{"_index":527,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.value",{"_index":3433,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["render(undefined",{"_index":589,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["render(v",{"_index":397,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value(syntax",{"_index":366,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render",{"_index":368,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":330,"title":{"interfaces/Renderable.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["replace",{"_index":3174,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2939,"title":{},"body":{"classes/ODataRequest.html":{}}}],["repository",{"_index":3729,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":210,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1617,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["req.api",{"_index":1618,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1827,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1837,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1823,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1825,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1622,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1838,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1790,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":227,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["request('post",{"_index":1648,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.request.method",{"_index":1675,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.tojson",{"_index":1689,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.urlwithparams",{"_index":1713,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request>('post",{"_index":1660,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requester",{"_index":1616,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1600,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests.map((request",{"_index":1688,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests[index].request",{"_index":1704,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["require",{"_index":2164,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["required",{"_index":595,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["res",{"_index":1568,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1832,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1836,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":3147,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1796,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.destroy(options",{"_index":2155,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.haskey",{"_index":2149,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.headers",{"_index":3148,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1578,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1684,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":2153,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1834,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2487,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1676,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1678,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1680,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1682,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1681,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1573,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(this.request.body",{"_index":1577,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${request.tolegacy",{"_index":1683,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1576,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":3149,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":3150,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2510,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":2151,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":3151,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res['body",{"_index":1585,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res['headers",{"_index":1584,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["reset",{"_index":3531,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resolve",{"_index":351,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["resolve'].includes(key",{"_index":355,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["resolve([this.field",{"_index":979,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["resolve(this.values",{"_index":394,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["resolve(values",{"_index":370,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["resolvekey",{"_index":2340,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["resource",{"_index":1472,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resource.call(params",{"_index":1506,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.fetch",{"_index":1507,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.query((q",{"_index":1504,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resourceparams",{"_index":3018,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":3069,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":3067,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":3017,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1502,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":2180,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["response",{"_index":1395,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["response.body",{"_index":1698,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1693,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.ok",{"_index":1587,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['body",{"_index":1719,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['status",{"_index":1717,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2500,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":217,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1557,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responses.map((response",{"_index":1716,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1474,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1639,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restorerequester",{"_index":1630,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["restriction",{"_index":3670,"title":{},"body":{"license.html":{}}}],["result",{"_index":1632,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["result.params",{"_index":2625,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2624,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":305,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrun",{"_index":2843,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["return",{"_index":209,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":319,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["returntype",{"_index":674,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["right",{"_index":329,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["rights",{"_index":3672,"title":{},"body":{"license.html":{}}}],["root",{"_index":3577,"title":{},"body":{"index.html":{}}}],["round",{"_index":161,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["round(left",{"_index":322,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":36,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1781,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitySetService.html":{}}}],["s",{"_index":1494,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataSingletonService.html":{}}}],["s.key",{"_index":2635,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1793,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2643,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1795,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2628,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["same",{"_index":1621,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["save",{"_index":2100,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["save(attrs",{"_index":2127,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["sbyte",{"_index":102,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["scale",{"_index":133,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":1048,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["schema.alias",{"_index":1910,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":2249,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.default",{"_index":2261,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.format",{"_index":2242,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.iscompoundkey",{"_index":2162,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.maxlength",{"_index":2251,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.namespace",{"_index":1909,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":2231,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.org/draft",{"_index":2363,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.pattern",{"_index":2243,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.properties",{"_index":2371,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.required",{"_index":2376,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.resolvekey(attrs",{"_index":2167,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.ts",{"_index":878,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":888,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":897,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":890,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":895,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":892,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":894,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":896,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":889,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":893,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":899,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":898,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":891,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":2241,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schemaconfig",{"_index":261,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":260,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1735,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1772,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1813,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1812,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":68,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["search(opts",{"_index":1023,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{}}}],["searchconnector",{"_index":3414,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpression",{"_index":975,"title":{"classes/SearchExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchexpression.search",{"_index":2815,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["searchexpression.search(opts",{"_index":996,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["searchexpressionbuilder",{"_index":976,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpressionbuilder,current",{"_index":3427,"title":{},"body":{"classes/SearchExpression.html":{}}}],["searchterm",{"_index":3432,"title":{"classes/SearchTerm.html":{}},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(this.value",{"_index":3434,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(value",{"_index":3452,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["second",{"_index":943,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["second(left",{"_index":452,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["seconds",{"_index":120,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["segment",{"_index":2583,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segment.clearkey",{"_index":2632,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2613,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2633,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2606,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2608,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2610,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2603,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2653,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2658,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1607,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2594,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegment.batch",{"_index":1608,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2649,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2630,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2654,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2634,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1791,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2655,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2656,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":64,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(opts",{"_index":1025,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SelectExpression.html":{}}}],["selectexpression",{"_index":977,"title":{"classes/SelectExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SelectExpression.html":{}}}],["selectexpression.select",{"_index":2799,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["selectexpression.select(opts",{"_index":991,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["selectexpressionbuilder",{"_index":978,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["selectexpressionbuilder,current",{"_index":1026,"title":{},"body":{"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["selector",{"_index":3575,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3766,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3677,"title":{},"body":{"license.html":{}}}],["send",{"_index":1374,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["send(options",{"_index":1641,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendjson(options",{"_index":1645,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendlegacy",{"_index":1659,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sent",{"_index":1383,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["sequence",{"_index":90,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialization",{"_index":1874,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":231,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":1936,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1872,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1875,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1714,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":303,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":253,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2532,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["sessionstorage",{"_index":2501,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":759,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set(path",{"_index":2731,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["set.ts",{"_index":760,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{}}}],["set.ts:101",{"_index":2130,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:119",{"_index":2126,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:136",{"_index":2112,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:154",{"_index":2124,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:176",{"_index":2128,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:19",{"_index":2113,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:3",{"_index":763,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:36",{"_index":2106,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:37",{"_index":2107,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:48",{"_index":2132,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:5",{"_index":766,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:56",{"_index":2118,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:6",{"_index":764,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:65",{"_index":2120,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:7",{"_index":767,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:78",{"_index":2122,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:8",{"_index":765,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:87",{"_index":2109,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["setcache",{"_index":3214,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":3227,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":3215,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":3229,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":3216,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":3231,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied",{"_index":3217,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied(preference",{"_index":3233,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setup",{"_index":3563,"title":{},"body":{"index.html":{}}}],["setversion",{"_index":3218,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":3236,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3686,"title":{},"body":{"license.html":{}}}],["shortcut",{"_index":2831,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["shortcuts",{"_index":2156,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["side",{"_index":3722,"title":{},"body":{"properties.html":{}}}],["signed",{"_index":86,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["single",{"_index":150,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleconfigorarray",{"_index":2000,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleconfigorarray.pipe",{"_index":2002,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleton",{"_index":56,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":3351,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":902,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":904,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":905,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":907,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":906,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":3353,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":749,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":3359,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":72,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skip(n",{"_index":1000,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["skip(opts",{"_index":2827,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["skiptoken",{"_index":73,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skiptoken(opts",{"_index":2829,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["software",{"_index":3666,"title":{},"body":{"license.html":{}}}],["some(predicate",{"_index":2733,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["specific",{"_index":2165,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["specified",{"_index":1186,"title":{},"body":{"classes/Field.html":{}}}],["split",{"_index":3167,"title":{},"body":{"classes/ODataResponse.html":{}}}],["split(newline_regexp",{"_index":1699,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["srid",{"_index":690,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["standardaggregatemethods",{"_index":3528,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["started",{"_index":3541,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1595,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1703,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":3482,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(left",{"_index":412,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1779,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":3605,"title":{},"body":{"index.html":{}}}],["static",{"_index":572,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["status",{"_index":1711,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["statustext",{"_index":1712,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2491,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":50,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":3261,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["storerequester",{"_index":1613,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["stream",{"_index":154,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["streaming",{"_index":205,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":94,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["string(name",{"_index":2330,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["stringandcollectionfunctions",{"_index":401,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":21,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":423,"title":{"classes/StringFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":177,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["strings.titlecase(this.name",{"_index":2289,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.uniqueid",{"_index":1560,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1394,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["stripmetadata",{"_index":22,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":736,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["structured",{"_index":720,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["structuredtype",{"_index":1963,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["structuredtypeconfig",{"_index":273,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":223,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":221,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":2071,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":1960,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["styleurls",{"_index":3580,"title":{},"body":{"index.html":{}}}],["sub",{"_index":553,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["sub(left",{"_index":514,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sub)seconds",{"_index":127,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["subject",{"_index":1510,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3675,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":3592,"title":{},"body":{"index.html":{}}}],["subscribe((airports",{"_index":3593,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3688,"title":{},"body":{"license.html":{}}}],["substring",{"_index":414,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["substring(left",{"_index":3489,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["subtype",{"_index":1878,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["sum",{"_index":3537,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super",{"_index":596,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["super(annotationlist",{"_index":705,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(config",{"_index":1901,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["super(field",{"_index":2191,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["super(init",{"_index":3146,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":737,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super.clone",{"_index":1610,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["super.flush",{"_index":2509,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["supertype",{"_index":1881,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["support",{"_index":3634,"title":{},"body":{"index.html":{}}}],["supported",{"_index":1190,"title":{},"body":{"classes/Field.html":{}}}],["switch",{"_index":1615,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["switchmap",{"_index":1533,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["symbol",{"_index":343,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["symbol.tostringtag",{"_index":388,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":2553,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"miscellaneous/enumerations.html":{}}}],["syntax",{"_index":547,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["system",{"_index":164,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["t",{"_index":230,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":3554,"title":{},"body":{"index.html":{}}}],["tag",{"_index":1052,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":1086,"title":{},"body":{"classes/Field.html":{}}}],["tag_action_import",{"_index":1092,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotation",{"_index":1067,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotations",{"_index":1066,"title":{},"body":{"classes/Field.html":{}}}],["tag_complex_type",{"_index":1072,"title":{},"body":{"classes/Field.html":{}}}],["tag_data_services",{"_index":1057,"title":{},"body":{"classes/Field.html":{}}}],["tag_edmx",{"_index":1055,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_container",{"_index":1087,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_set",{"_index":1088,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_type",{"_index":1074,"title":{},"body":{"classes/Field.html":{}}}],["tag_enum_type",{"_index":1069,"title":{},"body":{"classes/Field.html":{}}}],["tag_function",{"_index":1083,"title":{},"body":{"classes/Field.html":{}}}],["tag_function_import",{"_index":1090,"title":{},"body":{"classes/Field.html":{}}}],["tag_include",{"_index":1061,"title":{},"body":{"classes/Field.html":{}}}],["tag_include_annotations",{"_index":1063,"title":{},"body":{"classes/Field.html":{}}}],["tag_key",{"_index":1076,"title":{},"body":{"classes/Field.html":{}}}],["tag_member",{"_index":1071,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property",{"_index":1079,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property_binding",{"_index":1094,"title":{},"body":{"classes/Field.html":{}}}],["tag_on_delete",{"_index":1082,"title":{},"body":{"classes/Field.html":{}}}],["tag_parameter",{"_index":1085,"title":{},"body":{"classes/Field.html":{}}}],["tag_property",{"_index":1075,"title":{},"body":{"classes/Field.html":{}}}],["tag_property_ref",{"_index":1077,"title":{},"body":{"classes/Field.html":{}}}],["tag_reference",{"_index":1059,"title":{},"body":{"classes/Field.html":{}}}],["tag_referential_constraint",{"_index":1080,"title":{},"body":{"classes/Field.html":{}}}],["tag_return_type",{"_index":1084,"title":{},"body":{"classes/Field.html":{}}}],["tag_schema",{"_index":1068,"title":{},"body":{"classes/Field.html":{}}}],["tag_singleton",{"_index":1089,"title":{},"body":{"classes/Field.html":{}}}],["tag_term",{"_index":1065,"title":{},"body":{"classes/Field.html":{}}}],["tag_type_definition",{"_index":1095,"title":{},"body":{"classes/Field.html":{}}}],["tags",{"_index":1054,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(res",{"_index":1776,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1818,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1798,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1802,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1819,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1780,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1833,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["target",{"_index":344,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["targetnamespace",{"_index":808,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["te",{"_index":2796,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["templateurl",{"_index":3578,"title":{},"body":{"index.html":{}}}],["term",{"_index":263,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["term(value",{"_index":3429,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["termnamespace",{"_index":807,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["terms",{"_index":885,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["test",{"_index":2725,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["text",{"_index":1662,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":3042,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":1144,"title":{},"body":{"classes/Field.html":{}}}],["text_plain",{"_index":2994,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._add(countfield",{"_index":658,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["this._add(exp",{"_index":3447,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(field",{"_index":3477,"title":{},"body":{"classes/SelectExpression.html":{}}}],["this._add(name",{"_index":608,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._add(new",{"_index":3394,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(node",{"_index":1011,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this._add(notexp",{"_index":3451,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._annotations",{"_index":3192,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_etag",{"_index":3197,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_id",{"_index":3199,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":3008,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._children",{"_index":655,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.length",{"_index":1040,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.map((c",{"_index":602,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.map((n",{"_index":598,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._children.push",{"_index":3446,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.push(node",{"_index":605,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["this._connector",{"_index":3435,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._context",{"_index":3188,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._fields",{"_index":2423,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._fields.filter",{"_index":2318,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["this._fields.foreach((f",{"_index":2314,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._fields.map((f",{"_index":2446,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._fields.push(field",{"_index":2287,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._functions",{"_index":1350,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":3061,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._keys",{"_index":2278,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._method",{"_index":2996,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._negated",{"_index":3436,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._options",{"_index":3162,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":3184,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":3170,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":3181,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setpreferenceapplied(preferenceapplied",{"_index":3178,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":3175,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":3074,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":3106,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":3102,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":3020,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":3092,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}?${this._params",{"_index":3103,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":3185,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":1341,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._requests",{"_index":1612,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1601,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1627,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1629,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses",{"_index":1604,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses).foreach((tuple",{"_index":1656,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":3006,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2617,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2640,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2657,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.reduce",{"_index":2618,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2648,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.accept",{"_index":1447,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.add(ctx",{"_index":1665,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.addfield(name",{"_index":2284,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.alias",{"_index":530,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.annotatedvalue(computed",{"_index":2214,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(long_description",{"_index":2366,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(term",{"_index":2288,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["this.annotations",{"_index":1261,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.annotations.find(predicate",{"_index":1265,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.api",{"_index":1619,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":2142,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":1913,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(bindingtype",{"_index":3314,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(callablebindingtype",{"_index":3320,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":2087,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":3037,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":3032,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":3029,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":3035,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":3015,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":3023,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":3026,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":3014,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":3063,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.jsonbatchformat",{"_index":1642,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.options.params",{"_index":3072,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":3056,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":3048,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":3046,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.omitnullvalues",{"_index":3052,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":3043,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":3205,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":3012,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.requester",{"_index":1614,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this.path",{"_index":3100,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":3101,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":2086,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.assertarray",{"_index":2768,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().every(predicate",{"_index":2763,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().filter((v",{"_index":2756,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().find(predicate",{"_index":2764,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().push(value",{"_index":2754,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().some(predicate",{"_index":2762,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray()[index",{"_index":2761,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(false",{"_index":2774,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(true",{"_index":2772,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.base",{"_index":2273,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.body",{"_index":3157,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":3187,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1445,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":3104,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":3094,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":3105,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":1904,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1805,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1806,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1814,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":3262,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":3300,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find((c",{"_index":3315,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":3327,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":1145,"title":{},"body":{"classes/Field.html":{}}}],["this.children",{"_index":2298,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.client",{"_index":3355,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.apifor(this.apinameorentitytype",{"_index":1503,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["this.client.entityset(this.name",{"_index":2136,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.client.singleton(this.name",{"_index":3368,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.collection",{"_index":1945,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.complete",{"_index":1589,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":1906,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.configs",{"_index":2001,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["this.containers",{"_index":3303,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":3308,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":1318,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":1309,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":1311,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.create(attrs",{"_index":2160,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.default",{"_index":2197,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.deleterefby",{"_index":1453,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.deserialize(this.default",{"_index":2229,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.entities",{"_index":3297,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities().create(attrs",{"_index":2147,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().entity(key",{"_index":2137,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchall(options",{"_index":2143,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchmany(top",{"_index":2145,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchone(options",{"_index":2146,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities.find((e",{"_index":3312,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":3325,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":3370,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entity(key",{"_index":2148,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entitysetpath",{"_index":1902,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":2065,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":3322,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":2088,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1789,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1821,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1815,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1809,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1807,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":2213,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.enums",{"_index":3294,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":3310,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":3323,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error(response",{"_index":1593,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.escape",{"_index":400,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.factory.entityset",{"_index":3586,"title":{},"body":{"index.html":{}}}],["this.fetchpolicy",{"_index":1443,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field",{"_index":989,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.field.clone",{"_index":990,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.field.tojson",{"_index":626,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.fields",{"_index":2303,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields().find",{"_index":2428,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.fields().map(mapper",{"_index":2431,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.find((s",{"_index":2659,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":1269,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.findchildparser(predicate",{"_index":2302,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.flags",{"_index":2421,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1808,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":1353,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.cachekey",{"_index":2488,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":1147,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects",{"_index":1152,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects(dataservices",{"_index":1166,"title":{},"body":{"classes/Field.html":{}}}],["this.getresponse(req",{"_index":1829,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group",{"_index":1561,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.group.tojson",{"_index":526,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1824,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1826,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1437,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":3183,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":3164,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(headerkey",{"_index":3173,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":3196,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":3180,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(preference_applied",{"_index":3177,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":3158,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":1314,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.annotations(data",{"_index":1308,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":1307,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":1355,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":1359,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":1333,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":1354,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":1323,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":1325,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":1351,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":1324,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":1339,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":1337,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":1327,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":1335,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":1329,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":1357,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":1342,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":1321,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":1331,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":1310,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.id",{"_index":1559,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.ieee754compatible",{"_index":3250,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isentitytype",{"_index":2324,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.isenumtype",{"_index":1956,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.isexpired(entry",{"_index":1810,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isquerybody",{"_index":3091,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.isstructuredtype",{"_index":1959,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.istypeof(schema.type",{"_index":3343,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.istypeof(type",{"_index":2291,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.jsonbatchformat",{"_index":1457,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.keys",{"_index":2342,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.location",{"_index":3254,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":3260,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":2199,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.members",{"_index":2409,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":3247,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.modify(key",{"_index":2171,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.n",{"_index":2747,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.name",{"_index":390,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.names",{"_index":597,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.names.push(name",{"_index":604,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.namespace",{"_index":1965,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["this.namespace}.${this.name",{"_index":1971,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":2440,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":2438,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${params.join",{"_index":398,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":2203,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.next(response",{"_index":1588,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":1360,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.nonparenthesisforemptyparameterfunction",{"_index":1455,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.normalize",{"_index":393,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":1943,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.o.delete(this.n",{"_index":2781,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n",{"_index":2748,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n).filter((v",{"_index":2777,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n).length",{"_index":2758,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n)[0",{"_index":2760,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.has(this.n",{"_index":2753,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.set",{"_index":2755,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.set(this.n",{"_index":2751,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.observe",{"_index":3003,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":3625,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":3612,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":482,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":2275,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.option",{"_index":641,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.count",{"_index":1008,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.levels",{"_index":1007,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.skip",{"_index":1001,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.top",{"_index":1004,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.options",{"_index":3193,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.clear",{"_index":2842,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression",{"_index":2798,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.compute",{"_index":2808,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.expand",{"_index":2803,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.filter",{"_index":2819,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.orderby",{"_index":2823,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.search",{"_index":2816,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoption.select",{"_index":2800,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.helper.context",{"_index":3189,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.option",{"_index":2821,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.compute",{"_index":2809,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.expand",{"_index":2852,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.filter",{"_index":2862,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.format",{"_index":2812,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.orderby",{"_index":2865,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.search",{"_index":2817,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.select",{"_index":2849,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.skip",{"_index":2828,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.skiptoken",{"_index":2830,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.top",{"_index":2826,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoption.transform",{"_index":2857,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.expand",{"_index":2804,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.filter",{"_index":2820,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.orderby",{"_index":2824,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.select",{"_index":2801,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoption.transform",{"_index":2814,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.compute",{"_index":2855,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.expand",{"_index":2853,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.filter",{"_index":2863,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.orderby",{"_index":2866,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.search",{"_index":2860,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.select",{"_index":2850,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.skip",{"_index":2837,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.skiptoken",{"_index":2835,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.top",{"_index":2839,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoption.transform",{"_index":2858,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.toqueryarguments",{"_index":2844,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.version",{"_index":3186,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.op}(${left",{"_index":487,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.order",{"_index":3392,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.paging(query",{"_index":2867,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.parameters",{"_index":1968,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":1983,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":1981,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1435,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.params.keys().length",{"_index":3097,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.parent",{"_index":2292,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.fields",{"_index":2317,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.isentitytype",{"_index":2322,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.issubtypeof(type",{"_index":2293,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.keys",{"_index":2320,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parse(parser",{"_index":2225,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser",{"_index":1908,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.binding",{"_index":1920,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":1916,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":1917,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.encode(v",{"_index":1951,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":1919,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.field(enu",{"_index":2412,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.fields(value",{"_index":2411,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.mapfields(mapper",{"_index":2413,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.pack(value",{"_index":2415,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":1912,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":1950,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":1918,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.tojsonschema(options",{"_index":2233,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser.unpack(value",{"_index":2414,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parseroptions",{"_index":1947,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.path",{"_index":3099,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.path.endswith($batch",{"_index":3107,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.pathandparams",{"_index":2636,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.path}?${this.params",{"_index":3098,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.payload",{"_index":3191,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":2205,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.prefer",{"_index":1451,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.properties.get(name",{"_index":1346,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.property",{"_index":2189,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.put(req.cachekey",{"_index":2486,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1835,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":3583,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":2190,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.references",{"_index":1151,"title":{},"body":{"classes/Field.html":{}}}],["this.referentials",{"_index":2194,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.referentials.length",{"_index":2269,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.reportprogress",{"_index":3001,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.body",{"_index":1586,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.headers",{"_index":1574,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1569,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1570,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2998,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":3207,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":3206,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":3209,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":3212,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":3019,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":3010,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2503,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.restorerequester(handler",{"_index":1640,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.return",{"_index":1966,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":2207,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.schema",{"_index":3338,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.alias",{"_index":3341,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.api",{"_index":3339,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.namespace}.${this.name",{"_index":1911,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataSchemaElement.html":{}}}],["this.schemas",{"_index":1165,"title":{},"body":{"classes/Field.html":{}}}],["this.scope(r",{"_index":1841,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2484,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.segment.key",{"_index":2677,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2671,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2682,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2675,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2673,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2626,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegment.action",{"_index":2688,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.entityset",{"_index":2686,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.function",{"_index":2689,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.navigationproperty",{"_index":2692,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.property",{"_index":2691,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.singleton",{"_index":2687,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2690,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.send(options).pipe(map((response",{"_index":1666,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendjson(options",{"_index":1643,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendlegacy(options",{"_index":1644,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.serialize(value",{"_index":2441,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":2090,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.skip(skip",{"_index":2836,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken(skiptoken",{"_index":2834,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.status",{"_index":3159,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":3160,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2502,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2506,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2505,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storerequester",{"_index":1637,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.streaming",{"_index":3249,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1433,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.stripmetadata",{"_index":1441,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.structured().validate(value",{"_index":2212,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype",{"_index":2192,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtypeschema",{"_index":2161,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.tags(res",{"_index":2485,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":1258,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1788,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.titleize(description",{"_index":2365,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tojson(parser",{"_index":2228,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tolegacy",{"_index":1564,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.top(top",{"_index":2838,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.type",{"_index":1941,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.type.startswith('edm",{"_index":1954,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.update(key",{"_index":2172,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.url",{"_index":3161,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":2211,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.value",{"_index":2419,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this.values",{"_index":2895,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.clear",{"_index":2930,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.delete(key",{"_index":2928,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(key",{"_index":2898,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.compute",{"_index":2909,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.count",{"_index":2917,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.expand",{"_index":2907,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.filter",{"_index":2911,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.levels",{"_index":2916,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.orderby",{"_index":2912,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.search",{"_index":2910,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.select",{"_index":2906,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.skip",{"_index":2914,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.skiptoken",{"_index":2915,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.top",{"_index":2913,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoption.transform",{"_index":2908,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.has(key",{"_index":2922,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.keys",{"_index":2924,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.keys()].reduce((acc",{"_index":2904,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.map((v",{"_index":391,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values.set(key",{"_index":2919,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[key",{"_index":632,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[name",{"_index":651,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.expand",{"_index":995,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.filter",{"_index":643,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.orderby",{"_index":999,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.search",{"_index":997,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.select",{"_index":992,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.version",{"_index":1146,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1439,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["through",{"_index":2546,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["throw",{"_index":1179,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["throwerror",{"_index":1778,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["time",{"_index":110,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["time(left",{"_index":454,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["timeofday",{"_index":117,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["timeout",{"_index":1724,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1889,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["titleize",{"_index":1849,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleize(term",{"_index":1884,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleized",{"_index":1894,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["todo",{"_index":1565,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["tojson",{"_index":336,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tojsonschema",{"_index":2444,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tojsonschema(options",{"_index":2232,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["tolegacy",{"_index":1513,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tolower",{"_index":3491,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(left",{"_index":427,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2921,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":71,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["top(n",{"_index":1003,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["top(opts",{"_index":2825,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["toqueryarguments",{"_index":2870,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3711,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":335,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tostring(undefined",{"_index":2597,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["totaloffsetminutes",{"_index":944,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totaloffsetminutes(left",{"_index":456,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds",{"_index":945,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totalseconds(left",{"_index":458,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":3492,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(left",{"_index":429,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":69,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["transform(opts",{"_index":2813,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["trim",{"_index":3252,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(left",{"_index":431,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":3571,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":3569,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":3570,"title":{},"body":{"index.html":{}}}],["trips",{"_index":3621,"title":{},"body":{"index.html":{}}}],["true",{"_index":350,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":381,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tslib",{"_index":3515,"title":{},"body":{"dependencies.html":{}}}],["tuple[0].isstopped",{"_index":1657,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tuple[0].onload(tuple[1",{"_index":1658,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#batch",{"_index":1596,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":3358,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":26,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined",{"_index":1895,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["type(value",{"_index":2672,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type.startswith(this.alias",{"_index":3307,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":3306,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":721,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":779,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":773,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:11",{"_index":912,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:111",{"_index":2460,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:12",{"_index":774,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:13",{"_index":775,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:131",{"_index":2455,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:14",{"_index":2417,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:141",{"_index":2461,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:150",{"_index":2464,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:17",{"_index":728,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:170",{"_index":2462,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:174",{"_index":2459,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:19",{"_index":2390,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:22",{"_index":2418,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:3",{"_index":782,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":769,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:31",{"_index":2452,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:32",{"_index":2453,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:33",{"_index":771,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:34",{"_index":2451,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:35",{"_index":2397,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:36",{"_index":2450,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:37",{"_index":2449,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:39",{"_index":770,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:4",{"_index":781,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:41",{"_index":2176,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:42",{"_index":2175,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:44",{"_index":2394,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:45",{"_index":815,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:46",{"_index":816,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:49",{"_index":857,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:5",{"_index":783,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:50",{"_index":2931,"title":{},"body":{"classes/ODataReferential.html":{}}}],["type.ts:51",{"_index":859,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["type.ts:52",{"_index":858,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:53",{"_index":2400,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:6",{"_index":780,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:63",{"_index":2391,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:69",{"_index":2457,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:7",{"_index":2389,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:73",{"_index":2406,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:77",{"_index":2456,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:8",{"_index":913,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:83",{"_index":2392,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:87",{"_index":2408,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:9",{"_index":914,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:91",{"_index":2405,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:92",{"_index":2458,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:97",{"_index":2454,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["typealiases",{"_index":3733,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":1096,"title":{},"body":{"classes/Field.html":{}}}],["typedefinitions",{"_index":886,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefunctions",{"_index":465,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":988,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{}}}],["types",{"_index":159,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["types(undefined",{"_index":2599,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(this.o.get(this.n",{"_index":2752,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isarray(this.o.get(this.n)[0",{"_index":2759,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isarray(value",{"_index":2899,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(errors",{"_index":2218,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(params",{"_index":637,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(this.o.get(this.n",{"_index":2749,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(this.segment.key",{"_index":2679,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2684,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.values.get(key",{"_index":2897,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(this.values[key",{"_index":630,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(v",{"_index":2778,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(value",{"_index":2361,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["types.isfunction(opts",{"_index":2797,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isfunction(value",{"_index":365,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(parser",{"_index":377,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(v",{"_index":373,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(value",{"_index":367,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types.isplainobject(data",{"_index":3203,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(options.body",{"_index":3081,"title":{},"body":{"classes/ODataRequest.html":{}}}],["types.isplainobject(payload",{"_index":3210,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.o.get(this.n",{"_index":2766,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(this.payload",{"_index":3190,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":2346,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["types.isplainobject(value",{"_index":2219,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.rawtype(this",{"_index":389,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types.rawtype(v).endswith('expression",{"_index":2901,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.rawtype(value).endswith('expression",{"_index":633,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["typescript",{"_index":2539,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["unchanged",{"_index":3535,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":249,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":927,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":777,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["unicode",{"_index":833,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["union",{"_index":1285,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["union(other",{"_index":1299,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["unique",{"_index":82,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["united",{"_index":3604,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":2004,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["unpack",{"_index":2388,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpack(value",{"_index":2407,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpacked",{"_index":972,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["unset",{"_index":2703,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unset(path",{"_index":2737,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unsigned",{"_index":100,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["unsuccessful",{"_index":1590,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1286,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/enumerations.html":{}}}],["update(attrs",{"_index":3364,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(data",{"_index":1301,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["update(key",{"_index":2129,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["update/patch",{"_index":2170,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["updating",{"_index":3545,"title":{},"body":{"index.html":{}}}],["uri",{"_index":804,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["url",{"_index":233,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urlwithparams",{"_index":2945,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":3557,"title":{},"body":{"index.html":{}}}],["use",{"_index":1385,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSchemaElement.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2555,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["usevalue",{"_index":2549,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["using",{"_index":1762,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["utf",{"_index":91,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["utils",{"_index":325,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["utils/arrays",{"_index":1551,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/http",{"_index":1552,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":3291,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1553,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":3139,"title":{},"body":{"classes/ODataResponse.html":{}}}],["v",{"_index":372,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["v.isfield",{"_index":374,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["v.tojson",{"_index":392,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["v2",{"_index":3725,"title":{},"body":{"properties.html":{}}}],["v3",{"_index":3724,"title":{},"body":{"properties.html":{}}}],["v4",{"_index":3641,"title":{},"body":{"index.html":{},"properties.html":{}}}],["v4.0",{"_index":1415,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v4.01",{"_index":2786,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1412,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v[field.name",{"_index":2347,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["valid",{"_index":2792,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["validate",{"_index":2209,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["validate(member",{"_index":2463,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":60,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["value(v",{"_index":2739,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["value).reduce",{"_index":2433,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.length",{"_index":2216,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["value.map((v",{"_index":1949,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["value.some((v",{"_index":2900,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value.tojson",{"_index":2905,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":226,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":2306,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["valued",{"_index":97,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["values",{"_index":130,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["values.filter",{"_index":371,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":380,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":416,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values=nulls",{"_index":3054,"title":{},"body":{"classes/ODataRequest.html":{}}}],["values[index",{"_index":2631,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3656,"title":{},"body":{"license.html":{},"properties.html":{}}}],["var",{"_index":1636,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["variable",{"_index":241,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["variables",{"_index":1598,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":23,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"properties.html":{}}}],["version.replace(/\\;/g",{"_index":3251,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":3240,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":3241,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":1049,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":3253,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3635,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3644,"title":{},"body":{"index.html":{}}}],["void",{"_index":247,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3696,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3691,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3709,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3648,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2504,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":2144,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"index.html":{}}}],["withcredentials",{"_index":24,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":109,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"license.html":{}}}],["works",{"_index":3629,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":3357,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["xssi_prefix",{"_index":1549,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year",{"_index":946,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["year(left",{"_index":460,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":586,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/TypeFunctions.html":{}}}],["zone",{"_index":111,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["zone.js",{"_index":3517,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jsonBatchFormat\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOption[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jsonBatchFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jsonBatchFormat:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(left: T | string, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:309\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(left: T | string, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(left: T | string, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:315\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:465\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:474\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:477\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:471\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:480\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:468\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:197\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:196\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(left: T, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(left: T, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeExpression.html":{"url":"classes/ComputeExpression.html","title":"class - ComputeExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                names\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                compute\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:6\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(name: string, node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:65\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ComputeExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        compute\n                        \n                    \n                \n            \n            \n                \n                    \n                    compute(opts: (builder: ComputeExpressionBuilder,current: ComputeExpression) => void, current?: ComputeExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            ComputeExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string, opts: (e: literal type) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:78\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:37\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport {\n  FieldFactory,\n  functions,\n  ODataFunctions,\n  ODataOperators,\n  operators,\n  Renderable,\n} from './syntax';\n\nexport type ComputeExpressionBuilder = {\n  t: Required>;\n  e: () => ComputeExpression;\n};\nexport class ComputeExpression extends Expression {\n  names: string[];\n  constructor({\n    children,\n    names,\n  }: {\n    children?: Renderable[];\n    names?: string[];\n  } = {}) {\n    super({ children });\n    this.names = names || [];\n  }\n\n  static compute(\n    opts: (\n      builder: ComputeExpressionBuilder,\n      current?: ComputeExpression,\n    ) => ComputeExpression,\n    current?: ComputeExpression,\n  ): ComputeExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new ComputeExpression(),\n      },\n      current,\n    ) as ComputeExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    let children = this._children.map((n) =>\n      n.render({ aliases, escape, prefix, parser }),\n    );\n    return this.names\n      .map((name, index) => `${children[index]} as ${name}`)\n      .join(',');\n  }\n\n  clone() {\n    return new ComputeExpression({\n      children: this._children.map((c) => c.clone()),\n      names: [...this.names],\n    });\n  }\n\n  private _add(name: string, node: Renderable): ComputeExpression {\n    this.names.push(name);\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    name: string,\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable,\n  ): ComputeExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(name, node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(left: T | string, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:343\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountExpression.html":{"url":"classes/CountExpression.html","title":"class - CountExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                count\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:98\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:6\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:145\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     CountExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count(opts: (builder: CountExpressionBuilder,current: CountExpression) => void, current?: CountExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:107\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            CountExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F[], opts?: (e?: literal type) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:151\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            F[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:37\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { render, FieldFactory, Renderable } from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {},\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    const params: { [name: string]: string } = [\n      QueryOption.filter,\n      QueryOption.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n    })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression,\n    ) => FilterExpression,\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter]),\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {},\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Readonly>;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static count(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression,\n    ) => CountExpression,\n    current?: CountExpression,\n  ): CountExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new CountExpression(),\n      },\n      current,\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression,\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: FieldFactory>>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountField.html":{"url":"classes/CountField.html","title":"class - CountField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                filter\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     CountField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                    \n                    option(name: QueryOption, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:88\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { render, FieldFactory, Renderable } from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {},\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    const params: { [name: string]: string } = [\n      QueryOption.filter,\n      QueryOption.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n    })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression,\n    ) => FilterExpression,\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter]),\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {},\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Readonly>;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static count(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression,\n    ) => CountExpression,\n    current?: CountExpression,\n  ): CountExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new CountExpression(),\n      },\n      current,\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression,\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: FieldFactory>>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[],\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean,\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(\n    public name: string,\n    public value?: number,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean,\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(\n    public name: string,\n    public value?: number,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(\n    public path: string,\n    public target: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                        CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                        CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                        CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                        CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[],\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateAndTimeFunctions.html":{"url":"classes/DateAndTimeFunctions.html","title":"class - DateAndTimeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateAndTimeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                day\n                            \n                            \n                                fractionalseconds\n                            \n                            \n                                hour\n                            \n                            \n                                maxdatetime\n                            \n                            \n                                mindatetime\n                            \n                            \n                                minute\n                            \n                            \n                                month\n                            \n                            \n                                now\n                            \n                            \n                                second\n                            \n                            \n                                time\n                            \n                            \n                                totaloffsetminutes\n                            \n                            \n                                totalseconds\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n            \n                \ndate(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n            \n                \nday(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:267\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fractionalseconds\n                        \n                    \n                \n            \n            \n                \nfractionalseconds(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hour\n                        \n                    \n                \n            \n            \n                \nhour(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:273\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxdatetime\n                        \n                    \n                \n            \n            \n                \nmaxdatetime(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mindatetime\n                        \n                    \n                \n            \n            \n                \nmindatetime(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:279\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        minute\n                        \n                    \n                \n            \n            \n                \nminute(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:282\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        month\n                        \n                    \n                \n            \n            \n                \nmonth(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:288\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        second\n                        \n                    \n                \n            \n            \n                \nsecond(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n            \n                \ntime(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:294\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totaloffsetminutes\n                        \n                    \n                \n            \n            \n                \ntotaloffsetminutes(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:297\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalseconds\n                        \n                    \n                \n            \n            \n                \ntotalseconds(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:300\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n            \n                \nyear(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandExpression.html":{"url":"classes/ExpandExpression.html","title":"class - ExpandExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                expand\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:168\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:6\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:209\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExpandExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        expand\n                        \n                    \n                \n            \n            \n                \n                    \n                    expand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void, current?: ExpandExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:177\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                ExpandExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F, opts?: (e?: ExpandField>) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:220\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            F\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:193\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:37\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType, Unpacked } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport { FieldFactory, render, Renderable, resolve } from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {},\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve([this.field], parser);\n    const params: { [name: string]: string } = [\n      QueryOption.select,\n      QueryOption.expand,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.orderBy,\n      QueryOption.skip,\n      QueryOption.top,\n      QueryOption.count,\n      QueryOption.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, { aliases, escape, prefix, parser })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {},\n    );\n    return new ExpandField(\n      typeof this.field === 'string' ? this.field : this.field.clone(),\n      values,\n    );\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression,\n    ) => SelectExpression,\n  ): SelectExpression {\n    return this.option(\n      QueryOption.select,\n      SelectExpression.select(opts, this.values[QueryOption.select]),\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression,\n    ) => ExpandExpression,\n  ) {\n    return this.option(\n      QueryOption.expand,\n      ExpandExpression.expand(opts, this.values[QueryOption.expand]),\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression,\n    ) => FilterExpression,\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter]),\n    );\n  }\n\n  search(\n    opts: (builder: SearchExpressionBuilder) => SearchExpression,\n  ) {\n    return this.option(\n      QueryOption.search,\n      SearchExpression.search(opts, this.values[QueryOption.search]),\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression,\n    ) => OrderByExpression,\n  ) {\n    return this.option(\n      QueryOption.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOption.orderBy]),\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOption.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOption.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOption.levels, n);\n  }\n\n  count() {\n    return this.option(QueryOption.count, true);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name] as O;\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Readonly>;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression,\n    ) => ExpandExpression,\n    current?: ExpandExpression,\n  ): ExpandExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new ExpandExpression(),\n      },\n      current,\n    ) as ExpandExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    field: F,\n    opts?: (e: ExpandField>) => void,\n  ): ExpandExpression {\n    let node = new ExpandField>(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandField.html":{"url":"classes/ExpandField.html","title":"class - ExpandField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                count\n                            \n                            \n                                expand\n                            \n                            \n                                filter\n                            \n                            \n                                levels\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                search\n                            \n                            \n                                select\n                            \n                            \n                                skip\n                            \n                            \n                                toJSON\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExpandField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expand\n                        \n                    \n                \n            \n            \n                \nexpand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:96\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:108\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        levels\n                        \n                    \n                \n            \n            \n                \nlevels(n: number | \"max\")\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                            number | \"max\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | \"max\"\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                    \n                    option(name: QueryOption, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:158\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     O\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderBy\n                        \n                    \n                \n            \n            \n                \norderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:129\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(opts: (builder: SearchExpressionBuilder) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:120\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:84\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n            \n                \nskip(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        top\n                        \n                    \n                \n            \n            \n                \ntop(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:17\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType, Unpacked } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport { FieldFactory, render, Renderable, resolve } from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {},\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve([this.field], parser);\n    const params: { [name: string]: string } = [\n      QueryOption.select,\n      QueryOption.expand,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.orderBy,\n      QueryOption.skip,\n      QueryOption.top,\n      QueryOption.count,\n      QueryOption.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, { aliases, escape, prefix, parser })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {},\n    );\n    return new ExpandField(\n      typeof this.field === 'string' ? this.field : this.field.clone(),\n      values,\n    );\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression,\n    ) => SelectExpression,\n  ): SelectExpression {\n    return this.option(\n      QueryOption.select,\n      SelectExpression.select(opts, this.values[QueryOption.select]),\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression,\n    ) => ExpandExpression,\n  ) {\n    return this.option(\n      QueryOption.expand,\n      ExpandExpression.expand(opts, this.values[QueryOption.expand]),\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression,\n    ) => FilterExpression,\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.filter(opts, this.values[QueryOption.filter]),\n    );\n  }\n\n  search(\n    opts: (builder: SearchExpressionBuilder) => SearchExpression,\n  ) {\n    return this.option(\n      QueryOption.search,\n      SearchExpression.search(opts, this.values[QueryOption.search]),\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression,\n    ) => OrderByExpression,\n  ) {\n    return this.option(\n      QueryOption.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOption.orderBy]),\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOption.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOption.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOption.levels, n);\n  }\n\n  count() {\n    return this.option(QueryOption.count, true);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name] as O;\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Readonly>;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression,\n    ) => ExpandExpression,\n    current?: ExpandExpression,\n  ): ExpandExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new ExpandExpression(),\n      },\n      current,\n    ) as ExpandExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    field: F,\n    opts?: (e: ExpandField>) => void,\n  ): ExpandExpression {\n    let node = new ExpandField>(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Expression.html":{"url":"classes/Expression.html","title":"class - Expression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Expression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/base.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                length\n                            \n                            \n                                    Abstract\n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Expression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:15\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport type { QueryCustomType } from '../builder';\nimport { Renderable } from './syntax';\n\nexport abstract class Expression implements Renderable {\n  protected _children: Renderable[];\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    this._children = children || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Expression';\n  }\n\n  abstract render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n\n  abstract clone(): Expression;\n\n  children() {\n    return this._children;\n  }\n\n  length() {\n    return this._children.length;\n  }\n\n  toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(\n    public name: string,\n    public fieldType: FieldType,\n  ) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes,\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ],\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES,\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[],\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FieldParser.html":{"url":"interfaces/FieldParser.html","title":"interface - FieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Parser\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxLength\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nullable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            precision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scale\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxLength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxLength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nullable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nullable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        precision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scale:     number | \"variable\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \"variable\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: Normalize, escape: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:127\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        Normalize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        escape\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { $type: any; name: string; values: any; normalize: Normalize; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:135\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                geoDistance\n                            \n                            \n                                geoIntersects\n                            \n                            \n                                geoLength\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        geoDistance\n                        \n                    \n                \n            \n            \n                \ngeoDistance(left: T, right: string, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoIntersects\n                        \n                    \n                \n            \n            \n                \ngeoIntersects(left: T, right: string, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:334\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoLength\n                        \n                    \n                \n            \n            \n                \ngeoLength(left: T, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:337\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:485\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:513\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Grouping\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:499\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:492\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; group: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:488\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:518\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:568\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Lambda\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:540\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:529\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { $type: any; op: string; values: any; alias: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:525\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(left: T, right: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:582\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(left: T, right: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:578\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogicalOperators.html":{"url":"classes/LogicalOperators.html","title":"class - LogicalOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogicalOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                eq\n                            \n                            \n                                ge\n                            \n                            \n                                gt\n                            \n                            \n                                has\n                            \n                            \n                                in\n                            \n                            \n                                le\n                            \n                            \n                                lt\n                            \n                            \n                                ne\n                            \n                            \n                                not\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        eq\n                        \n                    \n                \n            \n            \n                \neq(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:427\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ge\n                        \n                    \n                \n            \n            \n                \nge(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:436\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gt\n                        \n                    \n                \n            \n            \n                \ngt(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:433\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:456\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in\n                        \n                    \n                \n            \n            \n                \nin(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:459\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        le\n                        \n                    \n                \n            \n            \n                \nle(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:442\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lt\n                        \n                    \n                \n            \n            \n                \nlt(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:439\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ne\n                        \n                    \n                \n            \n            \n                \nne(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:430\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:453\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotatable.html":{"url":"classes/ODataAnnotatable.html","title":"class - ODataAnnotatable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotatable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:30\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot),\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot),\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                            \n                                    Abstract\n                                union\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: Map, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                    \n                    data(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        union\n                        \n                    \n                \n            \n            \n                \n                    \n                    union(other: ODataAnnotations)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                deleteRefBy\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                jsonBatchFormat\n                            \n                            \n                                nonParenthesisForEmptyParameterFunction\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parserOptions\n                                \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:103\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:66\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOption[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:61\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRefBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"path\" | \"id\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:29\n                        \n                    \n\n            \n                \n                    Delete reference by path or by id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:45\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:53\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jsonBatchFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:41\n                        \n                    \n\n            \n                \n                    Use JSON Batch Format\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nonParenthesisForEmptyParameterFunction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:33\n                        \n                    \n\n            \n                \n                    No use parenthesis for empty parameters functions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:49\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:25\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:37\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:21\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:57\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parserOptions\n                    \n                \n\n                \n                    \n                        getparserOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:123\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:134\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  QueryOption,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum: boolean;\n  /**\n   * Delete reference by path or by id\n   */\n  deleteRefBy: 'path' | 'id';\n  /**\n   * No use parenthesis for empty parameters functions\n   */\n  nonParenthesisForEmptyParameterFunction: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Use JSON Batch Format\n   */\n  jsonBatchFormat: boolean;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOption[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n    /**\n     * @link https://devblogs.microsoft.com/odata/extension-omit-null-value-properties-in-asp-net-core-odata/\n     */\n    omitNullValues?: boolean;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum || false;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy ?? 'path';\n    this.nonParenthesisForEmptyParameterFunction =\n      config.nonParenthesisForEmptyParameterFunction ?? false;\n    this.jsonBatchFormat = config.jsonBatchFormat ?? false;\n  }\n\n  get parserOptions(): ParserOptions {\n    return {\n      version: this.version,\n      stringAsEnum: this.stringAsEnum,\n      deleteRefBy: this.deleteRefBy,\n      nonParenthesisForEmptyParameterFunction:\n        this.nonParenthesisForEmptyParameterFunction,\n      ...this.accept,\n    };\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBaseService.html":{"url":"classes/ODataBaseService.html","title":"class - ODataBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient, name: string, apiNameOrEntityType?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/base.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiNameOrEntityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:69\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:75\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:81\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:87\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:44\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:100\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType: \"entity\" | \"entities\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:110\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"entity\" | \"entities\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/base.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { ODataClient } from '../client';\nimport {\n  ODataActionOptions,\n  ODataActionResource,\n  ODataEntities,\n  ODataEntity,\n  ODataFunctionOptions,\n  ODataFunctionResource,\n  ODataNavigationPropertyResource,\n  ODataProperty,\n  ODataQueryArgumentsOptions,\n} from '../resources';\n\nexport abstract class ODataBaseService {\n  constructor(\n    protected client: ODataClient,\n    protected name: string,\n    protected apiNameOrEntityType?: string,\n  ) {}\n\n  get api() {\n    return this.client.apiFor(this.apiNameOrEntityType);\n  }\n\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entity',\n    options?: ODataFunctionOptions,\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entities',\n    options?: ODataFunctionOptions,\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property',\n    options?: ODataFunctionOptions,\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'none',\n    options?: ODataFunctionOptions,\n  ): Observable;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataFunctionOptions = {},\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entity',\n    options?: ODataActionOptions,\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entities',\n    options?: ODataActionOptions,\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property',\n    options?: ODataActionOptions,\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'none',\n    options?: ODataActionOptions,\n  ): Observable;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataActionOptions = {},\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions,\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions,\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity' | 'entities',\n    options: ODataQueryArgumentsOptions = {},\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.fetch({ responseType: responseType as any, ...options });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                id\n                            \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                toJson\n                            \n                            \n                                toLegacy\n                            \n                            \n                                    \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:51\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(response: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(response: HttpResponseBase)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                HttpResponseBase\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { [name: string]: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLegacy\n                        \n                    \n                \n            \n            \n                \ntoLegacy()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n  HttpResponseBase,\n} from '@angular/common/http';\nimport {\n  concatMap,\n  firstValueFrom,\n  map,\n  Observable,\n  of,\n  Subject,\n  switchMap,\n} from 'rxjs';\nimport { ODataApi } from '../../api';\nimport {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport { PathSegment } from '../../types';\nimport { Arrays } from '../../utils/arrays';\nimport { Http } from '../../utils/http';\nimport { Strings } from '../../utils/strings';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { ODataOptions } from './options';\n\nexport class ODataBatchRequest extends Subject {\n  id: string;\n  group: string;\n  constructor(public request: ODataRequest) {\n    super();\n    this.id = Strings.uniqueId({ prefix: 'r' });\n    this.group = Strings.uniqueId({ prefix: 'g' });\n  }\n\n  override toString() {\n    return this.toLegacy();\n  }\n\n  toLegacy() {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${this.request.pathWithParams} ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    if (this.request.method === 'GET' || this.request.method === 'DELETE') {\n      res.push(NEWLINE);\n    } else {\n      res.push(`${NEWLINE}${JSON.stringify(this.request.body)}`);\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  toJson() {\n    //TODO: Relative or Absolute url ?\n    let res: { [name: string]: any } = {\n      id: this.id,\n      method: this.request.method,\n      url: this.request.pathWithParams,\n      //'atomicityGroup': this.group\n      //\"dependsOn\": [\"g1\", \"g2\", \"r2\"]\n    };\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res['headers'] = headers\n        .keys()\n        .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`);\n    }\n    if (!(this.request.method === 'GET' || this.request.method === 'DELETE')) {\n      res['body'] = this.request.body;\n    }\n\n    return res;\n  }\n\n  onLoad(response: HttpResponseBase) {\n    if (response.ok) {\n      this.next(response);\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(response as HttpErrorResponse);\n    }\n  }\n\n  onError(response: HttpErrorResponse) {\n    this.error(response);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  private _responses: HttpResponseBase[] | null = null;\n  responses() {\n    return this._responses;\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegment.batch, $BATCH);\n    return new ODataBatchResource(api, { segments });\n  }\n\n  override clone(): ODataBatchResource {\n    const batch = super.clone() as ODataBatchResource;\n    batch._requests = [...this._requests];\n    return batch;\n  }\n  //#endregion\n\n  private storeRequester() {\n    const current = this.api.requester;\n    // Switch to the batch requester\n    this.api.requester = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    return current;\n  }\n\n  private restoreRequester(\n    handler: ((req: ODataRequest) => Observable) | undefined,\n  ) {\n    this.api.requester = handler;\n  }\n\n  /**\n   * Add to batch request\n   * @param ctx The context for the request\n   * @returns The result of execute the context\n   */\n  add(ctx: (batch: this) => R): R {\n    // Store original requester\n    var handler = this.storeRequester();\n    // Execute the context\n    const result = ctx(this);\n    // Restore original requester\n    this.restoreRequester(handler);\n\n    return result;\n  }\n\n  send(options?: ODataOptions): Observable> {\n    if (this.api.options.jsonBatchFormat) {\n      return this.sendJson(options);\n    } else {\n      return this.sendLegacy(options);\n    }\n  }\n\n  private sendJson(options?: ODataOptions): Observable> {\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n    });\n    return this.api\n      .request('POST', this, {\n        body: ODataBatchResource.buildJsonBody(this._requests),\n        responseType: 'json',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseJsonResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        }),\n      );\n  }\n\n  private sendLegacy(\n    options?: ODataOptions,\n  ): Observable> {\n    const bound = Strings.uniqueId({ prefix: BATCH_PREFIX });\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n      [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n      [ACCEPT]: MULTIPART_MIXED,\n    });\n    return this.api\n      .request>('POST', this, {\n        body: ODataBatchResource.buildLegacyBody(bound, this._requests),\n        responseType: 'text',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseLegacyResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        }),\n      );\n  }\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => R,\n    options?: ODataOptions,\n  ): Observable]> {\n    let result = this.add(ctx);\n    return this.send(options).pipe(map((response) => [result, response]));\n  }\n\n  body() {\n    return ODataBatchResource.buildLegacyBody(\n      Strings.uniqueId({ prefix: BATCH_PREFIX }),\n      this._requests,\n    );\n  }\n\n  json() {\n    return ODataBatchResource.buildJsonBody(this._requests);\n  }\n\n  static buildLegacyBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[],\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const request of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (request.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`,\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (request.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId({ prefix: CHANGESET_PREFIX });\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`,\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (request.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${request.toLegacy()}`);\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`,\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`,\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static buildJsonBody(requests: ODataBatchRequest[]): Object {\n    return {\n      requests: requests.map((request) => request.toJson()),\n    };\n  }\n\n  static parseLegacyResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse,\n  ): HttpResponseBase[] {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = (response.body || '').split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      let request = requests[index].request;\n      let { code, message } = Http.parseResponseStatus(chunk[0]);\n      chunk = chunk.slice(1);\n\n      let headers: HttpHeaders = new HttpHeaders();\n      var index = 1;\n      for (; index = 200 && code ({\n            body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          });\n    });\n  }\n\n  static parseJsonResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse,\n  ): HttpResponseBase[] {\n    const responses: Object[] =\n      (response.body ? response.body : {})['responses'] ?? [];\n\n    return responses.map((response: any, index: number) => {\n      let request = requests[index].request;\n      let code = response['status'];\n\n      let headers: HttpHeaders = new HttpHeaders(response['headers']);\n      let body: string | { error: any; text: string } = response['body'];\n      if (code === 0) {\n        code = !!body ? 200 : 0;\n      }\n\n      let ok = code >= 200 && code ({\n            body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:76\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:93\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:159\n                \n            \n\n\n            \n                \n                    Remove all cache entries\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:138\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:126\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:178\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:168\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:55\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegment } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegment.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request'],\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key\n          ? `${context.entitySet}(${context.key})`\n          : context.entitySet,\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] },\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {},\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>,\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        }),\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n            \n                Description\n            \n            \n                A cache entry that holds a payload, a last read time, and a timeout for the entry.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegment } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegment.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request'],\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key\n          ? `${context.entitySet}(${context.key})`\n          : context.entitySet,\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] },\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {},\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>,\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        }),\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:86\n                \n            \n\n\n            \n                \n                    Returns the binding parameter of the callable.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The binding parameter of the callable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:58\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:78\n                \n            \n\n\n            \n                \n                    Encode the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:68\n                \n            \n\n\n            \n                \n                    Serialize the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallableConfig, ParserOptions, Parser } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataCallableParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable extends ODataSchemaElement {\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias,\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({\n      options,\n      parserForType,\n      findOptionsForType,\n    });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:94\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T,\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`,\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter),\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigAsyncLoader.html":{"url":"classes/ODataConfigAsyncLoader.html","title":"class - ODataConfigAsyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigAsyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configs$: Observable | Observable[] | Observable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configs$\n                                                  \n                                                        \n                                                                        Observable | Observable[] | Observable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable,\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigLoader.html":{"url":"classes/ODataConfigLoader.html","title":"class - ODataConfigLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable,\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigSyncLoader.html":{"url":"classes/ODataConfigSyncLoader.html","title":"class - ODataConfigSyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigSyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passedConfigs: ApiConfig | ApiConfig[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passedConfigs\n                                                  \n                                                        \n                                                                        ApiConfig | ApiConfig[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable,\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:161\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:169\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntitiesAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:153\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataEntitiesAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:173\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:177\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:181\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:185\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:189\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:194\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:199\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:207\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:71\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:79\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:127\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:128\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type: \"single\" | \"collection\")\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:129\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                            \"single\" | \"collection\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations | ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntityAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:63\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataEntityAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:83\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:87\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:95\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:99\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:103\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:107\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:111\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:115\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:120\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:140\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer extends ODataSchemaElement {\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(value: M)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:12\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ODataModel } from '../models/model';\nimport { EntityKey, ODataResource } from '../resources';\nimport { ODataBaseService } from './base';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entityType\n                            \n                            \n                                service\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet extends ODataSchemaElement {\n  entityType: string;\n  service: { new (...params: any[]): any };\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entityType = config.entityType;\n    this.service = config.service;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySetService.html":{"url":"classes/ODataEntitySetService.html","title":"class - ODataEntitySetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                entities\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                fetchAll\n                            \n                            \n                                    Public\n                                fetchMany\n                            \n                            \n                                    Public\n                                fetchOne\n                            \n                            \n                                    Public\n                                fetchOrCreate\n                            \n                            \n                                    Public\n                                modify\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySetSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:35\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:36\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(attrs: Partial, options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:87\n                \n            \n\n\n            \n                \n                    Create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        destroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:136\n                \n            \n\n\n            \n                \n                    Delete an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entities\n                        \n                    \n                \n            \n            \n                \n                    \n                    entities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:19\n                \n            \n\n\n            \n                \n                    Get the entity set resource for this service.\n\n\n                    \n                        Returns :         ODataEntitySetResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:27\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:56\n                \n            \n\n\n            \n                \n                    Get all entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMany(top: number, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:65\n                \n            \n\n\n            \n                \n                    Get entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOne(options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:78\n                \n            \n\n\n            \n                \n                    Get an entity from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOrCreate(key: EntityKey, attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:154\n                \n            \n\n\n            \n                \n                    Get or create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        modify\n                        \n                    \n                \n            \n            \n                \n                    \n                    modify(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:119\n                \n            \n\n\n            \n                \n                    Patch an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:176\n                \n            \n\n\n            \n                \n                    Save an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:101\n                \n            \n\n\n            \n                \n                    Update an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySetSchema\n                    \n                \n\n                \n                    \n                        getentitySetSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:48\n                                \n                            \n                    \n                        \n                                The schema for the entity set.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ODataCollection } from '../models/collection';\nimport { ODataModel } from '../models/model';\nimport {\n  EntityKey,\n  ODataEntity,\n  ODataEntityResource,\n  ODataEntitySetResource,\n  ODataOptions,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\nexport class ODataEntitySetService extends ODataEntityService {\n  /**\n   * Get the entity set resource for this service.\n   */\n  public entities(): ODataEntitySetResource {\n    return this.client.entitySet(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(key?: EntityKey): ODataEntityResource {\n    return this.entities().entity(key);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M): void;\n  public attach>>(model: C): void;\n  public attach(model: any): void {\n    if (model instanceof ODataModel) {\n      model.attach(this.entities().entity());\n    } else if (model instanceof ODataCollection) {\n      model.attach(this.entities());\n    }\n  }\n\n  /**\n   * The schema for the entity set.\n   */\n  get entitySetSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Get all entities from the entity set.\n   * @param options The options for the request.\n   */\n  public fetchAll(options?: ODataOptions) {\n    return this.entities().fetchAll(options);\n  }\n\n  /**\n   * Get entities from the entity set.\n   * @param withCount Get the count of the entities.\n   * @param options The options for the request.\n   */\n  public fetchMany(\n    top: number,\n    options?: ODataOptions & { withCount?: boolean },\n  ) {\n    return this.entities().fetchMany(top, options);\n  }\n\n  /**\n   * Get an entity from the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOne(options?: ODataOptions & { etag?: string }) {\n    return this.entities().fetchOne(options);\n  }\n\n  /**\n   * Create an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param options The options for the request.\n   */\n  public create(\n    attrs: Partial,\n    options?: ODataOptions,\n  ): Observable> {\n    return this.entities().create(attrs, options);\n  }\n\n  /**\n   * Update an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string },\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('update: Resource without key'));\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public modify(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string },\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('modify: Resource without key'));\n    return res.modify(attrs, options);\n  }\n\n  /**\n   * Delete an entity in the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public destroy(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string },\n  ) {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('destroy: Resource without key'));\n    return res.destroy(options);\n  }\n\n  //#region Shortcuts\n  /**\n   * Get or create an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOrCreate(\n    key: EntityKey,\n    attrs: Partial,\n    { etag, ...options }: { etag?: string } & ODataOptions = {},\n  ): Observable> {\n    return this.entity(key)\n      .fetch({ etag, ...options })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          if (error.status === 404) return this.create(attrs, options);\n          else return throwError(() => error);\n        }),\n      );\n  }\n\n  /**\n   * Save an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param method The method to use.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public save(\n    attrs: Partial,\n    {\n      etag,\n      method,\n      ...options\n    }: {\n      etag?: string;\n      method?: 'create' | 'update' | 'modify';\n    } & ODataOptions = {},\n  ) {\n    let schema = this.structuredTypeSchema;\n    if (method === undefined && schema !== undefined && schema.isCompoundKey())\n      return throwError(\n        () =>\n          new Error(\n            'save: Composite key require a specific method, use create/update/patch',\n          ),\n      );\n    let key = schema && schema.resolveKey(attrs);\n    if (method === undefined) method = key !== undefined ? 'update' : 'create';\n    if ((method === 'update' || method === 'modify') && key === undefined)\n      return throwError(\n        () => new Error(\"save: Can't update/patch entity without key\"),\n      );\n    return method === 'create'\n      ? this.create(attrs, options)\n      : method === 'modify'\n      ? this.modify(key, attrs, { etag, ...options })\n      : this.update(key, attrs, { etag, ...options });\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n  FieldParser,\n  EdmType,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser,\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string | EdmType;\n  private parser: Parser;\n  collection: boolean;\n  navigation: boolean;\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig,\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential),\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable ?? true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions,\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions,\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        EdmType.String,\n        EdmType.Date,\n        EdmType.TimeOfDay,\n        EdmType.DateTimeOffset,\n        EdmType.Guid,\n        EdmType.Binary,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === EdmType.Date) schema.format = 'date';\n      else if (this.type === EdmType.TimeOfDay) schema.format = 'time';\n      else if (this.type === EdmType.DateTimeOffset)\n        schema.format = 'date-time';\n      else if (this.type === EdmType.Guid)\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === EdmType.Binary) schema.contentEncoding = 'base64';\n      else if (this.type === EdmType.String && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      [\n        EdmType.Int64,\n        EdmType.Int32,\n        EdmType.Int16,\n        EdmType.Byte,\n        EdmType.SByte,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (\n      [EdmType.Decimal, EdmType.Double].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'number';\n    } else if ([EdmType.Boolean].indexOf(this.type as EdmType) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T,\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`,\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[] = [];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string,\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig },\n    ).forEach(([name, config]) => this.addField(name, config));\n  }\n\n  addField(\n    name: string,\n    config: StructuredTypeFieldConfig,\n  ): ODataStructuredTypeFieldParser {\n    const field = new ODataStructuredTypeFieldParser(name, this, config);\n    this._fields.push(field);\n    return field;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  isOpenType() {\n    return this.open;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean,\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean,\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        value[f.name] !== undefined &&\n        value[f.name] !== null,\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {},\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null,\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {},\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation,\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  isEntityType(): boolean {\n    return (\n      this._keys !== undefined ||\n      (this.parent !== undefined && this.parent.isEntityType())\n    );\n  }\n\n  isComplexType(): boolean {\n    return !this.isEntityType();\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {},\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name,\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag),\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {},\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1),\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser,\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {}),\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable,\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                unpack\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:63\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:83\n                \n            \n\n\n            \n                \n                    Encode the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(enu: string | E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:44\n                \n            \n\n\n            \n                \n                    Find a field by name or value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enu\n                                    \n                                            string | E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name or value of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given name or value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:35\n                \n            \n\n\n            \n                \n                    Returns the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        The fields of the enum type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:73\n                \n            \n\n\n            \n                \n                    Serialize the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EnumTypeConfig, Parser, ParserOptions } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType extends ODataSchemaElement {\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: E } | { [value: number]: string };\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias,\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({ options, parserForType, findOptionsForType });\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return this.parser.fields(value);\n  }\n\n  /**\n   * Find a field by name or value.\n   * @param enu The name or value of the field\n   * @returns The field with the given name or value\n   */\n  field(enu: string | E) {\n    return this.parser.field(enu);\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.parser.mapFields(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  unpack(value: E) {\n    return this.parser.unpack(value);\n  }\n\n  pack(value: number[]) {\n    return this.parser.pack(value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                value\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                titleize\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     E\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n  FieldParser,\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f),\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value)),\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue,\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0,\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toFlags(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this._fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0,\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n            \n                Implements\n            \n            \n                            FieldParser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _fields\n                            \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                unpack\n                            \n                            \n                                validate\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(nameValue: string | E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameValue\n                                    \n                                            string | E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:92\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    member\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n  FieldParser,\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f),\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value)),\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue,\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0,\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toFlags(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this._fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0,\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:29\n\n                \n            \n\n\n            \n                \n                    Restore the response from the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to get the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        The response from the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:14\n\n                \n            \n\n\n            \n                \n                    Store the response in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to store the response\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to store in the cache\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:76\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:93\n\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:159\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:138\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:126\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:189\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:224\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:178\n\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:168\n\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:105\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:55\n\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    let scope = this.scope(req);\n    let tags = this.tags(res);\n    this.put(req.cacheKey, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    let scope = this.scope(req);\n    return this.get(req.cacheKey, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        flush\n                        \n                    \n                \n            \n            \n                \n                    \n                    flush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:54\n\n                \n            \n\n\n            \n                \n                    Flush the cache and clean the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:79\n\n                \n            \n\n\n            \n                \n                    Restore the response from the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to get the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        The response from the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:64\n\n                \n            \n\n\n            \n                \n                    Store the response in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to store the response\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to store in the cache\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:45\n                \n            \n\n\n            \n                \n                    Restore the cache from the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:35\n                \n            \n\n\n            \n                \n                    Store the cache in the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:76\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:93\n\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:138\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:126\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:189\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:224\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:178\n\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:168\n\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:105\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:55\n\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries())),\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]'),\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(passedConfig: PassedInitialConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    passedConfig\n                                    \n                                                PassedInitialConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig,\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                field\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEnumTypeParser\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataStructuredTypeParser\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T,\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`,\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter),\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJSON\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:49\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPathSegments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PATH_SEPARATOR } from '../../constants';\nimport { Parser, PathSegment } from '../../types';\nimport { Objects } from '../../utils';\nimport { buildPathAndQuery, raw } from '../query';\nimport { EntityKey } from '../resource';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegment;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment,\n  escape: boolean = false,\n  parser?: Parser,\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegment.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({\n          func: { [segment.path]: segment.parameters },\n          escape,\n        })\n      : buildPathAndQuery({ func: segment.path, escape });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    return [path, params];\n  } else {\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key,\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key, escape }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams({\n    escape,\n    parser,\n  }: { escape?: boolean; parser?: Parser } = {}): [\n    string,\n    { [name: string]: any },\n  ] {\n    const result = this._segments.reduce(\n      (acc, segment) => {\n        const [path, params] = pathSegmentsBuilder(segment, escape, parser);\n        acc.paths.push(path);\n        acc.params = Object.assign(acc.params, params);\n        return acc;\n      },\n      { paths: [] as string[], params: {} as { [name: string]: any } },\n    );\n    return [result.paths.join(PATH_SEPARATOR), result.params];\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString({\n    escape,\n    parser,\n  }: { escape?: boolean; parser?: Parser } = {}): string {\n    const [path, params] = this.pathAndParams({ escape, parser });\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegment.entitySet,\n            PathSegment.navigationProperty,\n            PathSegment.property,\n          ].indexOf(s.name) !== -1,\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegment } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegment.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegment.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegment.action);\n  }\n  function() {\n    return this.segments.get(PathSegment.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegment.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegment.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataPropertyAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataPropertyAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptionHandler.html":{"url":"classes/ODataQueryOptionHandler.html","title":"class - ODataQueryOptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assertArray\n                            \n                            \n                                    Private\n                                assertObject\n                            \n                            \n                                assign\n                            \n                            \n                                at\n                            \n                            \n                                clear\n                            \n                            \n                                empty\n                            \n                            \n                                every\n                            \n                            \n                                find\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                            \n                                push\n                            \n                            \n                                remove\n                            \n                            \n                                set\n                            \n                            \n                                some\n                            \n                            \n                                toJSON\n                            \n                            \n                                unset\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(o: Map, n: QueryOption)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                  \n                                                        \n                                                                        Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        n\n                                                  \n                                                        \n                                                                        QueryOption\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertArray()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     any[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertObject(create: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    create\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        assign\n                        \n                    \n                \n            \n            \n                \nassign(values: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:198\n                \n            \n\n\n            \n                \n                    Merge values from object into the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to merge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        at\n                        \n                    \n                \n            \n            \n                \nat(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:110\n                \n            \n\n\n            \n                \n                    Return value at index of the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:207\n                \n            \n\n\n            \n                \n                    Clear the managed odata query option.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        empty\n                        \n                    \n                \n            \n            \n                \nempty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:57\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the managed odata query option is empty.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        True if the managed odata query option is empty.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        every\n                        \n                    \n                \n            \n            \n                \nevery(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(path: string, def?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:160\n                \n            \n\n\n            \n                \n                    Get the value for path from the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The path from get the value\n\n                                    \n                                \n                                \n                                    def\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default if not found\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:188\n                \n            \n\n\n            \n                \n                    Test if the managed odata query option has the value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The path fot test if the value is set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Boolean indicating if the value is set\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:84\n                \n            \n\n\n            \n                \n                    Push value to the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to push\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:92\n                \n            \n\n\n            \n                \n                    Remove value from the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(path: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:149\n                \n            \n\n\n            \n                \n                    Set the value for path in the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path for set the value\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        some\n                        \n                    \n                \n            \n            \n                \nsome(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:49\n                \n            \n\n\n            \n                \n                    Converts the managed odata query option to a json object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unset\n                        \n                    \n                \n            \n            \n                \nunset(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:169\n                \n            \n\n\n            \n                \n                    Unset the value for path in the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue(v?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:67\n                \n            \n\n\n            \n                \n                    Get or Set the value of the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The value to set.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:41\n                                \n                            \n                    \n                        \n                                The name of the managed odata query option.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredType } from '../../schema';\nimport { QueryOption } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  alias,\n  Expand,\n  Filter,\n  OrderBy,\n  Select,\n  Transform,\n  normalizeValue,\n  raw,\n  duration,\n  binary,\n} from './builder';\nimport {\n  ComputeExpression,\n  ComputeExpressionBuilder,\n  FilterExpression,\n  FilterExpressionBuilder,\n  OrderByExpression,\n  OrderByExpressionBuilder,\n  SearchExpression,\n  SearchExpressionBuilder,\n  ExpandExpression,\n  ExpandExpressionBuilder,\n  SelectExpression,\n  SelectExpressionBuilder,\n} from './expressions';\nimport type { ODataQueryArguments, ODataQueryOptions } from './options';\n\nexport class ODataQueryOptionHandler {\n  constructor(\n    private o: Map,\n    private n: QueryOption,\n  ) {}\n\n  /**\n   * The name of the managed odata query option.\n   */\n  get name() {\n    return this.n;\n  }\n\n  /**\n   * Converts the managed odata query option to a json object.\n   * @returns {any}\n   */\n  toJSON() {\n    return this.o.get(this.n);\n  }\n\n  /**\n   * Returns a boolean indicating if the managed odata query option is empty.\n   * @returns True if the managed odata query option is empty.\n   */\n  empty() {\n    return Types.isEmpty(this.o.get(this.n));\n  }\n\n  //#region Primitive Value\n  /**\n   * Get or Set the value of the managed odata query option.\n   * @param v The value to set.\n   * @returns\n   */\n  value(v?: any) {\n    if (v !== undefined) this.o.set(this.n, v);\n    return this.o.get(this.n);\n  }\n  //#endregion\n\n  //#region Array Value\n  private assertArray(): any[] {\n    if (!Types.isArray(this.o.get(this.n)))\n      this.o.set(this.n, this.o.has(this.n) ? [this.o.get(this.n)] : []);\n    return this.o.get(this.n);\n  }\n\n  /**\n   * Push value to the managed odata query option.\n   * @param value Value to push\n   */\n  push(value: any) {\n    this.assertArray().push(value);\n  }\n\n  /**\n   * Remove value from the managed odata query option.\n   * @param value Value to remove\n   */\n  remove(value: any) {\n    this.o.set(\n      this.n,\n      this.assertArray().filter((v) => v !== value),\n    );\n    // If only one and not is array... down to value\n    if (\n      this.o.get(this.n).length === 1 &&\n      !Types.isArray(this.o.get(this.n)[0])\n    )\n      this.o.set(this.n, this.o.get(this.n)[0]);\n  }\n\n  /**\n   * Return value at index of the managed odata query option.\n   * @param index Index of the value\n   * @returns The value\n   */\n  at(index: number) {\n    return this.assertArray()[index];\n  }\n\n  some(predicate: (value: any) => boolean) {\n    return this.assertArray().some(predicate);\n  }\n\n  every(predicate: (value: any) => boolean) {\n    return this.assertArray().every(predicate);\n  }\n\n  find(predicate: (value: any) => boolean) {\n    return this.assertArray().find(predicate);\n  }\n  //#endregion\n\n  //#region HashMap Value\n  private assertObject(create: boolean): { [name: string]: any } {\n    if (\n      !Types.isArray(this.o.get(this.n)) &&\n      Types.isPlainObject(this.o.get(this.n))\n    ) {\n      return this.o.get(this.n);\n    }\n    let arr = this.assertArray();\n    let obj = arr.find((v) => Types.isPlainObject(v));\n    if (!obj && create) {\n      obj = {};\n      arr.push(obj);\n    }\n    return obj;\n  }\n\n  /**\n   * Set the value for path in the managed odata query option.\n   * @param path Path for set the value\n   * @param value Value to set\n   */\n  set(path: string, value: any) {\n    let obj = this.assertObject(true);\n    Objects.set(obj, path, value);\n  }\n\n  /**\n   * Get the value for path from the managed odata query option.\n   * @param path The path from get the value\n   * @param def Default if not found\n   * @returns\n   */\n  get(path: string, def?: any): any {\n    let obj = this.assertObject(false) || {};\n    return Objects.get(obj, path, def);\n  }\n\n  /**\n   * Unset the value for path in the managed odata query option.\n   * @param path\n   */\n  unset(path: string) {\n    let obj = this.assertObject(true);\n    Objects.unset(obj, path);\n\n    if (Types.isArray(this.o.get(this.n))) {\n      this.o.set(\n        this.n,\n        this.o.get(this.n).filter((v: any) => !Types.isEmpty(v)),\n      );\n      if (this.o.get(this.n).length === 1)\n        this.o.set(this.n, this.o.get(this.n)[0]);\n    }\n  }\n\n  /**\n   * Test if the managed odata query option has the value.\n   * @param path The path fot test if the value is set\n   * @returns Boolean indicating if the value is set\n   */\n  has(path: string) {\n    let obj = this.assertObject(false) || {};\n    return Objects.has(obj, path);\n  }\n\n  /**\n   * Merge values from object into the managed odata query option.\n   * @param values Object to merge\n   * @returns\n   */\n  assign(values: { [attr: string]: any }) {\n    let obj = this.assertObject(true);\n    return Objects.merge(obj, values);\n  }\n  //#endregion\n\n  /**\n   * Clear the managed odata query option.\n   */\n  clear() {\n    this.o.delete(this.n);\n  }\n}\n\nexport class ODataQueryOptionsHandler {\n  constructor(protected options: ODataQueryOptions) {}\n\n  /**\n   * Create a raw odata value\n   * @param value The value to raw\n   * @returns The raw value\n   */\n  raw(value: any) {\n    return raw(value);\n  }\n\n  /**\n   * Create a new odata alias parameter\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_ParameterAliases\n   * @param value The value of the alias\n   * @param name The name of the alias\n   * @returns The alias\n   */\n  alias(value: any, name?: string) {\n    return alias(value, name);\n  }\n\n  /**\n   * Create a duration odata value\n   * @param value The value to duration\n   * @returns The duration value\n   */\n  duration(value: any) {\n    return duration(value);\n  }\n\n  /**\n   * Create a binary odata value\n   * @param value The value to binary\n   * @returns The binary value\n   */\n  binary(value: any) {\n    return binary(value);\n  }\n\n  /**\n   * Normalize the given value to a valid odata value\n   * @param value The value to normalize\n   * @returns The normalized value\n   */\n  normalize(value: any) {\n    return normalizeValue(value);\n  }\n\n  /**\n   * Build and return a handler for modifying the $select option.\n   * If opts is given then set te value as new value for $select.\n   * @param opts Select value or builder function for SelectExpression\n   */\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression,\n    ) => SelectExpression,\n  ): SelectExpression;\n  select(opts: Select): ODataQueryOptionHandler;\n  select(): ODataQueryOptionHandler;\n  select(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.select,\n        SelectExpression.select(\n          opts,\n          this.options.expression(QueryOption.select),\n        ),\n      );\n    }\n    return this.options.option>(QueryOption.select, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $expand option.\n   * If opts is given then set te value as new value for $expand.\n   * @param opts Expand value or builder function for ExpandExpression\n   */\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression,\n    ) => ExpandExpression,\n  ): ExpandExpression;\n  expand(opts: Expand): ODataQueryOptionHandler;\n  expand(): ODataQueryOptionHandler;\n  expand(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.expand,\n        ExpandExpression.expand(\n          opts,\n          this.options.expression(QueryOption.expand),\n        ),\n      );\n    }\n    return this.options.option>(QueryOption.expand, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $compute option.\n   * If opts is given then set te value as new value for $compute.\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptioncompute\n   * @param opts string value or builder function for ComputeExpression\n   */\n  compute(\n    opts: (\n      builder: ComputeExpressionBuilder,\n      current?: ComputeExpression,\n    ) => ComputeExpression,\n  ): ComputeExpression;\n  compute(opts: string): ODataQueryOptionHandler;\n  compute(): ODataQueryOptionHandler;\n  compute(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.compute,\n        ComputeExpression.compute(\n          opts,\n          this.options.expression(QueryOption.compute),\n        ),\n      );\n    }\n    return this.options.option(QueryOption.compute, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $format option.\n   * If opts is given then set te value as new value for $format.\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptionformat\n   * @param opts string value for format\n   */\n  format(opts: string): ODataQueryOptionHandler;\n  format(): ODataQueryOptionHandler;\n  format(opts?: string): any {\n    return this.options.option(QueryOption.format, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $transform option.\n   * If opts is given then set te value as new value for $transform.\n   * @param opts string value for transform\n   */\n  transform(opts: Transform): ODataQueryOptionHandler;\n  transform(): ODataQueryOptionHandler;\n  transform(opts?: Transform): any {\n    return this.options.option>(QueryOption.transform, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $search option.\n   * If opts is given then set te value as new value for $search.\n   * @param opts string value or builder function for SearchExpression\n   */\n  search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression,\n    ) => SearchExpression,\n  ): SearchExpression;\n  search(opts: string): ODataQueryOptionHandler;\n  search(): ODataQueryOptionHandler;\n  search(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.search,\n        SearchExpression.search(\n          opts,\n          this.options.expression(QueryOption.search),\n        ),\n      );\n    }\n    return this.options.option(QueryOption.search, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $filter option.\n   * If opts is given then set te value as new value for $filter.\n   * @param opts Filter value or builder function for FilterExpression\n   */\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression,\n    ) => FilterExpression,\n  ): FilterExpression;\n  filter(opts: Filter): ODataQueryOptionHandler;\n  filter(): ODataQueryOptionHandler;\n  filter(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOption.filter,\n        FilterExpression.filter(\n          opts,\n          this.options.expression(QueryOption.filter),\n        ),\n      );\n    }\n    return this.options.option>(QueryOption.filter, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $orderby option.\n   * If opts is given then set te value as new value for $orderby.\n   * @param opts OrderBy value or builder function for OrderByExpression\n   */\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression,\n    ) => OrderByExpression,\n  ): OrderByExpression;\n  orderBy(opts: OrderBy): ODataQueryOptionHandler;\n  orderBy(): ODataQueryOptionHandler;\n  orderBy(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.option(\n        QueryOption.orderBy,\n        OrderByExpression.orderBy(\n          opts,\n          this.options.expression(QueryOption.orderBy),\n        ),\n      );\n    }\n    return this.options.option>(QueryOption.orderBy, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $top option.\n   * If opts is given then set te value as new value for $top.\n   * @param opts number value\n   */\n  top(opts: number): ODataQueryOptionHandler;\n  top(): ODataQueryOptionHandler;\n  top(opts?: number): any {\n    return this.options.option(QueryOption.top, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $skip option.\n   * If opts is given then set te value as new value for $skip.\n   * @param opts number value\n   */\n  skip(opts: number): ODataQueryOptionHandler;\n  skip(): ODataQueryOptionHandler;\n  skip(opts?: number): any {\n    return this.options.option(QueryOption.skip, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $skiptoken option.\n   * If opts is given then set te value as new value for $skiptoken.\n   * @param opts string value\n   */\n  skiptoken(opts: string): ODataQueryOptionHandler;\n  skiptoken(): ODataQueryOptionHandler;\n  skiptoken(opts?: string): any {\n    return this.options.option(QueryOption.skiptoken, opts);\n  }\n\n  /**\n   * Shortcut for set $top, $skip, $skiptoken.\n   * @param param0 skip or top or skiptoken\n   */\n  paging({\n    skip,\n    skiptoken,\n    top,\n  }: {\n    skip?: number | null;\n    skiptoken?: string | null;\n    top?: number | null;\n  } = {}) {\n    if (skiptoken !== undefined) {\n      if (skiptoken !== null) {\n        this.skiptoken(skiptoken);\n      } else {\n        this.options.remove(QueryOption.skiptoken);\n      }\n    }\n    if (skip !== undefined) {\n      if (skip !== null) {\n        this.skip(skip);\n      } else {\n        this.options.remove(QueryOption.skip);\n      }\n    }\n    if (top !== undefined) {\n      if (top !== null) {\n        this.top(top);\n      } else {\n        this.options.remove(QueryOption.top);\n      }\n    }\n  }\n\n  /**\n   * Shortcut for clear pagination by unset $top, $skip, $skiptoken.\n   */\n  clearPaging() {\n    this.options.remove(QueryOption.skip);\n    this.options.remove(QueryOption.top);\n    this.options.remove(QueryOption.skiptoken);\n  }\n\n  /**\n   * Shortcut for clear query.\n   */\n  clear() {\n    this.options.clear();\n  }\n\n  /**\n   * Retrun the query.\n   */\n  query() {\n    return this.options.toQueryArguments();\n  }\n\n  /**\n   * Apply the given query options to the current query.\n   * @param query The query to be applied.\n   */\n  apply(query: ODataQueryArguments) {\n    if (query.select !== undefined) {\n      if (query.select instanceof SelectExpression) {\n        this.options.expression(\n          QueryOption.select,\n          query.select as SelectExpression,\n        );\n      } else if (query.select !== null) {\n        this.options.option(QueryOption.select, query.select);\n      } else {\n        this.options.remove(QueryOption.select);\n      }\n    }\n    if (query.expand !== undefined) {\n      if (query.expand instanceof ExpandExpression) {\n        this.options.expression(\n          QueryOption.expand,\n          query.expand as ExpandExpression,\n        );\n      } else if (query.expand !== null) {\n        this.options.option(QueryOption.expand, query.expand);\n      } else {\n        this.options.remove(QueryOption.expand);\n      }\n    }\n    if (query.compute !== undefined) {\n      if (query.compute instanceof ComputeExpression) {\n        this.options.expression(\n          QueryOption.compute,\n          query.compute as ComputeExpression,\n        );\n      } else if (query.compute !== null) {\n        this.options.option(QueryOption.compute, query.compute);\n      } else {\n        this.options.remove(QueryOption.compute);\n      }\n    }\n    if (query.transform !== undefined) {\n      if (query.transform !== null) {\n        this.options.option(QueryOption.transform, query.transform);\n      } else {\n        this.options.remove(QueryOption.transform);\n      }\n    }\n    if (query.search !== undefined) {\n      if (query.search instanceof SearchExpression) {\n        this.options.expression(\n          QueryOption.search,\n          query.search as SearchExpression,\n        );\n      } else if (query.search !== null) {\n        this.options.option(QueryOption.search, query.search);\n      } else {\n        this.options.remove(QueryOption.search);\n      }\n    }\n    if (query.filter !== undefined) {\n      if (query.filter instanceof FilterExpression) {\n        this.options.expression(\n          QueryOption.filter,\n          query.filter as FilterExpression,\n        );\n      } else if (query.filter !== null) {\n        this.options.option(QueryOption.filter, query.filter);\n      } else {\n        this.options.remove(QueryOption.filter);\n      }\n    }\n    if (query.orderBy !== undefined) {\n      if (query.orderBy instanceof OrderByExpression) {\n        this.options.expression(\n          QueryOption.orderBy,\n          query.orderBy as OrderByExpression,\n        );\n      } else if (query.orderBy !== null) {\n        this.options.option(QueryOption.orderBy, query.orderBy);\n      } else {\n        this.options.remove(QueryOption.orderBy);\n      }\n    }\n    this.paging(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJSON\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values?: Map | literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                        Map | literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:41\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:134\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         ODataQueryOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(key: QueryOption, exp?: Expression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exp\n                                    \n                                                Expression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: QueryOption)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(keys: QueryOption[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    keys\n                                    \n                                                QueryOption[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(key: QueryOption, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:145\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(keys: QueryOption[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    keys\n                                    \n                                                QueryOption[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataQueryArguments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser, QueryOption } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  buildPathAndQuery,\n  Expand,\n  Filter,\n  OrderBy,\n  QueryCustomType,\n  raw,\n  Select,\n  Transform,\n} from './builder';\nimport {\n  ComputeExpression,\n  Expression,\n  FilterExpression,\n  OrderByExpression,\n  SearchExpression,\n} from './expressions';\nimport { ExpandExpression } from './expressions/expand';\nimport { SelectExpression } from './expressions/select';\nimport { ODataQueryOptionHandler } from './handlers';\n\nexport type ODataQueryArguments = {\n  [QueryOption.select]?: Select | SelectExpression | null;\n  [QueryOption.expand]?: Expand | ExpandExpression | null;\n  [QueryOption.compute]?: string | ComputeExpression | null;\n  [QueryOption.filter]?: Filter | FilterExpression | null;\n  [QueryOption.search]?: string | SearchExpression | null;\n  [QueryOption.transform]?: Transform | null;\n  [QueryOption.orderBy]?: OrderBy | OrderByExpression | null;\n  [QueryOption.top]?: number | null;\n  [QueryOption.skip]?: number | null;\n  [QueryOption.skiptoken]?: string | null;\n  [QueryOption.format]?: string | null;\n  [QueryOption.levels]?: number | 'max' | null;\n  [QueryOption.count]?: boolean | null;\n};\n\nexport class ODataQueryOptions {\n  values: Map;\n\n  constructor(values?: Map | { [name: string]: any }) {\n    this.values =\n      values instanceof Map\n        ? values\n        : new Map(Object.entries(values || {}) as Array);\n  }\n\n  // Params\n  pathAndParams({\n    escape,\n    parser,\n  }: { escape?: boolean; parser?: Parser } = {}): [\n    string,\n    { [name: string]: any },\n  ] {\n    let aliases: QueryCustomType[] = [];\n    let options = [\n      QueryOption.select,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.compute,\n      QueryOption.transform,\n      QueryOption.orderBy,\n      QueryOption.top,\n      QueryOption.skip,\n      QueryOption.skiptoken,\n      QueryOption.expand,\n      QueryOption.format,\n      QueryOption.levels,\n      QueryOption.count,\n    ]\n      .filter((key) => !Types.isEmpty(this.values.get(key)))\n      .reduce((acc, key) => {\n        let value = this.values.get(key);\n        if (\n          Types.rawType(value).endsWith('Expression') ||\n          (Types.isArray(value) &&\n            value.some((v: any) => Types.rawType(v).endsWith('Expression')))\n        ) {\n          value = Types.isArray(value)\n            ? value.map((v: Expression) =>\n                Types.rawType(v).endsWith('Expression')\n                  ? raw(v.render({ aliases, escape, parser }))\n                  : v,\n              )\n            : raw((value as Expression).render({ aliases, escape, parser }));\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    return buildPathAndQuery({ ...options, aliases, escape });\n  }\n\n  toString({\n    escape,\n    parser,\n  }: { escape?: boolean; parser?: Parser } = {}): string {\n    const [path, params] = this.pathAndParams({ escape, parser });\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return [...this.values.keys()].reduce((acc, key) => {\n      let value = this.values.get(key);\n      value = 'toJSON' in value ? value.toJSON() : value;\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this.values.get(QueryOption.select) || null,\n      expand: this.values.get(QueryOption.expand) || null,\n      transform: this.values.get(QueryOption.transform) || null,\n      compute: this.values.get(QueryOption.compute) || null,\n      search: this.values.get(QueryOption.search) || null,\n      filter: this.values.get(QueryOption.filter) || null,\n      orderBy: this.values.get(QueryOption.orderBy) || null,\n      top: this.values.get(QueryOption.top) || null,\n      skip: this.values.get(QueryOption.skip) || null,\n      skiptoken: this.values.get(QueryOption.skiptoken) || null,\n      levels: this.values.get(QueryOption.levels) || null,\n      count: this.values.get(QueryOption.count) || null,\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    return new ODataQueryOptions(Objects.clone(this.values));\n  }\n\n  // Set Renderable\n  expression(key: QueryOption, exp?: Expression) {\n    if (exp !== undefined) this.values.set(key, exp);\n    return this.values.get(key);\n  }\n\n  // Option Handler\n  option(key: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values.set(key, opts);\n    return new ODataQueryOptionHandler(this.values, key);\n  }\n\n  // Query Options tools\n  has(key: QueryOption) {\n    return this.values.has(key);\n  }\n\n  remove(...keys: QueryOption[]) {\n    [...this.values.keys()]\n      .filter((k) => keys.indexOf(k) !== -1)\n      .forEach((key) => {\n        this.values.delete(key);\n      });\n  }\n\n  keep(...keys: QueryOption[]) {\n    [...this.values.keys()]\n      .filter((k) => keys.indexOf(k) === -1)\n      .forEach((key) => {\n        this.values.delete(key);\n      });\n  }\n\n  // Clear\n  clear() {\n    this.values.clear();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n  FieldParser,\n  EdmType,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser,\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string | EdmType;\n  private parser: Parser;\n  collection: boolean;\n  navigation: boolean;\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig,\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential),\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable ?? true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions,\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions,\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        EdmType.String,\n        EdmType.Date,\n        EdmType.TimeOfDay,\n        EdmType.DateTimeOffset,\n        EdmType.Guid,\n        EdmType.Binary,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === EdmType.Date) schema.format = 'date';\n      else if (this.type === EdmType.TimeOfDay) schema.format = 'time';\n      else if (this.type === EdmType.DateTimeOffset)\n        schema.format = 'date-time';\n      else if (this.type === EdmType.Guid)\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === EdmType.Binary) schema.contentEncoding = 'base64';\n      else if (this.type === EdmType.String && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      [\n        EdmType.Int64,\n        EdmType.Int32,\n        EdmType.Int16,\n        EdmType.Byte,\n        EdmType.SByte,\n      ].indexOf(this.type as EdmType) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (\n      [EdmType.Decimal, EdmType.Double].indexOf(this.type as EdmType) !== -1\n    ) {\n      schema.type = 'number';\n    } else if ([EdmType.Boolean].indexOf(this.type as EdmType) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T,\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`,\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[] = [];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string,\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig },\n    ).forEach(([name, config]) => this.addField(name, config));\n  }\n\n  addField(\n    name: string,\n    config: StructuredTypeFieldConfig,\n  ): ODataStructuredTypeFieldParser {\n    const field = new ODataStructuredTypeFieldParser(name, this, config);\n    this._fields.push(field);\n    return field;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  isOpenType() {\n    return this.open;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean,\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean,\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        value[f.name] !== undefined &&\n        value[f.name] !== null,\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {},\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null,\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {},\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation,\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  isEntityType(): boolean {\n    return (\n      this._keys !== undefined ||\n      (this.parent !== undefined && this.parent.isEntityType())\n    );\n  }\n\n  isComplexType(): boolean {\n    return !this.isEntityType();\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {},\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name,\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag),\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {},\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1),\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser,\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {}),\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable,\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                            \n                                isQueryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                                \n                                    cacheKey\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOption[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpContext\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                    \n                    factory(api: ODataApi, method: string, resource: ODataResource, options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    api\n                                    \n                                                ODataApi\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:345\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:353\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isQueryBody\n                        \n                    \n                \n            \n            \n                \nisQueryBody()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:337\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:276\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:285\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:289\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:293\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:302\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:311\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:317\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:323\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:327\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        cacheKey\n                    \n                \n\n                \n                    \n                        getcacheKey()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:331\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { ODataApi } from '../api';\nimport {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { QueryOption } from '../types';\nimport { Http, Types } from '../utils';\nimport { ODataResource } from './resource';\nimport { ODataOptions } from './types';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly context?: HttpContext;\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOption[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    context?: HttpContext;\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?:\n      | HttpParams\n      | {\n          [param: string]:\n            | string\n            | number\n            | boolean\n            | ReadonlyArray;\n        };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?:\n      | 'cache-first'\n      | 'cache-and-network'\n      | 'network-only'\n      | 'no-cache'\n      | 'cache-only';\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOption[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n    this.context = init.context;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null) this._body = this.resource.serialize(this._body);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions = [\n      ...(this.api.options.bodyQueryOptions || []),\n      ...(init.bodyQueryOptions || []),\n    ];\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams();\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`,\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`,\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`,\n      );\n    // Omit Null Values\n    if (\n      this.api.options.prefer?.omitNullValues === true &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`omit-values=nulls`);\n    // Continue on Error\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {},\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {},\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n  }\n\n  static factory(\n    api: ODataApi,\n    method: string,\n    resource: ODataResource,\n    options: ODataOptions & {\n      body?: any;\n      etag?: string;\n      responseType?:\n        | 'arraybuffer'\n        | 'blob'\n        | 'json'\n        | 'text'\n        | 'value'\n        | 'property'\n        | 'entity'\n        | 'entities';\n      observe: 'events' | 'response';\n      withCount?: boolean;\n      bodyQueryOptions?: QueryOption[];\n    },\n  ) {\n    const apiOptions = api.options;\n    let params = options.params || {};\n    if (options.withCount) {\n      params = Http.mergeHttpParams(params, apiOptions.helper.countParam());\n    }\n\n    let etag = options.etag;\n    if (etag === undefined && Types.isPlainObject(options.body)) {\n      etag = apiOptions.helper.etag(options.body);\n    }\n\n    return new ODataRequest({\n      method,\n      etag,\n      api,\n      resource,\n      params,\n      context: options.context,\n      body: options.body,\n      observe: options.observe,\n      headers: options.headers,\n      reportProgress: options.reportProgress,\n      responseType: options.responseType,\n      fetchPolicy: options.fetchPolicy,\n      withCredentials: options.withCredentials,\n      bodyQueryOptions: options.bodyQueryOptions,\n    });\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this.isQueryBody() ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this.isQueryBody() ? 'POST' : this._method;\n  }\n\n  get body() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`),\n        )[1].toString()\n      : this._body;\n  }\n\n  get params() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`),\n        )[0]\n      : this._params;\n  }\n\n  get headers() {\n    return this.isQueryBody()\n      ? Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN })\n      : this._headers;\n  }\n\n  get pathWithParams() {\n    return this.params.keys().length > 0\n      ? `${this.path}?${this.params}`\n      : this.path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this.path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  get cacheKey() {\n    return this._params.keys().length > 0\n      ? `${this._path}?${this._params}`\n      : this._path;\n  }\n\n  isQueryBody() {\n    return (\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`))\n    );\n  }\n\n  isBatch() {\n    return this.path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                        HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                property\n                            \n                            \n                                toJSON\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:202\n                \n            \n\n\n            \n                \n                    Handle the response body as entities\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntities\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:178\n                \n            \n\n\n            \n                \n                    Handle the response body as an entity\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:47\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                HttpResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromJSON(req: ODataRequest, json: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:59\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    json\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:220\n                \n            \n\n\n            \n                \n                    Handle the response body as a property\n\n\n                    \n                    \n                    \n                        Returns :         ODataProperty\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:247\n                \n            \n\n\n            \n                \n                    Handle the response body as a value\n\n\n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:94\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:135\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:156\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n  PREFERENCE_APPLIED,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJSON(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    },\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJSON() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options.parserOptions);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const headerKey = Http.resolveHeaderKey(\n        this.headers,\n        ODATA_VERSION_HEADERS,\n      );\n      if (headerKey) {\n        const version = (this.headers.get(headerKey) || '').replace(\n          /\\;/g,\n          '',\n        ) as '2.0' | '3.0' | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const preferenceApplied = this.headers.get(PREFERENCE_APPLIED);\n      if (preferenceApplied) {\n        this._options.setPreferenceApplied(preferenceApplied);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {},\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: Map;\n  get annotations(): Map {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) this._annotations.set(options.helper.ODATA_ETAG, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) this._annotations.set(options.helper.ODATA_ID, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    let entities = payload ? annots.data(payload) : null;\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(\n            data as { [name: string]: any },\n            this.api.options.stripMetadata,\n          )\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setPreferenceApplied\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ParserOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ParserOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataResponseOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cacheControl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    features\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPreferenceApplied\n                        \n                    \n                \n            \n            \n                \nsetPreferenceApplied(preference: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    preference\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: ParserOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setPreferenceApplied(preference: string) {\n    preference.split(',').forEach((prefer) => {\n      // TODO: resolve preference\n    });\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bindingType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEntitySetForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:54\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:60\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataApi } from '../api';\nimport { Parser, ParserOptions, SchemaConfig } from '../types';\nimport { OData } from '../utils/odata';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema extends ODataAnnotatable {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    super(config);\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this),\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this),\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this),\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this),\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[],\n    );\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    const bindingStructuredType =\n      bindingType !== undefined\n        ? this.api.findStructuredTypeForType(bindingType)\n        : undefined;\n    return this.callables.find((c) => {\n      const isCallableType = c.isTypeOf(type);\n      const callableBindingType = c.binding()?.type;\n      const callableBindingStructuredType =\n        callableBindingType !== undefined\n          ? this.api.findStructuredTypeForType(callableBindingType)\n          : undefined;\n      return (\n        isCallableType &&\n        (!bindingStructuredType ||\n          (callableBindingStructuredType &&\n            bindingStructuredType.isSubtypeOf(callableBindingStructuredType)))\n      );\n    }) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) =>\n      enu.configure({ options, parserForType, findOptionsForType }),\n    );\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ options, parserForType, findOptionsForType }),\n    );\n    // Configure callables\n    this.callables.forEach((callable) =>\n      callable.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchemaElement.html":{"url":"classes/ODataSchemaElement.html","title":"class - ODataSchemaElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchemaElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/element.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:58\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:68\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:47\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:29\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:38\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/element.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\nimport { Strings } from '../utils';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataSchemaElement extends ODataAnnotatable {\n  name: string;\n  schema: ODataSchema;\n\n  constructor(\n    config: { annotations?: AnnotationConfig[]; name: string },\n    schema: ODataSchema,\n  ) {\n    super(config);\n    this.schema = schema;\n    this.name = config.name;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  /**\n   * Returns a full type of the structured type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string): boolean {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a subtype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSubtypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a supertype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSupertypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create an entity set service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entitySetName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the entity set.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitySetService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create a singleton service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    singletonName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the singleton.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataSingletonService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string,\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType,\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string,\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:27\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:19\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Returns :         ODataSingletonResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:58\n                \n            \n\n\n            \n                \n                    Patch the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:44\n                \n            \n\n\n            \n                \n                    Update the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:34\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport type { ODataModel } from '../models/model';\nimport type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string },\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string },\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: Normalize)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:348\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        Normalize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:417\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Operator\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:370\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:359\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { $type: any; op: string; values: any; normalize: Normalize; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:355\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByExpression.html":{"url":"classes/OrderByExpression.html","title":"class - OrderByExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                ascending\n                            \n                            \n                                clone\n                            \n                            \n                                descending\n                            \n                            \n                                    Static\n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:6\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ascending\n                        \n                    \n                \n            \n            \n                \nascending(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:95\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         OrderByExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descending\n                        \n                    \n                \n            \n            \n                \ndescending(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        orderBy\n                        \n                    \n                \n            \n            \n                \n                    \n                    orderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void, current?: OrderByExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:57\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                OrderByExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:78\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:37\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, FieldFactory, Renderable } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(\n    protected field: Renderable,\n    protected order: 'asc' | 'desc',\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `${render(this.field, { aliases, escape, prefix, parser })} ${\n      this.order\n    }`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Readonly>;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression,\n    ) => OrderByExpression,\n    current?: OrderByExpression,\n  ): OrderByExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new OrderByExpression(),\n      },\n      current,\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByField.html":{"url":"classes/OrderByField.html","title":"class - OrderByField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: Renderable, order: \"asc\" | \"desc\")\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        order\n                                                  \n                                                        \n                                                                    \"asc\" | \"desc\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         OrderByField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; order: \"asc\" | \"desc\"; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, FieldFactory, Renderable } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(\n    protected field: Renderable,\n    protected order: 'asc' | 'desc',\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `${render(this.field, { aliases, escape, prefix, parser })} ${\n      this.order\n    }`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Readonly>;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression,\n    ) => OrderByExpression,\n    current?: OrderByExpression,\n  ): OrderByExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new OrderByExpression(),\n      },\n      current,\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParserOptions.html":{"url":"interfaces/ParserOptions.html","title":"interface - ParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PassedInitialConfig.html":{"url":"interfaces/PassedInitialConfig.html","title":"interface - PassedInitialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PassedInitialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            config\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:         ApiConfig | ApiConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiConfig | ApiConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loader:     Provider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Provider\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig,\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        clone\n                                    \n                                \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        toJSON\n                                    \n                                \n                                \n                                    \n                                        toString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries())),\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]'),\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchExpression.html":{"url":"classes/SearchExpression.html","title":"class - SearchExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _connector\n                            \n                            \n                                    Private\n                                _negated\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                and\n                            \n                            \n                                clone\n                            \n                            \n                                connector\n                            \n                            \n                                negated\n                            \n                            \n                                not\n                            \n                            \n                                or\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                search\n                            \n                            \n                                term\n                            \n                            \n                                    \n                                toJSON\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _connector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SearchConnector\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _negated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:6\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable, connector?: SearchConnector)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    connector\n                                    \n                                                SearchConnector\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        and\n                        \n                    \n                \n            \n            \n                \nand(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:143\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SearchExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connector\n                        \n                    \n                \n            \n            \n                \nconnector()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchConnector\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        negated\n                        \n                    \n                \n            \n            \n                \nnegated()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        or\n                        \n                    \n                \n            \n            \n                \nor(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(opts: (builder: SearchExpressionBuilder,current: SearchExpression) => void, current?: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:62\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n            \n                \nterm(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { children: any; connector: SearchConnector; negated: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:37\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `${render(this.value, { aliases, escape, prefix, parser })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  static search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression,\n    ) => SearchExpression,\n    current?: SearchExpression,\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current,\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector,\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node,\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n      connector: this._connector,\n      negated: this._negated,\n    };\n  }\n\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchTerm.html":{"url":"classes/SearchTerm.html","title":"class - SearchTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchTerm\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; value: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `${render(this.value, { aliases, escape, prefix, parser })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  static search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression,\n    ) => SearchExpression,\n    current?: SearchExpression,\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current,\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector,\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node,\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n      connector: this._connector,\n      negated: this._negated,\n    };\n  }\n\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EntityKey\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegment } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegment.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegment.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegment.action);\n  }\n  function() {\n    return this.segments.get(PathSegment.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegment.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegment.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectExpression.html":{"url":"classes/SelectExpression.html","title":"class - SelectExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/select.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                select\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:6\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:51\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        select\n                        \n                    \n                \n            \n            \n                \n                    \n                    select(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void, current?: SelectExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                SelectExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:37\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FieldFactory, Renderable } from './syntax';\n\nexport type SelectExpressionBuilder = {\n  t: Readonly>;\n  e: () => SelectExpression;\n};\nexport class SelectExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression,\n    ) => SelectExpression,\n    current?: SelectExpression,\n  ): SelectExpression {\n    return opts(\n      {\n        t: FieldFactory>>(),\n        e: () => new SelectExpression(),\n      },\n      current,\n    ) as SelectExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser }))\n      .join(',');\n  }\n\n  clone() {\n    return new SelectExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): SelectExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: any): SelectExpression {\n    return this._add(field);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:201\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(left: any, right: number, length?: number, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(left: any | string, pattern: string, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            any | string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(left: any, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:258\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'none'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions,\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(left: T | string, right?: string, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:321\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(left: T | string, right?: string, normalize: Normalize)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    right\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    normalize\n                                    \n                                                Normalize\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'right'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport const FieldFactory = (names: string[] = []): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'];\n      if (key === 'render') {\n        return ({ prefix }: { prefix?: string }) =>\n          prefix ? `${prefix}/${names.join('/')}` : names.join('/');\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJSON') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce((acc: any, name: string) => acc.field(name), parser);\n      } else {\n        return FieldFactory([...names, key]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJSON', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  } = {},\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), { aliases, normalize, prefix, parser });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField(),\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n        }),\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape,\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none',\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none',\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('cast', [left, right], normalize);\n  }\n\n  isof(left: T | string, right?: string, normalize: Normalize = 'right') {\n    return new Function('isof', [left, right], normalize);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n              }),\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix, parser })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string,\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJSON' in v ? v.toJSON() : v,\n      ),\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias,\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^16.2.0\n        \n            @angular/common : ^16.2.0\n        \n            @angular/compiler : ^16.2.0\n        \n            @angular/core : ^16.2.0\n        \n            @angular/forms : ^16.2.0\n        \n            @angular/platform-browser : ^16.2.0\n        \n            @angular/platform-browser-dynamic : ^16.2.0\n        \n            @angular/router : ^16.2.0\n        \n            @compodoc/compodoc : ^1.1.21\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.13.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EdmType   (projects/.../types.ts)\n                        \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegment   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOption   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        EdmType\n                    \n                \n                        \n                            \n                                 Guid\n                            \n                        \n                        \n                            \n                                Value : Edm.Guid\n                            \n                        \n                        \n                            \n                                 Int16\n                            \n                        \n                        \n                            \n                                Value : Edm.Int16\n                            \n                        \n                        \n                            \n                                 String\n                            \n                        \n                        \n                            \n                                Value : Edm.String\n                            \n                        \n                        \n                            \n                                 Boolean\n                            \n                        \n                        \n                            \n                                Value : Edm.Boolean\n                            \n                        \n                        \n                            \n                                 Byte\n                            \n                        \n                        \n                            \n                                Value : Edm.Byte\n                            \n                        \n                        \n                            \n                                 SByte\n                            \n                        \n                        \n                            \n                                Value : Edm.SByte\n                            \n                        \n                        \n                            \n                                 Int32\n                            \n                        \n                        \n                            \n                                Value : Edm.Int32\n                            \n                        \n                        \n                            \n                                 Int64\n                            \n                        \n                        \n                            \n                                Value : Edm.Int64\n                            \n                        \n                        \n                            \n                                 Date\n                            \n                        \n                        \n                            \n                                Value : Edm.Date\n                            \n                        \n                        \n                            \n                                 TimeOfDay\n                            \n                        \n                        \n                            \n                                Value : Edm.TimeOfDay\n                            \n                        \n                        \n                            \n                                 DateTimeOffset\n                            \n                        \n                        \n                            \n                                Value : Edm.DateTimeOffset\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                Value : Edm.Duration\n                            \n                        \n                        \n                            \n                                 Decimal\n                            \n                        \n                        \n                            \n                                Value : Edm.Decimal\n                            \n                        \n                        \n                            \n                                 Double\n                            \n                        \n                        \n                            \n                                Value : Edm.Double\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : Edm.Single\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n                        \n                            \n                                Value : Edm.Binary\n                            \n                        \n                        \n                            \n                                 Stream\n                            \n                        \n                        \n                            \n                                Value : Edm.Stream\n                            \n                        \n                        \n                            \n                                 Geography\n                            \n                        \n                        \n                            \n                                Value : Edm.Geography\n                            \n                        \n                        \n                            \n                                 GeographyPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyPoint\n                            \n                        \n                        \n                            \n                                 GeographyLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyLineString\n                            \n                        \n                        \n                            \n                                 GeographyPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyPolygon\n                            \n                        \n                        \n                            \n                                 GeographyMultiPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiPoint\n                            \n                        \n                        \n                            \n                                 GeographyMultiLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiLineString\n                            \n                        \n                        \n                            \n                                 GeographyMultiPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiPolygon\n                            \n                        \n                        \n                            \n                                 GeographyCollection\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyCollection\n                            \n                        \n                        \n                            \n                                 Geometry\n                            \n                        \n                        \n                            \n                                Value : Edm.Geometry\n                            \n                        \n                        \n                            \n                                 GeometryPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryPoint\n                            \n                        \n                        \n                            \n                                 GeometryLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryLineString\n                            \n                        \n                        \n                            \n                                 GeometryPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryPolygon\n                            \n                        \n                        \n                            \n                                 GeometryMultiPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiPoint\n                            \n                        \n                        \n                            \n                                 GeometryMultiLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiLineString\n                            \n                        \n                        \n                            \n                                 GeometryMultiPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiPolygon\n                            \n                        \n                        \n                            \n                                 GeometryCollection\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryCollection\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PathSegment\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOption\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 levels\n                            \n                        \n                        \n                            \n                                Value : levels\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelEventType\n                    \n                \n                        \n                            \n                                 Change\n                            \n                        \n                        \n                            \n                                Value : change\n                            \n                        \n                        \n                            \n                                 Reset\n                            \n                        \n                        \n                            \n                                Value : reset\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Destroy\n                            \n                        \n                        \n                            \n                                Value : destroy\n                            \n                        \n                        \n                            \n                                 Add\n                            \n                        \n                        \n                            \n                                Value : add\n                            \n                        \n                        \n                            \n                                 Remove\n                            \n                        \n                        \n                            \n                                Value : remove\n                            \n                        \n                        \n                            \n                                 Invalid\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n                        \n                            \n                                 Request\n                            \n                        \n                        \n                            \n                                Value : request\n                            \n                        \n                        \n                            \n                                 Sync\n                            \n                        \n                        \n                            \n                                Value : sync\n                            \n                        \n                        \n                            \n                                 Attach\n                            \n                        \n                        \n                            \n                                Value : attach\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nWithout Schema\nWith Schema\nUsage\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nnpm i angular-odataWithout Schema\nImport ODataModule into your application module definition and setup the module for the serviceRootUrl.\nimport { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      config: {\n        serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n      }\n    })\n    ...\n  ]\n})\nexport class AppModule {}With Schema\nUse OData Angular Generator for generate the Config and the Module definition.\nImport ODataModule, Config and Module into your application module.\nSetup ODataModule with Config and import it along with Module.\nimport { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({ config: TripPinConfig }),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}Usage\nInject and use the ODataServiceFactory\nimport { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entitySet(\n      \"Airports\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Airport\"\n    );\n    let airports = airportsService.entities();\n\n    // Fetch airports\n    airports.fetch().subscribe(({ entities }) => {\n      console.log(\"Airports: \", entities);\n    });\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports\n      .fetchAll()\n      .subscribe((airports) => console.log(\"All Airports: \", airports));\n\n    // Fetch airport with key and fetch again from cache\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          // From Cache!\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      )\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Clone airports resource and filter new resource\n    airports\n      .clone()\n      .query((q) =>\n        q.filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) =>\n      q.filter().push({ Location: { City: { Region: \"California\" } } })\n    );\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Store airports resource\n    var json = airports.toJSON();\n    // Load airports resource\n    airports = this.odata.fromJSON(json) as ODataEntitySetResource;\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) => q.filter().clear());\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let peopleService = this.factory.entitySet(\n      \"People\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Person\"\n    );\n    let people = peopleService.entities();\n\n    // Clone people resource and expand and fetch\n    people\n      .clone()\n      .query((q) =>\n        q.expand({\n          Friends: {\n            expand: { Friends: { select: [\"AddressInfo\"] } },\n          },\n          Trips: { select: [\"Name\", \"Tags\"] },\n        })\n      )\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Clone people resource and filter with expressions\n    people\n      .clone()\n      .query((q) =>\n        q.filter(({ e }) =>\n          e().eq(\"Emails\", \"john@example.com\").or(e().eq(\"UserName\", \"john\"))\n        )\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec(() =>\n        forkJoin({\n          airports: airports.fetch(),\n          people: people.fetch({ withCount: true }),\n        })\n      )\n      .subscribe();\n  }\n}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    125 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.125.0\n        \n            Description : Client side OData typescript library for Angular\n        \n            Keywords : client, odata, odata v4, odata v3, odata v2, typescript, api, @angular, angular\n        \n            Homepage : https://github.com/diegomvh/angular-odata\n        \n            Bugs : https://github.com/diegomvh/angular-odata/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/diegomvh/angular-odata.git\n        \n            Author : Diego van Haaster\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            ComputeExpressionBuilder   (projects/.../compute.ts)\n                        \n                        \n                            CountExpressionBuilder   (projects/.../count.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandExpressionBuilder   (projects/.../expand.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterConnector   (projects/.../filter.ts)\n                        \n                        \n                            FilterExpressionBuilder   (projects/.../filter.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            GroupBy   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            NestedOrderBy   (projects/.../builder.ts)\n                        \n                        \n                            Normalize   (projects/.../syntax.ts)\n                        \n                        \n                            ODataActionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataFunctionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByExpressionBuilder   (projects/.../orderby.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            SearchConnector   (projects/.../search.ts)\n                        \n                        \n                            SearchExpressionBuilder   (projects/.../search.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectExpressionBuilder   (projects/.../select.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                        ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                         | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupBy\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedOrderBy\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                        OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         |  | NestedOrderBy\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                        SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n    \n    \n        \n            \n                \n                    \n                    ComputeExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/count.ts\n    \n    \n        \n            \n                \n                    \n                    CountExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n    \n    \n        \n            \n                \n                    \n                    ExpandExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/filter.ts\n    \n    \n        \n            \n                \n                    \n                    FilterConnector\n                \n            \n            \n                \n                        \"and\" | \"or\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n    \n    \n        \n            \n                \n                    \n                    Normalize\n                \n            \n            \n                \n                        \"all\" | \"right\" | \"left\" | \"none\"\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataActionOptions\n                \n            \n            \n                \n                            ODataQueryArgumentsOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataFunctionOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n    \n    \n        \n            \n                \n                    \n                    OrderByExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/search.ts\n    \n    \n        \n            \n                \n                    \n                    SearchConnector\n                \n            \n            \n                \n                        \"AND\" | \"OR\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SearchExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/select.ts\n    \n    \n        \n            \n                \n                    \n                    SelectExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
