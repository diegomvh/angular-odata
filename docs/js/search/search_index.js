var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Aggregate.html",[0,0.346,1,1.768]],["body/classes/Aggregate.html",[0,0.663,1,2.731,2,0.098,3,0.038,4,0.038,5,0.038,6,0.088,7,0.925,8,1.63,9,2.539,10,0.029,11,0.619,12,1.923,13,1.848,14,1.639,15,2.411,16,1.323,17,2.142,18,1.127,19,0.849,20,0.271,21,1.981,22,2.027,23,2.489,24,1.72,25,0.234,26,0.226,27,2.244,28,0.149,29,0.009,30,0.157,31,0.114,32,0.135,33,0.997,34,2.244,35,0.684,36,2.061,37,1.075,38,2.244,39,1.143,40,0.713,41,0.9,42,2.244,43,2.181,44,2.244,45,1.794,46,2.244,47,2.244,48,0.428,49,1.458,50,0.679,51,1.399,52,0.417,53,0.73,54,0.576,55,2.185,56,1.074,57,0.952,58,1.458,59,0.749,60,1.419,61,0.73,62,1.419,63,0.589,64,1.381,65,0.617,66,1.31,67,0.576,68,1.31,69,0.679,70,1.277,71,0.695,72,1.345,73,0.632,74,0.134,75,3.894,76,3.824,77,3.786,78,3.025,79,1.357,80,2.606,81,2.606,82,2.675,83,1.437,84,0.525,85,0.925,86,1.214,87,1.797,88,1.154,89,0.952,90,0.952,91,0.952,92,1.401,93,0.952,94,1.31,95,0.952,96,0.905,97,2.273,98,0.952,99,0.952,100,0.9,101,0.695,102,1.31,103,0.952,104,0.952,105,1.544,106,1.947,107,0.537,108,1.843,109,0.952,110,0.663,111,0.952,112,0.952,113,0.952,114,0.952,115,0.695,116,0.9,117,0.852,118,0.952,119,3.025,120,0.952,121,0.952,122,0.952,123,0.952,124,0.952,125,0.952,126,0.952,127,0.952,128,1.08,129,0.952,130,2.697,131,0.952,132,2.176,133,0.952,134,0.952,135,2.489,136,0.952,137,2.561,138,0.952,139,0.952,140,0.952,141,0.479,142,0.952,143,0.952,144,0.952,145,0.952,146,0.952,147,0.952,148,0.952,149,0.952,150,0.949,151,0.851,152,0.952,153,0.952,154,0.952,155,0.952,156,0.952,157,0.952,158,0.695,159,0.952,160,2.664,161,2.461,162,0.952,163,0.952,164,0.617,165,0.952,166,0.952,167,0.647,168,1.544,169,0.952,170,0.952,171,0.925,172,0.952,173,0.925,174,2.235,175,0.749,176,2.027,177,2.417,178,1.493,179,2.635,180,1.947,181,3.303,182,1.544,183,1.947,184,2.24,185,1.544,186,0.952,187,1.947,188,1.947,189,2.24,190,0.562,191,1.544,192,0.952,193,1.947,194,0.952,195,1.892,196,0.952,197,0.952,198,0.952,199,0.952,200,0.952,201,0.952,202,0.952,203,0.952,204,0.952,205,0.952,206,0.952,207,0.952,208,0.952,209,1.277,210,0.952,211,0.952,212,1.892,213,0.952,214,0.952,215,0.952,216,0.952,217,1.892,218,0.952,219,1.544,220,0.952,221,0.952,222,0.952,223,0.952,224,0.952,225,0.952,226,0.952,227,1.947,228,0.952,229,0.952,230,0.952,231,0.952,232,0.952,233,0.952,234,0.952,235,0.952,236,0.952,237,0.952,238,0.952,239,0.952,240,0.952,241,0.952,242,0.952,243,0.952,244,0.952,245,0.952,246,0.952,247,0.952,248,0.952,249,0.952,250,0.952,251,0.952,252,0.952,253,0.952,254,0.952,255,0.952,256,1.892,257,0.952,258,0.952,259,0.952,260,0.952,261,0.952,262,0.952,263,1.892,264,0.952,265,0.9,266,1.544,267,0.952,268,1.544,269,1.892,270,0.952,271,0.952,272,0.952,273,0.952,274,0.952,275,0.952,276,1.892,277,0.952,278,0.952,279,2.24,280,2.461,281,1.544,282,0.952,283,0.952,284,1.074,285,0.952,286,0.952,287,1.947,288,0.952,289,0.952,290,0.952,291,0.952,292,0.952,293,0.952,294,0.952,295,0.952,296,0.952,297,0.952,298,0.952,299,0.952,300,0.952,301,0.952,302,0.952,303,0.952,304,0.952,305,0.952,306,0.952,307,0.952,308,0.952,309,0.952,310,1.892,311,0.952,312,0.952,313,0.952,314,0.952,315,0.952,316,0.952,317,0.952,318,0.952,319,0.952,320,0.952,321,0.952,322,0.787,323,1.5,324,0.952,325,0.952,326,0.952,327,0.952,328,1.892,329,0.952,330,0.952,331,0.952,332,0.952,333,0.9,334,0.9,335,0.829,336,0.9,337,0.9,338,0.9,339,0.952,340,0.952,341,1.947,342,2.179,343,1.544,344,0.952,345,1.544,346,0.952,347,0.952,348,0.19,349,2.697,350,0.952,351,0.952,352,0.952,353,0.952,354,0.952,355,0.952,356,0.952,357,0.952,358,0.952,359,0.952,360,0.952,361,0.952,362,0.952,363,0.952,364,1.544,365,1.544,366,0.952,367,0.952,368,0.952,369,0.952,370,0.952,371,0.952,372,0.952,373,0.952,374,0.952,375,0.952,376,0.925,377,0.952,378,0.925,379,0.952,380,0.952,381,0.952,382,0.952,383,0.952,384,1.741,385,1.381,386,0.952,387,0.952,388,0.952,389,0.952,390,0.952,391,0.952,392,0.952,393,0.749,394,0.952,395,0.952,396,0.952,397,0.952,398,0.952,399,0.952,400,0.952,401,1.892,402,0.952,403,0.952,404,0.952,405,0.952,406,2.489,407,0.493,408,0.952,409,0.9,410,2.489,411,0.952,412,0.768,413,2.635,414,0.952,415,2.24,416,0.952,417,0.695,418,0.004,419,0.004]],["title/interfaces/ApiOptions.html",[79,1.032,420,2.444]],["body/interfaces/ApiOptions.html",[3,0.066,4,0.066,5,0.066,6,0.05,10,0.05,19,0.477,24,1.195,25,0.239,28,0.098,29,0.009,30,0.158,31,0.121,32,0.235,33,1.007,37,1.7,39,0.99,45,1.356,48,0.213,51,1.424,52,0.628,59,1.826,61,1.781,63,1.831,65,1.506,67,1.404,69,1.656,71,1.696,73,1.542,74,0.137,78,1.31,79,1.848,83,1.121,84,0.636,85,0.503,88,0.796,92,0.762,96,0.527,97,1.843,108,0.895,128,0.817,141,1.363,150,1.169,151,1.28,158,1.696,167,1.579,190,1.981,348,0.264,407,0.597,418,0.005,419,0.005,420,3.541,421,1.968,422,2.209,423,3.865,424,4.024,425,4.446,426,3.049,427,4.309,428,3.664,429,4.202,430,4.446,431,4.024,432,4.024,433,4.446,434,4.202,435,3.568,436,3.865,437,3.242,438,3.143,439,3.242,440,3.685,441,4.093,442,2.793,443,1.78,444,2.209,445,2.209,446,2.209,447,3.429,448,1.901,449,2.919,450,3.159,451,1.838,452,3.159,453,0.762,454,0.875,455,1.725,456,2.796,457,1.838,458,2.919,459,3.143,460,2.078,461,2.629,462,1.887,463,2.919,464,3.034,465,1.921,466,3.034,467,2.545,468,2.545,469,2.718,470,3.159,471,3.034,472,2.121,473,3.298,474,4.402,475,3.298,476,2.416,477,4.844,478,2.416,479,2.416,480,2.209,481,3.298,482,4.657,483,4.761,484,2.307,485,3.298,486,2.416,487,2.416,488,4.034,489,2.416,490,3.298,491,4.024,492,2.416,493,2.416,494,3.298,495,2.416,496,3.298,497,2.307,498,3.298,499,2.307,500,3.298,501,2.307,502,3.298,503,3.719,504,2.042,505,3.719,506,3.455,507,3.455,508,3.298,509,2.416,510,2.416,511,2.416,512,2.307,513,3.298,514,2.416,515,2.416,516,2.307,517,3.298,518,2.919,519,2.416,520,2.416,521,2.416,522,2.416,523,3.298,524,2.416,525,2.416,526,2.186,527,2.186,528,3.85,529,3.298,530,3.455,531,3.455,532,2.416,533,3.455,534,4.402,535,2.416,536,2.416,537,3.455,538,2.307,539,3.298,540,2.416,541,2.416,542,2.416,543,1.838,544,3.298,545,2.629,546,3.298,547,3.298,548,3.298,549,1.738,550,2.492,551,3.85,552,3.298,553,4.624,554,5.385,555,5.385,556,5.385,557,2.307,558,3.298,559,4.402,560,2.307,561,3.298,562,3.455,563,2.307,564,3.298,565,3.967,566,3.455,567,2.307,568,3.298,569,2.919,570,2.307,571,3.298,572,3.455,573,2.307,574,3.298,575,3.455,576,2.307,577,3.298,578,3.85,579,3.298,580,4.844,581,2.307,582,3.298,583,2.307,584,3.298,585,2.307,586,3.298,587,2.307,588,3.298,589,2.307,590,3.298,591,2.307,592,3.298,593,2.307,594,1.968,595,2.919,596,2.545,597,1.873,598,3.159,599,3.159,600,3.034,601,2.307,602,2.307,603,2.209,604,1.901,605,2.307,606,2.042,607,2.416,608,2.416,609,2.416,610,2.209,611,2.307,612,2.307,613,3.865,614,3.541,615,2.971,616,4.034,617,2.393,618,2.718,619,2.971,620,1.968,621,3.286,622,1.968,623,1.78,624,1.968,625,2.132,626,1.873,627,3.159,628,2.042,629,2.416,630,1.968,631,2.257,632,0.895,633,2.416,634,1.901,635,2.121,636,1.901,637,2.307,638,2.416,639,2.416,640,1.725,641,2.416,642,2.209,643,2.307,644,3.159,645,4.309,646,1.343,647,2.209,648,2.209,649,2.209,650,1.535,651,2.773,652,2.121,653,2.919,654,2.042,655,3.034,656,2.307,657,2.919,658,2.307,659,3.159,660,2.121,661,3.159,662,3.034,663,2.078,664,2.209,665,1.968,666,2.121,667,1.78,668,2.209,669,1.78,670,2.209,671,2.416,672,2.121,673,2.307,674,1.838,675,1.901,676,1.78,677,1.78,678,2.209,679,2.307,680,2.121,681,2.042,682,1.968]],["title/classes/ArithmeticFunctions.html",[0,0.346,256,1.819]],["body/classes/ArithmeticFunctions.html",[0,0.664,1,2.334,2,0.099,3,0.039,4,0.039,5,0.039,6,0.069,7,0.932,8,1.57,9,2.51,10,0.029,11,0.622,12,1.817,13,1.722,15,2.342,16,0.652,17,2.065,19,0.776,20,0.258,22,1.642,23,1.848,24,1.65,25,0.234,26,0.159,28,0.118,29,0.009,30,0.156,31,0.112,32,0.118,33,1.003,35,0.544,36,1.984,39,1.188,43,2.117,45,1.793,48,0.429,49,1.467,50,0.684,51,1.402,52,0.42,53,0.735,54,0.58,55,2.19,56,1.081,57,0.959,58,1.467,59,0.754,60,1.427,61,0.735,62,1.427,63,0.593,64,1.389,65,0.622,66,1.317,67,0.58,68,1.317,69,0.684,70,1.284,71,0.7,72,1.352,73,0.637,74,0.134,75,3.898,76,3.825,77,3.794,78,3.044,79,1.362,80,2.608,81,2.608,82,2.677,83,1.437,84,0.526,85,0.927,86,1.221,87,1.804,88,1.154,89,0.959,90,0.959,91,0.959,92,1.404,93,0.959,94,1.317,95,0.959,96,0.905,97,2.277,98,0.959,99,0.959,100,0.906,101,0.7,102,1.317,103,0.959,104,0.959,105,1.553,106,1.957,107,0.541,108,1.847,109,0.959,110,0.667,111,0.959,112,0.959,113,0.959,114,0.959,115,0.7,116,0.906,117,0.858,118,0.959,119,3.03,120,0.959,121,0.959,122,0.959,123,0.959,124,0.959,125,0.959,126,0.959,127,0.959,128,1.147,129,0.959,130,2.705,131,0.959,132,2.185,133,0.959,134,0.959,135,2.498,136,0.959,137,2.569,138,0.959,139,0.959,140,0.959,141,1.13,142,0.959,143,0.959,144,0.959,145,0.959,146,0.959,147,0.959,148,0.959,149,0.959,150,0.951,151,0.856,152,0.959,153,0.959,154,0.959,155,0.959,156,0.959,157,0.959,158,0.7,159,0.959,160,2.67,161,2.471,162,0.959,163,0.959,164,0.622,165,0.959,166,0.959,167,0.652,168,1.553,169,0.959,170,0.959,171,0.932,172,0.959,173,0.932,174,2.238,175,0.754,176,2.033,177,2.424,178,1.5,179,2.644,180,1.957,181,3.308,182,1.553,183,1.957,184,2.249,185,1.553,186,0.959,187,1.957,188,1.957,189,2.249,190,0.567,191,1.553,192,0.959,193,1.957,194,0.959,195,1.901,196,0.959,197,0.959,198,0.959,199,0.959,200,0.959,201,0.959,202,0.959,203,0.959,204,0.959,205,0.959,206,0.959,207,0.959,208,0.959,209,1.284,210,0.959,211,0.959,212,1.901,213,0.959,214,0.959,215,0.959,216,0.959,217,1.901,218,0.959,219,1.553,220,0.959,221,0.959,222,0.959,223,0.959,224,0.959,225,0.959,226,0.959,227,1.957,228,0.959,229,0.959,230,0.959,231,0.959,232,0.959,233,0.959,234,0.959,235,0.959,236,0.959,237,0.959,238,0.959,239,0.959,240,0.959,241,0.959,242,0.959,243,0.959,244,0.959,245,0.959,246,0.959,247,0.959,248,0.959,249,0.959,250,0.959,251,0.959,252,0.959,253,0.959,254,0.959,255,0.959,256,2.185,257,1.553,258,0.959,259,1.553,260,0.959,261,1.553,262,0.959,263,1.901,264,0.959,265,0.906,266,1.553,267,0.959,268,1.553,269,1.901,270,0.959,271,0.959,272,0.959,273,0.959,274,0.959,275,0.959,276,1.901,277,0.959,278,0.959,279,2.249,280,2.471,281,1.553,282,0.959,283,0.959,284,1.081,285,0.959,286,0.959,287,1.957,288,0.959,289,0.959,290,0.959,291,0.959,292,0.959,293,0.959,294,0.959,295,0.959,296,0.959,297,0.959,298,0.959,299,0.959,300,0.959,301,0.959,302,0.959,303,0.959,304,0.959,305,0.959,306,0.959,307,0.959,308,0.959,309,0.959,310,1.901,311,0.959,312,0.959,313,0.959,314,0.959,315,0.959,316,0.959,317,0.959,318,0.959,319,0.959,320,0.959,321,0.959,322,0.793,323,1.509,324,0.959,325,0.959,326,0.959,327,0.959,328,1.901,329,0.959,330,0.959,331,0.959,332,0.959,333,0.906,334,0.906,335,0.835,336,0.906,337,0.906,338,0.906,339,0.959,340,0.959,341,1.957,342,2.186,343,1.553,344,0.959,345,1.553,346,0.959,347,0.959,348,0.191,349,2.705,350,0.959,351,0.959,352,0.959,353,0.959,354,0.959,355,0.959,356,0.959,357,0.959,358,0.959,359,0.959,360,0.959,361,0.959,362,0.959,363,0.959,364,1.553,365,1.553,366,0.959,367,0.959,368,0.959,369,0.959,370,0.959,371,0.959,372,0.959,373,0.959,374,0.959,375,0.959,376,0.932,377,0.959,378,0.932,379,0.959,380,0.959,381,0.959,382,0.959,383,0.959,384,1.75,385,1.389,386,0.959,387,0.959,388,0.959,389,0.959,390,0.959,391,0.959,392,0.959,393,0.754,394,0.959,395,0.959,396,0.959,397,0.959,398,0.959,399,0.959,400,0.959,401,1.901,402,0.959,403,0.959,404,0.959,405,0.959,406,2.498,407,0.495,408,0.959,409,0.906,410,2.498,411,0.959,412,0.773,413,2.644,414,0.959,415,2.249,416,0.959,417,0.7,418,0.004,419,0.004,553,2.205,683,3.658,684,3.658,685,2.26,686,2.26,687,2.26]],["title/classes/ArithmeticOperators.html",[0,0.346,310,1.819]],["body/classes/ArithmeticOperators.html",[0,0.662,1,2.316,2,0.097,3,0.038,4,0.038,5,0.038,6,0.085,7,0.918,8,1.56,9,2.505,10,0.029,11,0.615,12,1.808,13,1.712,15,2.333,16,0.642,17,2.057,19,0.771,20,0.256,22,1.628,23,1.83,24,1.643,25,0.233,26,0.213,28,0.159,29,0.009,30,0.159,31,0.113,32,0.159,33,1.017,35,0.73,36,1.972,39,1.129,43,2.105,45,1.792,48,0.427,49,1.449,50,0.674,51,1.396,52,0.415,53,0.725,54,0.571,55,2.18,56,1.068,57,0.945,58,1.449,59,0.743,60,1.41,61,0.725,62,1.41,63,0.585,64,1.372,65,0.613,66,1.302,67,0.571,68,1.302,69,0.674,70,1.269,71,0.69,72,1.336,73,0.627,74,0.133,75,3.9,76,3.843,77,3.795,78,3.022,79,1.351,80,2.604,81,2.604,82,2.673,83,1.436,84,0.524,85,0.922,86,1.206,87,1.79,88,1.154,89,0.945,90,0.945,91,0.945,92,1.397,93,0.945,94,1.302,95,0.945,96,0.905,97,2.269,98,0.945,99,0.945,100,0.893,101,0.69,102,1.302,103,0.945,104,0.945,105,1.535,106,1.937,107,0.533,108,1.84,109,0.945,110,0.658,111,0.945,112,0.945,113,0.945,114,0.945,115,0.69,116,0.893,117,0.845,118,0.945,119,3.02,120,0.945,121,0.945,122,0.945,123,0.945,124,0.945,125,0.945,126,0.945,127,0.945,128,1.077,129,0.945,130,3.156,131,0.945,132,2.166,133,0.945,134,0.945,135,2.481,136,0.945,137,2.552,138,0.945,139,0.945,140,0.945,141,1.391,142,0.945,143,0.945,144,0.945,145,0.945,146,0.945,147,0.945,148,0.945,149,0.945,150,0.947,151,0.846,152,0.945,153,0.945,154,0.945,155,0.945,156,0.945,157,0.945,158,0.69,159,0.945,160,2.658,161,2.452,162,0.945,163,0.945,164,0.613,165,0.945,166,0.945,167,0.642,168,1.535,169,0.945,170,0.945,171,0.918,172,0.945,173,0.918,174,2.232,175,0.743,176,2.02,177,2.41,178,1.485,179,2.626,180,1.937,181,3.296,182,1.535,183,1.937,184,2.23,185,1.535,186,0.945,187,1.937,188,1.937,189,2.23,190,0.558,191,1.535,192,0.945,193,1.937,194,0.945,195,1.882,196,0.945,197,0.945,198,0.945,199,0.945,200,0.945,201,0.945,202,0.945,203,0.945,204,0.945,205,0.945,206,0.945,207,0.945,208,0.945,209,1.269,210,0.945,211,0.945,212,1.882,213,0.945,214,0.945,215,0.945,216,0.945,217,1.882,218,0.945,219,1.535,220,0.945,221,0.945,222,0.945,223,0.945,224,0.945,225,0.945,226,0.945,227,1.937,228,0.945,229,0.945,230,0.945,231,0.945,232,0.945,233,0.945,234,0.945,235,0.945,236,0.945,237,0.945,238,0.945,239,0.945,240,0.945,241,0.945,242,0.945,243,0.945,244,0.945,245,0.945,246,0.945,247,0.945,248,0.945,249,0.945,250,0.945,251,0.945,252,0.945,253,0.945,254,0.945,255,0.945,256,1.882,257,0.945,258,0.945,259,0.945,260,0.945,261,0.945,262,0.945,263,1.882,264,0.945,265,0.893,266,1.535,267,0.945,268,1.535,269,1.882,270,0.945,271,0.945,272,0.945,273,0.945,274,0.945,275,0.945,276,1.882,277,0.945,278,0.945,279,2.23,280,2.452,281,1.535,282,0.945,283,0.945,284,1.068,285,0.945,286,0.945,287,1.937,288,0.945,289,0.945,290,0.945,291,0.945,292,0.945,293,0.945,294,0.945,295,0.945,296,0.945,297,0.945,298,0.945,299,0.945,300,0.945,301,0.945,302,0.945,303,0.945,304,0.945,305,0.945,306,0.945,307,0.945,308,0.945,309,0.945,310,2.166,311,1.535,312,0.945,313,1.535,314,0.945,315,1.535,316,0.945,317,1.535,318,0.945,319,1.535,320,0.945,321,1.535,322,0.781,323,1.491,324,0.945,325,0.945,326,0.945,327,0.945,328,1.882,329,0.945,330,0.945,331,0.945,332,0.945,333,0.893,334,0.893,335,0.823,336,0.893,337,0.893,338,0.893,339,0.945,340,0.945,341,1.937,342,2.171,343,1.535,344,0.945,345,1.535,346,0.945,347,0.945,348,0.189,349,2.688,350,0.945,351,0.945,352,0.945,353,0.945,354,0.945,355,0.945,356,0.945,357,0.945,358,0.945,359,0.945,360,0.945,361,0.945,362,0.945,363,0.945,364,1.535,365,1.535,366,0.945,367,0.945,368,0.945,369,0.945,370,0.945,371,0.945,372,0.945,373,0.945,374,0.945,375,0.945,376,0.918,377,0.945,378,0.918,379,0.945,380,0.945,381,0.945,382,0.945,383,0.945,384,1.733,385,1.372,386,0.945,387,0.945,388,0.945,389,0.945,390,0.945,391,0.945,392,0.945,393,0.743,394,0.945,395,0.945,396,0.945,397,0.945,398,0.945,399,0.945,400,0.945,401,1.882,402,0.945,403,0.945,404,0.945,405,0.945,406,2.481,407,0.49,408,0.945,409,0.893,410,2.481,411,0.945,412,0.762,413,2.626,414,0.945,415,2.23,416,0.945,417,0.69,418,0.004,419,0.004,688,2.705,689,3.615,690,3.615,691,3.615,692,3.615,693,3.615,694,2.227,695,2.227,696,2.227,697,2.227,698,2.227,699,2.227]],["title/interfaces/Cache.html",[79,1.032,447,1.872]],["body/interfaces/Cache.html",[3,0.068,4,0.068,5,0.068,6,0.085,10,0.052,11,0.761,19,0.703,24,1.233,25,0.24,26,0.195,28,0.192,29,0.009,30,0.164,31,0.119,32,0.145,33,1.015,35,0.666,39,1.18,45,1.383,48,0.223,51,1.444,52,0.648,59,1.884,61,1.838,63,1.868,65,1.554,67,1.449,69,1.708,71,1.75,73,1.591,74,0.137,78,1.368,79,1.872,83,1.143,84,0.631,85,0.525,88,0.815,92,1.303,96,0.544,97,1.888,108,0.935,128,0.843,141,1.396,150,1.177,151,1.321,158,1.75,167,1.629,190,1.783,348,0.165,407,0.611,418,0.005,419,0.005,420,3.129,421,2.056,422,2.308,423,2.216,424,2.308,425,3.403,426,1.748,427,3.491,428,2.804,429,2.41,430,3.403,431,2.308,432,2.308,433,3.403,434,2.41,435,3.044,436,2.216,437,2.626,438,2.545,439,2.626,440,3.416,441,3.793,442,2.862,443,1.859,444,2.308,445,2.308,446,2.308,447,3.527,448,1.986,449,3.012,450,3.259,451,1.921,452,3.259,453,0.796,454,0.914,455,1.802,456,2.851,457,1.921,458,3.012,459,3.205,460,2.144,461,2.712,462,1.933,463,3.012,464,3.129,465,1.982,466,3.129,467,2.626,468,2.626,469,2.804,470,3.259,471,3.129,472,2.216,473,3.403,474,4.49,475,3.403,476,2.524,477,4.915,478,2.524,479,2.524,480,2.308,481,3.403,482,4.735,483,4.822,484,2.41,485,3.403,486,2.524,487,2.524,488,4.132,489,2.524,490,3.403,491,4.104,492,2.524,493,2.524,494,3.403,495,2.524,496,3.403,497,2.41,498,3.403,499,2.41,500,3.403,501,2.41,502,3.403,503,3.793,504,2.133,505,3.793,506,3.565,507,3.565,508,3.403,509,2.524,510,2.524,511,2.524,512,2.41,513,3.403,514,2.524,515,2.524,516,2.41,517,3.403,518,3.012,519,2.524,520,2.524,521,2.524,522,2.524,523,3.403,524,2.524,525,2.524,526,2.239,527,2.239,528,3.944,529,3.403,530,3.565,531,3.565,532,2.524,533,3.565,534,4.49,535,2.524,536,2.524,537,3.565,538,2.41,539,3.403,540,2.524,541,2.524,542,2.524,543,1.921,544,3.403,545,2.712,546,3.403,547,3.403,548,3.403,549,1.793,550,2.553,551,3.944,552,3.403,553,4.691,554,5.429,555,5.429,556,5.429,557,2.41,558,3.403,559,4.49,560,2.41,561,3.403,562,3.565,563,2.41,564,3.403,565,3.999,566,3.565,567,2.41,568,3.403,569,3.012,570,2.41,571,3.403,572,3.565,573,2.41,574,3.403,575,3.565,576,2.41,577,3.403,578,3.944,579,3.403,580,4.915,581,2.41,582,3.403,583,2.41,584,3.403,585,2.41,586,3.403,587,2.41,588,3.403,589,2.41,590,3.403,591,2.41,592,3.403,593,2.41,594,2.056,595,3.012,596,2.626,597,1.932,598,3.259,599,3.259,600,3.129,601,2.41,602,2.41,603,2.308,604,1.986,605,2.41,606,2.133,607,2.524,608,2.524,609,2.524,610,2.308,611,2.41,612,2.41,613,3.941,614,3.628,615,3.044,616,4.132,617,2.469,618,2.804,619,3.044,620,2.056,621,3.366,622,2.056,623,1.859,624,2.056,625,2.184,626,1.932,627,3.259,628,2.133,629,3.565,630,3.366,631,3.211,632,1.321,633,3.565,634,1.986,635,2.216,636,1.986,637,2.41,638,2.524,639,2.524,640,1.802,641,2.524,642,2.308,643,2.41,644,3.259,645,4.359,646,1.403,647,2.308,648,2.308,649,2.308,650,1.603,651,2.808,652,2.216,653,3.012,654,2.133,655,3.129,656,2.41,657,3.012,658,2.41,659,3.259,660,2.216,661,3.259,662,3.129,663,2.144,664,2.308,665,2.056,666,2.216,667,1.859,668,2.308,669,1.859,670,2.308,671,2.524,672,2.216,673,2.41,674,1.921,675,1.986,676,1.859,677,1.859,678,2.308,679,2.41,680,2.216,681,2.133,682,2.056,700,3.565,701,3.999,702,3.999]],["title/classes/CollectionFunctions.html",[0,0.346,212,1.819]],["body/classes/CollectionFunctions.html",[0,0.665,1,2.344,2,0.1,3,0.039,4,0.039,5,0.039,6,0.06,7,0.94,8,1.575,9,2.514,10,0.03,11,0.625,12,1.822,13,1.728,15,2.348,16,0.657,17,2.07,19,0.779,20,0.259,22,1.65,23,1.859,24,1.653,25,0.233,26,0.127,28,0.094,29,0.009,30,0.155,31,0.111,32,0.094,33,0.999,35,0.435,36,1.991,39,1.174,43,2.123,45,1.794,48,0.429,49,1.477,50,0.689,51,1.405,52,0.423,53,0.742,54,0.585,55,2.195,56,1.088,57,0.967,58,1.477,59,0.76,60,1.436,61,0.742,62,1.436,63,0.598,64,1.398,65,0.627,66,1.326,67,0.585,68,1.326,69,0.689,70,1.293,71,0.706,72,1.361,73,0.642,74,0.134,75,3.898,76,3.832,77,3.794,78,3.041,79,1.367,80,2.61,81,2.61,82,2.679,83,1.439,84,0.527,85,0.93,86,1.229,87,1.812,88,1.155,89,0.967,90,0.967,91,0.967,92,1.408,93,0.967,94,1.326,95,0.967,96,0.905,97,2.281,98,0.967,99,0.967,100,0.913,101,0.706,102,1.326,103,0.967,104,0.967,105,1.563,106,1.968,107,0.545,108,1.85,109,0.967,110,0.673,111,0.967,112,0.967,113,0.967,114,0.967,115,0.706,116,0.913,117,0.865,118,0.967,119,3.036,120,0.967,121,0.967,122,0.967,123,0.967,124,0.967,125,0.967,126,0.967,127,0.967,128,1.131,129,0.967,130,2.714,131,0.967,132,2.196,133,0.967,134,0.967,135,2.507,136,0.967,137,2.579,138,0.967,139,0.967,140,0.967,141,0.989,142,0.967,143,0.967,144,0.967,145,0.967,146,0.967,147,0.967,148,0.967,149,0.967,150,0.954,151,0.862,152,0.967,153,0.967,154,0.967,155,0.967,156,0.967,157,0.967,158,0.706,159,0.967,160,2.676,161,2.481,162,0.967,163,0.967,164,0.627,165,0.967,166,0.967,167,0.657,168,1.563,169,0.967,170,0.967,171,0.94,172,0.967,173,0.94,174,2.242,175,0.76,176,2.04,177,2.433,178,1.509,179,2.654,180,1.968,181,3.315,182,1.563,183,1.968,184,2.26,185,1.563,186,0.967,187,1.968,188,1.968,189,2.26,190,0.571,191,1.563,192,0.967,193,1.968,194,0.967,195,1.912,196,0.967,197,0.967,198,0.967,199,0.967,200,0.967,201,0.967,202,0.967,203,0.967,204,0.967,205,0.967,206,0.967,207,0.967,208,0.967,209,1.293,210,0.967,211,0.967,212,2.196,213,1.563,214,0.967,215,1.563,216,0.967,217,1.912,218,0.967,219,1.563,220,0.967,221,0.967,222,0.967,223,0.967,224,0.967,225,0.967,226,0.967,227,1.968,228,0.967,229,0.967,230,0.967,231,0.967,232,0.967,233,0.967,234,0.967,235,0.967,236,0.967,237,0.967,238,0.967,239,0.967,240,0.967,241,0.967,242,0.967,243,0.967,244,0.967,245,0.967,246,0.967,247,0.967,248,0.967,249,0.967,250,0.967,251,0.967,252,0.967,253,0.967,254,0.967,255,0.967,256,1.912,257,0.967,258,0.967,259,0.967,260,0.967,261,0.967,262,0.967,263,1.912,264,0.967,265,0.913,266,1.563,267,0.967,268,1.563,269,1.912,270,0.967,271,0.967,272,0.967,273,0.967,274,0.967,275,0.967,276,1.912,277,0.967,278,0.967,279,2.26,280,2.481,281,1.563,282,0.967,283,0.967,284,1.088,285,0.967,286,0.967,287,1.968,288,0.967,289,0.967,290,0.967,291,0.967,292,0.967,293,0.967,294,0.967,295,0.967,296,0.967,297,0.967,298,0.967,299,0.967,300,0.967,301,0.967,302,0.967,303,0.967,304,0.967,305,0.967,306,0.967,307,0.967,308,0.967,309,0.967,310,1.912,311,0.967,312,0.967,313,0.967,314,0.967,315,0.967,316,0.967,317,0.967,318,0.967,319,0.967,320,0.967,321,0.967,322,0.8,323,1.519,324,0.967,325,0.967,326,0.967,327,0.967,328,1.912,329,0.967,330,0.967,331,0.967,332,0.967,333,0.913,334,0.913,335,0.842,336,0.913,337,0.913,338,0.913,339,0.967,340,0.967,341,1.968,342,2.194,343,1.563,344,0.967,345,1.563,346,0.967,347,0.967,348,0.192,349,2.714,350,0.967,351,0.967,352,0.967,353,0.967,354,0.967,355,0.967,356,0.967,357,0.967,358,0.967,359,0.967,360,0.967,361,0.967,362,0.967,363,0.967,364,1.563,365,1.563,366,0.967,367,0.967,368,0.967,369,0.967,370,0.967,371,0.967,372,0.967,373,0.967,374,0.967,375,0.967,376,0.94,377,0.967,378,0.94,379,0.967,380,0.967,381,0.967,382,0.967,383,0.967,384,1.76,385,1.398,386,0.967,387,0.967,388,0.967,389,0.967,390,0.967,391,0.967,392,0.967,393,0.76,394,0.967,395,0.967,396,0.967,397,0.967,398,0.967,399,0.967,400,0.967,401,1.912,402,0.967,403,0.967,404,0.967,405,0.967,406,2.507,407,0.497,408,0.967,409,0.913,410,2.507,411,0.967,412,0.779,413,2.654,414,0.967,415,2.26,416,0.967,417,0.706,418,0.004,419,0.004,703,3.683,704,3.683,705,2.278,706,2.278]],["title/classes/ComputeExpression.html",[0,0.346,60,1.72]],["body/classes/ComputeExpression.html",[0,0.413,2,0.23,3,0.09,4,0.09,5,0.09,6,0.113,9,2.538,10,0.088,11,0.917,12,1.996,13,2.217,14,3.065,15,2.335,16,1.962,17,2.14,18,2.108,19,0.847,20,0.281,25,0.232,26,0.313,28,0.228,29,0.009,30,0.173,31,0.12,32,0.22,33,0.621,35,1.047,36,2.058,37,1.75,39,1.17,40,2.16,41,2.111,43,1.632,45,1.642,48,0.444,51,1.262,52,0.604,55,2.009,56,2.225,60,3.616,74,0.102,80,2.225,81,2.225,82,2.279,83,1.211,84,0.361,85,0.893,86,2.269,87,2.727,88,0.939,96,0.839,108,1.762,115,1.632,128,1.015,141,1.123,174,1.871,176,1.632,209,2.644,284,1.555,348,0.281,406,3.021,407,0.635,409,2.727,410,3.021,412,2.327,417,1.632,418,0.007,419,0.007,454,1.722,550,2.053,631,3.543,632,1.591,663,3.023,707,4.648,708,4.261,709,4.293,710,4.293,711,3.503,712,4.091,713,2.707,714,6.801,715,2.729,716,3.496,717,6.801,718,4.758,719,5.264,720,5.264,721,3.496,722,5.264,723,4.24,724,5.264,725,0.806,726,3.697,727,5.264,728,5.264,729,5.264,730,5.264,731,3.496,732,3.496,733,3.496,734,5.264,735,6.005,736,2.808,737,2.448,738,7.963,739,2.528,740,2.808,741,2.808,742,2.808,743,2.808,744,5.264,745,5.264,746,2.808,747,4.648,748,5.264,749,2.707,750,2.808,751,5.264,752,3.038,753,4.293,754,3.498,755,5.264]],["title/classes/ConditionalFunctions.html",[0,0.346,276,1.819]],["body/classes/ConditionalFunctions.html",[0,0.665,1,2.35,2,0.1,3,0.039,4,0.039,5,0.039,6,0.048,7,0.945,8,1.579,9,2.516,10,0.03,11,0.627,12,1.825,13,1.732,15,2.351,16,0.661,17,2.073,19,0.781,20,0.259,22,1.656,23,1.866,24,1.656,25,0.234,26,0.079,28,0.059,29,0.009,30,0.154,31,0.111,32,0.059,33,0.995,35,0.27,36,1.996,39,1.158,43,2.128,45,1.795,48,0.43,49,1.483,50,0.693,51,1.407,52,0.425,53,0.746,54,0.588,55,2.199,56,1.093,57,0.973,58,1.483,59,0.764,60,1.443,61,0.746,62,1.443,63,0.602,64,1.405,65,0.63,66,1.332,67,0.588,68,1.332,69,0.693,70,1.298,71,0.71,72,1.368,73,0.645,74,0.134,75,3.897,76,3.831,77,3.792,78,3.037,79,1.371,80,2.612,81,2.612,82,2.68,83,1.439,84,0.528,85,0.931,86,1.234,87,1.817,88,1.155,89,0.973,90,0.973,91,0.973,92,1.411,93,0.973,94,1.332,95,0.973,96,0.905,97,2.284,98,0.973,99,0.973,100,0.919,101,0.71,102,1.332,103,0.973,104,0.973,105,1.57,106,1.975,107,0.548,108,1.852,109,0.973,110,0.677,111,0.973,112,0.973,113,0.973,114,0.973,115,0.71,116,0.919,117,0.87,118,0.973,119,3.097,120,0.973,121,0.973,122,0.973,123,0.973,124,0.973,125,0.973,126,0.973,127,0.973,128,1.111,129,0.973,130,2.72,131,0.973,132,2.203,133,0.973,134,0.973,135,2.514,136,0.973,137,2.585,138,0.973,139,0.973,140,0.973,141,0.789,142,0.973,143,0.973,144,0.973,145,0.973,146,0.973,147,0.973,148,0.973,149,0.973,150,0.956,151,0.866,152,0.973,153,0.973,154,0.973,155,0.973,156,0.973,157,0.973,158,0.71,159,0.973,160,2.681,161,2.488,162,0.973,163,0.973,164,0.63,165,0.973,166,0.973,167,0.661,168,1.57,169,0.973,170,0.973,171,0.945,172,0.973,173,0.945,174,2.245,175,0.764,176,2.044,177,2.438,178,1.515,179,2.661,180,1.975,181,3.32,182,1.57,183,1.975,184,2.267,185,1.57,186,0.973,187,1.975,188,1.975,189,2.267,190,0.574,191,1.57,192,0.973,193,1.975,194,0.973,195,1.919,196,0.973,197,0.973,198,0.973,199,0.973,200,0.973,201,0.973,202,0.973,203,0.973,204,0.973,205,0.973,206,0.973,207,0.973,208,0.973,209,1.298,210,0.973,211,0.973,212,1.919,213,0.973,214,0.973,215,0.973,216,0.973,217,1.919,218,0.973,219,1.57,220,0.973,221,0.973,222,0.973,223,0.973,224,0.973,225,0.973,226,0.973,227,1.975,228,0.973,229,0.973,230,0.973,231,0.973,232,0.973,233,0.973,234,0.973,235,0.973,236,0.973,237,0.973,238,0.973,239,0.973,240,0.973,241,0.973,242,0.973,243,0.973,244,0.973,245,0.973,246,0.973,247,0.973,248,0.973,249,0.973,250,0.973,251,0.973,252,0.973,253,0.973,254,0.973,255,0.973,256,1.919,257,0.973,258,0.973,259,0.973,260,0.973,261,0.973,262,0.973,263,1.919,264,0.973,265,0.919,266,1.57,267,0.973,268,1.57,269,1.919,270,0.973,271,0.973,272,0.973,273,0.973,274,0.973,275,0.973,276,2.203,277,1.57,278,0.973,279,2.267,280,2.488,281,1.57,282,0.973,283,0.973,284,1.093,285,0.973,286,0.973,287,1.975,288,0.973,289,0.973,290,0.973,291,0.973,292,0.973,293,0.973,294,0.973,295,0.973,296,0.973,297,0.973,298,0.973,299,0.973,300,0.973,301,0.973,302,0.973,303,0.973,304,0.973,305,0.973,306,0.973,307,0.973,308,0.973,309,0.973,310,1.919,311,0.973,312,0.973,313,0.973,314,0.973,315,0.973,316,0.973,317,0.973,318,0.973,319,0.973,320,0.973,321,0.973,322,0.804,323,1.526,324,0.973,325,0.973,326,0.973,327,0.973,328,1.919,329,0.973,330,0.973,331,0.973,332,0.973,333,0.919,334,0.919,335,0.847,336,0.919,337,0.919,338,0.919,339,0.973,340,0.973,341,1.975,342,2.2,343,1.57,344,0.973,345,1.57,346,0.973,347,0.973,348,0.193,349,2.72,350,0.973,351,0.973,352,0.973,353,0.973,354,0.973,355,0.973,356,0.973,357,0.973,358,0.973,359,0.973,360,0.973,361,0.973,362,0.973,363,0.973,364,1.57,365,1.57,366,0.973,367,0.973,368,0.973,369,0.973,370,0.973,371,0.973,372,0.973,373,0.973,374,0.973,375,0.973,376,0.945,377,0.973,378,0.945,379,0.973,380,0.973,381,0.973,382,0.973,383,0.973,384,1.767,385,1.405,386,0.973,387,0.973,388,0.973,389,0.973,390,0.973,391,0.973,392,0.973,393,0.764,394,0.973,395,0.973,396,0.973,397,0.973,398,0.973,399,0.973,400,0.973,401,1.919,402,0.973,403,0.973,404,0.973,405,0.973,406,2.514,407,0.499,408,0.973,409,0.919,410,2.514,411,0.973,412,0.784,413,2.661,414,0.973,415,2.267,416,0.973,417,0.71,418,0.004,419,0.004,756,2.291]],["title/classes/CountExpression.html",[0,0.346,62,1.72]],["body/classes/CountExpression.html",[0,0.503,2,0.21,3,0.082,4,0.082,5,0.082,6,0.109,8,1.15,9,2.482,10,0.062,11,0.864,12,2.007,13,2.162,14,2.886,15,2.481,16,2.078,17,2.152,18,1.985,19,0.957,20,0.298,25,0.222,26,0.308,28,0.224,29,0.009,30,0.168,31,0.119,32,0.216,33,0.944,35,1.03,36,1.938,37,1.712,39,1.169,40,2.034,41,1.926,43,1.985,45,1.724,48,0.459,51,1.337,52,0.735,53,1.564,54,1.233,55,2.128,56,2.27,62,3.596,63,2.018,66,2.594,67,1.643,74,0.108,80,2.482,81,2.482,82,2.543,83,1.351,84,0.439,85,0.946,86,2.404,88,0.997,92,1.529,96,0.871,97,2.078,108,1.966,110,1.419,115,1.489,128,0.956,141,1.025,174,1.982,176,1.985,190,1.204,209,2.528,284,1.892,348,0.265,407,0.598,417,1.489,418,0.006,419,0.006,437,2.978,454,1.83,550,1.874,631,3.656,632,1.498,663,2.917,708,4.193,709,4.043,710,4.043,711,3.35,712,3.97,713,2.471,715,2.669,716,3.19,718,2.773,721,3.19,723,4.234,725,0.98,731,3.19,732,3.19,733,3.19,736,2.562,737,2.234,739,2.307,740,2.562,741,2.562,742,2.562,743,2.562,746,2.562,749,2.471,750,2.562,752,2.773,753,3.033,754,4.322,757,3.872,758,4.804,759,3.696,760,4.804,761,4.804,762,4.804,763,4.804,764,3.872,765,4.804,766,4.804,767,4.804,768,4.804,769,4.804,770,4.498,771,6.451,772,3.19,773,4.498,774,3.374,775,3.374,776,3.595,777,2.895,778,3.595,779,3.374,780,3.374,781,3.595,782,3.86,783,3.19,784,3.595,785,4.242,786,3.374,787,3.595,788,3.595,789,3.595,790,3.595,791,3.595,792,3.595,793,4.242,794,4.242,795,3.374,796,3.19,797,3.595,798,4.793,799,5.161,800,4.253,801,2.562,802,2.663,803,4.242,804,4.242]],["title/classes/CountField.html",[0,0.346,771,3.554]],["body/classes/CountField.html",[0,0.52,2,0.221,3,0.087,4,0.087,5,0.087,6,0.113,8,1.586,9,2.404,10,0.066,11,0.893,12,2.041,13,1.74,15,2.523,16,2.131,17,2.188,18,2.053,19,0.977,20,0.306,25,0.224,26,0.298,28,0.214,29,0.009,30,0.168,31,0.116,32,0.209,33,0.925,35,0.985,36,1.53,37,1.597,39,1.113,40,1.606,41,2.028,43,2.053,45,1.737,48,0.466,51,1.371,52,0.76,53,1.646,54,1.297,55,2.183,56,2.316,62,3.534,63,2.059,66,2.824,67,2.012,74,0.111,80,2.514,81,2.514,82,2.575,83,1.368,84,0.454,85,0.971,86,2.465,88,1.014,92,1.56,96,0.876,97,2.348,108,1.954,110,1.494,115,1.567,128,0.755,174,1.391,176,2.053,190,1.268,284,1.957,407,0.472,417,1.567,418,0.006,419,0.006,437,3.646,454,1.861,550,1.972,631,3.685,632,1.183,663,2.805,708,3.182,711,2.351,712,3.785,723,4.032,725,0.774,736,2.697,737,2.351,739,2.429,740,2.697,741,2.697,742,2.697,743,2.697,746,2.697,749,2.601,750,2.697,752,2.919,753,4.95,754,4.032,757,4.075,759,2.919,770,4.653,771,6.858,772,3.358,773,4.653,774,3.552,775,3.552,776,3.784,777,3.047,778,3.784,779,3.552,780,3.552,781,3.784,782,3.992,783,3.358,784,3.784,785,4.465,786,3.552,787,3.784,788,3.784,789,3.784,790,3.784,791,3.784,792,3.784,793,4.465,794,4.465,795,5.19,796,3.358,797,4.958,798,4.958,799,5.339,800,4.4,801,2.697,802,2.803,803,4.465,804,4.465,805,4.075,806,5.057,807,5.057,808,4.465,809,4.465,810,5.057,811,5.057,812,5.057,813,5.057,814,5.057,815,5.057]],["title/classes/CsdlAction.html",[0,0.346,816,2.545]],["body/classes/CsdlAction.html",[0,0.687,2,0.265,3,0.104,4,0.104,5,0.104,6,0.115,10,0.079,20,0.367,25,0.24,26,0.302,28,0.227,29,0.009,30,0.173,31,0.116,32,0.231,74,0.132,84,0.618,128,1.323,150,1.18,348,0.308,418,0.007,419,0.007,453,1.884,460,2.821,465,2.127,526,2.543,527,2.543,625,2.48,626,2.543,677,4.069,725,1.282,816,4.289,817,2.682,818,4.025,819,5.525,820,5.525,821,2.074,822,5.274,823,5.274,824,6.061,825,6.061,826,6.061,827,6.061,828,6.061,829,6.061,830,3.498,831,3.827,832,3.498,833,4.025,834,3.653,835,3.498,836,3.249]],["title/classes/CsdlActionImport.html",[0,0.346,835,2.545]],["body/classes/CsdlActionImport.html",[0,0.691,2,0.273,3,0.107,4,0.107,5,0.107,6,0.113,10,0.081,20,0.369,25,0.241,26,0.292,28,0.209,29,0.009,30,0.174,31,0.114,32,0.209,74,0.133,84,0.604,128,1.294,150,1.188,348,0.313,418,0.007,419,0.007,453,1.884,460,3.345,465,3.042,526,2.587,527,2.587,625,2.523,626,2.587,677,3.516,725,0.954,816,3.599,817,2.622,818,4.142,819,4.774,820,4.774,821,2.134,822,4.905,823,4.905,830,3.599,831,3.937,832,3.599,833,4.142,834,3.758,835,4.365,836,3.306,837,6.237,838,6.237,839,6.237,840,6.237]],["title/classes/CsdlAnnotable.html",[0,0.346,841,2.444]],["body/classes/CsdlAnnotable.html",[0,0.679,2,0.292,3,0.114,4,0.114,5,0.114,6,0.109,10,0.087,20,0.358,25,0.236,26,0.272,28,0.171,29,0.009,30,0.152,31,0.109,32,0.215,74,0.13,84,0.458,94,2.407,150,1.13,348,0.326,407,0.624,418,0.008,419,0.008,453,1.86,526,2.287,527,2.287,625,2.23,626,2.287,646,2.346,725,1.023,817,2.536,836,2.922,841,4.646,842,5.002,843,5.097,844,6.684,845,4.775,846,6.684,847,6.684,848,3.108,849,4.22,850,4.75,851,3.858,852,4.22,853,4.695,854,3.705,855,4.695]],["title/classes/CsdlAnnotation.html",[0,0.346,845,2.352]],["body/classes/CsdlAnnotation.html",[0,0.677,2,0.289,3,0.113,4,0.113,5,0.113,6,0.112,10,0.086,20,0.357,25,0.24,26,0.288,28,0.17,29,0.009,30,0.151,31,0.112,32,0.214,74,0.13,84,0.453,94,2.38,150,1.125,348,0.324,407,0.617,418,0.008,419,0.008,453,1.864,526,2.261,527,2.261,625,2.205,626,2.261,646,3.028,725,1.011,817,2.61,836,2.89,841,4.34,842,4.946,843,4.519,845,4.601,848,3.073,849,4.172,850,5.381,851,3.815,852,4.172,853,4.642,854,3.663,855,4.642,856,6.609,857,6.609,858,6.609,859,6.609]],["title/classes/CsdlAnnotations.html",[0,0.346,849,2.784]],["body/classes/CsdlAnnotations.html",[0,0.674,2,0.285,3,0.112,4,0.112,5,0.112,6,0.111,10,0.085,20,0.355,25,0.239,26,0.296,28,0.167,29,0.009,30,0.149,31,0.114,32,0.225,74,0.129,84,0.446,94,3.092,150,1.118,348,0.321,407,0.725,418,0.008,419,0.008,453,1.867,526,2.23,527,2.23,625,2.174,626,2.23,646,2.287,715,2.07,725,0.997,817,2.598,836,2.849,841,4.759,842,4.877,843,5.137,845,4.748,848,3.03,849,4.902,850,5.364,851,3.761,852,4.114,853,4.577,854,3.612,855,4.577,860,6.517,861,6.517,862,6.517,863,6.517,864,4.877]],["title/classes/CsdlComplexType.html",[0,0.346,865,2.658]],["body/classes/CsdlComplexType.html",[0,0.675,2,0.266,3,0.104,4,0.104,5,0.104,6,0.097,10,0.079,20,0.356,24,1.328,25,0.237,26,0.306,28,0.156,29,0.009,30,0.172,31,0.115,32,0.234,48,0.339,74,0.129,84,0.63,92,1.21,348,0.378,407,0.752,418,0.007,419,0.007,453,1.862,462,1.797,549,2.866,715,2.781,725,1.317,817,2.253,821,2.081,848,2.828,865,4.488,866,3.161,867,3.021,868,6.029,869,5.992,870,6.337,871,5.992,872,4.562,873,4.562,874,6.082,875,5.37,876,5.37,877,5.37,878,5.37,879,5.37,880,5.37,881,3.021,882,3.244,883,4.128,884,3.665,885,4.702,886,4.039,887,4.272,888,4.702]],["title/classes/CsdlEntityContainer.html",[0,0.346,889,3.3]],["body/classes/CsdlEntityContainer.html",[0,0.501,2,0.279,3,0.109,4,0.109,5,0.109,6,0.117,10,0.083,20,0.318,25,0.232,26,0.309,28,0.164,29,0.009,30,0.168,31,0.116,32,0.236,48,0.459,74,0.096,128,0.954,348,0.318,418,0.007,419,0.007,453,1.859,461,3.069,465,2.243,660,4.836,725,1.335,817,2.734,821,2.186,832,5.036,835,5.036,881,4.085,889,5.742,890,4.099,891,5.642,892,8.726,893,8.726,894,8.726,895,8.726,896,6.53,897,6.53,898,6.39,899,6.39,900,6.39,901,6.39,902,6.39,903,5.642,904,6.39,905,4.243]],["title/classes/CsdlEntitySet.html",[0,0.346,896,3.3]],["body/classes/CsdlEntitySet.html",[0,0.524,2,0.292,3,0.114,4,0.114,5,0.114,6,0.116,10,0.087,20,0.326,25,0.234,26,0.305,28,0.171,29,0.009,30,0.17,31,0.115,32,0.227,48,0.373,74,0.1,84,0.593,348,0.326,418,0.008,419,0.008,453,1.844,462,1.973,667,3.106,680,4.894,725,1.206,817,2.708,821,2.285,834,5.321,881,3.317,890,4.034,896,5.896,906,5.897,907,7.797,908,6.202,909,6.679,910,5.897,911,6.679,912,6.679,913,5.897,914,4.435]],["title/classes/CsdlEntityType.html",[0,0.346,884,2.658]],["body/classes/CsdlEntityType.html",[0,0.67,2,0.259,3,0.102,4,0.102,5,0.102,6,0.108,10,0.077,20,0.354,24,1.294,25,0.236,26,0.31,28,0.152,29,0.009,30,0.171,31,0.117,32,0.237,48,0.331,74,0.129,84,0.633,92,1.7,348,0.376,407,0.743,418,0.007,419,0.007,453,1.867,462,1.751,549,2.853,715,2.764,725,1.35,817,2.516,821,2.028,848,2.756,865,3.572,866,3.529,867,2.944,868,6.005,869,5.966,870,6.31,871,5.966,872,4.537,873,4.537,875,5.234,876,5.234,877,5.234,878,5.234,879,5.234,880,5.234,881,2.944,882,3.162,883,4.063,884,4.418,885,5.394,886,5.674,887,4.163,888,4.628,915,5.927,916,5.927,917,5.234]],["title/classes/CsdlEnumMember.html",[0,0.346,918,3.3]],["body/classes/CsdlEnumMember.html",[0,0.626,2,0.299,3,0.117,4,0.117,5,0.117,6,0.113,10,0.089,20,0.35,25,0.231,26,0.292,28,0.175,29,0.009,30,0.173,31,0.11,32,0.217,33,1.048,74,0.12,84,0.468,150,1.176,348,0.33,418,0.008,419,0.008,453,1.837,456,3.495,665,3.512,725,1.045,817,2.638,821,2.336,867,3.391,918,6.329,919,6.029,920,6.029,921,6.029,922,4.796,923,5.503,924,5.503]],["title/classes/CsdlEnumType.html",[0,0.346,922,3.098]],["body/classes/CsdlEnumType.html",[0,0.617,2,0.291,3,0.114,4,0.114,5,0.114,6,0.116,10,0.086,20,0.346,25,0.235,26,0.304,28,0.171,29,0.009,30,0.172,31,0.114,32,0.226,33,0.785,74,0.118,84,0.592,150,0.897,348,0.325,418,0.008,419,0.008,453,1.852,456,3.585,665,4.536,725,1.203,817,2.705,821,2.275,867,3.302,918,6.6,922,5.519,923,7.108,924,7.108,925,6.649,926,5.871,927,6.649,928,6.649,929,6.649]],["title/classes/CsdlFunction.html",[0,0.346,830,2.545]],["body/classes/CsdlFunction.html",[0,0.685,2,0.262,3,0.103,4,0.103,5,0.103,6,0.116,10,0.078,20,0.366,25,0.239,26,0.305,28,0.227,29,0.009,30,0.173,31,0.117,32,0.231,74,0.131,84,0.626,128,1.333,150,1.177,348,0.305,418,0.007,419,0.007,453,1.885,460,2.803,465,2.104,526,2.526,527,2.526,625,2.463,626,2.526,677,4.059,725,1.278,816,3.46,817,2.702,818,3.982,819,5.51,820,5.51,821,2.051,822,5.26,823,5.26,830,4.261,831,5.411,832,3.46,833,3.982,834,3.613,835,3.46,836,3.228,930,5.996,931,5.996,932,5.996,933,5.996,934,5.996,935,5.996,936,5.996]],["title/classes/CsdlFunctionImport.html",[0,0.346,832,2.545]],["body/classes/CsdlFunctionImport.html",[0,0.689,2,0.269,3,0.105,4,0.105,5,0.105,6,0.114,10,0.08,20,0.368,25,0.241,26,0.298,28,0.208,29,0.009,30,0.174,31,0.115,32,0.222,74,0.132,84,0.619,128,1.311,150,1.184,348,0.31,418,0.007,419,0.007,453,1.884,460,3.334,465,2.16,526,2.567,527,2.567,625,2.503,626,2.567,677,3.488,725,1.148,816,3.552,817,2.657,818,4.087,819,4.736,820,4.736,821,2.106,822,4.876,823,4.876,830,3.552,831,3.885,832,4.329,833,5.735,834,5.204,835,3.552,836,3.28,937,6.154,938,6.154,939,6.154,940,6.154,941,6.154]],["title/classes/CsdlInclude.html",[0,0.346,942,3.098]],["body/classes/CsdlInclude.html",[0,0.659,2,0.293,3,0.115,4,0.115,5,0.115,6,0.113,10,0.087,20,0.359,24,1.93,25,0.238,26,0.29,28,0.172,29,0.009,30,0.129,31,0.109,32,0.215,48,0.374,74,0.126,348,0.327,407,0.626,418,0.008,419,0.008,453,1.845,606,3.579,650,3.476,725,1.027,817,2.623,841,4.378,843,3.872,845,4.214,850,4.043,851,3.872,881,3.332,942,5.897,943,5.407,944,5.924,945,6.709,946,6.709,947,6.709,948,2.848,949,4.712,950,5.021,951,5.407,952,5.548,953,5.021,954,5.021]],["title/classes/CsdlIncludeAnnotations.html",[0,0.346,952,3.098]],["body/classes/CsdlIncludeAnnotations.html",[0,0.655,2,0.289,3,0.113,4,0.113,5,0.113,6,0.114,10,0.086,20,0.357,24,1.445,25,0.239,26,0.298,28,0.17,29,0.009,30,0.127,31,0.112,32,0.226,48,0.369,74,0.126,348,0.324,407,0.618,418,0.008,419,0.008,453,1.852,606,3.531,650,2.654,725,1.199,817,2.665,841,4.343,843,3.82,845,4.18,850,5.309,851,3.82,881,3.287,942,5.504,943,5.334,948,2.81,949,4.649,950,4.953,951,5.334,952,5.864,953,6.459,954,6.592,955,6.619,956,6.619,957,6.619,958,6.619,959,6.619]],["title/classes/CsdlKey.html",[0,0.346,885,2.784]],["body/classes/CsdlKey.html",[0,0.688,2,0.284,3,0.111,4,0.111,5,0.111,6,0.107,10,0.084,20,0.363,24,1.416,25,0.232,26,0.267,28,0.166,29,0.009,30,0.168,31,0.101,32,0.166,48,0.362,74,0.132,84,0.616,92,1.291,348,0.372,407,0.723,418,0.008,419,0.008,453,1.838,462,1.917,549,2.783,817,2.505,848,3.017,865,3.91,866,3.514,867,3.222,868,5.498,869,5.819,870,6.154,871,5.819,872,4.41,873,4.41,881,3.222,882,3.461,883,4.292,884,3.91,885,5.226,886,4.309,887,6.022,888,5.532,960,6.488,961,6.488,962,6.488]],["title/classes/CsdlNavigationProperty.html",[0,0.346,873,2.268]],["body/classes/CsdlNavigationProperty.html",[0,0.674,2,0.264,3,0.104,4,0.104,5,0.104,6,0.114,10,0.078,20,0.356,25,0.24,26,0.309,28,0.155,29,0.009,30,0.17,31,0.12,32,0.234,74,0.129,84,0.624,150,1.083,348,0.307,407,0.75,418,0.007,419,0.007,453,1.873,462,1.786,465,2.121,526,2.068,527,2.068,549,1.92,625,3.008,626,2.068,669,2.811,715,2.55,725,1.315,817,2.646,821,2.068,836,2.643,848,2.811,854,3.35,872,3.109,873,3.816,882,4.665,883,4.112,963,4.246,964,5.883,965,5.706,966,5.706,967,5.706,968,6.035,969,5.424,970,5.424,971,6.045,972,6.045,973,6.045,974,6.045,975,6.045,976,5.337,977,5.337,978,5.337,979,3.816]],["title/classes/CsdlNavigationPropertyBinding.html",[0,0.346,908,3.098]],["body/classes/CsdlNavigationPropertyBinding.html",[0,0.544,2,0.303,3,0.119,4,0.119,5,0.119,6,0.114,10,0.09,20,0.333,25,0.235,26,0.294,28,0.178,29,0.009,30,0.133,31,0.11,32,0.178,74,0.104,94,3.211,348,0.333,418,0.008,419,0.008,438,3.947,453,1.796,462,2.587,667,4.073,817,2.65,908,5.654,980,6.93,981,6.93,982,6.93,983,6.93,984,6.93]],["title/classes/CsdlOnDelete.html",[0,0.346,970,2.784]],["body/classes/CsdlOnDelete.html",[0,0.689,2,0.286,3,0.112,4,0.112,5,0.112,6,0.108,10,0.085,20,0.363,25,0.239,26,0.268,28,0.168,29,0.009,30,0.165,31,0.117,32,0.168,74,0.132,84,0.601,150,1.12,348,0.322,407,0.726,418,0.008,419,0.008,453,1.86,462,1.931,465,3.016,526,2.236,527,2.236,549,2.076,625,2.929,626,2.236,669,3.039,817,2.512,836,2.858,848,3.039,854,3.622,872,3.361,873,3.361,882,4.429,883,4.311,963,4.591,964,5.515,965,4.34,966,4.34,967,4.34,968,4.591,969,4.91,970,5.243,979,4.126,985,6.536,986,6.536,987,6.536]],["title/classes/CsdlParameter.html",[0,0.346,823,2.658]],["body/classes/CsdlParameter.html",[0,0.683,2,0.259,3,0.101,4,0.101,5,0.101,6,0.117,10,0.077,20,0.365,25,0.24,26,0.307,28,0.204,29,0.009,30,0.173,31,0.119,32,0.233,74,0.131,84,0.615,128,1.341,150,1.243,348,0.303,418,0.007,419,0.007,453,1.885,460,2.781,465,2.077,526,2.977,527,2.977,625,2.903,626,2.977,677,3.406,725,1.307,816,3.416,817,2.718,818,3.931,819,4.624,820,4.624,821,2.025,822,4.793,823,5.008,830,3.416,831,3.737,832,3.416,833,3.931,834,3.567,835,3.416,836,3.804,988,5.919,989,5.919,990,5.919,991,5.919,992,5.919,993,5.919,994,5.919,995,5.919]],["title/classes/CsdlProperty.html",[0,0.346,872,2.268]],["body/classes/CsdlProperty.html",[0,0.669,2,0.258,3,0.101,4,0.101,5,0.101,6,0.116,10,0.076,20,0.353,25,0.24,26,0.312,28,0.151,29,0.009,30,0.169,31,0.121,32,0.236,74,0.128,84,0.622,150,1.23,348,0.302,407,0.741,418,0.007,419,0.007,453,1.875,462,1.74,465,2.068,526,2.918,527,2.918,549,1.871,625,2.995,626,2.918,669,2.74,715,2.521,725,1.348,817,2.693,821,2.016,836,3.729,848,2.74,854,4.727,872,3.756,873,3.03,882,4.748,883,4.048,963,4.138,964,5.851,965,3.913,966,3.913,967,3.913,968,4.138,969,4.611,970,4.611,976,5.202,977,5.202,978,5.202,979,5.384,996,5.892,997,5.892,998,5.892,999,5.892,1000,5.892,1001,5.892,1002,5.892]],["title/classes/CsdlPropertyRef.html",[0,0.346,888,2.784]],["body/classes/CsdlPropertyRef.html",[0,0.685,2,0.28,3,0.11,4,0.11,5,0.11,6,0.111,10,0.083,20,0.361,24,1.906,25,0.238,26,0.284,28,0.164,29,0.009,30,0.174,31,0.107,32,0.211,48,0.357,74,0.131,84,0.614,92,1.273,348,0.371,407,0.717,418,0.007,419,0.007,453,1.845,462,1.89,549,2.772,725,0.979,817,2.582,821,2.189,848,2.976,865,3.856,866,3.623,867,3.178,868,5.465,869,5.797,870,6.131,871,5.797,872,4.389,873,4.389,881,3.178,882,3.413,883,4.257,884,3.856,885,4.849,886,4.249,887,4.494,888,5.195,1003,6.399,1004,5.157,1005,5.65]],["title/classes/CsdlReference.html",[0,0.346,949,3.098]],["body/classes/CsdlReference.html",[0,0.651,2,0.285,3,0.112,4,0.112,5,0.112,6,0.114,10,0.085,20,0.355,24,1.424,25,0.234,26,0.303,28,0.167,29,0.009,30,0.125,31,0.114,32,0.231,48,0.364,74,0.125,348,0.321,407,0.725,418,0.008,419,0.008,453,1.856,606,4.68,650,2.615,715,2.071,725,1.27,817,2.655,841,4.76,843,5.064,845,4.68,850,3.93,851,3.764,864,4.88,881,3.239,942,6.163,943,5.256,948,2.768,949,5.456,950,6.427,951,7.071,952,6.163,953,4.88,954,4.88,1006,6.522,1007,6.522,1008,6.522,1009,6.522,1010,6.522]],["title/classes/CsdlReferentialConstraint.html",[0,0.346,969,2.784]],["body/classes/CsdlReferentialConstraint.html",[0,0.687,2,0.282,3,0.111,4,0.111,5,0.111,6,0.111,10,0.084,20,0.362,25,0.24,26,0.285,28,0.166,29,0.009,30,0.165,31,0.118,32,0.166,74,0.132,84,0.6,150,1.114,348,0.32,407,0.721,418,0.008,419,0.008,453,1.863,462,2.529,465,2.267,526,2.21,527,2.21,549,2.051,625,2.92,626,2.21,669,4.07,817,2.59,836,2.824,848,3.004,854,3.58,872,3.322,873,3.322,882,4.567,883,4.281,963,4.537,964,5.487,965,4.29,966,4.29,967,4.29,968,4.537,969,5.216,970,4.876,979,4.078,1011,6.46,1012,6.46,1013,6.46,1014,6.46]],["title/classes/CsdlReturnType.html",[0,0.346,822,2.658]],["body/classes/CsdlReturnType.html",[0,0.685,2,0.262,3,0.102,4,0.102,5,0.102,6,0.116,10,0.078,20,0.366,25,0.239,26,0.305,28,0.205,29,0.009,30,0.168,31,0.119,32,0.233,74,0.131,84,0.616,128,1.333,150,1.245,348,0.305,418,0.007,419,0.007,453,1.885,460,2.799,465,2.1,526,2.985,527,2.985,625,2.911,626,2.985,677,3.429,725,1.311,816,3.453,817,2.701,818,3.974,819,4.655,820,4.655,822,5.027,823,4.816,830,3.453,831,3.777,832,3.453,833,3.974,834,3.606,835,3.453,836,3.814,1015,5.984,1016,5.984,1017,5.984,1018,5.984,1019,5.984,1020,5.984,1021,5.984,1022,5.984]],["title/classes/CsdlSchema.html",[0,0.346,1023,3.554]],["body/classes/CsdlSchema.html",[0,0.453,2,0.252,3,0.099,4,0.099,5,0.099,6,0.119,10,0.075,20,0.298,24,1.851,25,0.227,26,0.315,28,0.148,29,0.009,30,0.111,31,0.12,32,0.239,48,0.482,74,0.087,128,0.862,348,0.298,407,0.673,412,2.901,418,0.007,419,0.007,453,1.876,456,2.315,465,2.026,650,3.303,715,1.833,725,1.386,816,4.893,817,2.764,830,4.893,841,4.565,843,4.893,845,4.522,849,5.352,851,3.332,852,5.352,864,4.32,865,5.109,866,2.45,881,4.295,884,5.109,889,6.344,890,2.602,922,5.955,944,5.097,948,2.45,1023,5.811,1024,5.773,1025,8.478,1026,8.478,1027,8.478,1028,7.486,1029,8.478,1030,8.478,1031,8.478,1032,8.478,1033,6.344,1034,5.773,1035,5.773,1036,5.773,1037,5.773,1038,5.773,1039,5.773,1040,5.773,1041,5.773,1042,5.773,1043,5.773,1044,5.773,1045,5.773,1046,4.652,1047,4.652]],["title/classes/CsdlSingleton.html",[0,0.346,897,3.3]],["body/classes/CsdlSingleton.html",[0,0.535,2,0.298,3,0.117,4,0.117,5,0.117,6,0.115,10,0.088,20,0.33,25,0.234,26,0.301,28,0.175,29,0.009,30,0.171,31,0.119,32,0.217,48,0.38,74,0.103,348,0.33,418,0.008,419,0.008,453,1.828,462,2.014,667,3.17,725,1.043,817,2.686,821,2.333,881,3.386,897,5.968,908,6.236,914,4.528,1048,6.818,1049,8.878,1050,6.818,1051,6.818,1052,6.818,1053,6.818]],["title/classes/CsdlStructuralProperty.html",[0,0.346,964,2.929]],["body/classes/CsdlStructuralProperty.html",[0,0.684,2,0.279,3,0.109,4,0.109,5,0.109,6,0.113,10,0.083,20,0.361,25,0.24,26,0.294,28,0.163,29,0.009,30,0.172,31,0.12,32,0.211,74,0.131,84,0.619,150,1.108,348,0.317,407,0.715,418,0.007,419,0.007,453,1.866,462,1.882,465,2.236,526,2.18,527,2.18,549,2.023,625,3.033,626,2.18,669,2.963,725,0.975,817,2.638,821,2.18,836,2.786,848,2.963,854,3.531,872,3.277,873,3.277,882,4.65,883,4.246,963,4.475,964,5.66,965,4.231,966,4.231,967,4.231,968,4.475,969,4.836,970,4.836,979,4.022,1054,6.371,1055,6.371,1056,6.371,1057,6.371]],["title/classes/CsdlStructuredType.html",[0,0.346,868,2.929]],["body/classes/CsdlStructuredType.html",[0,0.675,2,0.265,3,0.104,4,0.104,5,0.104,6,0.116,10,0.079,20,0.356,24,1.324,25,0.236,26,0.306,28,0.156,29,0.009,30,0.172,31,0.115,32,0.234,48,0.338,74,0.129,84,0.63,92,1.207,348,0.377,407,0.694,418,0.007,419,0.007,453,1.862,462,1.792,549,2.864,725,1.316,817,2.708,821,2.075,848,2.821,865,3.655,866,3.799,867,3.012,868,5.566,869,5.989,870,6.335,871,5.989,872,4.559,873,4.559,881,3.012,882,3.235,883,4.121,884,3.655,885,4.694,886,4.028,887,4.26,888,4.694,919,5.356,920,5.356,921,5.356,926,5.356,1058,6.066,1059,5.356,1060,6.066]],["title/classes/CsdlTerm.html",[0,0.346,852,2.784]],["body/classes/CsdlTerm.html",[0,0.654,2,0.261,3,0.102,4,0.102,5,0.102,6,0.119,10,0.078,20,0.345,25,0.241,26,0.314,28,0.153,29,0.009,30,0.165,31,0.12,32,0.238,74,0.125,84,0.571,94,2.153,150,1.233,348,0.305,407,0.558,418,0.007,419,0.007,453,1.878,526,2.931,527,2.931,625,2.858,626,2.931,646,2.099,725,1.366,817,2.766,821,2.046,836,3.745,841,4.085,842,4.475,843,4.254,845,4.261,848,2.78,849,3.775,850,4.441,851,3.451,852,4.653,853,6.016,854,4.747,855,6.016,1061,5.979,1062,5.979,1063,5.979,1064,5.979,1065,5.979,1066,5.979,1067,5.979,1068,5.979,1069,5.979,1070,5.979,1071,5.979]],["title/classes/CsdlTypeDefinition.html",[0,0.346,1033,3.3]],["body/classes/CsdlTypeDefinition.html",[0,0.49,2,0.273,3,0.107,4,0.107,5,0.107,6,0.118,10,0.081,20,0.313,25,0.236,26,0.313,28,0.16,29,0.009,30,0.167,31,0.121,32,0.237,48,0.349,74,0.094,84,0.58,150,1.24,348,0.313,407,0.707,418,0.007,419,0.007,453,1.868,526,2.967,527,2.967,626,2.967,715,1.985,725,1.349,817,2.742,821,2.138,836,3.792,841,4.693,843,5.005,845,4.626,851,3.607,864,4.677,881,3.104,948,2.653,979,5.475,1033,5.666,1072,6.25,1073,8.673,1074,6.25,1075,6.25,1076,6.25,1077,6.25,1078,6.25,1079,6.25,1080,6.25,1081,6.25]],["title/classes/ExpandExpression.html",[0,0.346,64,1.674]],["body/classes/ExpandExpression.html",[0,0.481,2,0.197,3,0.077,4,0.077,5,0.077,6,0.107,8,1.078,9,2.441,10,0.058,11,0.827,12,1.963,13,2.121,14,2.762,15,2.426,16,2.01,17,2.104,18,1.9,19,0.932,20,0.288,25,0.221,26,0.305,28,0.221,29,0.009,30,0.166,31,0.118,32,0.212,33,0.924,35,1.018,36,1.854,37,1.645,39,1.062,40,1.947,41,1.805,43,1.9,45,1.727,48,0.476,51,1.293,52,0.703,53,1.465,54,1.155,55,2.059,56,2.485,63,1.182,64,3.488,65,2.059,66,2.51,67,1.573,68,2.51,69,1.854,70,2.151,71,1.395,72,2.766,73,1.727,74,0.105,80,2.441,81,2.441,82,2.501,83,1.329,84,0.42,85,0.916,86,2.045,88,0.975,92,1.489,96,0.883,97,2.01,102,1.621,107,1.078,108,1.933,110,1.33,115,1.395,128,0.915,141,0.96,150,0.94,174,1.918,176,1.9,190,1.128,209,2.446,265,2.795,284,1.811,335,1.664,348,0.254,407,0.572,417,1.395,418,0.006,419,0.006,437,2.85,454,1.79,550,1.756,631,3.664,632,1.631,663,2.841,708,4.143,709,3.87,710,3.87,711,3.241,712,3.911,713,2.315,715,2.625,716,2.989,718,3.538,721,2.989,723,4.386,725,0.938,731,2.989,732,2.989,733,2.989,736,2.401,737,2.093,739,2.162,740,2.401,741,2.401,742,2.401,743,2.401,746,2.401,749,2.315,750,2.401,752,2.598,753,3.87,754,3.848,759,3.538,764,3.627,770,4.305,772,2.989,773,4.305,774,4.305,775,3.161,776,3.368,777,2.713,778,3.368,779,3.161,780,3.161,781,3.368,782,3.694,783,2.989,784,3.368,786,3.161,787,3.368,788,5.858,789,3.368,790,3.368,791,3.368,792,3.368,795,3.161,796,2.989,797,3.368,798,4.587,801,2.401,802,2.495,1082,3.627,1083,4.501,1084,4.501,1085,4.501,1086,3.974,1087,4.501,1088,6.309,1089,4.501,1090,4.501,1091,4.501,1092,4.501,1093,4.501,1094,3.627,1095,4.305,1096,4.305,1097,4.587,1098,4.94,1099,4.94,1100,4.94,1101,3.627,1102,3.627,1103,3.627,1104,3.627,1105,3.974,1106,5.412,1107,3.974,1108,3.974,1109,3.974,1110,5.617,1111,3.974,1112,3.974,1113,3.974,1114,3.974,1115,3.974,1116,3.974,1117,3.974,1118,3.974,1119,3.974,1120,3.974,1121,3.974,1122,3.974,1123,3.974,1124,3.974,1125,3.974,1126,3.974,1127,3.627]],["title/classes/ExpandField.html",[0,0.346,1088,3.554]],["body/classes/ExpandField.html",[0,0.472,2,0.191,3,0.075,4,0.075,5,0.075,6,0.116,8,1.439,9,2.289,10,0.057,11,0.811,12,1.943,13,1.578,15,2.402,16,1.981,17,2.083,18,1.863,19,0.921,20,0.284,25,0.22,26,0.308,28,0.226,29,0.009,30,0.172,31,0.117,32,0.224,33,0.872,35,1.044,36,1.323,37,1.506,39,0.853,40,1.389,41,1.754,43,1.863,45,1.72,48,0.473,51,1.274,52,0.69,53,1.424,54,1.122,55,2.028,56,2.58,63,1.942,64,3.419,65,2.204,66,2.663,67,1.897,68,2.663,69,2.237,70,2.11,71,2.128,72,2.96,73,2.083,74,0.103,80,2.423,81,2.423,82,2.482,83,1.318,84,0.47,85,0.902,86,2.006,88,0.966,92,1.471,96,0.881,97,2.236,102,1.575,107,1.047,108,1.873,110,1.292,115,1.356,128,1.157,150,1.178,174,1.204,176,1.863,190,1.097,265,3.211,284,1.776,335,2.733,407,0.408,417,1.356,418,0.006,419,0.006,437,3.438,454,1.772,467,2.795,468,2.795,471,3.331,550,1.706,631,3.714,632,1.873,663,2.607,708,2.887,711,2.034,712,3.604,718,2.525,723,4.218,725,0.669,736,2.333,737,2.034,739,2.101,740,2.333,741,2.333,742,2.333,743,2.333,746,2.333,749,2.25,750,2.333,752,2.525,753,5.055,754,2.25,759,2.525,770,4.222,772,2.905,773,4.222,774,4.222,775,3.072,776,3.273,777,2.636,778,3.273,779,3.072,780,3.072,781,3.273,782,3.622,783,2.905,784,3.273,786,3.072,787,3.273,788,5.8,789,3.273,790,3.273,791,3.273,792,3.273,795,4.823,796,2.905,797,4.498,798,4.498,801,2.333,802,2.424,805,3.525,808,3.862,809,3.862,1082,3.525,1086,3.862,1088,6.454,1094,3.525,1095,4.222,1096,4.823,1097,4.498,1098,4.844,1099,4.844,1100,4.844,1101,3.525,1102,3.525,1103,3.525,1104,3.525,1105,3.862,1106,5.307,1107,3.862,1108,3.862,1109,3.862,1110,5.534,1111,3.862,1112,3.862,1113,5.307,1114,3.862,1115,3.862,1116,3.862,1117,3.862,1118,5.307,1119,3.862,1120,5.307,1121,3.862,1122,5.307,1123,3.862,1124,3.862,1125,3.862,1126,3.862,1127,3.525,1128,4.374,1129,4.374,1130,4.374,1131,4.374,1132,4.374,1133,4.374,1134,4.374,1135,4.374,1136,4.374,1137,3.862,1138,4.374,1139,4.374,1140,4.374,1141,4.374,1142,4.374,1143,3.862,1144,4.374,1145,4.374,1146,4.374,1147,4.374,1148,4.374]],["title/classes/Expression.html",[0,0.346,708,2.118]],["body/classes/Expression.html",[0,0.486,2,0.271,3,0.106,4,0.106,5,0.106,6,0.118,8,1.803,9,2.599,10,0.08,11,1.016,12,2.117,15,2.516,16,2.173,17,2.27,18,2.335,19,0.939,20,0.312,25,0.208,26,0.312,28,0.208,29,0.009,30,0.156,31,0.119,32,0.208,35,1.038,37,1.72,41,2.485,43,2.335,45,1.71,48,0.471,51,1.398,52,0.865,54,1.59,55,2.225,56,1.831,74,0.093,80,2.225,81,2.225,82,2.279,83,1.211,84,0.425,96,0.833,174,2.233,176,1.921,177,2.291,209,2.963,348,0.312,417,1.921,418,0.007,419,0.007,549,2.828,708,4.156,709,5.124,712,4.209,713,3.187,749,3.187,801,4.018,1149,6.197,1150,7.533,1151,6.197,1152,6.197,1153,6.197,1154,6.197,1155,6.197,1156,6.197,1157,6.197,1158,4.994,1159,6.197]],["title/classes/Field.html",[0,0.346,108,1.032]],["body/classes/Field.html",[0,0.474,2,0.193,3,0.075,4,0.075,5,0.075,6,0.096,10,0.089,13,2.481,20,0.25,24,0.962,25,0.211,26,0.238,28,0.113,29,0.009,30,0.154,31,0.107,32,0.113,33,0.52,45,0.857,48,0.491,50,1.828,53,1.434,74,0.066,85,1.08,88,1.136,92,0.877,94,1.587,101,1.873,108,1.613,128,1.029,151,1.413,171,1.817,173,1.817,174,1.662,348,0.25,407,0.411,418,0.006,419,0.006,435,3.732,438,1.986,441,3.677,453,1.69,454,2.16,456,2.422,459,3.107,460,2.294,461,2.902,462,2.191,463,2.351,464,2.442,465,2.419,526,1.508,527,1.508,549,1.4,621,2.266,625,1.47,626,1.508,640,2.723,643,2.656,646,2.12,650,1.767,651,1.547,666,2.442,667,2.049,669,2.049,677,2.049,680,3.348,712,2.049,816,2.544,819,2.782,820,2.782,821,1.508,822,2.656,823,2.656,830,2.544,831,2.782,832,2.544,834,2.656,835,2.544,836,1.927,845,2.351,849,2.782,850,2.656,852,2.782,853,3.095,854,2.442,855,3.095,865,2.656,866,1.871,869,2.927,871,2.927,872,2.266,873,2.266,882,2.351,884,2.656,885,2.782,886,2.927,888,2.782,889,3.298,890,2.723,896,3.298,897,3.298,905,2.927,907,3.891,908,3.095,914,2.927,918,3.298,922,3.095,923,3.552,924,3.552,942,3.095,948,2.564,949,4.243,950,3.298,952,3.095,953,3.298,954,3.298,965,2.927,966,2.927,967,2.927,969,2.782,970,2.782,979,2.782,1023,4.869,1028,3.891,1033,3.298,1046,3.552,1047,3.552,1160,3.891,1161,7.585,1162,4.407,1163,4.407,1164,4.407,1165,8.744,1166,4.869,1167,2.189,1168,3.891,1169,5.335,1170,4.407,1171,2.782,1172,6.278,1173,4.407,1174,4.407,1175,4.407,1176,4.407,1177,4.407,1178,4.407,1179,4.407,1180,4.407,1181,4.407,1182,4.407,1183,4.407,1184,4.407,1185,4.407,1186,4.407,1187,4.407,1188,3.095,1189,4.407,1190,4.407,1191,4.407,1192,4.407,1193,4.407,1194,4.407,1195,4.407,1196,4.407,1197,4.407,1198,4.407,1199,4.407,1200,4.407,1201,4.407,1202,4.407,1203,4.407,1204,4.407,1205,4.407,1206,4.407,1207,4.407,1208,4.407,1209,4.407,1210,4.407,1211,4.407,1212,4.407,1213,4.407,1214,4.407,1215,4.154,1216,4.407,1217,4.407,1218,4.407,1219,4.407,1220,4.407,1221,4.407,1222,4.407,1223,4.407,1224,4.407,1225,4.407,1226,4.407,1227,4.407,1228,4.407,1229,4.407,1230,4.407,1231,4.407,1232,4.407,1233,4.407,1234,4.407,1235,4.407,1236,4.407,1237,4.407,1238,4.407,1239,4.407,1240,4.407,1241,4.407,1242,4.407,1243,4.407,1244,4.407,1245,4.407,1246,4.407,1247,4.407,1248,4.407,1249,4.407,1250,4.407,1251,4.407,1252,4.407,1253,4.407,1254,4.407,1255,4.407,1256,4.407,1257,4.407,1258,4.407,1259,6.042,1260,6.894,1261,4.407,1262,4.407,1263,4.407,1264,3.552,1265,4.407,1266,4.407,1267,7.417,1268,6.042,1269,4.407,1270,4.407,1271,4.407,1272,4.407,1273,4.407,1274,4.407,1275,8.805,1276,4.407,1277,6.042,1278,4.407,1279,4.243,1280,4.407,1281,4.407,1282,4.407,1283,4.407,1284,4.407,1285,4.407,1286,4.407,1287,4.407,1288,4.407,1289,4.407,1290,4.407,1291,4.407,1292,4.407,1293,4.407,1294,4.407,1295,4.407,1296,4.111,1297,4.407,1298,3.552,1299,4.407,1300,2.782,1301,4.407,1302,6.894,1303,6.042,1304,6.894,1305,4.407,1306,4.407,1307,4.407,1308,4.407,1309,4.407,1310,4.407,1311,4.407,1312,4.407]],["title/interfaces/FieldParser.html",[79,1.032,624,2.268]],["body/interfaces/FieldParser.html",[3,0.069,4,0.069,5,0.069,6,0.052,10,0.052,19,0.498,24,1.233,25,0.239,28,0.103,29,0.009,30,0.16,31,0.119,32,0.216,33,1.015,39,1.01,45,1.459,48,0.223,51,1.445,52,0.648,59,1.885,61,1.838,63,1.868,65,1.554,67,1.449,69,1.709,71,1.751,73,1.591,74,0.137,78,1.369,79,1.872,83,1.143,84,0.633,85,0.526,88,0.816,92,0.796,96,0.544,97,1.888,108,0.936,128,0.843,141,1.661,150,1.21,151,1.321,158,1.751,167,1.629,190,1.783,348,0.271,407,0.664,418,0.005,419,0.005,420,3.13,421,2.057,422,2.309,423,2.217,424,2.309,425,3.404,426,1.749,427,3.492,428,2.805,429,2.411,430,3.404,431,2.309,432,2.309,433,3.404,434,2.411,435,3.044,436,2.217,437,2.626,438,2.546,439,2.626,440,3.416,441,3.794,442,2.862,443,1.86,444,2.309,445,2.309,446,2.309,447,3.469,448,1.987,449,3.013,450,3.26,451,1.921,452,3.26,453,0.796,454,0.915,455,1.803,456,2.852,457,1.921,458,3.013,459,3.206,460,2.144,461,2.713,462,1.934,463,3.013,464,3.13,465,1.982,466,3.13,467,2.626,468,2.626,469,2.805,470,3.26,471,3.13,472,2.217,473,3.404,474,4.49,475,3.404,476,2.526,477,4.915,478,2.526,479,2.526,480,2.309,481,3.404,482,4.736,483,4.822,484,2.411,485,3.404,486,2.526,487,2.526,488,4.133,489,2.526,490,3.404,491,4.105,492,2.526,493,2.526,494,3.404,495,2.526,496,3.404,497,2.411,498,3.404,499,2.411,500,3.404,501,2.411,502,3.404,503,3.794,504,2.134,505,3.794,506,3.566,507,3.566,508,3.404,509,2.526,510,2.526,511,2.526,512,2.411,513,3.404,514,2.526,515,2.526,516,2.411,517,3.404,518,3.013,519,2.526,520,2.526,521,2.526,522,2.526,523,3.404,524,2.526,525,2.526,526,2.664,527,2.664,528,3.945,529,3.404,530,3.566,531,3.566,532,2.526,533,3.566,534,4.49,535,2.526,536,2.526,537,3.566,538,2.411,539,3.404,540,2.526,541,2.526,542,2.526,543,1.921,544,3.404,545,2.713,546,3.404,547,3.404,548,3.404,549,1.794,550,2.554,551,3.945,552,3.404,553,4.692,554,5.429,555,5.429,556,5.429,557,2.411,558,3.404,559,4.49,560,2.411,561,3.404,562,3.566,563,2.411,564,3.404,565,3.999,566,3.566,567,2.411,568,3.404,569,3.013,570,2.411,571,3.404,572,3.566,573,2.411,574,3.404,575,3.566,576,2.411,577,3.404,578,3.945,579,3.404,580,4.915,581,2.411,582,3.404,583,2.411,584,3.404,585,2.411,586,3.404,587,2.411,588,3.404,589,2.411,590,3.404,591,2.411,592,3.404,593,2.411,594,2.057,595,3.013,596,2.626,597,1.932,598,3.26,599,3.26,600,3.13,601,2.411,602,2.411,603,2.309,604,1.987,605,2.411,606,2.134,607,2.526,608,2.526,609,2.526,610,2.309,611,2.411,612,2.411,613,3.942,614,3.629,615,3.044,616,4.133,617,2.469,618,2.805,619,3.044,620,2.057,621,3.367,622,2.057,623,1.86,624,2.905,625,2.598,626,2.567,627,4.105,628,2.134,629,2.526,630,2.057,631,2.329,632,0.936,633,2.526,634,1.987,635,2.217,636,1.987,637,2.411,638,2.526,639,2.526,640,1.803,641,2.526,642,2.309,643,2.411,644,3.26,645,4.359,646,1.404,647,2.309,648,2.309,649,2.309,650,1.604,651,2.808,652,2.217,653,3.013,654,2.134,655,3.13,656,2.411,657,3.013,658,2.411,659,3.26,660,2.217,661,3.26,662,3.13,663,2.144,664,2.309,665,2.057,666,2.217,667,1.86,668,2.309,669,1.86,670,2.309,671,2.526,672,2.217,673,2.411,674,1.921,675,1.987,676,1.86,677,1.86,678,2.309,679,2.411,680,2.217,681,2.134,682,2.057]],["title/classes/Function.html",[0,0.346,128,0.658]],["body/classes/Function.html",[0,0.663,1,2.324,2,0.098,3,0.038,4,0.038,5,0.038,6,0.088,7,0.925,8,1.63,9,2.519,10,0.029,11,0.618,12,1.922,13,1.848,14,1.639,15,2.411,16,1.323,17,2.142,18,1.127,19,0.848,20,0.271,22,1.635,23,1.839,24,1.646,25,0.234,26,0.226,28,0.149,29,0.009,30,0.16,31,0.114,32,0.135,33,0.986,35,0.684,36,2.06,37,1.074,39,1.143,40,0.712,41,0.899,43,2.181,45,1.794,48,0.428,49,1.458,50,0.678,51,1.399,52,0.417,53,0.73,54,0.575,55,2.185,56,1.074,57,0.952,58,1.458,59,0.748,60,1.418,61,0.73,62,1.418,63,0.589,64,1.38,65,0.617,66,1.309,67,0.575,68,1.309,69,0.678,70,1.276,71,0.695,72,1.344,73,0.632,74,0.134,75,3.896,76,3.824,77,3.786,78,3.025,79,1.356,80,2.606,81,2.617,82,2.675,83,1.436,84,0.54,85,0.924,86,1.213,87,1.797,88,1.154,89,0.952,90,0.952,91,0.952,92,1.4,93,0.952,94,1.309,95,0.952,96,0.905,97,2.343,98,0.952,99,0.952,100,0.899,101,0.695,102,1.309,103,0.952,104,0.952,105,1.543,106,1.947,107,0.537,108,1.843,109,0.952,110,0.662,111,0.952,112,0.952,113,0.952,114,0.952,115,0.695,116,0.899,117,0.851,118,0.952,119,3.025,120,0.952,121,0.952,122,0.952,123,0.952,124,0.952,125,0.952,126,0.952,127,0.952,128,1.145,129,0.952,130,2.696,131,0.952,132,2.175,133,0.952,134,0.952,135,2.489,136,0.952,137,2.56,138,0.952,139,0.952,140,0.952,141,0.478,142,0.952,143,0.952,144,0.952,145,0.952,146,0.952,147,0.952,148,0.952,149,0.952,150,0.949,151,0.851,152,0.952,153,0.952,154,0.952,155,0.952,156,0.952,157,0.952,158,0.695,159,0.952,160,2.664,161,2.461,162,0.952,163,0.952,164,0.617,165,0.952,166,0.952,167,0.647,168,1.543,169,0.952,170,0.952,171,0.925,172,0.952,173,0.925,174,2.235,175,0.748,176,2.026,177,2.417,178,1.493,179,2.635,180,1.947,181,3.302,182,1.543,183,1.947,184,2.239,185,1.543,186,0.952,187,1.947,188,1.947,189,2.239,190,0.562,191,1.543,192,0.952,193,1.947,194,0.952,195,1.891,196,0.952,197,0.952,198,0.952,199,0.952,200,0.952,201,0.952,202,0.952,203,0.952,204,0.952,205,0.952,206,0.952,207,0.952,208,0.952,209,1.276,210,0.952,211,0.952,212,1.891,213,0.952,214,0.952,215,0.952,216,0.952,217,1.891,218,0.952,219,1.543,220,0.952,221,0.952,222,0.952,223,0.952,224,0.952,225,0.952,226,0.952,227,1.947,228,0.952,229,0.952,230,0.952,231,0.952,232,0.952,233,0.952,234,0.952,235,0.952,236,0.952,237,0.952,238,0.952,239,0.952,240,0.952,241,0.952,242,0.952,243,0.952,244,0.952,245,0.952,246,0.952,247,0.952,248,0.952,249,0.952,250,0.952,251,0.952,252,0.952,253,0.952,254,0.952,255,0.952,256,1.891,257,0.952,258,0.952,259,0.952,260,0.952,261,0.952,262,0.952,263,1.891,264,0.952,265,0.899,266,1.543,267,0.952,268,1.543,269,1.891,270,0.952,271,0.952,272,0.952,273,0.952,274,0.952,275,0.952,276,1.891,277,0.952,278,0.952,279,2.239,280,2.461,281,1.543,282,0.952,283,0.952,284,1.074,285,0.952,286,0.952,287,1.947,288,0.952,289,0.952,290,0.952,291,0.952,292,0.952,293,0.952,294,0.952,295,0.952,296,0.952,297,0.952,298,0.952,299,0.952,300,0.952,301,0.952,302,0.952,303,0.952,304,0.952,305,0.952,306,0.952,307,0.952,308,0.952,309,0.952,310,1.891,311,0.952,312,0.952,313,0.952,314,0.952,315,0.952,316,0.952,317,0.952,318,0.952,319,0.952,320,0.952,321,0.952,322,0.787,323,1.499,324,0.952,325,0.952,326,0.952,327,0.952,328,1.891,329,0.952,330,0.952,331,0.952,332,0.952,333,0.899,334,0.899,335,0.829,336,0.899,337,0.899,338,0.899,339,0.952,340,0.952,341,1.947,342,2.179,343,1.543,344,0.952,345,1.543,346,0.952,347,0.952,348,0.19,349,2.696,350,0.952,351,0.952,352,0.952,353,0.952,354,0.952,355,0.952,356,0.952,357,0.952,358,0.952,359,0.952,360,0.952,361,0.952,362,0.952,363,0.952,364,1.543,365,1.543,366,0.952,367,0.952,368,0.952,369,0.952,370,0.952,371,0.952,372,0.952,373,0.952,374,0.952,375,0.952,376,0.925,377,0.952,378,0.925,379,0.952,380,0.952,381,0.952,382,0.952,383,0.952,384,1.741,385,1.38,386,0.952,387,0.952,388,0.952,389,0.952,390,0.952,391,0.952,392,0.952,393,0.748,394,0.952,395,0.952,396,0.952,397,0.952,398,0.952,399,0.952,400,0.952,401,1.891,402,0.952,403,0.952,404,0.952,405,0.952,406,2.489,407,0.493,408,0.952,409,0.899,410,2.489,411,0.952,412,0.767,413,2.635,414,0.952,415,2.239,416,0.952,417,0.695,418,0.004,419,0.004,821,0.767,1313,2.242,1314,2.242,1315,2.242,1316,2.242,1317,2.242,1318,2.242,1319,2.242]],["title/classes/GeoFunctions.html",[0,0.346,269,1.819]],["body/classes/GeoFunctions.html",[0,0.664,1,2.335,2,0.099,3,0.039,4,0.039,5,0.039,6,0.069,7,0.933,8,1.571,9,2.511,10,0.029,11,0.622,12,1.818,13,1.723,15,2.343,16,0.652,17,2.066,19,0.776,20,0.258,22,1.643,23,1.85,24,1.65,25,0.234,26,0.159,28,0.118,29,0.009,30,0.156,31,0.112,32,0.118,33,1.003,35,0.544,36,1.985,39,1.188,43,2.117,45,1.793,48,0.429,49,1.468,50,0.684,51,1.402,52,0.42,53,0.736,54,0.58,55,2.19,56,1.082,57,0.96,58,1.468,59,0.755,60,1.428,61,0.736,62,1.428,63,0.594,64,1.39,65,0.622,66,1.319,67,0.58,68,1.319,69,0.684,70,1.285,71,0.701,72,1.354,73,0.637,74,0.134,75,3.898,76,3.834,77,3.794,78,3.033,79,1.362,80,2.608,81,2.608,82,2.677,83,1.438,84,0.526,85,0.927,86,1.222,87,1.805,88,1.154,89,0.96,90,0.96,91,0.96,92,1.405,93,0.96,94,1.319,95,0.96,96,0.905,97,2.277,98,0.96,99,0.96,100,0.907,101,0.701,102,1.319,103,0.96,104,0.96,105,1.554,106,1.958,107,0.541,108,1.847,109,0.96,110,0.668,111,0.96,112,0.96,113,0.96,114,0.96,115,0.701,116,0.907,117,0.859,118,0.96,119,3.031,120,0.96,121,0.96,122,0.96,123,0.96,124,0.96,125,0.96,126,0.96,127,0.96,128,1.147,129,0.96,130,2.706,131,0.96,132,2.186,133,0.96,134,0.96,135,2.499,136,0.96,137,2.57,138,0.96,139,0.96,140,0.96,141,1.131,142,0.96,143,0.96,144,0.96,145,0.96,146,0.96,147,0.96,148,0.96,149,0.96,150,0.952,151,0.857,152,0.96,153,0.96,154,0.96,155,0.96,156,0.96,157,0.96,158,0.701,159,0.96,160,2.67,161,2.472,162,0.96,163,0.96,164,0.622,165,0.96,166,0.96,167,0.652,168,1.554,169,0.96,170,0.96,171,0.933,172,0.96,173,0.933,174,2.239,175,0.755,176,2.034,177,2.425,178,1.501,179,2.645,180,1.958,181,3.309,182,1.554,183,1.958,184,2.25,185,1.554,186,0.96,187,1.958,188,1.958,189,2.25,190,0.567,191,1.554,192,0.96,193,1.958,194,0.96,195,1.902,196,0.96,197,0.96,198,0.96,199,0.96,200,0.96,201,0.96,202,0.96,203,0.96,204,0.96,205,0.96,206,0.96,207,0.96,208,0.96,209,1.285,210,0.96,211,0.96,212,1.902,213,0.96,214,0.96,215,0.96,216,0.96,217,1.902,218,0.96,219,1.554,220,0.96,221,0.96,222,0.96,223,0.96,224,0.96,225,0.96,226,0.96,227,1.958,228,0.96,229,0.96,230,0.96,231,0.96,232,0.96,233,0.96,234,0.96,235,0.96,236,0.96,237,0.96,238,0.96,239,0.96,240,0.96,241,0.96,242,0.96,243,0.96,244,0.96,245,0.96,246,0.96,247,0.96,248,0.96,249,0.96,250,0.96,251,0.96,252,0.96,253,0.96,254,0.96,255,0.96,256,1.902,257,0.96,258,0.96,259,0.96,260,0.96,261,0.96,262,0.96,263,1.902,264,0.96,265,0.907,266,1.554,267,0.96,268,1.554,269,2.186,270,1.554,271,0.96,272,1.554,273,0.96,274,1.554,275,0.96,276,1.902,277,0.96,278,0.96,279,2.25,280,2.472,281,1.554,282,0.96,283,0.96,284,1.082,285,0.96,286,0.96,287,1.958,288,0.96,289,0.96,290,0.96,291,0.96,292,0.96,293,0.96,294,0.96,295,0.96,296,0.96,297,0.96,298,0.96,299,0.96,300,0.96,301,0.96,302,0.96,303,0.96,304,0.96,305,0.96,306,0.96,307,0.96,308,0.96,309,0.96,310,1.902,311,0.96,312,0.96,313,0.96,314,0.96,315,0.96,316,0.96,317,0.96,318,0.96,319,0.96,320,0.96,321,0.96,322,0.794,323,1.51,324,0.96,325,0.96,326,0.96,327,0.96,328,1.902,329,0.96,330,0.96,331,0.96,332,0.96,333,0.907,334,0.907,335,0.836,336,0.907,337,0.907,338,0.907,339,0.96,340,0.96,341,1.958,342,2.187,343,1.554,344,0.96,345,1.554,346,0.96,347,0.96,348,0.191,349,2.706,350,0.96,351,0.96,352,0.96,353,0.96,354,0.96,355,0.96,356,0.96,357,0.96,358,0.96,359,0.96,360,0.96,361,0.96,362,0.96,363,0.96,364,1.554,365,1.554,366,0.96,367,0.96,368,0.96,369,0.96,370,0.96,371,0.96,372,0.96,373,0.96,374,0.96,375,0.96,376,0.933,377,0.96,378,0.933,379,0.96,380,0.96,381,0.96,382,0.96,383,0.96,384,1.751,385,1.39,386,0.96,387,0.96,388,0.96,389,0.96,390,0.96,391,0.96,392,0.96,393,0.755,394,0.96,395,0.96,396,0.96,397,0.96,398,0.96,399,0.96,400,0.96,401,1.902,402,0.96,403,0.96,404,0.96,405,0.96,406,2.499,407,0.495,408,0.96,409,0.907,410,2.499,411,0.96,412,0.774,413,2.645,414,0.96,415,2.25,416,0.96,417,0.701,418,0.004,419,0.004,1320,3.661,1321,3.661,1322,3.661,1323,2.262,1324,2.262,1325,2.262]],["title/classes/GroupBy.html",[0,0.346,135,1.768]],["body/classes/GroupBy.html",[0,0.663,1,2.327,2,0.098,3,0.038,4,0.038,5,0.038,6,0.088,7,0.927,8,1.631,9,2.558,10,0.029,11,0.619,12,1.923,13,1.849,14,1.641,15,2.412,16,1.325,17,2.143,18,1.129,19,0.849,20,0.271,22,1.637,23,1.841,24,1.647,25,0.233,26,0.226,28,0.149,29,0.009,30,0.158,31,0.114,32,0.135,33,0.986,35,0.685,36,2.062,37,1.076,39,1.143,40,0.714,41,0.901,43,2.183,45,1.794,48,0.428,49,1.46,50,0.68,51,1.4,52,0.418,53,0.731,54,0.577,55,2.186,56,1.076,57,0.954,58,1.46,59,0.75,60,1.421,61,0.731,62,1.421,63,0.59,64,1.383,65,0.618,66,1.312,67,0.577,68,1.312,69,0.68,70,1.278,71,0.696,72,1.346,73,0.633,74,0.134,75,3.894,76,3.824,77,3.786,78,3.025,79,1.358,80,2.606,81,2.606,82,2.675,83,1.437,84,0.526,85,0.925,86,1.215,87,1.799,88,1.154,89,0.954,90,0.954,91,0.954,92,1.401,93,0.954,94,1.312,95,0.954,96,0.905,97,2.274,98,0.954,99,0.954,100,0.901,101,0.696,102,1.312,103,0.954,104,0.954,105,1.546,106,1.949,107,0.538,108,1.844,109,0.954,110,0.664,111,0.954,112,0.954,113,0.954,114,0.954,115,0.696,116,0.901,117,0.853,118,0.954,119,3.026,120,0.954,121,0.954,122,0.954,123,0.954,124,0.954,125,0.954,126,0.954,127,0.954,128,1.08,129,0.954,130,2.699,131,0.954,132,2.178,133,0.954,134,0.954,135,2.823,136,0.954,137,2.562,138,0.954,139,0.954,140,0.954,141,0.479,142,0.954,143,0.954,144,0.954,145,0.954,146,0.954,147,0.954,148,0.954,149,0.954,150,0.95,151,0.852,152,0.954,153,0.954,154,0.954,155,0.954,156,0.954,157,0.954,158,0.696,159,0.954,160,2.665,161,2.463,162,0.954,163,0.954,164,0.618,165,0.954,166,0.954,167,0.648,168,1.546,169,0.954,170,0.954,171,0.927,172,0.954,173,0.927,174,2.236,175,0.75,176,2.028,177,2.419,178,1.495,179,2.637,180,1.949,181,3.304,182,1.546,183,1.949,184,2.242,185,1.546,186,0.954,187,1.949,188,1.949,189,2.242,190,0.563,191,1.546,192,0.954,193,1.949,194,0.954,195,1.894,196,0.954,197,0.954,198,0.954,199,0.954,200,0.954,201,0.954,202,0.954,203,0.954,204,0.954,205,0.954,206,0.954,207,0.954,208,0.954,209,1.278,210,0.954,211,0.954,212,1.894,213,0.954,214,0.954,215,0.954,216,0.954,217,1.894,218,0.954,219,1.546,220,0.954,221,0.954,222,0.954,223,0.954,224,0.954,225,0.954,226,0.954,227,1.949,228,0.954,229,0.954,230,0.954,231,0.954,232,0.954,233,0.954,234,0.954,235,0.954,236,0.954,237,0.954,238,0.954,239,0.954,240,0.954,241,0.954,242,0.954,243,0.954,244,0.954,245,0.954,246,0.954,247,0.954,248,0.954,249,0.954,250,0.954,251,0.954,252,0.954,253,0.954,254,0.954,255,0.954,256,1.894,257,0.954,258,0.954,259,0.954,260,0.954,261,0.954,262,0.954,263,1.894,264,0.954,265,0.901,266,1.546,267,0.954,268,1.546,269,1.894,270,0.954,271,0.954,272,0.954,273,0.954,274,0.954,275,0.954,276,1.894,277,0.954,278,0.954,279,2.242,280,2.463,281,1.546,282,0.954,283,0.954,284,1.076,285,0.954,286,0.954,287,1.949,288,0.954,289,0.954,290,0.954,291,0.954,292,0.954,293,0.954,294,0.954,295,0.954,296,0.954,297,0.954,298,0.954,299,0.954,300,0.954,301,0.954,302,0.954,303,0.954,304,0.954,305,0.954,306,0.954,307,0.954,308,0.954,309,0.954,310,1.894,311,0.954,312,0.954,313,0.954,314,0.954,315,0.954,316,0.954,317,0.954,318,0.954,319,0.954,320,0.954,321,0.954,322,0.789,323,1.502,324,0.954,325,0.954,326,0.954,327,0.954,328,1.894,329,0.954,330,0.954,331,0.954,332,0.954,333,0.901,334,0.901,335,0.831,336,0.901,337,0.901,338,0.901,339,0.954,340,0.954,341,1.949,342,2.181,343,1.546,344,0.954,345,1.546,346,0.954,347,0.954,348,0.24,349,2.984,350,0.954,351,0.954,352,0.954,353,0.954,354,0.954,355,0.954,356,0.954,357,0.954,358,0.954,359,0.954,360,0.954,361,0.954,362,0.954,363,0.954,364,1.546,365,1.546,366,0.954,367,0.954,368,0.954,369,0.954,370,0.954,371,0.954,372,0.954,373,0.954,374,0.954,375,0.954,376,0.927,377,0.954,378,0.927,379,0.954,380,0.954,381,0.954,382,0.954,383,0.954,384,1.743,385,1.383,386,0.954,387,0.954,388,0.954,389,0.954,390,0.954,391,0.954,392,0.954,393,0.75,394,0.954,395,0.954,396,0.954,397,0.954,398,0.954,399,0.954,400,0.954,401,1.894,402,0.954,403,0.954,404,0.954,405,0.954,406,2.491,407,0.493,408,0.954,409,0.901,410,2.491,411,0.954,412,0.769,413,2.637,414,0.954,415,2.242,416,0.954,417,0.696,418,0.004,419,0.004,725,0.344,1326,2.247,1327,2.247,1328,2.247,1329,2.247,1330,2.247,1331,2.247,1332,2.247,1333,2.247]],["title/classes/GroupByTransformations.html",[0,0.346,1334,3.894]],["body/classes/GroupByTransformations.html",[0,0.477,1,1.782,2,0.194,3,0.076,4,0.076,5,0.076,6,0.104,8,1.455,9,2.633,10,0.058,11,0.819,12,1.954,13,1.596,15,2.307,16,1.753,17,2.095,19,1.026,20,0.184,22,1.883,23,2.437,24,1.327,25,0.218,26,0.269,28,0.156,29,0.009,30,0.133,31,0.104,32,0.156,33,0.524,35,0.92,36,1.345,37,1.238,39,1.19,40,1.412,41,1.782,43,1.883,45,1.654,48,0.459,51,1.285,52,0.51,53,1.447,54,1.14,55,2.045,56,1.795,58,3.68,61,1.978,65,1.672,66,2.807,67,1.777,70,2.735,71,2.146,74,0.091,80,2.302,81,2.302,82,2.358,83,1.348,84,0.416,85,1.158,86,2.484,88,1.072,96,0.876,115,1.378,135,2.437,176,1.378,284,1.313,348,0.308,349,1.833,376,2.506,378,1.833,406,3.68,407,0.415,409,3.535,410,3.68,412,3.016,417,1.883,418,0.006,419,0.006,454,1.016,550,1.734,631,3.803,632,1.62,663,3.455,708,2.919,711,2.067,712,3.624,718,4.966,723,3.561,736,2.371,737,2.067,739,2.135,740,2.371,741,2.371,742,2.371,743,2.371,746,2.371,749,2.286,750,2.371,752,2.565,753,5.783,754,4.72,759,2.565,801,2.371,802,2.463,1127,6.935,1296,4.32,1334,6.882,1335,3.925,1336,5.57,1337,4.445,1338,4.445,1339,4.445,1340,4.445,1341,4.445,1342,6.114,1343,5.182,1344,7.794,1345,7.794,1346,5.366,1347,4.445,1348,6.077,1349,6.077,1350,6.077,1351,6.077,1352,6.077,1353,3.925,1354,4.268,1355,5.366,1356,4.445,1357,4.445,1358,4.445,1359,4.445,1360,6.485,1361,4.547,1362,4.445,1363,4.445]],["title/classes/Grouping.html",[0,0.346,132,1.819]],["body/classes/Grouping.html",[0,0.663,1,2.329,2,0.098,3,0.039,4,0.039,5,0.039,6,0.089,7,0.928,8,1.632,9,2.54,10,0.029,11,0.62,12,1.924,13,1.85,14,1.643,15,2.413,16,1.326,17,2.144,18,1.13,19,0.85,20,0.271,22,1.638,23,1.843,24,1.648,25,0.233,26,0.226,28,0.149,29,0.009,30,0.158,31,0.114,32,0.136,33,0.987,35,0.685,36,2.063,37,1.077,39,1.143,40,0.715,41,0.902,43,2.184,45,1.794,48,0.428,49,1.462,50,0.681,51,1.4,52,0.418,53,0.732,54,0.577,55,2.187,56,1.077,57,0.955,58,1.462,59,0.751,60,1.422,61,0.732,62,1.422,63,0.591,64,1.384,65,0.619,66,1.313,67,0.577,68,1.313,69,0.681,70,1.28,71,0.698,72,1.348,73,0.634,74,0.134,75,3.894,76,3.825,77,3.786,78,3.026,79,1.359,80,2.607,81,2.607,82,2.675,83,1.437,84,0.526,85,0.926,86,1.217,87,1.8,88,1.154,89,0.955,90,0.955,91,0.955,92,1.402,93,0.955,94,1.313,95,0.955,96,0.905,97,2.275,98,0.955,99,0.955,100,0.902,101,0.698,102,1.313,103,0.955,104,0.955,105,1.548,106,1.951,107,0.539,108,1.845,109,0.955,110,0.665,111,0.955,112,0.955,113,0.955,114,0.955,115,0.698,116,0.902,117,0.854,118,0.955,119,3.028,120,0.955,121,0.955,122,0.955,123,0.955,124,0.955,125,0.955,126,0.955,127,0.955,128,1.081,129,0.955,130,2.7,131,0.955,132,2.7,133,0.955,134,0.955,135,2.493,136,0.955,137,2.564,138,0.955,139,0.955,140,0.955,141,0.48,142,0.955,143,0.955,144,0.955,145,0.955,146,0.955,147,0.955,148,0.955,149,0.955,150,0.95,151,0.853,152,0.955,153,0.955,154,0.955,155,0.955,156,0.955,157,0.955,158,0.698,159,0.955,160,2.666,161,2.465,162,0.955,163,0.955,164,0.619,165,0.955,166,0.955,167,0.649,168,1.548,169,0.955,170,0.955,171,0.928,172,0.955,173,0.928,174,2.237,175,0.751,176,2.029,177,2.42,178,1.496,179,2.639,180,1.951,181,3.305,182,1.548,183,1.951,184,2.244,185,1.548,186,0.955,187,1.951,188,1.951,189,2.244,190,0.564,191,1.548,192,0.955,193,1.951,194,0.955,195,1.896,196,0.955,197,0.955,198,0.955,199,0.955,200,0.955,201,0.955,202,0.955,203,0.955,204,0.955,205,0.955,206,0.955,207,0.955,208,0.955,209,1.28,210,0.955,211,0.955,212,1.896,213,0.955,214,0.955,215,0.955,216,0.955,217,1.896,218,0.955,219,1.548,220,0.955,221,0.955,222,0.955,223,0.955,224,0.955,225,0.955,226,0.955,227,1.951,228,0.955,229,0.955,230,0.955,231,0.955,232,0.955,233,0.955,234,0.955,235,0.955,236,0.955,237,0.955,238,0.955,239,0.955,240,0.955,241,0.955,242,0.955,243,0.955,244,0.955,245,0.955,246,0.955,247,0.955,248,0.955,249,0.955,250,0.955,251,0.955,252,0.955,253,0.955,254,0.955,255,0.955,256,1.896,257,0.955,258,0.955,259,0.955,260,0.955,261,0.955,262,0.955,263,1.896,264,0.955,265,0.902,266,1.548,267,0.955,268,1.548,269,1.896,270,0.955,271,0.955,272,0.955,273,0.955,274,0.955,275,0.955,276,1.896,277,0.955,278,0.955,279,2.244,280,2.465,281,1.548,282,0.955,283,0.955,284,1.077,285,0.955,286,0.955,287,1.951,288,0.955,289,0.955,290,0.955,291,0.955,292,0.955,293,0.955,294,0.955,295,0.955,296,0.955,297,0.955,298,0.955,299,0.955,300,0.955,301,0.955,302,0.955,303,0.955,304,0.955,305,0.955,306,0.955,307,0.955,308,0.955,309,0.955,310,1.896,311,0.955,312,0.955,313,0.955,314,0.955,315,0.955,316,0.955,317,0.955,318,0.955,319,0.955,320,0.955,321,0.955,322,0.79,323,2.18,324,0.955,325,0.955,326,0.955,327,0.955,328,1.896,329,0.955,330,0.955,331,0.955,332,0.955,333,0.902,334,0.902,335,0.832,336,0.902,337,0.902,338,0.902,339,0.955,340,0.955,341,1.951,342,2.182,343,1.548,344,0.955,345,1.548,346,0.955,347,0.955,348,0.19,349,2.7,350,0.955,351,0.955,352,0.955,353,0.955,354,0.955,355,0.955,356,0.955,357,0.955,358,0.955,359,0.955,360,0.955,361,0.955,362,0.955,363,0.955,364,1.548,365,1.548,366,0.955,367,0.955,368,0.955,369,0.955,370,0.955,371,0.955,372,0.955,373,0.955,374,0.955,375,0.955,376,0.928,377,0.955,378,0.928,379,0.955,380,0.955,381,0.955,382,0.955,383,0.955,384,1.745,385,1.384,386,0.955,387,0.955,388,0.955,389,0.955,390,0.955,391,0.955,392,0.955,393,0.751,394,0.955,395,0.955,396,0.955,397,0.955,398,0.955,399,0.955,400,0.955,401,1.896,402,0.955,403,0.955,404,0.955,405,0.955,406,2.493,407,0.494,408,0.955,409,0.902,410,2.493,411,0.955,412,0.77,413,2.639,414,0.955,415,2.244,416,0.955,417,0.698,418,0.004,419,0.004,1364,2.25,1365,2.25,1366,2.25,1367,2.25,1368,2.25,1369,2.25,1370,2.25,1371,2.25]],["title/classes/GroupingOperators.html",[0,0.346,328,1.819]],["body/classes/GroupingOperators.html",[0,0.665,1,2.35,2,0.1,3,0.039,4,0.039,5,0.039,6,0.06,7,0.945,8,1.579,9,2.516,10,0.03,11,0.627,12,1.825,13,1.732,15,2.351,16,0.661,17,2.073,19,0.781,20,0.259,22,1.656,23,1.866,24,1.656,25,0.233,26,0.128,28,0.095,29,0.009,30,0.155,31,0.111,32,0.095,33,0.995,35,0.437,36,1.996,39,1.137,43,2.128,45,1.795,48,0.43,49,1.483,50,0.693,51,1.407,52,0.425,53,0.746,54,0.588,55,2.199,56,1.093,57,0.973,58,1.483,59,0.764,60,1.443,61,0.746,62,1.443,63,0.602,64,1.405,65,0.63,66,1.332,67,0.588,68,1.332,69,0.693,70,1.298,71,0.71,72,1.368,73,0.645,74,0.134,75,3.896,76,3.828,77,3.79,78,3.031,79,1.371,80,2.612,81,2.612,82,2.68,83,1.439,84,0.528,85,0.931,86,1.234,87,1.817,88,1.155,89,0.973,90,0.973,91,0.973,92,1.411,93,0.973,94,1.332,95,0.973,96,0.905,97,2.309,98,0.973,99,0.973,100,0.919,101,0.71,102,1.332,103,0.973,104,0.973,105,1.57,106,1.975,107,0.548,108,1.852,109,0.973,110,0.677,111,0.973,112,0.973,113,0.973,114,0.973,115,0.71,116,0.919,117,0.87,118,0.973,119,3.04,120,0.973,121,0.973,122,0.973,123,0.973,124,0.973,125,0.973,126,0.973,127,0.973,128,1.111,129,0.973,130,2.72,131,0.973,132,2.418,133,0.973,134,0.973,135,2.514,136,0.973,137,2.585,138,0.973,139,0.973,140,0.973,141,0.489,142,0.973,143,0.973,144,0.973,145,0.973,146,0.973,147,0.973,148,0.973,149,0.973,150,0.956,151,0.866,152,0.973,153,0.973,154,0.973,155,0.973,156,0.973,157,0.973,158,0.71,159,0.973,160,2.681,161,2.488,162,0.973,163,0.973,164,0.63,165,0.973,166,0.973,167,0.661,168,1.57,169,0.973,170,0.973,171,0.945,172,0.973,173,0.945,174,2.245,175,0.764,176,2.044,177,2.438,178,1.515,179,2.661,180,1.975,181,3.32,182,1.57,183,1.975,184,2.267,185,1.57,186,0.973,187,1.975,188,1.975,189,2.267,190,0.574,191,1.57,192,0.973,193,1.975,194,0.973,195,1.919,196,0.973,197,0.973,198,0.973,199,0.973,200,0.973,201,0.973,202,0.973,203,0.973,204,0.973,205,0.973,206,0.973,207,0.973,208,0.973,209,1.298,210,0.973,211,0.973,212,1.919,213,0.973,214,0.973,215,0.973,216,0.973,217,1.919,218,0.973,219,1.57,220,0.973,221,0.973,222,0.973,223,0.973,224,0.973,225,0.973,226,0.973,227,1.975,228,0.973,229,0.973,230,0.973,231,0.973,232,0.973,233,0.973,234,0.973,235,0.973,236,0.973,237,0.973,238,0.973,239,0.973,240,0.973,241,0.973,242,0.973,243,0.973,244,0.973,245,0.973,246,0.973,247,0.973,248,0.973,249,0.973,250,0.973,251,0.973,252,0.973,253,0.973,254,0.973,255,0.973,256,1.919,257,0.973,258,0.973,259,0.973,260,0.973,261,0.973,262,0.973,263,1.919,264,0.973,265,0.919,266,1.57,267,0.973,268,1.57,269,1.919,270,0.973,271,0.973,272,0.973,273,0.973,274,0.973,275,0.973,276,1.919,277,0.973,278,0.973,279,2.267,280,2.488,281,1.57,282,0.973,283,0.973,284,1.093,285,0.973,286,0.973,287,1.975,288,0.973,289,0.973,290,0.973,291,0.973,292,0.973,293,0.973,294,0.973,295,0.973,296,0.973,297,0.973,298,0.973,299,0.973,300,0.973,301,0.973,302,0.973,303,0.973,304,0.973,305,0.973,306,0.973,307,0.973,308,0.973,309,0.973,310,1.919,311,0.973,312,0.973,313,0.973,314,0.973,315,0.973,316,0.973,317,0.973,318,0.973,319,0.973,320,0.973,321,0.973,322,0.804,323,2.203,324,0.973,325,0.973,326,0.973,327,0.973,328,2.203,329,1.57,330,0.973,331,1.57,332,0.973,333,0.919,334,0.919,335,0.847,336,0.919,337,0.919,338,0.919,339,0.973,340,0.973,341,1.975,342,2.2,343,1.57,344,0.973,345,1.57,346,0.973,347,0.973,348,0.193,349,2.72,350,0.973,351,0.973,352,0.973,353,0.973,354,0.973,355,0.973,356,0.973,357,0.973,358,0.973,359,0.973,360,0.973,361,0.973,362,0.973,363,0.973,364,1.57,365,1.57,366,0.973,367,0.973,368,0.973,369,0.973,370,0.973,371,0.973,372,0.973,373,0.973,374,0.973,375,0.973,376,0.945,377,0.973,378,0.945,379,0.973,380,0.973,381,0.973,382,0.973,383,0.973,384,1.767,385,1.405,386,0.973,387,0.973,388,0.973,389,0.973,390,0.973,391,0.973,392,0.973,393,0.764,394,0.973,395,0.973,396,0.973,397,0.973,398,0.973,399,0.973,400,0.973,401,1.919,402,0.973,403,0.973,404,0.973,405,0.973,406,2.514,407,0.499,408,0.973,409,0.919,410,2.514,411,0.973,412,0.784,413,2.661,414,0.973,415,2.267,416,0.973,417,0.71,418,0.004,419,0.004,1355,3.267,1372,2.291,1373,2.291]],["title/classes/Lambda.html",[0,0.346,137,1.819]],["body/classes/Lambda.html",[0,0.663,1,2.325,2,0.098,3,0.038,4,0.038,5,0.038,6,0.088,7,0.926,8,1.631,9,2.519,10,0.029,11,0.619,12,1.923,13,1.848,14,1.64,15,2.412,16,1.323,17,2.142,18,1.128,19,0.849,20,0.271,22,1.636,23,1.84,24,1.72,25,0.235,26,0.226,28,0.149,29,0.009,30,0.157,31,0.114,32,0.135,33,0.986,35,0.684,36,2.061,37,1.075,39,1.143,40,0.713,41,0.9,43,2.182,45,1.794,48,0.428,49,1.459,50,0.679,51,1.399,52,0.418,53,0.73,54,0.576,55,2.185,56,1.075,57,0.953,58,1.459,59,0.749,60,1.419,61,0.73,62,1.419,63,0.589,64,1.381,65,0.618,66,1.31,67,0.576,68,1.31,69,0.679,70,1.277,71,0.696,72,1.345,73,0.632,74,0.134,75,3.894,76,3.824,77,3.786,78,3.025,79,1.357,80,2.606,81,2.606,82,2.675,83,1.437,84,0.525,85,0.925,86,1.214,87,1.798,88,1.154,89,0.953,90,0.953,91,0.953,92,1.401,93,0.953,94,1.31,95,0.953,96,0.905,97,2.343,98,0.953,99,0.953,100,0.9,101,0.696,102,1.31,103,0.953,104,0.953,105,1.544,106,1.948,107,0.537,108,1.844,109,0.953,110,0.663,111,0.953,112,0.953,113,0.953,114,0.953,115,0.696,116,0.9,117,0.852,118,0.953,119,3.026,120,0.953,121,0.953,122,0.953,123,0.953,124,0.953,125,0.953,126,0.953,127,0.953,128,1.08,129,0.953,130,2.697,131,0.953,132,2.176,133,0.953,134,0.953,135,2.49,136,0.953,137,2.903,138,0.953,139,0.953,140,0.953,141,0.479,142,0.953,143,0.953,144,0.953,145,0.953,146,0.953,147,0.953,148,0.953,149,0.953,150,0.949,151,0.851,152,0.953,153,0.953,154,0.953,155,0.953,156,0.953,157,0.953,158,0.696,159,0.953,160,2.664,161,2.462,162,0.953,163,0.953,164,0.618,165,0.953,166,0.953,167,0.647,168,1.544,169,0.953,170,0.953,171,0.926,172,0.953,173,0.926,174,2.235,175,0.749,176,2.027,177,2.418,178,1.493,179,2.636,180,1.948,181,3.303,182,1.544,183,1.948,184,2.24,185,1.544,186,0.953,187,1.948,188,1.948,189,2.24,190,0.563,191,1.544,192,0.953,193,1.948,194,0.953,195,1.892,196,0.953,197,0.953,198,0.953,199,0.953,200,0.953,201,0.953,202,0.953,203,0.953,204,0.953,205,0.953,206,0.953,207,0.953,208,0.953,209,1.277,210,0.953,211,0.953,212,1.892,213,0.953,214,0.953,215,0.953,216,0.953,217,1.892,218,0.953,219,1.544,220,0.953,221,0.953,222,0.953,223,0.953,224,0.953,225,0.953,226,0.953,227,1.948,228,0.953,229,0.953,230,0.953,231,0.953,232,0.953,233,0.953,234,0.953,235,0.953,236,0.953,237,0.953,238,0.953,239,0.953,240,0.953,241,0.953,242,0.953,243,0.953,244,0.953,245,0.953,246,0.953,247,0.953,248,0.953,249,0.953,250,0.953,251,0.953,252,0.953,253,0.953,254,0.953,255,0.953,256,1.892,257,0.953,258,0.953,259,0.953,260,0.953,261,0.953,262,0.953,263,1.892,264,0.953,265,0.9,266,1.544,267,0.953,268,1.544,269,1.892,270,0.953,271,0.953,272,0.953,273,0.953,274,0.953,275,0.953,276,1.892,277,0.953,278,0.953,279,2.636,280,2.462,281,1.544,282,0.953,283,0.953,284,1.075,285,0.953,286,0.953,287,1.948,288,0.953,289,0.953,290,0.953,291,0.953,292,0.953,293,0.953,294,0.953,295,0.953,296,0.953,297,0.953,298,0.953,299,0.953,300,0.953,301,0.953,302,0.953,303,0.953,304,0.953,305,0.953,306,0.953,307,0.953,308,0.953,309,0.953,310,1.892,311,0.953,312,0.953,313,0.953,314,0.953,315,0.953,316,0.953,317,0.953,318,0.953,319,0.953,320,0.953,321,0.953,322,0.788,323,1.5,324,0.953,325,0.953,326,0.953,327,0.953,328,1.892,329,0.953,330,0.953,331,0.953,332,0.953,333,0.9,334,0.9,335,0.83,336,0.9,337,0.9,338,0.9,339,0.953,340,0.953,341,1.948,342,2.179,343,1.544,344,0.953,345,1.544,346,0.953,347,0.953,348,0.19,349,2.697,350,0.953,351,0.953,352,0.953,353,0.953,354,0.953,355,0.953,356,0.953,357,0.953,358,0.953,359,0.953,360,0.953,361,0.953,362,0.953,363,0.953,364,1.544,365,1.544,366,0.953,367,0.953,368,0.953,369,0.953,370,0.953,371,0.953,372,0.953,373,0.953,374,0.953,375,0.953,376,0.926,377,0.953,378,0.926,379,0.953,380,0.953,381,0.953,382,0.953,383,0.953,384,1.742,385,1.381,386,0.953,387,0.953,388,0.953,389,0.953,390,0.953,391,0.953,392,0.953,393,0.749,394,0.953,395,0.953,396,0.953,397,0.953,398,0.953,399,0.953,400,0.953,401,1.892,402,0.953,403,0.953,404,0.953,405,0.953,406,2.49,407,0.493,408,0.953,409,0.9,410,2.49,411,0.953,412,0.768,413,2.636,414,0.953,415,2.24,416,0.953,417,0.696,418,0.004,419,0.004,725,0.343,1374,1.982,1375,2.244,1376,2.244,1377,2.244,1378,2.244,1379,2.244,1380,2.244,1381,2.244]],["title/classes/LambdaOperators.html",[0,0.346,401,1.819]],["body/classes/LambdaOperators.html",[0,0.665,1,2.346,2,0.1,3,0.039,4,0.039,5,0.039,6,0.06,7,0.942,8,1.577,9,2.514,10,0.03,11,0.626,12,1.823,13,1.73,15,2.349,16,0.659,17,2.071,19,0.78,20,0.259,22,1.652,23,1.861,24,1.747,25,0.234,26,0.127,28,0.095,29,0.009,30,0.155,31,0.111,32,0.095,33,0.989,35,0.435,36,1.993,39,1.175,43,2.125,45,1.794,48,0.43,49,1.479,50,0.691,51,1.406,52,0.423,53,0.743,54,0.586,55,2.196,56,1.09,57,0.969,58,1.479,59,0.762,60,1.439,61,0.743,62,1.439,63,0.6,64,1.4,65,0.628,66,1.328,67,0.586,68,1.328,69,0.691,70,1.295,71,0.708,72,1.364,73,0.643,74,0.134,75,3.895,76,3.833,77,3.794,78,3.03,79,1.369,80,2.611,81,2.611,82,2.679,83,1.439,84,0.528,85,0.93,86,1.231,87,1.813,88,1.155,89,0.969,90,0.969,91,0.969,92,1.409,93,0.969,94,1.328,95,0.969,96,0.905,97,2.282,98,0.969,99,0.969,100,0.915,101,0.708,102,1.328,103,0.969,104,0.969,105,1.566,106,1.97,107,0.547,108,1.851,109,0.969,110,0.674,111,0.969,112,0.969,113,0.969,114,0.969,115,0.708,116,0.915,117,0.867,118,0.969,119,3.037,120,0.969,121,0.969,122,0.969,123,0.969,124,0.969,125,0.969,126,0.969,127,0.969,128,1.086,129,0.969,130,2.716,131,0.969,132,2.198,133,0.969,134,0.969,135,2.509,136,0.969,137,2.827,138,0.969,139,0.969,140,0.969,141,0.487,142,0.969,143,0.969,144,0.969,145,0.969,146,0.969,147,0.969,148,0.969,149,0.969,150,0.955,151,0.863,152,0.969,153,0.969,154,0.969,155,0.969,156,0.969,157,0.969,158,0.708,159,0.969,160,2.678,161,2.484,162,0.969,163,0.969,164,0.628,165,0.969,166,0.969,167,0.659,168,1.566,169,0.969,170,0.969,171,0.942,172,0.969,173,0.942,174,2.243,175,0.762,176,2.041,177,2.435,178,1.511,179,2.657,180,1.97,181,3.317,182,1.566,183,1.97,184,2.263,185,1.566,186,0.969,187,1.97,188,1.97,189,2.263,190,0.572,191,1.566,192,0.969,193,1.97,194,0.969,195,1.914,196,0.969,197,0.969,198,0.969,199,0.969,200,0.969,201,0.969,202,0.969,203,0.969,204,0.969,205,0.969,206,0.969,207,0.969,208,0.969,209,1.295,210,0.969,211,0.969,212,1.914,213,0.969,214,0.969,215,0.969,216,0.969,217,1.914,218,0.969,219,1.566,220,0.969,221,0.969,222,0.969,223,0.969,224,0.969,225,0.969,226,0.969,227,1.97,228,0.969,229,0.969,230,0.969,231,0.969,232,0.969,233,0.969,234,0.969,235,0.969,236,0.969,237,0.969,238,0.969,239,0.969,240,0.969,241,0.969,242,0.969,243,0.969,244,0.969,245,0.969,246,0.969,247,0.969,248,0.969,249,0.969,250,0.969,251,0.969,252,0.969,253,0.969,254,0.969,255,0.969,256,1.914,257,0.969,258,0.969,259,0.969,260,0.969,261,0.969,262,0.969,263,1.914,264,0.969,265,0.915,266,1.566,267,0.969,268,1.566,269,1.914,270,0.969,271,0.969,272,0.969,273,0.969,274,0.969,275,0.969,276,1.914,277,0.969,278,0.969,279,2.263,280,2.484,281,1.566,282,0.969,283,0.969,284,1.09,285,0.969,286,0.969,287,1.97,288,0.969,289,0.969,290,0.969,291,0.969,292,0.969,293,0.969,294,0.969,295,0.969,296,0.969,297,0.969,298,0.969,299,0.969,300,0.969,301,0.969,302,0.969,303,0.969,304,0.969,305,0.969,306,0.969,307,0.969,308,0.969,309,0.969,310,1.914,311,0.969,312,0.969,313,0.969,314,0.969,315,0.969,316,0.969,317,0.969,318,0.969,319,0.969,320,0.969,321,0.969,322,0.801,323,1.521,324,0.969,325,0.969,326,0.969,327,0.969,328,1.914,329,0.969,330,0.969,331,0.969,332,0.969,333,0.915,334,0.915,335,0.844,336,0.915,337,0.915,338,0.915,339,0.969,340,0.969,341,1.97,342,2.197,343,1.566,344,0.969,345,1.566,346,0.969,347,0.969,348,0.192,349,2.716,350,0.969,351,0.969,352,0.969,353,0.969,354,0.969,355,0.969,356,0.969,357,0.969,358,0.969,359,0.969,360,0.969,361,0.969,362,0.969,363,0.969,364,1.566,365,1.566,366,0.969,367,0.969,368,0.969,369,0.969,370,0.969,371,0.969,372,0.969,373,0.969,374,0.969,375,0.969,376,0.942,377,0.969,378,0.942,379,0.969,380,0.969,381,0.969,382,0.969,383,0.969,384,1.762,385,1.4,386,0.969,387,0.969,388,0.969,389,0.969,390,0.969,391,0.969,392,0.969,393,0.762,394,0.969,395,0.969,396,0.969,397,0.969,398,0.969,399,0.969,400,0.969,401,2.198,402,1.566,403,0.969,404,1.566,405,0.969,406,2.509,407,0.498,408,0.969,409,0.915,410,2.509,411,0.969,412,0.781,413,2.657,414,0.969,415,2.263,416,0.969,417,0.708,418,0.004,419,0.004,725,0.565,1382,2.283,1383,2.283]],["title/classes/ODataAnnotatable.html",[0,0.346,1384,2.19]],["body/classes/ODataAnnotatable.html",[0,0.585,2,0.266,3,0.104,4,0.104,5,0.104,6,0.112,10,0.079,11,1.005,19,1.003,20,0.252,25,0.23,26,0.29,28,0.215,29,0.009,30,0.155,31,0.115,32,0.207,33,0.99,35,1.034,37,1.518,39,1.143,48,0.339,52,0.699,74,0.112,84,0.51,85,0.979,88,0.928,96,0.829,107,1.784,128,1.202,150,0.821,348,0.333,393,2.031,418,0.007,419,0.007,597,2.549,632,1.424,645,4.295,646,3.113,647,3.513,648,3.513,649,3.513,651,2.945,948,3.889,1384,3.7,1385,5.374,1386,4.3,1387,4.3,1388,3.578,1389,7.451,1390,2.743,1391,4.592,1392,4.129,1393,4.315,1394,6.086,1395,4.351,1396,4.651,1397,4.651,1398,3.073,1399,4.129,1400,4.855,1401,6.086,1402,4.168,1403,3.358,1404,4.129,1405,5.374,1406,5.374,1407,5.374,1408,5.374,1409,3.842,1410,5.374,1411,2.082,1412,5.374,1413,5.374,1414,5.374,1415,5.374,1416,5.374,1417,5.374,1418,5.374,1419,5.374,1420,5.374,1421,5.374,1422,5.374]],["title/classes/ODataAnnotation.html",[0,0.346,1391,2.352]],["body/classes/ODataAnnotation.html",[0,0.591,2,0.271,3,0.106,4,0.106,5,0.106,6,0.117,10,0.08,19,0.938,20,0.256,25,0.236,26,0.307,28,0.159,29,0.009,30,0.119,31,0.116,32,0.235,33,0.889,35,0.957,39,0.879,48,0.345,52,0.711,74,0.113,84,0.556,85,0.989,88,0.938,96,0.813,107,1.483,128,0.924,150,1.015,348,0.358,393,2.066,418,0.007,419,0.007,597,2.576,645,4.614,646,3.125,647,4.683,648,4.683,649,4.683,651,2.643,948,3.734,1384,3.076,1385,5.468,1388,2.974,1391,4.502,1392,3.432,1393,3.873,1395,4.03,1396,4.173,1397,4.173,1399,3.432,1400,4.875,1402,3.74,1403,2.791,1404,3.432,1405,6.649,1406,5.468,1407,5.468,1408,5.468,1409,3.91,1410,5.468,1411,2.119,1412,5.468,1413,5.468,1414,5.468,1415,5.468,1416,5.468,1417,5.468,1418,5.468,1419,5.468,1420,5.468,1421,5.468,1422,5.468,1423,7.53,1424,6.193,1425,6.193,1426,6.193,1427,6.193,1428,6.193]],["title/classes/ODataAnnotations.html",[0,0.346,1429,3.098]],["body/classes/ODataAnnotations.html",[0,0.607,2,0.214,3,0.084,4,0.084,5,0.084,6,0.114,10,0.063,11,0.873,12,2.116,18,2.007,19,1.03,20,0.268,22,1.514,25,0.226,26,0.299,28,0.206,29,0.009,30,0.173,31,0.119,32,0.206,35,0.95,37,1.719,39,1.031,48,0.361,52,0.56,63,1.283,74,0.116,85,0.642,88,1.132,96,0.9,151,1.699,174,1.782,348,0.301,407,0.678,412,2.215,418,0.006,419,0.006,426,2.135,439,2.271,440,3.715,453,1.446,454,1.661,459,3.486,460,2.757,462,1.443,467,2.271,468,2.271,469,2.426,543,3.11,545,3.973,549,2.781,565,3.378,632,1.142,651,2.549,676,3.378,725,0.747,890,2.201,1215,4.377,1354,5.102,1403,3.803,1409,4.586,1411,2.83,1429,6.242,1430,3.655,1431,4.645,1432,4.845,1433,3.588,1434,4.884,1435,6.022,1436,3.874,1437,5.137,1438,4.884,1439,4.884,1440,3.655,1441,4.884,1442,4.586,1443,4.884,1444,6.022,1445,4.884,1446,6.022,1447,4.884,1448,4.845,1449,4.884,1450,4.884,1451,4.884,1452,4.884,1453,4.884,1454,3.655,1455,3.655,1456,3.655,1457,3.655,1458,3.655,1459,5.493,1460,6.19,1461,5.436,1462,5.436,1463,4.824,1464,5.493,1465,5.436,1466,5.436,1467,3.655,1468,5.759,1469,3.655,1470,3.655,1471,3.655,1472,3.655,1473,3.655,1474,3.655,1475,3.655,1476,4.845,1477,4.845,1478,3.655,1479,3.655,1480,3.655,1481,3.655,1482,3.655,1483,3.655,1484,3.655,1485,3.655,1486,3.655,1487,5.436,1488,3.655,1489,4.845,1490,5.69,1491,3.655,1492,3.655,1493,4.845,1494,4.845,1495,6.19,1496,4.845,1497,4.845,1498,4.845,1499,3.655,1500,3.655,1501,3.655,1502,3.655,1503,3.655,1504,3.655,1505,5.436,1506,3.655,1507,4.845,1508,3.655,1509,3.655,1510,3.655]],["title/classes/ODataApiOptions.html",[0,0.346,1511,3.554]],["body/classes/ODataApiOptions.html",[0,0.378,2,0.21,3,0.082,4,0.082,5,0.082,6,0.118,8,1.535,10,0.062,18,1.987,20,0.199,25,0.222,26,0.314,28,0.185,29,0.009,30,0.093,31,0.119,32,0.216,33,0.757,37,1.631,40,2.712,48,0.402,51,1.486,52,0.552,74,0.072,83,1.236,84,0.621,96,0.694,107,1.726,141,1.538,150,0.649,151,1.126,175,2.672,190,2.008,348,0.298,412,2.194,418,0.006,419,0.006,420,4.565,423,4.439,424,4.161,425,4.634,426,3.152,427,4.393,428,3.977,429,4.345,430,4.634,431,4.161,432,4.161,433,4.634,434,4.345,435,3.83,436,3.996,437,3.353,438,3.609,439,3.576,440,3.693,441,3.846,447,2.721,450,2.777,456,2.571,458,3.42,459,3.25,464,3.553,470,4.622,597,2.194,598,2.777,599,2.777,600,2.667,601,4.345,602,4.345,603,2.777,604,2.39,605,2.9,606,2.567,617,3.818,618,3.184,622,3.297,1167,2.39,1264,5.167,1388,3.079,1390,2.169,1431,4.438,1511,5.167,1512,4.812,1513,4.812,1514,4.812,1515,6.411,1516,5.167,1517,4.119,1518,4.812,1519,7.689,1520,4.812,1521,4.798,1522,4.812,1523,4.812,1524,4.503,1525,5.167,1526,4.812,1527,7.689,1528,7.689,1529,4.812,1530,5.754,1531,4.812,1532,5.661,1533,6.411,1534,4.812,1535,4.812,1536,4.812,1537,5.661,1538,6.411,1539,8.647,1540,7.21,1541,6.411,1542,8.54,1543,6.411,1544,4.812,1545,4.812,1546,6.411,1547,3.7,1548,4.812,1549,4.812,1550,4.798,1551,6.411,1552,4.812,1553,4.812,1554,4.249,1555,4.812,1556,6.411,1557,6.411,1558,4.798,1559,3.601,1560,8.54,1561,4.812,1562,4.812,1563,8.237,1564,8.237,1565,8.237,1566,8.237,1567,8.237,1568,8.237,1569,4.812,1570,4.812,1571,4.812,1572,4.812,1573,4.812,1574,4.812,1575,4.812,1576,4.249,1577,4.812,1578,4.812,1579,4.812,1580,4.812,1581,4.249,1582,6.411,1583,4.812,1584,4.812,1585,4.812,1586,4.249,1587,4.812,1588,4.249,1589,4.812,1590,4.812,1591,4.812,1592,4.249,1593,4.812,1594,4.249,1595,4.812,1596,6.411,1597,4.812,1598,4.812,1599,4.812,1600,4.812,1601,4.812,1602,6.411,1603,4.812,1604,6.411,1605,4.812,1606,4.812,1607,4.812,1608,4.812,1609,4.812,1610,4.249]],["title/classes/ODataBatchRequest.html",[0,0.346,1611,3.894]],["body/classes/ODataBatchRequest.html",[0,0.413,2,0.158,3,0.062,4,0.062,5,0.062,6,0.107,10,0.098,11,0.709,12,0.907,13,1.895,17,1.664,19,0.938,20,0.15,22,1.919,25,0.229,26,0.28,28,0.185,29,0.009,30,0.149,31,0.11,32,0.185,33,0.62,35,0.917,37,1.384,40,1.67,48,0.479,52,0.415,74,0.079,82,2.183,83,1.357,84,0.36,85,1.109,88,0.992,92,1.046,96,0.86,101,1.919,117,1.374,119,1.996,141,1.122,150,0.835,151,2.09,164,1.704,190,1.318,284,1.553,323,2.553,348,0.218,393,1.754,407,0.578,418,0.005,419,0.005,423,2.914,428,4.323,432,4.345,436,2.914,438,1.631,439,3.16,442,3.396,443,1.683,453,1.046,454,1.721,455,1.631,457,1.738,458,4.502,491,3.034,569,1.93,595,2.804,597,2.118,617,3.805,618,4.146,620,3.872,632,1.23,634,1.798,640,3.587,672,4,674,2.525,678,3.573,682,1.861,688,2.708,700,2.285,711,1.683,723,2.704,737,1.683,739,2.525,786,3.692,796,4.111,848,1.683,1166,4.989,1167,1.798,1296,2.914,1336,5.085,1411,1.238,1436,3.849,1511,4.989,1517,1.861,1521,3.934,1537,3.196,1547,4.917,1550,2.708,1611,6.859,1612,3.619,1613,5.467,1614,5.257,1615,5.257,1616,6.191,1617,3.619,1618,4.484,1619,5.257,1620,3.619,1621,3.619,1622,5.257,1623,7.769,1624,3.619,1625,5.257,1626,7.769,1627,3.619,1628,3.619,1629,3.619,1630,3.619,1631,3.619,1632,3.619,1633,6.067,1634,3.196,1635,2.542,1636,3.934,1637,3.168,1638,5.257,1639,4.642,1640,6.191,1641,3.619,1642,5.257,1643,3.619,1644,3.619,1645,4.989,1646,5.257,1647,5.257,1648,5.257,1649,3.619,1650,3.619,1651,6.191,1652,3.619,1653,3.619,1654,3.619,1655,3.196,1656,3.619,1657,3.692,1658,3.934,1659,2.525,1660,4.349,1661,6.795,1662,5.401,1663,5.257,1664,7.217,1665,3.922,1666,5.257,1667,3.196,1668,3.619,1669,2.542,1670,3.619,1671,4.537,1672,8.113,1673,5.257,1674,5.257,1675,3.196,1676,2.542,1677,5.257,1678,6.795,1679,5.257,1680,6.191,1681,3.619,1682,5.257,1683,3.619,1684,3.619,1685,3.619,1686,3.619,1687,3.619,1688,3.619,1689,3.619,1690,3.619,1691,3.619,1692,3.619,1693,3.619,1694,3.619,1695,3.619,1696,3.619,1697,5.257,1698,3.619,1699,3.196,1700,3.619,1701,4.989,1702,3.619,1703,3.619,1704,6.261,1705,3.619,1706,3.619,1707,3.619,1708,8.113,1709,3.196,1710,3.491,1711,3.619,1712,3.619,1713,3.619,1714,3.619,1715,6.795,1716,3.619,1717,6.191,1718,6.191,1719,3.319,1720,3.196,1721,4.633,1722,3.619,1723,3.619,1724,3.619,1725,4.642,1726,3.619,1727,3.619,1728,5.467,1729,3.619,1730,3.619,1731,3.619,1732,3.619,1733,6.191,1734,5.634,1735,6.795,1736,3.619,1737,5.257,1738,2.804,1739,3.619,1740,3.619,1741,2.708,1742,3.619,1743,3.619,1744,3.619,1745,3.619,1746,3.619,1747,3.619,1748,5.257,1749,4.642,1750,3.619,1751,3.619,1752,6.795,1753,3.934,1754,4.642,1755,4.642,1756,4.642,1757,5.257,1758,3.619,1759,3.196,1760,6.191,1761,5.257,1762,5.257,1763,5.257,1764,5.257,1765,3.619,1766,3.619,1767,5.257,1768,4.642,1769,3.619,1770,3.196,1771,3.619,1772,3.619,1773,3.619,1774,3.619,1775,5.257,1776,8.113,1777,5.257,1778,6.795,1779,7.217,1780,3.619,1781,6.191,1782,6.795,1783,5.257,1784,3.619,1785,3.619,1786,3.619,1787,3.619,1788,3.619,1789,3.619,1790,3.619,1791,3.619,1792,3.619,1793,3.619,1794,3.619,1795,3.619,1796,3.619,1797,3.196,1798,3.619,1799,3.619,1800,3.619,1801,3.619,1802,3.619,1803,6.191,1804,3.619,1805,3.619,1806,3.619,1807,3.619,1808,3.619,1809,5.257,1810,8.349,1811,6.191,1812,3.619,1813,3.619,1814,3.619,1815,6.191,1816,5.085,1817,3.934,1818,6.795,1819,5.257,1820,3.619,1821,3.619,1822,3.619,1823,3.619,1824,3.619,1825,3.619]],["title/classes/ODataCache.html",[0,0.346,1826,2.929]],["body/classes/ODataCache.html",[0,0.294,2,0.164,3,0.064,4,0.064,5,0.064,6,0.115,8,1.292,10,0.049,11,0.728,19,1.048,20,0.223,25,0.235,26,0.304,28,0.226,29,0.009,30,0.175,31,0.118,32,0.222,33,0.746,35,1.051,37,1.692,39,1.206,48,0.408,52,0.431,74,0.081,79,0.878,83,1.225,84,0.433,85,1.117,87,2.142,88,0.787,92,1.653,96,0.838,101,1.673,107,0.898,110,2.041,141,1.348,150,1.059,164,1.033,348,0.223,418,0.005,419,0.007,442,3.846,443,1.745,447,3.861,448,1.864,449,3.686,454,1.743,455,3.689,457,1.802,505,2.879,549,2.494,596,3.737,597,3.037,617,3.677,630,4.638,632,1.713,700,4.622,713,1.93,1167,1.864,1171,5.732,1300,3.407,1398,3.315,1411,2.364,1436,3.371,1517,2.775,1524,2.636,1525,6.477,1547,4.795,1618,5.101,1659,3.319,1660,5.007,1665,2.166,1671,5.404,1701,4.349,1704,5.093,1710,2.492,1719,5.245,1738,2.002,1826,3.584,1827,3.314,1828,5.516,1829,6.279,1830,4.729,1831,4.349,1832,4.853,1833,5.171,1834,4.349,1835,4.729,1836,4.729,1837,4.349,1838,4.349,1839,4.349,1840,6.257,1841,5.397,1842,3.753,1843,3.024,1844,3.753,1845,6.36,1846,6.896,1847,5.062,1848,4.038,1849,3.753,1850,3.753,1851,4.362,1852,3.024,1853,3.753,1854,2.879,1855,3.79,1856,3.753,1857,4.038,1858,5.878,1859,3.79,1860,3.753,1861,3.024,1862,3.753,1863,3.024,1864,3.753,1865,3.024,1866,3.753,1867,5.142,1868,2.808,1869,3.024,1870,4.038,1871,3.753,1872,3.115,1873,3.024,1874,3.753,1875,3.79,1876,3.753,1877,4.038,1878,3.753,1879,6.125,1880,4.038,1881,3.753,1882,4.765,1883,3.314,1884,3.314,1885,2.636,1886,3.314,1887,4.765,1888,2.262,1889,3.314,1890,4.349,1891,4.765,1892,5.58,1893,4.765,1894,4.038,1895,3.314,1896,3.314,1897,3.314,1898,2.636,1899,3.024,1900,3.024,1901,3.024,1902,3.314,1903,4.765,1904,3.314,1905,3.314,1906,3.314,1907,3.314,1908,3.314,1909,3.314,1910,3.314,1911,3.314,1912,4.765,1913,3.314,1914,4.765,1915,3.314,1916,4.765,1917,3.314,1918,3.314,1919,3.314,1920,3.314,1921,3.314,1922,3.024,1923,3.314,1924,3.314,1925,3.314,1926,3.314,1927,3.314,1928,3.314,1929,3.314,1930,3.314,1931,3.314,1932,3.314,1933,3.314,1934,6.102,1935,3.314,1936,4.765,1937,3.314,1938,3.314,1939,3.314,1940,3.314,1941,3.314,1942,3.314,1943,3.314,1944,3.024,1945,3.314,1946,3.314,1947,3.314]],["title/interfaces/ODataCacheEntry.html",[79,1.032,1847,2.929]],["body/interfaces/ODataCacheEntry.html",[0,0.354,3,0.077,4,0.077,5,0.077,6,0.059,8,1.081,10,0.059,19,1.031,20,0.187,25,0.234,29,0.009,30,0.166,31,0.097,35,0.954,39,1.148,48,0.437,52,0.518,74,0.092,79,1.056,83,1.204,84,0.309,85,1.153,87,1.904,88,0.87,92,1.675,96,0.856,101,1.904,107,1.081,110,2.213,150,1.164,164,1.242,348,0.254,418,0.006,419,0.007,421,2.322,442,3.616,443,2.099,447,3.848,448,2.242,449,3.996,454,1.404,455,3.532,457,2.168,505,3.723,549,2.217,596,3.484,597,3.102,617,3.426,630,4.662,632,1.056,700,3.878,1167,2.242,1171,5.801,1300,2.85,1398,1.862,1411,2.388,1436,3.276,1517,2.322,1525,6.784,1547,4.324,1618,4.666,1659,2.95,1660,4.723,1665,2.606,1671,5.326,1701,4.95,1704,5.626,1710,2.998,1719,4.73,1738,2.408,1826,2.998,1827,3.987,1828,4.903,1829,6.43,1830,3.379,1832,3.171,1833,4.596,1835,3.379,1836,3.379,1840,6.274,1845,6.05,1846,6.899,1847,4.976,1848,3.379,1851,3.878,1854,2.408,1855,3.171,1857,3.379,1858,5.607,1859,3.171,1867,4.314,1870,3.379,1872,2.606,1875,3.171,1877,3.379,1879,5.865,1880,3.379,1882,5.423,1883,3.987,1884,3.987,1885,3.171,1886,3.987,1887,5.423,1888,2.721,1889,5.423,1890,5.626,1891,6.164,1892,7.139,1893,5.423,1894,4.596,1895,3.987,1896,3.987,1897,3.987,1898,3.171,1899,3.639,1900,3.639,1901,3.639,1902,3.987,1903,5.423,1904,3.987,1905,3.987,1906,3.987,1907,3.987,1908,3.987,1909,3.987,1910,3.987,1911,3.987,1912,5.423,1913,3.987,1914,5.423,1915,3.987,1916,5.423,1917,3.987,1918,3.987,1919,3.987,1920,3.987,1921,3.987,1922,3.639,1923,3.987,1924,3.987,1925,3.987,1926,3.987,1927,3.987,1928,3.987,1929,3.987,1930,3.987,1931,3.987,1932,3.987,1933,3.987,1934,6.616,1935,3.987,1936,5.423,1937,3.987,1938,3.987,1939,3.987,1940,3.987,1941,3.987,1942,3.987,1943,3.987,1944,3.639,1945,3.987,1946,3.987,1947,3.987]],["title/classes/ODataCallable.html",[0,0.346,1948,3.554]],["body/classes/ODataCallable.html",[0,0.368,2,0.205,3,0.08,4,0.08,5,0.08,6,0.115,10,0.061,11,0.85,19,0.585,20,0.194,25,0.233,26,0.316,28,0.228,29,0.009,30,0.172,31,0.122,32,0.233,33,1.091,35,1.086,37,1.55,39,0.895,45,1.544,48,0.425,50,2.603,51,1.627,52,0.539,74,0.071,83,1.479,84,0.596,88,0.585,96,0.788,107,1.822,128,0.941,141,1.001,167,2.359,178,2.052,348,0.261,407,0.589,418,0.006,419,0.006,438,3.877,451,2.254,597,2.798,604,3.131,615,3.539,619,3.802,621,3.915,623,2.931,632,1.475,642,2.708,646,2.671,651,2.212,657,4.06,677,3.311,678,4.109,679,4.29,715,2.761,725,1.165,866,3.231,914,5.64,948,3.546,1279,3.296,1384,3.536,1386,3.638,1387,3.638,1388,3.028,1390,2.841,1391,3.363,1392,2.6,1393,3.915,1395,3.78,1396,3.494,1397,3.494,1398,3.445,1399,2.6,1400,2.6,1402,3.131,1403,2.115,1404,2.6,1854,4.711,1872,4.109,1948,5.08,1949,4.692,1950,5.934,1951,4.109,1952,4.428,1953,4.428,1954,3.98,1955,4.29,1956,5.013,1957,6.304,1958,4.692,1959,4.692,1960,4.692,1961,5.696,1962,3.511,1963,3.511,1964,2.828,1965,4.692,1966,5.902,1967,3.116,1968,4.692,1969,3.638,1970,4.692,1971,5.566,1972,5.566,1973,5.566,1974,4.692,1975,5.566,1976,5.566,1977,4.692,1978,3.638,1979,4.692,1980,5.566,1981,4.718,1982,3.296,1983,3.511,1984,3.296,1985,3.296,1986,3.511,1987,3.296,1988,2.503,1989,3.511,1990,2.708,1991,3.511,1992,2.33,1993,2.962,1994,2.962,1995,2.6,1996,2.962,1997,2.828,1998,2.962,1999,2.962,2000,2.962,2001,3.296,2002,3.511,2003,3.116,2004,3.296,2005,2.828,2006,2.828,2007,2.6,2008,7.119,2009,4.692,2010,6.304,2011,4.692,2012,4.692,2013,4.692,2014,3.116,2015,4.143,2016,4.143,2017,4.143,2018,4.692,2019,4.692,2020,4.109,2021,4.109,2022,4.143,2023,3.116,2024,3.116,2025,3.116,2026,4.692]],["title/classes/ODataCallableParser.html",[0,0.346,1961,3.3]],["body/classes/ODataCallableParser.html",[0,0.505,2,0.211,3,0.083,4,0.083,5,0.083,6,0.117,8,1.54,10,0.063,11,0.867,19,0.801,20,0.2,24,1.838,25,0.237,26,0.31,28,0.226,29,0.009,30,0.172,31,0.12,32,0.228,33,0.571,35,0.973,37,1.472,39,0.913,45,1.725,48,0.43,51,1.73,52,0.555,74,0.097,83,1.48,84,0.528,85,1.106,87,1.499,88,0.96,96,0.871,108,1.131,110,2.276,164,1.331,167,2.222,178,2.353,190,1.932,342,2.258,348,0.266,384,1.836,393,2.146,418,0.006,419,0.006,454,1.105,456,2.579,565,2.991,615,3.361,619,3.361,621,3.962,623,2.249,625,1.613,628,4.109,632,1.131,640,2.179,650,3.375,657,4.109,675,3.826,676,2.249,725,1.179,726,3.396,821,1.655,866,2.73,914,5.116,1167,2.402,1188,3.396,1296,4.006,1388,3.089,1390,2.179,1411,1.655,1665,3.712,1738,2.579,1951,4.447,1954,4.061,1961,4.814,1967,3.211,1969,3.712,1978,2.791,1988,3.431,2014,5.748,2020,4.63,2021,4.63,2023,3.211,2024,3.211,2025,3.211,2027,4.27,2028,6.432,2029,4.836,2030,4.836,2031,4.836,2032,5.825,2033,4.836,2034,4.836,2035,4.836,2036,4.836,2037,4.836,2038,4.836,2039,5.68,2040,4.836,2041,4.836,2042,5.68,2043,4.836,2044,6.803,2045,4.356,2046,5.409,2047,4.27,2048,3.619,2049,4.27,2050,3.619,2051,4.27,2052,5.59,2053,4.061,2054,4.518,2055,4.27,2056,4.27,2057,3.619,2058,3.619,2059,3.619,2060,3.619,2061,3.619,2062,4.814,2063,3.619,2064,4.814,2065,3.619,2066,3.619,2067,3.396,2068,3.619,2069,3.053,2070,3.053,2071,5.68,2072,4.27,2073,6.382,2074,4.27,2075,4.27,2076,3.211,2077,3.211,2078,3.053,2079,6.803,2080,7.433,2081,5.68,2082,5.68,2083,4.27,2084,4.27,2085,4.27,2086,4.27,2087,4.27,2088,4.27]],["title/classes/ODataConfigAsyncLoader.html",[0,0.346,2089,3.3]],["body/classes/ODataConfigAsyncLoader.html",[0,0.653,2,0.287,3,0.113,4,0.113,5,0.113,6,0.108,8,1.993,10,0.085,11,1.053,20,0.323,26,0.269,28,0.169,29,0.009,30,0.126,31,0.085,32,0.169,33,0.921,35,0.776,48,0.464,52,0.755,74,0.125,85,0.864,96,0.859,418,0.008,419,0.008,442,4.074,443,3.057,454,1.503,549,2.479,635,4.326,636,4.367,1172,5.184,1411,2.25,1885,4.618,2053,4.151,2089,5.841,2090,5.299,2091,5.719,2092,7.188,2093,6.575,2094,6.575,2095,6.575,2096,4.92,2097,4.366,2098,4.366,2099,5.299,2100,5.299,2101,5.299,2102,5.299,2103,5.299,2104,5.299,2105,5.299,2106,5.299,2107,5.299,2108,5.299,2109,5.299]],["title/classes/ODataConfigLoader.html",[0,0.346,2091,2.929]],["body/classes/ODataConfigLoader.html",[0,0.658,2,0.292,3,0.114,4,0.114,5,0.114,6,0.102,8,1.886,10,0.087,11,1.062,20,0.276,26,0.23,29,0.009,33,0.93,35,0.788,48,0.467,52,0.767,74,0.126,85,0.877,96,0.862,418,0.008,419,0.008,442,4.004,443,3.106,454,1.527,549,2.749,635,3.702,636,4.386,1172,5.232,1411,2.285,1885,4.691,2053,4.217,2089,4.998,2090,5.383,2091,5.748,2092,7.213,2096,4.998,2097,4.435,2098,4.435,2099,5.383,2100,5.383,2101,5.383,2102,5.383,2103,5.383,2104,5.383,2105,5.383,2106,5.383,2107,5.383,2108,5.383,2109,5.383,2110,6.679]],["title/classes/ODataConfigSyncLoader.html",[0,0.346,2097,2.929]],["body/classes/ODataConfigSyncLoader.html",[0,0.654,2,0.288,3,0.113,4,0.113,5,0.113,6,0.108,8,1.995,10,0.086,11,1.054,20,0.324,26,0.27,28,0.169,29,0.009,30,0.127,31,0.086,32,0.169,33,0.923,35,0.778,48,0.465,52,0.757,74,0.125,85,0.866,96,0.86,418,0.008,419,0.008,442,3.996,443,3.066,454,1.508,549,2.483,635,3.655,636,4.539,1172,5.193,1411,2.256,1885,4.632,2053,4.163,2089,4.935,2090,5.314,2091,5.725,2092,7.192,2096,4.935,2097,5.193,2098,4.379,2099,6.302,2100,5.314,2101,5.314,2102,5.314,2103,5.314,2104,5.314,2105,5.314,2106,5.314,2107,5.314,2108,5.314,2109,5.314,2111,6.594,2112,6.594,2113,6.594]],["title/classes/ODataEntitiesAnnotations.html",[0,0.346,1490,2.929]],["body/classes/ODataEntitiesAnnotations.html",[0,0.6,2,0.208,3,0.081,4,0.081,5,0.081,6,0.115,10,0.062,11,0.857,12,2.101,18,1.969,19,1.022,20,0.196,22,1.471,25,0.228,26,0.313,28,0.205,29,0.009,30,0.174,31,0.118,32,0.215,35,0.989,37,1.707,39,1.017,48,0.354,52,0.545,63,1.881,74,0.115,85,0.624,88,1.129,96,0.899,128,0.949,151,1.675,174,1.748,348,0.296,407,0.714,412,2.617,418,0.006,419,0.006,426,2.076,439,2.208,440,3.673,453,1.425,454,1.823,459,3.447,460,1.802,462,1.402,467,3.33,468,3.33,469,3.557,543,3.052,545,3.941,549,2.429,565,3.33,632,1.111,651,1.666,676,3.33,715,2.606,890,3.447,1215,4.316,1354,5.03,1403,3.776,1409,4.521,1411,2.617,1429,6.286,1430,3.553,1431,4.414,1432,4.755,1433,3.521,1435,5.359,1436,2.532,1437,4.22,1440,3.553,1442,4.521,1444,5.966,1446,5.966,1448,4.755,1454,3.553,1455,3.553,1456,3.553,1457,3.553,1458,3.553,1459,5.449,1460,6.14,1461,5.359,1462,5.359,1463,4.756,1464,5.449,1465,5.359,1466,5.359,1467,3.553,1468,5.786,1469,3.553,1470,3.553,1471,3.553,1472,3.553,1473,3.553,1474,3.553,1475,3.553,1476,5.723,1477,4.755,1478,3.553,1479,3.553,1480,3.553,1481,3.553,1482,3.553,1483,3.553,1484,3.553,1485,3.553,1486,3.553,1487,5.359,1488,3.553,1489,4.755,1490,5.912,1491,3.553,1492,3.553,1493,4.755,1494,5.723,1495,6.14,1496,4.755,1497,5.359,1498,4.755,1499,3.553,1500,3.553,1501,5.359,1502,3.553,1503,5.359,1504,3.553,1505,5.359,1506,3.553,1507,4.755,1508,3.553,1509,3.553,1510,3.553,2114,4.747,2115,3.826,2116,4.747,2117,4.747,2118,4.747,2119,4.747,2120,4.747,2121,3.826,2122,3.826,2123,4.192,2124,4.747,2125,4.747,2126,4.747,2127,4.747,2128,4.747,2129,4.747,2130,4.747,2131,4.747,2132,4.747,2133,4.747,2134,4.747,2135,4.747,2136,4.747,2137,4.192,2138,4.747]],["title/classes/ODataEntityAnnotations.html",[0,0.346,1468,2.929]],["body/classes/ODataEntityAnnotations.html",[0,0.589,2,0.198,3,0.078,4,0.078,5,0.078,6,0.117,10,0.059,11,0.83,12,2.075,18,1.908,19,1.008,20,0.187,22,1.404,25,0.227,26,0.316,28,0.224,29,0.009,30,0.176,31,0.12,32,0.225,35,1.008,37,1.686,39,0.993,48,0.343,52,0.52,63,1.189,74,0.113,85,0.595,88,1.122,96,0.896,128,0.919,151,1.636,174,1.694,348,0.325,407,0.7,412,2.567,418,0.006,419,0.006,426,3.057,439,3.251,440,3.603,453,1.391,454,1.892,459,3.381,460,1.719,462,2.445,467,2.106,468,2.106,469,2.249,543,3.603,545,3.887,549,2.382,565,3.648,632,1.059,651,1.589,676,3.251,715,2.57,754,3.596,890,2.041,1215,4.214,1354,4.911,1403,3.731,1409,4.414,1411,2.684,1429,6.245,1430,3.389,1431,4.33,1432,4.606,1433,3.411,1435,5.232,1436,2.416,1437,4.087,1440,3.389,1442,4.414,1444,5.871,1446,5.871,1448,4.606,1454,3.389,1455,3.389,1456,3.389,1457,3.389,1458,3.389,1459,5.374,1460,6.056,1461,5.232,1462,5.232,1463,4.643,1464,5.374,1465,5.232,1466,5.232,1467,3.389,1468,5.96,1469,3.389,1470,3.389,1471,3.389,1472,5.232,1473,3.389,1474,5.232,1475,3.389,1476,5.614,1477,4.606,1478,5.232,1479,3.389,1480,5.232,1481,3.389,1482,5.232,1483,3.389,1484,5.232,1485,3.389,1486,5.232,1487,5.232,1488,3.389,1489,5.871,1490,5.735,1491,3.389,1492,3.389,1493,4.606,1494,5.614,1495,6.056,1496,4.606,1497,5.232,1498,4.606,1499,3.389,1500,3.389,1501,3.389,1502,3.389,1503,3.389,1504,3.389,1505,5.232,1506,3.389,1507,4.606,1508,3.389,1509,3.389,1510,3.389,2115,3.65,2121,3.65,2122,3.65,2123,3.999,2137,3.999,2139,4.529,2140,4.529,2141,4.529,2142,4.529,2143,4.529,2144,4.529,2145,4.529,2146,4.529,2147,4.529,2148,4.529,2149,4.529,2150,4.529,2151,4.529,2152,4.529,2153,4.529,2154,4.529,2155,4.529,2156,4.529,2157,4.529,2158,4.529,2159,4.529,2160,4.529,2161,4.529,2162,4.529,2163,4.529,2164,4.529,2165,4.529,2166,4.529,2167,4.529]],["title/classes/ODataEntityContainer.html",[0,0.346,2168,3.554]],["body/classes/ODataEntityContainer.html",[0,0.445,2,0.248,3,0.097,4,0.097,5,0.097,6,0.101,10,0.074,11,0.961,19,0.706,20,0.235,25,0.233,26,0.313,28,0.229,29,0.009,30,0.173,31,0.122,32,0.227,33,0.92,35,1.071,37,1.452,39,1.012,48,0.456,50,2.717,52,0.651,74,0.085,84,0.59,88,0.706,96,0.546,107,1.959,128,1.064,141,1.209,348,0.295,407,0.666,418,0.007,419,0.007,451,2.723,604,3.541,632,1.326,646,2.872,651,2.502,659,4.723,660,4.323,715,2.852,725,0.868,866,3.474,890,2.555,891,5.006,903,6.295,905,3.765,948,3.709,1279,3.982,1384,3.874,1386,4.115,1387,4.115,1388,3.424,1390,3.213,1391,3.803,1392,3.142,1393,4.209,1395,4.064,1396,3.951,1397,3.951,1398,3.375,1399,3.142,1400,3.142,1402,3.541,1403,2.555,1404,3.142,1411,1.94,1854,4.591,1872,4.501,1950,6.076,1952,5.007,1953,5.007,1954,4.501,1955,4.7,1956,5.324,1962,4.242,1963,4.242,1964,3.416,1966,5.179,1982,3.982,1983,4.242,1984,3.982,1985,3.982,1986,4.242,1987,3.982,1988,3.024,1989,4.242,1990,3.272,1991,4.242,1992,2.816,1993,3.579,1994,3.579,1995,3.142,1996,3.579,1997,3.416,1998,3.579,1999,3.579,2000,3.579,2001,3.982,2002,4.242,2003,3.765,2004,3.982,2005,3.416,2006,3.416,2007,3.142,2168,5.746,2169,6.887,2170,5.836,2171,5.669,2172,5.669,2173,5.669]],["title/classes/ODataEntityService.html",[0,0.346,2174,3.554]],["body/classes/ODataEntityService.html",[0,0.484,2,0.269,3,0.106,4,0.106,5,0.106,6,0.109,10,0.08,11,1.012,18,2.327,19,0.935,26,0.303,28,0.232,29,0.009,30,0.166,31,0.119,32,0.222,33,0.727,35,1.019,48,0.452,50,2.271,74,0.093,83,1.412,92,1.226,96,0.594,151,1.971,174,2.418,190,1.882,407,0.701,418,0.007,419,0.007,442,3.54,453,1.748,549,2.825,550,2.404,632,1.756,675,4.364,715,2.571,725,1.29,866,3.187,890,3.384,1658,6.059,1659,4.149,1665,4.333,1753,6.575,1888,3.714,1898,4.328,2174,6.05,2175,6.163,2176,7.758,2177,6.05,2178,6.629,2179,6.629,2180,6.629,2181,8.097,2182,6.163,2183,7.441,2184,6.163,2185,7.508,2186,5.919,2187,6.163,2188,5.442,2189,6.629,2190,6.05,2191,5.442,2192,5.442,2193,6.629,2194,6.05,2195,5.442,2196,5.442,2197,6.629,2198,6.05,2199,5.442,2200,6.163,2201,6.163,2202,5.442,2203,5.442,2204,6.163,2205,5.442,2206,6.163]],["title/classes/ODataEntitySet.html",[0,0.346,2170,3.3]],["body/classes/ODataEntitySet.html",[0,0.444,2,0.247,3,0.097,4,0.097,5,0.097,6,0.106,10,0.073,11,0.96,19,0.704,20,0.234,25,0.235,26,0.314,28,0.229,29,0.009,30,0.173,31,0.122,32,0.227,33,0.919,35,1.071,37,1.587,39,1.01,48,0.435,50,2.696,52,0.649,74,0.085,84,0.589,88,0.704,96,0.545,107,1.957,128,1.063,141,1.206,190,1.418,348,0.295,407,0.665,418,0.007,419,0.007,451,2.716,604,3.535,632,1.323,646,2.869,651,2.498,661,4.719,680,4.317,681,4.155,715,2.851,725,0.865,866,3.471,906,4.993,910,4.993,913,6.285,948,3.707,1279,3.972,1384,3.869,1386,4.108,1387,4.108,1388,3.419,1390,2.548,1391,3.797,1392,3.134,1393,4.205,1395,4.061,1396,3.945,1397,3.945,1398,3.372,1399,3.134,1400,3.134,1402,3.535,1403,2.548,1404,3.134,1854,4.588,1872,4.496,1950,6.075,1952,4.999,1953,4.999,1954,4.494,1955,4.695,1956,5.32,1962,4.232,1963,4.232,1964,3.408,1966,5.173,1982,3.972,1983,4.232,1984,3.972,1985,3.972,1986,4.232,1987,3.972,1988,3.016,1989,4.232,1990,3.264,1991,4.232,1992,2.808,1993,3.57,1994,3.57,1995,3.134,1996,3.57,1997,3.408,1998,3.57,1999,3.57,2000,3.57,2001,3.972,2002,4.232,2003,3.755,2004,3.972,2005,3.408,2006,3.408,2007,3.134,2169,7.219,2170,5.327,2207,5.655,2208,5.655,2209,5.655,2210,5.655]],["title/classes/ODataEntityTypeKey.html",[0,0.346,2211,3.554]],["body/classes/ODataEntityTypeKey.html",[0,0.462,2,0.119,3,0.047,4,0.047,5,0.047,6,0.076,8,1.017,10,0.035,16,1.505,17,0.733,19,1.12,20,0.264,22,2.377,24,1.638,25,0.233,26,0.18,28,0.07,29,0.009,30,0.169,31,0.114,32,0.134,33,1.029,35,0.833,37,0.865,39,1.155,40,1.657,45,1.598,48,0.394,49,3.132,50,2.51,51,1.655,52,0.599,53,0.888,54,0.7,65,1.169,67,1.511,73,0.768,74,0.096,83,1.428,84,0.59,85,1.142,87,1.317,88,0.91,92,1.27,96,0.877,101,2.188,102,2.121,107,2.042,108,2.041,110,1.997,116,1.703,117,1.035,119,3.175,141,0.582,150,0.794,151,1.493,158,2.592,160,2.63,164,1.436,167,1.225,175,2.436,178,2.201,338,1.093,342,1.831,348,0.244,384,1.613,393,2.356,407,0.397,418,0.004,419,0.004,426,1.192,439,1.268,454,1.546,456,1.703,462,1.74,472,2.354,503,2.266,504,1.454,505,2.266,518,1.454,526,0.933,527,0.933,543,2.506,550,1.064,565,1.268,569,1.454,594,1.402,595,1.454,596,1.268,597,2.567,613,3.264,614,3.264,615,1.975,619,1.975,623,1.975,624,2.185,625,0.91,626,0.933,627,1.574,628,2.783,634,2.925,640,1.914,646,1.831,650,2.092,655,2.354,667,3.69,668,1.574,669,2.739,670,1.574,672,1.511,674,2.829,675,3.358,676,3.488,682,3.029,712,1.268,713,1.402,726,2.983,736,2.266,754,3.755,777,2.56,782,2.56,866,3.184,867,1.354,948,1.803,1167,1.354,1188,1.915,1215,1.643,1296,3.538,1298,2.198,1384,2.591,1390,2.877,1393,1.402,1395,2.11,1398,1.752,1402,2.11,1403,2.655,1411,1.785,1431,1.574,1433,2.354,1442,2.682,1463,1.811,1558,2.041,1559,2.041,1669,1.915,1676,1.915,1734,3.179,1738,2.783,1854,1.454,1951,2.452,1955,1.643,1969,3.011,1978,3.011,1988,1.454,1990,1.574,1992,3.358,1993,1.722,1994,1.722,1995,2.892,1996,1.722,1997,1.643,1998,1.722,1999,1.722,2000,1.722,2007,1.511,2014,5.404,2020,3.684,2021,3.684,2023,1.811,2024,1.811,2025,1.811,2045,3.55,2046,6.382,2048,3.904,2050,3.904,2052,4.982,2053,3.294,2054,2.983,2057,2.041,2058,3.179,2059,2.041,2060,2.041,2061,3.179,2062,3.179,2063,2.041,2064,3.904,2065,2.041,2066,2.041,2067,1.915,2068,4.408,2069,1.722,2070,1.722,2076,2.821,2077,1.811,2078,1.722,2211,4.747,2212,4.747,2213,4.248,2214,2.727,2215,5.201,2216,2.408,2217,1.722,2218,2.041,2219,2.408,2220,3.423,2221,3.423,2222,3.423,2223,4.747,2224,3.423,2225,3.423,2226,2.408,2227,2.408,2228,2.041,2229,3.751,2230,2.408,2231,2.408,2232,2.408,2233,2.408,2234,5.637,2235,2.408,2236,5.637,2237,2.408,2238,2.408,2239,2.408,2240,3.751,2241,2.408,2242,2.408,2243,2.408,2244,2.408,2245,2.408,2246,3.179,2247,3.665,2248,6.447,2249,2.408,2250,2.408,2251,2.408,2252,2.408,2253,2.408,2254,2.408,2255,2.408,2256,3.751,2257,3.751,2258,3.751,2259,3.751,2260,3.423,2261,2.408,2262,3.751,2263,2.408,2264,2.408,2265,3.751,2266,2.408,2267,2.408,2268,2.408,2269,3.751,2270,2.408,2271,3.751,2272,2.408,2273,7.102,2274,6.234,2275,6.482,2276,2.408,2277,2.408,2278,5.145,2279,5.145,2280,2.198,2281,4.205,2282,2.408,2283,2.408,2284,2.408,2285,2.408,2286,2.408,2287,5.201,2288,2.408,2289,2.408,2290,2.408,2291,3.751,2292,3.751,2293,2.408,2294,2.408,2295,2.408,2296,2.408,2297,2.408,2298,2.408,2299,2.408,2300,2.408,2301,2.408,2302,2.408,2303,2.408,2304,2.408,2305,2.408,2306,2.408,2307,2.408,2308,2.041,2309,2.408,2310,2.408,2311,7.642,2312,2.408,2313,2.408,2314,2.408,2315,2.408,2316,5.97,2317,2.408,2318,2.041,2319,3.751,2320,2.408,2321,3.751,2322,2.408,2323,2.408,2324,4.607,2325,2.408,2326,2.408,2327,2.408,2328,2.408,2329,2.408,2330,2.408,2331,2.408,2332,2.408,2333,2.408,2334,1.915,2335,2.198,2336,2.408,2337,3.751,2338,5.637,2339,2.408,2340,2.408,2341,2.408,2342,2.408,2343,2.408,2344,2.408,2345,2.408,2346,2.408,2347,2.408,2348,2.408,2349,2.408,2350,2.408,2351,6.234,2352,7.325,2353,6.019,2354,3.751,2355,3.751,2356,2.408,2357,5.201,2358,2.408,2359,2.408,2360,2.408,2361,2.408,2362,2.408,2363,2.408,2364,5.97,2365,2.408,2366,2.041,2367,2.408,2368,2.408,2369,2.408,2370,2.408,2371,2.408,2372,2.408,2373,2.408,2374,3.751,2375,1.915,2376,2.041,2377,2.041,2378,2.041,2379,2.408,2380,4.205,2381,5.201,2382,2.408,2383,2.408,2384,2.408,2385,2.408,2386,2.408,2387,2.408,2388,2.408,2389,2.408,2390,3.751,2391,2.408,2392,2.408,2393,2.408,2394,2.408,2395,2.408,2396,2.408,2397,2.408,2398,2.408,2399,2.408,2400,2.408,2401,2.408,2402,2.408,2403,2.408,2404,2.408,2405,4.607,2406,3.751,2407,3.751,2408,2.408,2409,2.408,2410,2.198,2411,2.408,2412,2.408,2413,2.408,2414,2.408,2415,2.408,2416,3.751,2417,5.637,2418,2.408,2419,2.408,2420,3.751,2421,3.751,2422,2.408,2423,3.751,2424,2.408,2425,3.751,2426,3.751,2427,2.408,2428,2.408,2429,2.408,2430,4.607,2431,2.408,2432,2.408]],["title/classes/ODataEnumType.html",[0,0.346,2433,3.554]],["body/classes/ODataEnumType.html",[0,0.34,2,0.189,3,0.074,4,0.074,5,0.074,6,0.114,10,0.056,11,0.805,19,0.54,20,0.179,25,0.232,26,0.314,28,0.232,29,0.009,30,0.176,31,0.122,32,0.23,33,1.1,35,1.088,37,1.626,39,1.045,45,1.502,48,0.411,50,2.559,51,1.604,52,0.497,74,0.065,83,1.469,84,0.547,88,0.851,96,0.815,107,1.763,108,2.003,128,1.153,141,0.924,150,0.993,158,2.654,167,2.303,348,0.247,407,0.557,418,0.006,419,0.006,451,2.08,456,3.496,597,2.852,604,2.965,615,3.424,619,3.713,623,2.776,632,1.598,642,2.5,646,2.584,651,2.095,653,3.927,663,3.415,665,3.513,715,2.719,725,1.182,866,3.125,867,2.151,948,3.473,1059,5.272,1279,3.042,1384,3.393,1386,3.446,1387,3.446,1388,2.867,1390,2.691,1391,3.184,1392,2.401,1393,3.787,1395,3.965,1396,3.309,1397,3.309,1398,3.489,1399,2.401,1400,2.401,1402,2.965,1403,1.952,1404,2.401,1411,2.043,1854,4.713,1872,3.943,1950,5.867,1951,3.943,1952,4.193,1953,4.193,1954,3.769,1955,4.117,1956,4.876,1962,3.241,1963,3.241,1964,2.61,1966,4.537,1967,2.876,1969,3.446,1971,5.272,1972,5.272,1973,5.272,1975,5.272,1976,5.272,1978,3.446,1980,5.272,1981,4.468,1982,3.042,1983,3.241,1984,3.042,1985,3.042,1986,3.241,1987,3.042,1988,2.31,1989,3.241,1990,2.5,1991,3.241,1992,2.151,1993,2.734,1994,2.734,1995,2.401,1996,2.734,1997,2.61,1998,2.734,1999,2.734,2000,2.734,2001,3.042,2002,3.241,2003,2.876,2004,3.042,2005,2.61,2006,2.61,2007,2.401,2014,2.876,2015,3.825,2016,3.825,2020,3.943,2021,3.943,2022,3.825,2023,2.876,2024,2.876,2025,2.876,2045,4.437,2433,4.811,2434,8.781,2435,5.272,2436,5.272,2437,5.272,2438,4.331,2439,4.331,2440,4.331,2441,4.331,2442,5.97,2443,4.331,2444,5.97,2445,4.811,2446,3.825,2447,5.78,2448,4.811,2449,4.331,2450,5.934,2451,4.811,2452,4.811,2453,4.811,2454,4.331,2455,4.331,2456,4.811,2457,4.331,2458,3.491,2459,3.491,2460,4.331,2461,4.331,2462,4.331,2463,4.331,2464,4.331]],["title/classes/ODataEnumTypeFieldParser.html",[0,0.346,2447,3.3]],["body/classes/ODataEnumTypeFieldParser.html",[0,0.501,2,0.209,3,0.082,4,0.082,5,0.082,6,0.104,8,1.144,10,0.062,11,0.861,19,1.087,20,0.198,22,1.978,24,1.569,25,0.239,26,0.29,28,0.205,29,0.009,30,0.174,31,0.116,32,0.197,33,1.066,35,0.943,39,0.906,40,1.517,45,1.241,48,0.428,50,1.446,51,1.632,52,0.548,54,1.226,74,0.096,83,1.388,84,0.437,85,1.007,87,2.227,88,0.895,96,0.873,100,1.916,101,2.227,107,1.144,108,1.995,110,2.265,128,1.073,150,1.132,158,1.978,160,2.761,164,1.315,167,1.378,175,1.594,178,2.496,342,2.24,348,0.264,385,1.814,407,0.671,418,0.006,419,0.006,454,1.092,456,2.881,594,2.457,597,1.635,615,2.222,619,2.222,623,2.222,624,3.282,632,1.118,640,2.153,646,2.691,650,2.881,651,2.24,652,2.648,653,3.404,662,4.25,663,3.311,664,2.758,665,3.282,666,4.25,667,2.967,715,2.282,725,0.731,754,3.943,821,2.183,867,2.373,948,3.562,1296,3.537,1384,4.168,1386,3.683,1387,3.683,1388,2.295,1391,3.404,1392,2.648,1393,4.109,1395,3.568,1396,3.537,1397,3.537,1398,2.632,1399,2.648,1400,2.648,1402,3.169,1403,2.153,1404,2.648,1411,1.635,1433,2.648,1665,2.758,1738,2.549,1951,2.758,1955,3.846,1964,2.88,1969,2.758,1978,2.758,1981,4.775,1988,2.549,1990,3.683,1992,2.373,1995,2.648,2005,2.88,2006,2.88,2007,2.648,2020,3.683,2021,3.683,2045,2.88,2052,5.092,2069,3.017,2070,3.017,2076,3.173,2077,3.173,2078,3.017,2217,3.017,2218,3.576,2228,3.576,2246,3.576,2247,3.356,2308,3.576,2318,3.576,2334,3.356,2353,3.576,2366,3.576,2375,3.356,2376,3.576,2377,3.576,2378,3.576,2445,3.851,2447,5.979,2448,3.851,2450,5.143,2451,3.851,2452,3.851,2453,3.851,2456,3.851,2458,5.79,2459,3.851,2465,7.055,2466,6.381,2467,4.778,2468,4.778,2469,4.219,2470,7.055,2471,4.219,2472,4.219,2473,4.219,2474,4.219,2475,4.219,2476,4.219,2477,4.219,2478,5.635,2479,5.635,2480,4.219,2481,6.77,2482,5.635,2483,4.219,2484,4.219,2485,6.344,2486,4.219,2487,4.219,2488,4.219,2489,4.219,2490,4.219,2491,4.219,2492,4.219,2493,4.219,2494,4.219,2495,5.635,2496,4.219,2497,4.219,2498,5.635]],["title/classes/ODataEnumTypeParser.html",[0,0.346,2045,2.658]],["body/classes/ODataEnumTypeParser.html",[0,0.449,2,0.178,3,0.07,4,0.07,5,0.07,6,0.117,8,1.369,10,0.053,11,0.771,19,1.103,20,0.168,22,1.772,24,1.756,25,0.239,26,0.313,28,0.227,29,0.009,30,0.175,31,0.121,32,0.231,33,1.07,35,1.044,37,1.595,39,0.812,40,1.293,45,1.112,48,0.4,50,1.232,51,1.668,52,0.467,54,1.044,74,0.086,83,1.415,84,0.491,85,0.942,87,2.048,88,0.893,96,0.856,100,1.632,101,2.048,107,0.974,108,1.952,110,2.117,128,1.127,141,0.868,150,1.163,158,2.427,160,2.581,164,1.12,167,1.906,175,1.358,178,2.333,342,2.007,348,0.237,385,1.545,407,0.617,418,0.006,419,0.006,454,1.511,456,3.139,594,2.093,597,1.393,615,3.073,619,3.073,623,2.659,624,3.399,632,1.546,640,1.834,646,2.319,650,3.224,651,2.007,652,2.256,653,3.823,662,3.169,663,3.424,664,3.814,665,3.686,666,4.185,667,2.659,715,2.099,725,1.156,754,3.686,821,1.393,867,2.022,917,3.594,948,3.414,1004,3.28,1296,3.169,1384,3.994,1386,3.3,1387,3.3,1388,2.746,1390,1.834,1391,3.05,1392,2.256,1393,3.399,1395,3.282,1396,3.169,1397,3.169,1398,2.726,1399,2.256,1400,2.256,1402,2.84,1403,1.834,1404,2.256,1411,1.956,1433,2.256,1665,3.3,1738,2.171,1951,3.814,1954,3.609,1964,2.453,1967,2.703,1969,3.3,1978,3.3,1981,4.279,1988,3.05,1990,2.349,1992,2.022,1995,3.663,2005,2.453,2006,2.453,2007,2.256,2020,3.3,2021,3.3,2045,3.446,2052,4.76,2069,2.57,2070,2.57,2076,2.703,2077,2.703,2078,2.57,2217,2.57,2218,3.046,2228,3.046,2246,4.946,2247,2.859,2308,4.946,2318,4.946,2334,2.859,2353,3.046,2366,3.046,2375,2.859,2376,3.046,2377,3.046,2378,3.046,2435,5.048,2436,5.048,2437,5.048,2445,4.608,2446,3.594,2447,6.018,2448,4.608,2450,5.776,2451,4.608,2452,4.608,2453,4.608,2456,4.608,2458,5.326,2459,3.28,2465,7.964,2469,3.594,2470,6.667,2471,3.594,2472,3.594,2473,3.594,2474,3.594,2475,3.594,2476,5.048,2477,3.594,2478,5.836,2479,5.048,2480,3.594,2481,6.329,2482,5.048,2483,3.594,2484,3.594,2485,5.836,2486,3.594,2487,3.594,2488,3.594,2489,3.594,2490,3.594,2491,3.594,2492,3.594,2493,6.329,2494,3.594,2495,5.048,2496,3.594,2497,3.594,2498,5.048,2499,5.718,2500,4.07,2501,4.07,2502,4.07,2503,4.07,2504,4.07,2505,4.07,2506,4.07,2507,4.07,2508,4.07,2509,4.07,2510,4.07,2511,4.07,2512,4.07,2513,4.07,2514,4.07,2515,4.07]],["title/classes/ODataInMemoryCache.html",[0,0.346,2516,3.894]],["body/classes/ODataInMemoryCache.html",[0,0.389,2,0.217,3,0.085,4,0.085,5,0.085,6,0.085,10,0.064,11,0.882,19,1.008,20,0.271,25,0.23,26,0.314,28,0.233,29,0.009,30,0.176,31,0.121,32,0.231,33,0.863,35,1.067,37,1.788,39,1.22,48,0.365,74,0.075,83,1.051,84,0.448,87,2.027,92,1.301,96,0.63,141,1.561,150,0.882,348,0.271,407,0.611,418,0.006,419,0.007,442,3.839,447,3.875,454,1.779,455,3.957,596,3.618,597,2.504,617,3.839,630,4.473,632,1.82,700,4.62,713,2.55,715,2.881,737,2.305,1171,5.347,1300,3.13,1398,3.621,1411,1.696,1436,2.644,1517,2.55,1524,3.482,1547,5.268,1618,5.217,1659,3.989,1660,5.181,1671,5.368,1719,5.427,1741,4.894,1826,6.078,1828,5.465,1829,5.834,1830,4.894,1831,5.27,1832,5.14,1833,4.894,1834,5.27,1835,4.894,1836,4.894,1837,5.27,1838,5.27,1839,5.27,1840,6.109,1843,3.995,1845,6.216,1846,6.666,1847,4.86,1848,3.71,1851,4.128,1852,3.995,1854,2.644,1855,3.482,1857,3.71,1858,5.476,1859,4.593,1861,3.995,1863,3.995,1865,3.995,1867,5.14,1868,3.71,1869,3.995,1870,3.71,1872,2.861,1873,3.995,1875,4.593,1877,3.71,1879,5.822,1880,3.71,1888,2.988,2516,5.774,2517,4.958,2518,4.958,2519,4.377,2520,4.377,2521,4.958,2522,4.958,2523,4.377,2524,4.377,2525,4.958,2526,4.377,2527,4.377,2528,4.377,2529,4.377,2530,4.377,2531,4.377,2532,4.377,2533,4.377,2534,4.377,2535,5.27,2536,3.995,2537,3.995,2538,3.995,2539,3.995]],["title/classes/ODataInStorageCache.html",[0,0.346,2540,3.554]],["body/classes/ODataInStorageCache.html",[0,0.36,2,0.201,3,0.079,4,0.079,5,0.079,6,0.105,10,0.06,11,0.838,19,1.035,20,0.257,25,0.234,26,0.315,28,0.231,29,0.009,30,0.177,31,0.12,32,0.229,33,0.831,35,1.065,37,1.764,39,1.2,48,0.347,74,0.069,79,1.074,83,0.999,84,0.426,85,0.991,87,1.926,88,0.572,92,1.237,96,0.598,141,1.502,150,0.95,151,1.454,178,2.022,348,0.257,407,0.58,418,0.006,419,0.007,428,2.281,442,3.786,447,3.892,454,1.725,455,4.052,545,3.382,596,3.509,597,2.409,617,3.786,618,2.281,620,2.362,630,4.405,632,1.901,700,4.446,713,2.362,715,2.855,737,2.135,739,2.206,1171,5.245,1300,2.899,1398,3.571,1411,2.126,1436,2.449,1517,2.362,1524,3.225,1547,5.226,1618,5.167,1659,3.903,1660,5.093,1671,5.265,1719,5.335,1741,6.324,1816,3.437,1817,3.437,1826,6.031,1828,4.946,1829,5.707,1830,4.65,1831,5.007,1832,5.707,1833,4.65,1834,5.007,1835,4.65,1836,4.65,1837,5.007,1838,5.007,1839,5.007,1840,6.016,1843,3.701,1845,6.081,1846,6.587,1847,5.011,1848,3.437,1851,2.899,1852,3.701,1854,2.449,1855,3.225,1857,3.437,1858,5.27,1859,4.364,1861,3.701,1863,3.701,1865,3.701,1867,4.946,1868,3.437,1869,3.701,1870,3.437,1872,2.65,1873,3.701,1875,4.364,1877,3.437,1879,5.646,1880,3.437,1888,2.767,1894,3.437,2519,4.055,2520,4.055,2523,4.055,2524,4.055,2526,4.055,2527,4.055,2528,4.055,2529,4.055,2530,4.055,2531,4.055,2532,4.055,2533,4.055,2534,4.055,2535,5.007,2536,3.701,2537,3.701,2538,3.701,2539,3.701,2540,5.007,2541,4.055,2542,7.905,2543,6.213,2544,4.592,2545,4.592,2546,5.486,2547,4.592,2548,4.592,2549,4.592,2550,4.592,2551,3.701,2552,4.055,2553,4.055,2554,4.055,2555,4.055,2556,5.486,2557,4.055,2558,4.055,2559,4.055,2560,4.055,2561,4.055,2562,4.055]],["title/modules/ODataModule.html",[2563,3.098,2564,3.098]],["body/modules/ODataModule.html",[0,0.497,3,0.109,4,0.109,5,0.109,6,0.099,11,0.855,13,2.006,26,0.219,28,0.163,29,0.009,30,0.122,31,0.082,32,0.163,35,0.748,48,0.499,52,0.728,74,0.131,79,1.483,85,0.833,88,0.952,96,0.789,128,1.14,418,0.007,419,0.007,435,3.551,636,4.071,1390,2.857,1635,4.452,1992,3.148,2091,5.443,2097,4.21,2563,4.452,2564,5.757,2565,5.109,2566,5.598,2567,7.237,2568,6.516,2569,6.115,2570,6.744,2571,6.339,2572,7.128,2573,6.339,2574,7.688,2575,7.237,2576,6.744,2577,5.109,2578,6.744,2579,6.744,2580,5.598,2581,6.606,2582,6.744,2583,6.744,2584,4.452,2585,4.744,2586,5.598,2587,5.598,2588,6.744,2589,7.809,2590,5.598,2591,5.598,2592,5.598,2593,5.598,2594,5.598,2595,7.513,2596,6.744,2597,6.744,2598,6.744,2599,6.744,2600,6.744,2601,5.109,2602,5.598,2603,5.598,2604,5.598,2605,5.598,2606,6.744,2607,4.744,2608,5.598,2609,5.109]],["title/classes/ODataParameterParser.html",[0,0.346,2032,3.554]],["body/classes/ODataParameterParser.html",[0,0.503,2,0.21,3,0.082,4,0.082,5,0.082,6,0.118,8,1.153,10,0.062,11,0.865,19,0.799,20,0.199,24,1.575,25,0.236,26,0.312,28,0.222,29,0.009,30,0.172,31,0.12,32,0.226,33,0.757,35,1.02,37,1.306,39,1.092,45,1.712,48,0.429,51,1.726,52,0.553,74,0.096,83,1.474,84,0.576,85,1.105,87,1.492,88,0.958,96,0.864,108,1.687,110,2.272,164,1.325,167,2.218,178,2.347,190,1.608,342,2.251,348,0.265,384,1.828,393,2.14,418,0.006,419,0.006,454,1.649,456,3.212,565,3.576,615,2.239,619,3.354,621,4.393,623,2.982,625,2.406,628,4.102,632,1.126,640,2.17,650,2.892,657,3.421,675,3.82,676,2.239,725,0.982,726,4.505,754,2.476,821,2.194,866,3.4,914,3.197,1167,2.391,1188,3.382,1296,3.997,1388,2.312,1411,1.647,1665,2.779,1738,2.568,1951,4.439,1961,3.603,1967,3.197,1969,2.779,1978,3.702,1988,2.568,2014,5.743,2020,4.623,2021,4.623,2023,3.197,2024,3.197,2025,3.197,2027,4.251,2032,5.812,2039,4.251,2042,4.251,2044,6.791,2045,4.635,2046,5.755,2047,4.251,2048,3.603,2049,4.251,2050,3.603,2051,4.251,2052,5.584,2053,4.049,2054,4.505,2055,4.251,2056,4.251,2057,3.603,2058,5.755,2059,3.603,2060,5.755,2061,3.603,2062,4.8,2063,5.755,2064,4.8,2065,3.603,2066,3.603,2067,3.382,2068,3.603,2069,3.04,2070,3.04,2071,5.663,2072,4.251,2073,6.368,2074,4.251,2075,4.251,2076,3.197,2077,3.197,2078,3.04,2079,6.791,2080,7.425,2081,5.663,2082,5.663,2083,4.251,2084,4.251,2085,4.251,2086,4.251,2087,4.251,2088,4.251,2610,6.414,2611,4.815,2612,4.815,2613,4.815,2614,4.815,2615,4.815,2616,4.815,2617,4.815,2618,4.815,2619,4.815,2620,4.815,2621,4.815,2622,4.815,2623,4.815,2624,4.815]],["title/classes/ODataPathSegments.html",[0,0.346,1657,3.098]],["body/classes/ODataPathSegments.html",[0,0.332,2,0.185,3,0.073,4,0.073,5,0.073,6,0.115,10,0.076,11,0.792,12,1.828,13,1.773,14,2.649,17,1.96,19,1.09,20,0.175,25,0.236,26,0.306,28,0.226,29,0.009,30,0.176,31,0.12,32,0.223,33,0.993,35,1.025,36,1.778,37,1.794,39,0.601,40,2.144,45,1.689,48,0.442,51,1.353,52,0.837,53,1.378,54,1.086,67,1.086,74,0.102,81,2.585,83,1.307,84,0.577,85,1.12,88,0.954,92,1.815,96,0.864,97,1.695,101,2.52,102,1.525,107,1.014,110,1.736,128,0.877,141,1.691,164,1.617,175,2.556,190,2.078,284,1.251,348,0.243,418,0.006,419,0.006,438,4.01,448,3.352,454,1.543,457,2.823,480,2.444,622,2.178,632,0.99,674,2.823,688,4.398,725,0.899,1167,2.103,1296,2.347,1300,2.673,1336,5.051,1395,3.352,1402,2.103,1532,3.739,1657,5.568,1659,2.034,1669,2.974,1710,5.768,1734,3.168,1759,5.189,1851,2.673,1855,4.128,1890,5.44,1898,2.974,1899,5.44,1900,3.412,1901,4.736,2186,5.38,2217,2.673,2278,6.174,2279,6.174,2280,3.412,2281,5.44,2375,2.974,2625,3.739,2626,6.75,2627,5.96,2628,5.189,2629,6.444,2630,5.877,2631,5.877,2632,4.234,2633,4.234,2634,5.877,2635,6.784,2636,4.234,2637,4.234,2638,4.234,2639,4.234,2640,4.234,2641,4.736,2642,4.234,2643,4.234,2644,4.234,2645,3.739,2646,4.234,2647,4.234,2648,4.234,2649,4.234,2650,3.739,2651,4.234,2652,4.234,2653,4.234,2654,4.234,2655,6.438,2656,3.168,2657,3.739,2658,5.877,2659,4.234,2660,4.234,2661,5.877,2662,5.877,2663,6.75,2664,4.234,2665,4.234,2666,4.234,2667,4.234,2668,4.234,2669,4.234,2670,3.412,2671,4.234,2672,4.234,2673,4.234,2674,4.234,2675,4.234,2676,4.234,2677,4.234,2678,4.234,2679,4.234,2680,4.234,2681,4.234,2682,5.877,2683,4.234,2684,7.292,2685,4.234,2686,7.292,2687,4.234,2688,4.234,2689,4.234,2690,4.234,2691,4.234,2692,5.877,2693,7.292,2694,3.739,2695,3.739,2696,3.739,2697,3.739,2698,4.234,2699,4.234,2700,4.234,2701,6.75,2702,4.234,2703,4.234,2704,4.234,2705,4.234,2706,4.234,2707,4.234,2708,4.234,2709,4.234,2710,4.234,2711,4.234,2712,4.234,2713,5.877,2714,4.234,2715,4.234,2716,4.234,2717,5.877,2718,4.234,2719,4.234]],["title/classes/ODataPathSegmentsHandler.html",[0,0.346,2720,3.554]],["body/classes/ODataPathSegmentsHandler.html",[0,0.586,2,0.267,3,0.105,4,0.105,5,0.105,6,0.117,10,0.079,11,1.007,19,1.106,20,0.253,25,0.192,26,0.309,28,0.192,29,0.009,30,0.155,31,0.105,32,0.192,33,1.057,35,1.047,39,1.06,48,0.469,52,0.857,54,1.567,74,0.112,96,0.889,97,1.762,128,1.254,322,2.143,418,0.007,419,0.007,457,2.933,460,3.189,461,4.035,462,2.482,463,4.481,465,2.948,674,3.586,725,0.935,1521,5.587,1657,5.901,1659,2.933,1710,5.356,2098,4.056,2186,6.158,2628,5.393,2629,5.587,2635,4.922,2641,6.017,2656,4.57,2720,6.017,2721,5.393,2722,6.107,2723,6.107,2724,6.107,2725,6.107,2726,6.107,2727,6.107,2728,6.107,2729,6.107,2730,5.393,2731,5.393,2732,6.593,2733,5.393,2734,6.593,2735,5.393,2736,7.121,2737,5.393,2738,5.393,2739,5.393,2740,5.393,2741,7.121,2742,5.393,2743,5.393,2744,5.393,2745,5.393,2746,5.393,2747,5.393,2748,5.393,2749,5.393,2750,5.393,2751,5.393]],["title/classes/ODataPropertyAnnotations.html",[0,0.346,1459,2.929]],["body/classes/ODataPropertyAnnotations.html",[0,0.612,2,0.218,3,0.085,4,0.085,5,0.085,6,0.065,10,0.065,11,0.885,12,2.126,19,1.036,20,0.206,22,1.544,25,0.227,26,0.287,28,0.2,29,0.009,30,0.173,31,0.118,32,0.2,35,0.956,37,1.694,39,1.041,48,0.366,52,0.572,63,1.309,74,0.117,85,0.655,88,1.135,96,0.901,151,1.716,174,1.805,348,0.304,407,0.728,412,2.245,418,0.006,419,0.006,426,2.178,439,2.317,440,3.744,453,1.46,454,1.677,459,3.514,460,1.892,462,1.472,467,2.317,468,2.317,469,2.475,543,3.151,545,3.995,549,2.476,565,3.411,632,1.166,651,1.749,676,3.411,715,2.642,890,2.246,1215,4.421,1354,5.152,1403,3.822,1409,4.631,1411,2.667,1429,6.326,1430,3.729,1431,4.5,1432,4.91,1433,3.636,1435,5.49,1436,2.658,1437,4.357,1440,3.729,1442,4.631,1444,6.062,1446,6.062,1448,4.91,1454,3.729,1455,3.729,1456,3.729,1457,3.729,1458,3.729,1459,5.882,1460,6.224,1461,5.49,1462,5.49,1463,4.872,1464,5.524,1465,5.49,1466,5.49,1467,3.729,1468,5.782,1469,3.729,1470,3.729,1471,3.729,1472,3.729,1473,3.729,1474,3.729,1475,3.729,1476,4.91,1477,4.91,1478,3.729,1479,3.729,1480,3.729,1481,3.729,1482,3.729,1483,3.729,1484,3.729,1485,3.729,1486,3.729,1487,5.49,1488,3.729,1489,4.91,1490,5.715,1491,3.729,1492,3.729,1493,4.91,1494,4.91,1495,6.224,1496,4.91,1497,4.91,1498,4.91,1499,3.729,1500,3.729,1501,3.729,1502,3.729,1503,3.729,1504,3.729,1505,5.49,1506,3.729,1507,4.91,1508,3.729,1509,3.729,1510,3.729,2115,4.016,2121,4.016,2122,4.016,2752,4.983,2753,4.983,2754,4.983]],["title/classes/ODataQueryOptions.html",[0,0.346,2755,3.894]],["body/classes/ODataQueryOptions.html",[0,0.345,2,0.192,3,0.075,4,0.075,5,0.075,6,0.116,9,1.3,10,0.057,11,0.814,12,1.858,13,1.809,14,3.341,17,2.088,19,0.752,20,0.182,25,0.226,26,0.307,28,0.227,29,0.009,30,0.17,31,0.119,32,0.22,33,1.05,35,1.023,36,2.243,37,1.704,39,0.857,40,1.917,45,1.722,48,0.467,51,1.278,52,0.693,53,1.432,54,1.129,55,1.783,56,1.3,58,2.42,59,1.468,60,2.354,61,1.432,63,1.156,64,2.291,65,1.895,66,2.173,67,1.902,68,2.173,69,2.084,70,2.118,71,1.364,72,2.231,73,1.941,74,0.104,80,2.19,81,2.561,83,1.364,84,0.508,85,1.02,88,0.968,92,1.726,96,0.848,97,1.987,115,1.364,141,1.288,150,0.929,151,2.152,160,1.585,190,1.513,284,1.3,335,1.627,348,0.25,418,0.006,419,0.006,437,4.19,438,3.105,454,1.575,466,3.818,467,2.046,468,2.046,469,2.185,471,2.439,622,3.104,631,3.203,632,1.611,674,2.899,708,3.946,725,1.054,753,4.903,773,4.239,774,4.239,775,3.091,777,2.652,779,3.091,780,3.091,782,3.637,795,4.838,796,2.922,905,2.922,1098,4.864,1099,4.864,1100,4.864,1101,4.864,1102,4.864,1103,4.864,1104,4.864,1336,5.155,1361,5.812,1411,2.811,1828,3.091,1851,3.81,1992,2.185,2054,3.091,2217,3.81,2410,3.546,2627,6.082,2645,3.885,2650,3.885,2655,5.329,2657,3.885,2694,3.885,2695,3.885,2696,5.329,2697,3.885,2755,6.858,2756,3.885,2757,6.888,2758,7.767,2759,6.035,2760,7.412,2761,6.035,2762,6.035,2763,4.4,2764,4.4,2765,6.035,2766,4.4,2767,4.4,2768,4.4,2769,6.035,2770,4.4,2771,4.4,2772,4.4,2773,6.035,2774,4.4,2775,4.4,2776,4.4,2777,4.4,2778,4.4,2779,4.4,2780,6.545,2781,4.4,2782,3.885,2783,4.4,2784,4.4,2785,4.4,2786,4.4,2787,6.035,2788,6.035,2789,6.035,2790,6.035,2791,6.035,2792,4.4,2793,4.4,2794,5.329,2795,4.4,2796,4.4,2797,4.4,2798,6.035,2799,4.4,2800,6.035,2801,4.4,2802,4.4,2803,4.4,2804,4.4,2805,6.035,2806,4.4,2807,6.035,2808,4.4,2809,6.888,2810,6.035,2811,6.035,2812,4.4,2813,4.4,2814,4.4,2815,4.4,2816,4.4,2817,4.4,2818,4.4,2819,4.4,2820,4.4,2821,4.4,2822,4.4,2823,4.4,2824,4.4,2825,4.4,2826,4.4,2827,4.4,2828,4.4,2829,4.4,2830,4.4,2831,6.035,2832,6.035,2833,6.035,2834,4.4,2835,4.4]],["title/classes/ODataReferential.html",[0,0.346,2225,3.554]],["body/classes/ODataReferential.html",[0,0.462,2,0.119,3,0.047,4,0.047,5,0.047,6,0.076,8,1.017,10,0.035,16,1.506,17,0.733,19,1.12,20,0.264,22,2.377,24,1.542,25,0.233,26,0.18,28,0.07,29,0.009,30,0.168,31,0.114,32,0.07,33,1.029,35,0.833,37,0.866,39,1.155,40,1.658,45,1.599,48,0.394,49,3.133,50,2.51,51,1.655,52,0.599,53,0.888,54,0.7,65,1.169,67,1.512,73,0.769,74,0.096,83,1.428,84,0.59,85,1.142,87,1.317,88,0.91,92,1.271,96,0.877,101,2.189,102,2.122,107,2.042,108,2.041,110,1.998,116,1.704,117,1.036,119,3.175,141,0.582,150,0.795,151,1.494,158,2.592,160,2.63,164,1.436,167,1.226,175,2.437,178,2.201,338,1.094,342,1.832,348,0.244,384,1.613,393,2.356,407,0.397,418,0.004,419,0.004,426,1.193,439,1.269,454,1.546,456,1.704,462,1.998,472,2.355,503,2.267,504,1.455,505,2.267,518,1.455,526,0.934,527,0.934,543,2.507,550,1.064,565,1.269,569,1.455,594,1.403,595,1.455,596,1.269,597,2.567,613,3.266,614,3.266,615,1.976,619,1.976,623,1.976,624,2.186,625,0.91,626,0.934,627,1.575,628,2.784,634,2.926,640,1.915,646,1.832,650,2.093,655,2.355,667,3.691,668,1.575,669,3.145,670,1.575,672,1.512,674,2.83,675,3.359,676,3.489,682,3.03,712,1.269,713,1.403,726,2.985,736,2.267,754,3.756,777,2.561,782,2.561,866,3.185,867,1.355,948,1.804,1004,3.425,1005,2.409,1167,1.355,1188,1.916,1215,1.644,1296,3.539,1298,2.199,1384,2.592,1390,2.878,1393,1.403,1395,2.111,1398,1.753,1402,2.111,1403,2.655,1411,1.786,1431,1.575,1433,2.355,1442,2.683,1463,1.812,1558,2.042,1559,2.042,1669,1.916,1676,1.916,1734,3.18,1738,2.784,1854,1.455,1951,2.453,1955,1.644,1969,3.013,1978,3.013,1988,1.455,1990,1.575,1992,3.359,1993,1.723,1994,1.723,1995,2.893,1996,1.723,1997,1.644,1998,1.723,1999,1.723,2000,1.723,2007,1.512,2014,5.405,2020,3.685,2021,3.685,2023,1.812,2024,1.812,2025,1.812,2045,3.551,2046,6.382,2048,3.906,2050,3.906,2052,4.983,2053,3.295,2054,2.985,2057,2.042,2058,3.18,2059,2.042,2060,2.042,2061,3.18,2062,3.18,2063,2.042,2064,3.906,2065,2.042,2066,2.042,2067,1.916,2068,4.409,2069,1.723,2070,1.723,2076,2.822,2077,1.812,2078,1.723,2211,4.207,2212,4.748,2215,5.203,2216,2.409,2217,1.723,2218,2.042,2219,2.409,2220,3.425,2221,3.425,2222,3.425,2223,4.748,2224,3.425,2225,4.207,2226,2.409,2227,2.409,2228,2.042,2229,3.752,2230,2.409,2231,2.409,2232,2.409,2233,2.409,2234,5.638,2235,2.409,2236,5.638,2237,2.409,2238,2.409,2239,2.409,2240,3.752,2241,2.409,2242,2.409,2243,2.409,2244,2.409,2245,2.409,2246,3.18,2247,3.666,2248,6.449,2249,2.409,2250,2.409,2251,2.409,2252,2.409,2253,2.409,2254,2.409,2255,2.409,2256,3.752,2257,3.752,2258,3.752,2259,3.752,2260,3.425,2261,2.409,2262,3.752,2263,2.409,2264,2.409,2265,3.752,2266,2.409,2267,2.409,2268,2.409,2269,3.752,2270,2.409,2271,3.752,2272,2.409,2273,7.103,2274,6.235,2275,6.483,2276,2.409,2277,2.409,2278,5.146,2279,5.146,2280,2.199,2281,4.207,2282,2.409,2283,2.409,2284,2.409,2285,2.409,2286,2.409,2287,5.203,2288,2.409,2289,2.409,2290,2.409,2291,3.752,2292,3.752,2293,2.409,2294,2.409,2295,2.409,2296,2.409,2297,2.409,2298,2.409,2299,2.409,2300,2.409,2301,2.409,2302,2.409,2303,2.409,2304,2.409,2305,2.409,2306,2.409,2307,2.409,2308,2.042,2309,2.409,2310,2.409,2311,7.642,2312,2.409,2313,2.409,2314,2.409,2315,2.409,2316,5.972,2317,2.409,2318,2.042,2319,3.752,2320,2.409,2321,3.752,2322,2.409,2323,2.409,2324,4.609,2325,2.409,2326,2.409,2327,2.409,2328,2.409,2329,2.409,2330,2.409,2331,2.409,2332,2.409,2333,2.409,2334,1.916,2335,2.199,2336,2.409,2337,3.752,2338,5.638,2339,2.409,2340,2.409,2341,2.409,2342,2.409,2343,2.409,2344,2.409,2345,2.409,2346,2.409,2347,2.409,2348,2.409,2349,2.409,2350,2.409,2351,6.235,2352,7.326,2353,6.02,2354,3.752,2355,3.752,2356,2.409,2357,5.203,2358,2.409,2359,2.409,2360,2.409,2361,2.409,2362,2.409,2363,2.409,2364,5.972,2365,2.409,2366,2.042,2367,2.409,2368,2.409,2369,2.409,2370,2.409,2371,2.409,2372,2.409,2373,2.409,2374,3.752,2375,1.916,2376,2.042,2377,2.042,2378,2.042,2379,2.409,2380,4.207,2381,5.203,2382,2.409,2383,2.409,2384,2.409,2385,2.409,2386,2.409,2387,2.409,2388,2.409,2389,2.409,2390,3.752,2391,2.409,2392,2.409,2393,2.409,2394,2.409,2395,2.409,2396,2.409,2397,2.409,2398,2.409,2399,2.409,2400,2.409,2401,2.409,2402,2.409,2403,2.409,2404,2.409,2405,4.609,2406,3.752,2407,3.752,2408,2.409,2409,2.409,2410,2.199,2411,2.409,2412,2.409,2413,2.409,2414,2.409,2415,2.409,2416,3.752,2417,5.638,2418,2.409,2419,2.409,2420,3.752,2421,3.752,2422,2.409,2423,3.752,2424,2.409,2425,3.752,2426,3.752,2427,2.409,2428,2.409,2429,2.409,2430,4.609,2431,2.409,2432,2.409]],["title/classes/ODataRequest.html",[0,0.346,1618,2.545]],["body/classes/ODataRequest.html",[0,0.298,2,0.166,3,0.065,4,0.065,5,0.065,6,0.119,10,0.049,11,0.734,13,1.671,18,1.688,19,1.038,20,0.157,22,2.499,25,0.23,26,0.315,28,0.14,29,0.009,30,0.147,31,0.115,32,0.214,33,0.868,35,0.868,37,1.109,40,2.431,48,0.44,51,1.289,52,0.73,54,0.975,63,0.998,65,1.045,67,0.975,69,1.15,73,1.07,74,0.057,83,1.023,84,0.571,85,1.036,88,0.473,96,0.844,97,1.096,101,2.372,102,1.368,107,1.303,150,0.512,151,1.721,164,2.365,190,2.114,348,0.225,418,0.005,419,0.005,420,2.106,423,3.018,424,4.418,426,3.347,427,4.205,428,3.802,431,3.673,436,4.077,437,3.421,438,3.132,447,3.423,448,2.704,449,3.707,454,2.024,458,2.027,459,1.712,462,2.173,467,1.767,468,1.767,597,1.3,598,2.193,600,2.106,603,2.193,618,3.915,620,3.273,622,1.954,634,2.704,640,2.454,651,1.333,654,3.707,682,2.8,700,4.387,711,2.959,890,3.45,1167,1.887,1172,6.154,1436,3.924,1464,2.523,1516,3.062,1547,4.246,1550,2.843,1576,3.355,1588,3.355,1592,3.355,1594,3.355,1618,4.011,1633,5.601,1635,2.669,1636,5.899,1637,4.859,1645,3.062,1658,5.899,1659,4.001,1662,4.075,1675,6.136,1676,3.824,1709,3.355,1721,2.843,1725,6.136,1728,6.759,1749,3.355,1753,5.728,1754,3.355,1755,3.355,1768,6.759,2836,3.8,2837,6.363,2838,6.363,2839,6.363,2840,6.363,2841,6.363,2842,6.363,2843,7.356,2844,6.95,2845,6.95,2846,6.95,2847,6.95,2848,6.363,2849,6.363,2850,6.363,2851,4.808,2852,5.445,2853,3.355,2854,3.8,2855,3.8,2856,3.8,2857,6.95,2858,3.8,2859,7.356,2860,7.356,2861,3.8,2862,3.8,2863,3.8,2864,6.95,2865,3.8,2866,3.8,2867,3.8,2868,3.8,2869,3.8,2870,3.8,2871,3.8,2872,3.8,2873,3.8,2874,3.8,2875,3.8,2876,3.8,2877,3.8,2878,3.8,2879,3.8,2880,3.8,2881,3.8,2882,3.8,2883,3.8,2884,3.8,2885,3.8,2886,3.8,2887,3.8,2888,3.8,2889,3.8,2890,3.8,2891,3.8,2892,3.8,2893,3.8,2894,3.8,2895,3.8,2896,3.8,2897,3.8,2898,5.445,2899,3.8,2900,6.363,2901,3.8,2902,3.355,2903,3.355,2904,3.355,2905,3.8,2906,3.8,2907,3.8,2908,3.8,2909,3.8,2910,7.356,2911,3.8,2912,6.95,2913,5.445,2914,3.8,2915,5.445,2916,5.445,2917,3.8,2918,3.8,2919,3.8,2920,3.8,2921,3.8,2922,5.445,2923,6.95,2924,3.8,2925,6.363,2926,5.445,2927,6.363,2928,3.8,2929,5.445,2930,3.8,2931,3.8,2932,7.655,2933,3.8,2934,3.8,2935,3.8,2936,3.8,2937,3.8,2938,5.445,2939,3.8,2940,3.8,2941,3.8,2942,3.8,2943,3.8,2944,3.8,2945,3.8,2946,3.8,2947,3.8,2948,3.8,2949,5.445,2950,3.8,2951,3.8,2952,3.8,2953,3.8,2954,3.8,2955,3.8,2956,3.8,2957,3.8,2958,3.8,2959,3.8,2960,3.8,2961,3.8,2962,5.445,2963,3.8,2964,3.8,2965,3.8,2966,5.445,2967,3.8,2968,3.8,2969,3.8,2970,5.445,2971,3.8,2972,3.8,2973,3.8,2974,3.8,2975,3.8,2976,3.8,2977,3.8,2978,3.8,2979,6.95,2980,3.8,2981,3.355,2982,3.8,2983,3.8,2984,3.8,2985,3.8,2986,3.8,2987,3.8,2988,3.8,2989,3.8,2990,3.8,2991,3.8,2992,3.8,2993,3.8,2994,3.8,2995,3.8,2996,3.8,2997,3.8,2998,7.356,2999,3.8,3000,5.445,3001,5.445,3002,3.8,3003,3.8,3004,3.8,3005,3.8,3006,3.8,3007,3.8,3008,3.8,3009,3.8,3010,3.8,3011,3.8,3012,3.8,3013,3.8,3014,3.8]],["title/classes/ODataResponse.html",[0,0.346,1660,2.658]],["body/classes/ODataResponse.html",[0,0.33,2,0.184,3,0.072,4,0.072,5,0.072,6,0.117,10,0.055,11,0.789,13,2.078,14,3.033,17,1.955,18,1.814,19,0.986,20,0.174,25,0.216,26,0.309,28,0.196,29,0.009,30,0.152,31,0.115,32,0.221,33,1.004,35,1.015,37,1.482,39,1.249,40,2.137,48,0.48,52,0.672,74,0.063,83,1.405,85,1.195,88,1.011,92,1.448,96,0.828,150,0.789,151,2.097,164,1.158,348,0.242,407,0.547,418,0.006,419,0.006,426,2.942,428,3.93,435,1.958,444,3.378,445,2.43,446,2.43,454,1.984,462,2.515,545,3.899,617,1.841,618,4.37,620,4.07,630,4.462,651,2.553,654,4.541,674,2.022,747,3.717,777,2.537,782,2.537,890,3.837,1167,2.091,1172,5.255,1398,1.736,1409,4.248,1411,2.302,1431,2.43,1436,3.589,1437,3.887,1459,3.887,1464,4.469,1468,3.887,1490,3.887,1516,4.717,1517,3.01,1547,4.913,1550,3.15,1586,5.169,1618,4.685,1633,4.717,1634,6.988,1635,2.957,1636,5.443,1637,4.892,1639,3.717,1645,3.393,1655,3.717,1658,5.443,1659,3.899,1660,4.769,1667,3.717,1671,4.055,1719,4.248,1720,5.169,1721,3.15,1797,5.942,1816,5.922,1817,5.922,1868,6.195,1944,4.717,2851,5.169,2853,3.717,2902,3.717,2903,3.717,2904,3.717,3015,4.21,3016,6.73,3017,6.73,3018,6.73,3019,6.73,3020,5.854,3021,5.854,3022,4.21,3023,4.21,3024,5.862,3025,4.21,3026,4.21,3027,4.21,3028,4.21,3029,5.942,3030,4.21,3031,5.423,3032,5.854,3033,4.21,3034,4.21,3035,4.21,3036,4.21,3037,5.942,3038,4.21,3039,4.21,3040,4.21,3041,4.21,3042,4.21,3043,4.21,3044,4.21,3045,4.21,3046,4.21,3047,4.21,3048,4.21,3049,5.854,3050,4.21,3051,4.21,3052,5.854,3053,5.854,3054,4.21,3055,4.21,3056,4.21,3057,4.21,3058,4.21,3059,4.21,3060,4.21,3061,4.21,3062,4.21,3063,4.21,3064,4.21,3065,4.21,3066,6.73,3067,4.21,3068,4.21,3069,4.21,3070,4.21,3071,6.73,3072,4.21,3073,4.21,3074,4.21,3075,3.717,3076,4.21,3077,4.21,3078,4.21,3079,4.21,3080,5.854,3081,4.21,3082,4.21,3083,4.21,3084,4.21,3085,5.854,3086,4.21,3087,4.21,3088,4.717,3089,4.21,3090,4.21,3091,5.169,3092,4.21,3093,4.21,3094,6.73,3095,4.21,3096,4.21,3097,6.73,3098,4.21,3099,4.21,3100,7.645,3101,6.73,3102,7.645,3103,4.21,3104,5.854,3105,5.854,3106,4.21,3107,6.73,3108,4.21,3109,6.988,3110,6.73,3111,6.73,3112,5.854,3113,4.21,3114,6.73,3115,4.21,3116,4.21,3117,4.21,3118,4.21,3119,4.21,3120,4.21,3121,4.21]],["title/classes/ODataResponseOptions.html",[0,0.346,3024,3.554]],["body/classes/ODataResponseOptions.html",[0,0.435,2,0.243,3,0.095,4,0.095,5,0.095,6,0.119,8,1.684,10,0.072,11,0.948,12,2.036,16,2.029,18,2.18,20,0.23,25,0.236,26,0.316,28,0.22,29,0.009,30,0.165,31,0.118,32,0.237,33,0.83,35,1.01,48,0.431,51,1.506,52,0.637,74,0.083,84,0.556,85,0.729,88,0.691,96,0.677,107,1.684,117,2.106,119,2.932,150,0.948,160,2.924,164,1.935,348,0.291,418,0.007,419,0.007,435,3.776,440,3.9,441,4.331,447,3.447,452,4.059,453,1.537,454,1.765,455,3.17,459,3.48,599,4.686,600,4.28,610,4.457,611,4.654,612,5.049,632,1.96,1166,4.471,1167,2.756,1264,5.668,1388,3.378,1390,2.501,1431,4.686,1517,2.853,1554,4.899,1558,5.263,1559,4.152,1581,4.899,1610,4.899,1669,4.94,1922,4.471,2275,6.223,3024,6.223,3075,4.899,3088,7.008,3091,4.899,3122,5.548,3123,7.033,3124,7.033,3125,7.033,3126,7.033,3127,7.033,3128,7.033,3129,5.548,3130,5.548,3131,5.548,3132,5.548,3133,5.548,3134,5.548,3135,5.548,3136,7.033,3137,5.548,3138,7.033,3139,5.548,3140,7.033,3141,5.548,3142,7.033,3143,5.548,3144,7.033,3145,7.033,3146,5.548,3147,5.548,3148,5.548,3149,7.033,3150,7.033,3151,5.548,3152,5.548,3153,5.548,3154,5.548,3155,5.548,3156,5.548,3157,5.548,3158,5.548,3159,5.548,3160,5.548,3161,4.899,3162,5.548,3163,5.548,3164,5.548,3165,5.548,3166,5.548,3167,5.548,3168,5.548,3169,5.548,3170,5.548,3171,5.548,3172,5.548]],["title/classes/ODataSchema.html",[0,0.346,1956,2.784]],["body/classes/ODataSchema.html",[0,0.385,2,0.214,3,0.084,4,0.084,5,0.084,6,0.118,10,0.064,11,0.876,18,2.013,19,1.069,20,0.203,24,1.589,25,0.238,26,0.315,28,0.229,29,0.009,30,0.167,31,0.121,32,0.227,33,0.766,35,1.024,37,1.323,39,1.144,45,1.263,48,0.484,51,1.205,52,0.563,74,0.074,83,1.295,85,1.018,88,0.965,96,0.826,107,1.174,110,1.918,128,0.969,342,2.279,348,0.269,407,0.606,418,0.006,419,0.006,453,1.77,456,1.967,632,1.519,634,2.436,644,4.472,646,2.279,650,2.919,651,2.279,652,4.294,654,4.133,656,4.669,658,4.387,660,4.034,682,2.523,715,2.312,725,0.751,866,2.082,890,2.927,905,3.258,948,3.586,1047,5.233,1384,4.113,1386,3.748,1387,3.748,1388,3.119,1390,3.632,1391,3.464,1392,2.719,1393,3.34,1395,3.848,1396,3.599,1397,3.599,1398,2.678,1399,2.719,1400,2.719,1402,3.225,1403,2.211,1404,2.719,1411,2.651,1517,2.523,1636,6.197,1637,5.169,1721,3.671,1948,6.244,1951,4.78,1956,4.1,1964,2.956,1966,3.258,1967,3.258,2005,2.956,2006,2.956,2007,2.719,2020,4.652,2021,4.652,2070,3.097,2168,5.867,2170,4.859,2260,3.953,2433,6.244,3173,4.905,3174,6.494,3175,6.494,3176,6.494,3177,6.494,3178,6.494,3179,6.494,3180,4.905,3181,4.905,3182,4.905,3183,7.748,3184,4.905,3185,4.905,3186,4.905,3187,4.905,3188,6.494,3189,7.748,3190,4.905,3191,6.494,3192,4.905,3193,6.494,3194,4.905,3195,6.494,3196,4.905,3197,6.494,3198,4.905,3199,4.905,3200,4.905,3201,4.905,3202,4.905,3203,4.905,3204,4.905,3205,4.905,3206,4.905,3207,4.905,3208,4.905,3209,4.905,3210,4.905,3211,4.905,3212,4.905,3213,4.905,3214,4.905,3215,4.905,3216,4.905,3217,4.905,3218,4.905,3219,4.905,3220,4.905,3221,7.28,3222,4.905,3223,6.494,3224,4.905,3225,4.905,3226,6.494,3227,6.494,3228,4.905,3229,6.494,3230,4.905,3231,4.905,3232,4.905,3233,4.905,3234,4.905,3235,4.905,3236,4.905,3237,4.905,3238,4.905]],["title/classes/ODataSchemaElement.html",[0,0.346,1950,2.929]],["body/classes/ODataSchemaElement.html",[0,0.398,2,0.222,3,0.087,4,0.087,5,0.087,6,0.114,10,0.066,11,0.895,18,2.058,19,0.632,20,0.275,24,1.779,25,0.237,26,0.308,28,0.224,29,0.009,30,0.172,31,0.123,32,0.222,33,0.873,35,1.087,37,1.599,39,0.943,48,0.438,50,2.667,52,0.582,54,1.302,74,0.076,84,0.616,87,1.573,96,0.841,107,2.092,128,0.991,141,1.082,164,1.396,175,2.47,178,1.652,348,0.275,407,0.62,418,0.006,419,0.006,451,3.189,569,2.706,597,2.788,604,4.152,632,1.187,645,3.542,646,2.989,650,2.662,651,2.598,715,2.35,725,0.777,866,3.667,948,3.709,1384,4.152,1386,3.832,1387,3.832,1388,2.437,1390,2.993,1391,3.542,1392,2.812,1393,4.191,1395,4.047,1396,3.68,1397,3.68,1398,3.238,1399,2.812,1400,2.812,1402,3.298,1403,2.287,1404,2.812,1530,3.797,1637,4.46,1738,2.706,1854,4.768,1872,4.825,1950,5.737,1952,4.664,1953,4.664,1954,4.192,1955,4.732,1956,5.278,1964,3.058,1966,5.552,1982,4.664,1984,4.664,1985,4.664,1987,4.664,1988,3.542,1990,3.832,1992,3.298,1993,4.192,1994,4.192,1995,3.68,1996,4.192,1997,4.001,1998,4.192,1999,4.192,2000,4.192,2001,3.564,2003,4.41,2004,4.664,2005,3.058,2006,3.058,2007,2.812,2017,5.863,2069,3.203,2078,3.203,2334,3.564,2335,4.089,3239,5.074,3240,6.64,3241,5.074,3242,5.074,3243,5.074,3244,5.074,3245,5.074,3246,5.074,3247,5.074,3248,5.074,3249,5.074,3250,5.074,3251,5.074,3252,6.64,3253,5.074,3254,6.64]],["title/injectables/ODataServiceFactory.html",[2569,3.098,3255,3.894]],["body/injectables/ODataServiceFactory.html",[0,0.639,3,0.107,4,0.107,5,0.107,6,0.11,10,0.081,11,1.021,20,0.259,22,2.625,25,0.236,26,0.281,28,0.223,29,0.009,30,0.176,31,0.118,32,0.209,35,0.894,39,1.075,48,0.472,74,0.094,88,0.944,96,0.73,322,2.195,407,0.707,418,0.007,419,0.007,460,3.094,461,4.323,597,2.898,681,4.518,711,3.938,725,1.159,890,4.085,905,5.761,1398,3.124,1637,5.104,1992,4.206,2568,6.338,2569,5.32,2584,4.393,2585,6.098,3255,6.689,3256,5.522,3257,6.254,3258,6.254,3259,6.254,3260,6.254,3261,9.115,3262,6.254,3263,8.47,3264,8.47,3265,6.254,3266,6.254,3267,8.47,3268,6.826,3269,7.575]],["title/classes/ODataSingletonService.html",[0,0.346,3268,3.554]],["body/classes/ODataSingletonService.html",[0,0.428,2,0.238,3,0.093,4,0.093,5,0.093,6,0.105,10,0.071,11,0.938,18,2.155,25,0.178,26,0.303,28,0.229,29,0.009,30,0.164,31,0.117,32,0.219,35,1.022,48,0.45,50,2.104,74,0.082,83,1.487,85,0.913,92,1.384,96,0.777,151,1.887,174,2.345,190,1.743,407,0.649,418,0.007,419,0.007,426,3.725,442,3.833,443,2.534,453,1.797,461,4.211,597,3,617,3.527,632,1.275,673,5.135,675,4.232,681,4.545,715,2.646,725,1.275,890,4.152,1215,4.861,1398,3.327,1433,4.618,1442,5.379,1517,3.576,1659,4.159,1662,5.73,1665,4.013,1671,4.19,1676,5.853,1699,6.139,1753,6.376,1888,3.284,1898,3.827,2174,6.715,2176,6.761,2177,6.867,2178,6.139,2179,6.139,2180,6.139,2183,7.122,2188,4.812,2189,6.139,2190,5.603,2191,4.812,2192,4.812,2193,6.139,2194,5.603,2195,4.812,2196,4.812,2197,6.139,2198,5.603,2199,4.812,2202,4.812,2203,4.812,2205,4.812,2380,6.867,3031,4.391,3268,5.603,3270,5.449,3271,6.953,3272,6.953,3273,7.658,3274,5.449,3275,5.449,3276,6.953,3277,5.449,3278,7.658,3279,5.449,3280,5.449,3281,5.449,3282,5.449,3283,5.449,3284,5.449,3285,5.449,3286,5.449,3287,5.449,3288,5.449,3289,6.953,3290,5.449,3291,5.449]],["title/classes/Operator.html",[0,0.346,130,1.819]],["body/classes/Operator.html",[0,0.663,1,2.326,2,0.098,3,0.038,4,0.038,5,0.038,6,0.088,7,0.926,8,1.631,9,2.519,10,0.029,11,0.619,12,1.923,13,1.849,14,1.64,15,2.412,16,1.324,17,2.142,18,1.128,19,0.849,20,0.271,22,1.636,23,1.84,24,1.647,25,0.234,26,0.226,28,0.149,29,0.009,30,0.157,31,0.114,32,0.135,33,0.986,35,0.684,36,2.061,37,1.075,39,1.143,40,0.713,41,0.9,43,2.182,45,1.794,48,0.428,49,1.459,50,0.679,51,1.399,52,0.418,53,0.731,54,0.576,55,2.185,56,1.075,57,0.953,58,1.459,59,0.749,60,1.419,61,0.731,62,1.419,63,0.589,64,1.381,65,0.618,66,1.31,67,0.576,68,1.31,69,0.679,70,1.277,71,0.696,72,1.345,73,0.632,74,0.134,75,3.896,76,3.824,77,3.786,78,3.025,79,1.357,80,2.606,81,2.606,82,2.675,83,1.437,84,0.525,85,0.925,86,1.214,87,1.798,88,1.154,89,0.953,90,0.953,91,0.953,92,1.401,93,0.953,94,1.31,95,0.953,96,0.905,97,2.343,98,0.953,99,0.953,100,0.9,101,0.696,102,1.31,103,0.953,104,0.953,105,1.545,106,1.948,107,0.537,108,1.844,109,0.953,110,0.663,111,0.953,112,0.953,113,0.953,114,0.953,115,0.696,116,0.9,117,0.852,118,0.953,119,3.026,120,0.953,121,0.953,122,0.953,123,0.953,124,0.953,125,0.953,126,0.953,127,0.953,128,1.08,129,0.953,130,2.983,131,0.953,132,2.177,133,0.953,134,0.953,135,2.49,136,0.953,137,2.561,138,0.953,139,0.953,140,0.953,141,0.479,142,0.953,143,0.953,144,0.953,145,0.953,146,0.953,147,0.953,148,0.953,149,0.953,150,0.949,151,0.851,152,0.953,153,0.953,154,0.953,155,0.953,156,0.953,157,0.953,158,0.696,159,0.953,160,2.664,161,2.462,162,0.953,163,0.953,164,0.618,165,0.953,166,0.953,167,0.647,168,1.545,169,0.953,170,0.953,171,0.926,172,0.953,173,0.926,174,2.235,175,0.749,176,2.027,177,2.418,178,1.494,179,2.636,180,1.948,181,3.303,182,1.545,183,1.948,184,2.24,185,1.545,186,0.953,187,1.948,188,1.948,189,2.24,190,0.563,191,1.545,192,0.953,193,1.948,194,0.953,195,1.893,196,0.953,197,0.953,198,0.953,199,0.953,200,0.953,201,0.953,202,0.953,203,0.953,204,0.953,205,0.953,206,0.953,207,0.953,208,0.953,209,1.277,210,0.953,211,0.953,212,1.893,213,0.953,214,0.953,215,0.953,216,0.953,217,1.893,218,0.953,219,1.545,220,0.953,221,0.953,222,0.953,223,0.953,224,0.953,225,0.953,226,0.953,227,1.948,228,0.953,229,0.953,230,0.953,231,0.953,232,0.953,233,0.953,234,0.953,235,0.953,236,0.953,237,0.953,238,0.953,239,0.953,240,0.953,241,0.953,242,0.953,243,0.953,244,0.953,245,0.953,246,0.953,247,0.953,248,0.953,249,0.953,250,0.953,251,0.953,252,0.953,253,0.953,254,0.953,255,0.953,256,1.893,257,0.953,258,0.953,259,0.953,260,0.953,261,0.953,262,0.953,263,1.893,264,0.953,265,0.9,266,1.545,267,0.953,268,1.545,269,1.893,270,0.953,271,0.953,272,0.953,273,0.953,274,0.953,275,0.953,276,1.893,277,0.953,278,0.953,279,2.636,280,2.462,281,1.545,282,0.953,283,0.953,284,1.075,285,0.953,286,0.953,287,1.948,288,0.953,289,0.953,290,0.953,291,0.953,292,0.953,293,0.953,294,0.953,295,0.953,296,0.953,297,0.953,298,0.953,299,0.953,300,0.953,301,0.953,302,0.953,303,0.953,304,0.953,305,0.953,306,0.953,307,0.953,308,0.953,309,0.953,310,1.893,311,0.953,312,0.953,313,0.953,314,0.953,315,0.953,316,0.953,317,0.953,318,0.953,319,0.953,320,0.953,321,0.953,322,0.788,323,1.501,324,0.953,325,0.953,326,0.953,327,0.953,328,1.893,329,0.953,330,0.953,331,0.953,332,0.953,333,0.9,334,0.9,335,0.83,336,0.9,337,0.9,338,0.9,339,0.953,340,0.953,341,1.948,342,2.18,343,1.545,344,0.953,345,1.545,346,0.953,347,0.953,348,0.19,349,2.697,350,0.953,351,0.953,352,0.953,353,0.953,354,0.953,355,0.953,356,0.953,357,0.953,358,0.953,359,0.953,360,0.953,361,0.953,362,0.953,363,0.953,364,1.545,365,1.545,366,0.953,367,0.953,368,0.953,369,0.953,370,0.953,371,0.953,372,0.953,373,0.953,374,0.953,375,0.953,376,0.926,377,0.953,378,0.926,379,0.953,380,0.953,381,0.953,382,0.953,383,0.953,384,1.742,385,1.381,386,0.953,387,0.953,388,0.953,389,0.953,390,0.953,391,0.953,392,0.953,393,0.749,394,0.953,395,0.953,396,0.953,397,0.953,398,0.953,399,0.953,400,0.953,401,1.893,402,0.953,403,0.953,404,0.953,405,0.953,406,2.49,407,0.493,408,0.953,409,0.9,410,2.49,411,0.953,412,0.768,413,2.636,414,0.953,415,2.24,416,0.953,417,0.696,418,0.004,419,0.004,1374,1.982,3292,2.245,3293,2.245,3294,2.245,3295,2.245,3296,2.245,3297,2.245,3298,2.245]],["title/classes/OrderByExpression.html",[0,0.346,68,1.588]],["body/classes/OrderByExpression.html",[0,0.528,2,0.227,3,0.089,4,0.089,5,0.089,6,0.113,8,1.241,9,2.564,10,0.067,11,0.908,12,2.057,13,2.208,14,3.035,15,2.543,16,1.942,17,2.205,18,2.087,19,0.839,20,0.279,25,0.216,26,0.312,28,0.227,29,0.009,30,0.169,31,0.12,32,0.223,33,0.612,35,1.052,36,2.037,37,1.713,39,1.124,40,2.138,41,2.079,43,2.087,45,1.733,48,0.458,51,1.387,52,0.773,54,1.33,55,2.209,56,2.209,68,3.335,74,0.113,80,2.484,81,2.484,82,2.544,83,1.352,84,0.461,85,0.681,86,2.247,88,0.986,96,0.872,108,1.852,115,1.607,128,0.774,141,1.106,174,2.058,176,2.087,177,1.916,209,2.625,284,1.531,322,1.819,348,0.279,407,0.629,417,1.607,418,0.007,419,0.007,454,1.71,550,2.022,631,3.084,632,1.213,663,2.556,708,4.25,709,4.251,710,4.251,711,3.478,712,4.036,713,2.666,715,2.719,716,3.443,718,2.992,721,3.443,723,4.22,725,0.793,731,3.443,732,3.443,733,3.443,736,2.765,737,2.411,739,2.49,740,2.765,741,2.765,742,2.765,743,2.765,746,2.765,749,2.666,750,2.765,752,2.992,759,3.886,772,3.443,783,3.443,800,4.472,801,2.765,802,2.873,1095,4.729,1137,4.578,3299,4.178,3300,6.733,3301,6.733,3302,5.184,3303,5.184,3304,5.946,3305,5.184,3306,5.184,3307,5.946,3308,5.184,3309,5.184,3310,5.184,3311,5.184,3312,5.184,3313,5.184,3314,5.427,3315,5.946,3316,5.946,3317,5.946,3318,6.603,3319,4.578,3320,5.039,3321,5.946]],["title/classes/OrderByField.html",[0,0.346,3314,3.554]],["body/classes/OrderByField.html",[0,0.556,2,0.245,3,0.096,4,0.096,5,0.096,6,0.113,8,1.696,9,2.605,10,0.073,11,0.955,12,2.108,13,1.86,15,2.606,16,2.043,17,2.26,18,2.196,19,0.883,20,0.293,25,0.22,26,0.296,28,0.199,29,0.009,30,0.157,31,0.116,32,0.199,35,0.962,36,1.698,37,1.443,39,1.006,40,1.782,41,2.25,43,2.196,45,1.754,48,0.469,51,1.44,52,0.813,54,1.44,55,2.293,56,2.093,68,3.279,74,0.117,80,2.536,81,2.536,82,2.598,83,1.38,84,0.485,85,0.737,86,2.364,88,1.016,96,0.88,108,1.907,115,1.739,174,1.544,176,2.196,177,2.074,284,1.658,322,1.969,407,0.524,417,1.739,418,0.007,419,0.007,454,1.283,550,2.189,631,2.921,663,2.689,708,3.402,711,2.609,712,3.909,723,3.992,736,2.993,737,2.609,739,2.695,740,2.993,741,2.993,742,2.993,743,2.993,746,2.993,749,2.886,750,2.993,752,3.239,759,3.239,772,3.727,783,3.727,800,4.704,801,2.993,802,3.11,805,4.522,1095,4.975,3299,4.522,3304,4.955,3307,4.955,3314,6.571,3315,7.424,3316,7.424,3317,7.424,3318,6.854,3319,4.955,3320,5.301,3321,6.255,3322,5.612,3323,5.612,3324,5.612,3325,5.612,3326,5.612,3327,5.612]],["title/interfaces/Parser.html",[45,0.857,79,1.032]],["body/interfaces/Parser.html",[3,0.068,4,0.068,5,0.068,6,0.092,10,0.051,11,0.757,19,0.494,24,1.225,25,0.239,26,0.225,28,0.182,29,0.009,30,0.165,31,0.118,32,0.167,33,1.035,35,0.769,39,1.061,45,1.453,48,0.221,51,1.593,52,0.644,59,1.872,61,1.826,63,1.86,65,1.544,67,1.44,69,1.697,71,1.739,73,1.581,74,0.137,78,1.356,79,1.867,83,1.351,84,0.631,85,0.521,88,0.811,92,0.789,96,0.54,97,1.879,108,0.927,128,0.838,141,1.389,150,1.175,151,1.313,158,1.739,167,2.043,190,1.776,348,0.164,407,0.608,418,0.005,419,0.005,420,3.11,421,2.038,422,2.287,423,2.196,424,2.287,425,3.381,426,1.733,427,3.474,428,2.787,429,2.388,430,3.381,431,2.287,432,2.287,433,3.381,434,2.388,435,3.029,436,2.196,437,2.609,438,2.529,439,2.609,440,3.402,441,3.778,442,2.848,443,1.843,444,2.287,445,2.287,446,2.287,447,3.461,448,1.968,449,2.993,450,3.238,451,1.903,452,3.238,453,0.789,454,0.906,455,1.786,456,2.84,457,1.903,458,2.993,459,3.192,460,2.13,461,2.695,462,1.924,463,2.993,464,3.11,465,1.969,466,3.11,467,2.609,468,2.609,469,2.787,470,3.238,471,3.11,472,2.196,473,3.381,474,4.472,475,3.381,476,2.502,477,4.9,478,2.502,479,2.502,480,2.287,481,3.381,482,4.719,483,4.809,484,2.388,485,3.381,486,2.502,487,2.502,488,4.112,489,2.502,490,3.381,491,4.088,492,2.502,493,2.502,494,3.381,495,2.502,496,3.381,497,2.388,498,3.381,499,2.388,500,3.381,501,2.388,502,3.381,503,3.778,504,2.114,505,3.778,506,3.542,507,3.542,508,3.381,509,2.502,510,2.502,511,2.502,512,2.388,513,3.381,514,2.502,515,2.502,516,2.388,517,3.381,518,2.993,519,2.502,520,2.502,521,2.502,522,2.502,523,3.381,524,2.502,525,2.502,526,2.228,527,2.228,528,3.925,529,3.381,530,3.542,531,3.542,532,2.502,533,3.542,534,4.472,535,2.502,536,2.502,537,3.542,538,2.388,539,3.381,540,2.502,541,2.502,542,2.502,543,1.903,544,3.381,545,2.695,546,3.381,547,3.381,548,3.381,549,1.782,550,2.54,551,3.925,552,3.381,553,4.678,554,5.42,555,5.42,556,5.42,557,2.388,558,3.381,559,4.472,560,2.388,561,3.381,562,3.542,563,2.388,564,3.381,565,3.992,566,3.542,567,2.388,568,3.381,569,2.993,570,2.388,571,3.381,572,3.542,573,2.388,574,3.381,575,3.542,576,2.388,577,3.381,578,3.925,579,3.381,580,4.9,581,2.388,582,3.381,583,2.388,584,3.381,585,2.388,586,3.381,587,2.388,588,3.381,589,2.388,590,3.381,591,2.388,592,3.381,593,2.388,594,2.038,595,2.993,596,2.609,597,1.92,598,3.238,599,3.238,600,3.11,601,2.388,602,2.388,603,2.287,604,1.968,605,2.388,606,2.114,607,2.502,608,2.502,609,2.502,610,2.287,611,2.388,612,2.388,613,4.659,614,3.61,615,3.476,616,4.112,617,2.453,618,2.787,619,3.476,620,2.038,621,3.35,622,2.038,623,2.609,624,2.038,625,2.173,626,1.92,627,3.238,628,2.114,629,2.502,630,2.038,631,2.314,632,0.927,633,2.502,634,1.968,635,2.196,636,1.968,637,2.388,638,2.502,639,2.502,640,1.786,641,2.502,642,2.287,643,2.388,644,3.238,645,4.349,646,1.391,647,2.287,648,2.287,649,2.287,650,1.589,651,2.801,652,2.196,653,2.993,654,2.114,655,3.11,656,2.388,657,2.993,658,2.388,659,3.238,660,2.196,661,3.238,662,3.11,663,2.13,664,2.287,665,2.038,666,2.196,667,1.843,668,2.287,669,1.843,670,2.287,671,2.502,672,2.196,673,2.388,674,1.903,675,1.968,676,1.843,677,1.843,678,2.287,679,2.388,680,2.196,681,2.114,682,2.038,725,0.997,1969,2.287,1978,2.287,3328,3.963,3329,3.963,3330,3.963]],["title/interfaces/ParserOptions.html",[51,0.818,79,1.032]],["body/interfaces/ParserOptions.html",[3,0.068,4,0.068,5,0.068,6,0.051,10,0.051,19,0.492,24,1.223,25,0.239,28,0.101,29,0.009,30,0.159,31,0.119,32,0.226,33,1.013,39,1.004,45,1.375,48,0.22,51,1.48,52,0.643,59,1.868,61,1.823,63,1.858,65,1.541,67,1.437,69,1.694,71,1.736,73,1.578,74,0.137,78,1.352,79,1.866,83,1.137,84,0.637,85,0.519,88,0.81,92,0.787,96,0.539,97,1.876,108,0.925,128,0.836,141,1.387,150,1.175,151,1.31,158,1.736,167,1.615,190,1.774,348,0.269,407,0.607,418,0.005,419,0.005,420,3.104,421,2.033,422,2.281,423,2.19,424,2.281,425,4.5,426,1.728,427,3.469,428,2.781,429,2.382,430,4.5,431,2.281,432,2.281,433,4.5,434,2.382,435,3.606,436,2.19,437,2.604,438,3.188,439,3.29,440,3.725,441,4.137,442,2.843,443,1.838,444,2.281,445,2.281,446,2.281,447,3.458,448,1.963,449,2.987,450,3.232,451,1.898,452,3.232,453,0.787,454,0.904,455,1.781,456,2.837,457,1.898,458,2.987,459,3.594,460,2.126,461,2.69,462,1.921,463,2.987,464,3.104,465,1.965,466,3.104,467,2.604,468,2.604,469,2.781,470,3.232,471,3.104,472,2.19,473,3.375,474,4.466,475,3.375,476,2.495,477,4.896,478,2.495,479,2.495,480,2.281,481,3.375,482,4.714,483,4.806,484,2.382,485,3.375,486,2.495,487,2.495,488,4.106,489,2.495,490,3.375,491,4.083,492,2.495,493,2.495,494,3.375,495,2.495,496,3.375,497,2.382,498,3.375,499,2.382,500,3.375,501,2.382,502,3.375,503,3.773,504,2.108,505,3.773,506,3.535,507,3.535,508,3.375,509,2.495,510,2.495,511,2.495,512,2.382,513,3.375,514,2.495,515,2.495,516,2.382,517,3.375,518,2.987,519,2.495,520,2.495,521,2.495,522,2.495,523,3.375,524,2.495,525,2.495,526,2.225,527,2.225,528,3.919,529,3.375,530,3.535,531,3.535,532,2.495,533,3.535,534,4.466,535,2.495,536,2.495,537,3.535,538,2.382,539,3.375,540,2.495,541,2.495,542,2.495,543,1.898,544,3.375,545,2.69,546,3.375,547,3.375,548,3.375,549,1.778,550,2.537,551,3.919,552,3.375,553,4.674,554,5.417,555,5.417,556,5.417,557,2.382,558,3.375,559,4.466,560,2.382,561,3.375,562,3.535,563,2.382,564,3.375,565,3.99,566,3.535,567,2.382,568,3.375,569,2.987,570,2.382,571,3.375,572,3.535,573,2.382,574,3.375,575,3.535,576,2.382,577,3.375,578,3.919,579,3.375,580,4.896,581,2.382,582,3.375,583,2.382,584,3.375,585,2.382,586,3.375,587,2.382,588,3.375,589,2.382,590,3.375,591,2.382,592,3.375,593,2.382,594,2.033,595,2.987,596,2.604,597,1.916,598,4.31,599,4.31,600,4.139,601,2.382,602,2.382,603,2.281,604,1.963,605,2.382,606,2.108,607,2.495,608,2.495,609,2.495,610,2.281,611,2.382,612,2.382,613,3.921,614,3.604,615,3.024,616,4.106,617,2.448,618,2.781,619,3.024,620,2.033,621,3.345,622,2.033,623,1.838,624,2.033,625,2.17,626,1.916,627,3.232,628,2.108,629,2.495,630,2.033,631,2.309,632,0.925,633,2.495,634,1.963,635,2.19,636,1.963,637,2.382,638,2.495,639,2.495,640,1.781,641,2.495,642,2.281,643,2.382,644,3.232,645,4.346,646,1.387,647,2.281,648,2.281,649,2.281,650,1.585,651,2.799,652,2.19,653,2.987,654,2.108,655,3.104,656,2.382,657,2.987,658,2.382,659,3.232,660,2.19,661,3.232,662,3.104,663,2.126,664,2.281,665,2.033,666,2.19,667,1.838,668,2.281,669,1.838,670,2.281,671,2.495,672,2.19,673,2.382,674,1.898,675,1.963,676,1.838,677,1.838,678,2.281,679,2.382,680,2.19,681,2.108,682,2.033]],["title/interfaces/PassedInitialConfig.html",[79,1.032,2572,3.554]],["body/interfaces/PassedInitialConfig.html",[0,0.496,3,0.108,4,0.108,5,0.108,6,0.082,10,0.082,13,1.66,29,0.009,31,0.099,32,0.218,48,0.499,52,0.725,74,0.131,79,1.479,85,0.83,88,0.95,96,0.788,128,1.138,348,0.315,418,0.007,419,0.007,421,3.251,435,3.545,636,4.44,1390,3.831,1635,4.44,1992,3.139,2091,5.437,2097,4.198,2563,4.44,2564,5.355,2566,5.582,2567,6.732,2568,6.361,2569,5.97,2570,5.582,2572,7.011,2574,7.505,2575,6.732,2576,6.732,2577,5.094,2578,6.732,2579,6.732,2580,5.582,2581,6.598,2582,7.505,2583,6.732,2584,4.44,2585,4.73,2586,5.582,2587,5.582,2588,7.682,2589,7.804,2590,5.582,2591,5.582,2592,5.582,2593,5.582,2594,5.582,2595,7.505,2596,6.732,2597,6.732,2598,6.732,2599,6.732,2600,6.732,2601,5.094,2602,5.582,2603,5.582,2604,5.582,2605,5.582,2606,6.732,2607,4.73,2608,5.582,2609,5.094]],["title/interfaces/Renderable.html",[9,1.303,79,1.032]],["body/interfaces/Renderable.html",[0,0.665,1,2.345,3,0.039,4,0.039,5,0.039,6,0.076,7,0.941,8,1.576,9,2.525,10,0.03,11,0.626,12,1.931,13,1.729,15,2.421,16,1.338,17,2.15,19,0.779,20,0.259,22,1.651,23,1.86,24,1.654,25,0.234,26,0.184,28,0.095,29,0.009,30,0.155,31,0.112,32,0.095,33,0.989,35,0.629,36,1.992,37,0.751,39,1.135,41,0.914,43,2.194,45,1.795,48,0.43,49,1.478,50,0.69,51,1.406,52,0.423,53,0.742,54,0.585,55,2.196,56,1.089,57,0.968,58,1.478,59,0.761,60,1.438,61,0.742,62,1.438,63,0.599,64,1.399,65,0.628,66,1.327,67,0.585,68,1.327,69,0.69,70,1.294,71,0.707,72,1.363,73,0.642,74,0.134,75,3.895,76,3.827,77,3.789,78,3.03,79,1.368,80,2.61,81,2.61,82,2.679,83,1.439,84,0.528,85,0.93,86,1.23,87,1.813,88,1.155,89,0.968,90,0.968,91,0.968,92,1.409,93,0.968,94,1.327,95,0.968,96,0.905,97,2.282,98,0.968,99,0.968,100,0.914,101,0.707,102,1.327,103,0.968,104,0.968,105,1.565,106,1.969,107,0.546,108,1.85,109,0.968,110,0.674,111,0.968,112,0.968,113,0.968,114,0.968,115,0.707,116,0.914,117,0.866,118,0.968,119,3.036,120,0.968,121,0.968,122,0.968,123,0.968,124,0.968,125,0.968,126,0.968,127,0.968,128,1.085,129,0.968,130,2.715,131,0.968,132,2.197,133,0.968,134,0.968,135,2.508,136,0.968,137,2.58,138,0.968,139,0.968,140,0.968,141,0.487,142,0.968,143,0.968,144,0.968,145,0.968,146,0.968,147,0.968,148,0.968,149,0.968,150,0.954,151,0.862,152,0.968,153,0.968,154,0.968,155,0.968,156,0.968,157,0.968,158,0.707,159,0.968,160,2.677,161,2.482,162,0.968,163,0.968,164,0.628,165,0.968,166,0.968,167,0.658,168,1.565,169,0.968,170,0.968,171,0.941,172,0.968,173,0.941,174,2.243,175,0.761,176,2.041,177,2.434,178,1.51,179,2.655,180,1.969,181,3.316,182,1.565,183,1.969,184,2.261,185,1.565,186,0.968,187,1.969,188,1.969,189,2.261,190,0.572,191,1.565,192,0.968,193,1.969,194,0.968,195,1.913,196,0.968,197,0.968,198,0.968,199,0.968,200,0.968,201,0.968,202,0.968,203,0.968,204,0.968,205,0.968,206,0.968,207,0.968,208,0.968,209,1.294,210,0.968,211,0.968,212,1.913,213,0.968,214,0.968,215,0.968,216,0.968,217,1.913,218,0.968,219,1.565,220,0.968,221,0.968,222,0.968,223,0.968,224,0.968,225,0.968,226,0.968,227,1.969,228,0.968,229,0.968,230,0.968,231,0.968,232,0.968,233,0.968,234,0.968,235,0.968,236,0.968,237,0.968,238,0.968,239,0.968,240,0.968,241,0.968,242,0.968,243,0.968,244,0.968,245,0.968,246,0.968,247,0.968,248,0.968,249,0.968,250,0.968,251,0.968,252,0.968,253,0.968,254,0.968,255,0.968,256,1.913,257,0.968,258,0.968,259,0.968,260,0.968,261,0.968,262,0.968,263,1.913,264,0.968,265,0.914,266,1.565,267,0.968,268,1.565,269,1.913,270,0.968,271,0.968,272,0.968,273,0.968,274,0.968,275,0.968,276,1.913,277,0.968,278,0.968,279,2.261,280,2.482,281,1.565,282,0.968,283,0.968,284,1.089,285,0.968,286,0.968,287,1.969,288,0.968,289,0.968,290,0.968,291,0.968,292,0.968,293,0.968,294,0.968,295,0.968,296,0.968,297,0.968,298,0.968,299,0.968,300,0.968,301,0.968,302,0.968,303,0.968,304,0.968,305,0.968,306,0.968,307,0.968,308,0.968,309,0.968,310,1.913,311,0.968,312,0.968,313,0.968,314,0.968,315,0.968,316,0.968,317,0.968,318,0.968,319,0.968,320,0.968,321,0.968,322,0.8,323,1.52,324,0.968,325,0.968,326,0.968,327,0.968,328,1.913,329,0.968,330,0.968,331,0.968,332,0.968,333,0.914,334,0.914,335,0.843,336,0.914,337,0.914,338,0.914,339,0.968,340,0.968,341,1.969,342,2.195,343,1.565,344,0.968,345,1.565,346,0.968,347,0.968,348,0.192,349,2.715,350,0.968,351,0.968,352,0.968,353,0.968,354,0.968,355,0.968,356,0.968,357,0.968,358,0.968,359,0.968,360,0.968,361,0.968,362,0.968,363,0.968,364,1.565,365,1.565,366,0.968,367,0.968,368,0.968,369,0.968,370,0.968,371,0.968,372,0.968,373,0.968,374,0.968,375,0.968,376,0.941,377,0.968,378,0.941,379,0.968,380,0.968,381,0.968,382,0.968,383,0.968,384,1.761,385,1.399,386,0.968,387,0.968,388,0.968,389,0.968,390,0.968,391,0.968,392,0.968,393,0.761,394,0.968,395,0.968,396,0.968,397,0.968,398,0.968,399,0.968,400,0.968,401,1.913,402,0.968,403,0.968,404,0.968,405,0.968,406,2.508,407,0.497,408,0.968,409,0.914,410,2.508,411,0.968,412,0.78,413,2.655,414,0.968,415,2.261,416,0.968,417,0.707,418,0.004,419,0.004,421,1.173,3331,2.281,3332,2.281,3333,2.281,3334,2.281]],["title/interfaces/ResponseJson.html",[79,1.032,2551,3.554]],["body/interfaces/ResponseJson.html",[0,0.475,3,0.104,4,0.104,5,0.104,6,0.079,10,0.079,19,1.001,20,0.251,25,0.234,29,0.009,30,0.165,31,0.115,35,0.715,37,1.513,48,0.414,74,0.091,79,1.417,85,1.101,88,0.755,96,0.583,150,1.13,151,2.047,178,2.418,348,0.307,407,0.566,418,0.007,419,0.007,421,3.115,428,4.161,447,3.798,455,3.874,545,3.859,597,2.749,617,3.248,618,4.161,620,4.308,737,2.817,739,2.909,1171,4.69,1411,2.072,1547,5.05,1618,4.638,1659,3.568,1660,4.842,1671,4.477,1719,4.69,1741,6.013,1816,6.269,1817,6.269,1826,4.933,1829,5.884,1832,5.218,1840,5.884,1847,4.023,1859,4.254,1875,4.254,1888,3.65,1894,4.533,2535,5.987,2536,4.882,2537,4.882,2538,4.882,2539,4.882,2540,4.882,2541,5.348,2542,7.962,2546,5.348,2551,5.987,2552,5.348,2553,5.348,2554,5.348,2555,5.348,2556,6.56,2557,5.348,2558,5.348,2559,5.348,2560,5.348,2561,5.348,2562,5.348]],["title/interfaces/ResponseOptions.html",[79,1.032,610,2.545]],["body/interfaces/ResponseOptions.html",[3,0.069,4,0.069,5,0.069,6,0.053,10,0.053,19,0.505,24,1.245,25,0.239,28,0.104,29,0.009,30,0.16,31,0.118,32,0.184,33,1.017,39,1.016,45,1.391,48,0.226,51,1.49,52,0.654,59,1.902,61,1.856,63,1.879,65,1.569,67,1.463,69,1.725,71,1.767,73,1.606,74,0.137,78,1.387,79,1.879,83,1.15,84,0.632,85,0.533,88,0.822,92,0.807,96,0.549,97,1.902,108,0.948,128,0.851,141,1.407,150,1.193,151,1.334,158,1.767,167,1.644,190,1.794,348,0.273,407,0.668,418,0.006,419,0.006,420,3.16,421,2.085,422,2.34,423,2.247,424,2.34,425,3.436,426,1.772,427,3.517,428,2.831,429,2.443,430,3.436,431,2.34,432,2.34,433,3.436,434,2.443,435,3.066,436,2.247,437,2.651,438,2.569,439,2.651,440,3.436,441,3.816,442,2.883,443,1.885,444,2.34,445,2.34,446,2.34,447,3.481,448,2.013,449,3.041,450,3.29,451,1.947,452,4.129,453,0.807,454,0.927,455,1.827,456,2.869,457,1.947,458,3.041,459,3.224,460,2.164,461,2.738,462,1.948,463,3.041,464,3.16,465,2.001,466,3.16,467,2.651,468,2.651,469,2.831,470,3.29,471,3.16,472,2.247,473,3.436,474,4.517,475,3.436,476,2.559,477,4.936,478,2.559,479,2.559,480,2.34,481,3.436,482,4.759,483,4.841,484,2.443,485,3.436,486,2.559,487,2.559,488,4.163,489,2.559,490,3.436,491,4.129,492,2.559,493,2.559,494,3.436,495,2.559,496,3.436,497,2.443,498,3.436,499,2.443,500,3.436,501,2.443,502,3.436,503,3.816,504,2.162,505,3.816,506,3.599,507,3.599,508,3.436,509,2.559,510,2.559,511,2.559,512,2.443,513,3.436,514,2.559,515,2.559,516,2.443,517,3.436,518,3.041,519,2.559,520,2.559,521,2.559,522,2.559,523,3.436,524,2.559,525,2.559,526,2.256,527,2.256,528,3.974,529,3.436,530,3.599,531,3.599,532,2.559,533,3.599,534,4.517,535,2.559,536,2.559,537,3.599,538,2.443,539,3.436,540,2.559,541,2.559,542,2.559,543,1.947,544,3.436,545,2.738,546,3.436,547,3.436,548,3.436,549,1.81,550,2.572,551,3.974,552,3.436,553,4.712,554,5.442,555,5.442,556,5.442,557,2.443,558,3.436,559,4.517,560,2.443,561,3.436,562,3.599,563,2.443,564,3.436,565,4.008,566,3.599,567,2.443,568,3.436,569,3.041,570,2.443,571,3.436,572,3.599,573,2.443,574,3.436,575,3.599,576,2.443,577,3.436,578,3.974,579,3.436,580,4.936,581,2.443,582,3.436,583,2.443,584,3.436,585,2.443,586,3.436,587,2.443,588,3.436,589,2.443,590,3.436,591,2.443,592,3.436,593,2.443,594,2.085,595,3.041,596,2.651,597,1.951,598,3.29,599,3.29,600,3.16,601,2.443,602,2.443,603,2.34,604,2.013,605,2.443,606,2.162,607,2.559,608,2.559,609,2.559,610,3.29,611,4.312,612,4.312,613,3.965,614,3.655,615,3.066,616,4.163,617,2.492,618,2.831,619,3.066,620,2.085,621,3.391,622,2.085,623,1.885,624,2.085,625,2.2,626,1.951,627,3.29,628,2.162,629,2.559,630,2.085,631,2.351,632,0.948,633,2.559,634,2.013,635,2.247,636,2.013,637,2.443,638,2.559,639,2.559,640,1.827,641,2.559,642,2.34,643,2.443,644,3.29,645,4.374,646,1.423,647,2.34,648,2.34,649,2.34,650,1.625,651,2.819,652,2.247,653,3.041,654,2.162,655,3.16,656,2.443,657,3.041,658,2.443,659,3.29,660,2.247,661,3.29,662,3.16,663,2.164,664,2.34,665,2.085,666,2.247,667,1.885,668,2.34,669,1.885,670,2.34,671,2.559,672,2.247,673,2.443,674,1.947,675,2.013,676,1.885,677,1.885,678,2.34,679,2.443,680,2.247,681,2.162,682,2.085]],["title/classes/SearchExpression.html",[0,0.346,70,1.548]],["body/classes/SearchExpression.html",[0,0.482,2,0.197,3,0.077,4,0.077,5,0.077,6,0.115,8,1.08,9,2.486,10,0.059,11,0.828,12,1.964,13,2.122,14,2.766,15,2.428,16,1.77,17,2.106,18,1.902,19,0.869,20,0.254,25,0.212,26,0.314,28,0.225,29,0.009,30,0.167,31,0.119,32,0.221,33,0.884,35,1.054,36,1.857,37,1.646,39,0.871,40,1.949,41,1.808,43,1.902,45,1.693,48,0.437,51,1.294,52,0.704,54,1.157,55,2.061,56,2.061,70,3.282,74,0.113,80,2.387,81,2.387,82,2.445,83,1.299,84,0.554,85,0.806,88,1.007,96,0.87,101,1.398,107,1.08,115,1.398,128,0.673,141,0.962,164,2.061,174,1.689,175,1.505,176,1.902,177,1.667,209,2.449,284,1.332,322,1.583,348,0.254,385,1.712,393,2.328,407,0.573,417,1.902,418,0.006,419,0.006,454,1.951,550,1.759,631,2.877,632,1.055,646,2.154,663,2.33,708,4.144,709,3.875,710,4.405,711,3.244,712,4.153,713,2.32,715,2.626,716,2.995,718,4.665,721,2.995,723,4.029,725,0.939,731,2.995,732,2.995,733,2.995,737,2.097,739,2.166,740,2.406,741,2.406,742,2.406,743,2.406,746,2.406,749,2.32,750,2.406,759,2.603,800,4.076,801,4.311,802,2.5,1096,4.311,1158,4.947,1343,6.457,1360,7.377,1361,5.604,3320,3.375,3335,3.635,3336,6.161,3337,6.161,3338,7.75,3339,6.138,3340,4.51,3341,4.51,3342,5.42,3343,4.51,3344,4.51,3345,4.51,3346,4.51,3347,4.51,3348,4.51,3349,4.51,3350,5.42,3351,4.51,3352,5.42,3353,4.51,3354,4.51,3355,5.42,3356,4.51,3357,4.51,3358,4.51,3359,4.947,3360,3.983,3361,3.983,3362,7.534,3363,6.917,3364,3.983,3365,3.983,3366,3.983,3367,5.42,3368,5.42,3369,5.42,3370,3.983,3371,5.42,3372,3.983,3373,3.983,3374,3.983,3375,3.983,3376,5.42,3377,3.983,3378,3.983,3379,3.983,3380,3.983,3381,3.983]],["title/classes/SearchTerm.html",[0,0.346,3359,3.554]],["body/classes/SearchTerm.html",[0,0.52,2,0.221,3,0.087,4,0.087,5,0.087,6,0.11,8,1.587,9,2.468,10,0.066,11,0.894,12,2.041,13,1.741,15,2.524,16,1.912,17,2.189,18,2.055,19,0.921,20,0.274,21,4.47,25,0.226,26,0.288,28,0.19,29,0.009,30,0.151,31,0.114,32,0.19,33,0.926,35,0.926,36,1.532,37,1.35,40,1.608,41,2.03,43,2.055,45,1.726,48,0.454,51,1.372,52,0.761,54,1.299,55,2.184,56,1.958,70,3.249,74,0.118,80,2.468,81,2.468,82,2.528,83,1.343,84,0.537,85,0.871,88,1.041,96,0.881,101,1.569,107,1.212,115,1.569,164,2.159,175,1.689,176,2.055,177,1.871,284,1.495,322,1.777,385,1.922,393,2.467,407,0.473,417,2.055,418,0.006,419,0.006,454,1.69,550,1.975,631,2.734,663,2.517,708,3.184,710,3.196,711,2.354,712,4.155,718,4.7,723,3.802,737,2.354,739,2.431,740,2.7,741,2.7,742,2.7,743,2.7,746,2.7,749,2.604,750,2.7,800,4.403,801,4.456,802,2.806,1096,4.657,1158,5.343,1343,6.252,1360,7.372,1361,3.788,3320,3.788,3335,4.08,3336,4.47,3337,4.47,3338,7.711,3342,4.47,3350,4.47,3352,4.47,3355,4.47,3359,6.322,3360,4.47,3361,4.47,3362,7.711,3363,7.19,3364,4.47,3365,4.47,3366,4.47,3367,5.854,3368,5.854,3369,5.854,3370,4.47,3371,5.854,3372,4.47,3373,4.47,3374,4.47,3375,4.47,3376,5.854,3377,4.47,3378,4.47,3379,4.47,3380,4.47,3381,4.47,3382,5.063,3383,5.063,3384,5.063,3385,5.063,3386,5.063,3387,5.063]],["title/classes/SegmentHandler.html",[0,0.346,2656,3.3]],["body/classes/SegmentHandler.html",[0,0.573,2,0.258,3,0.101,4,0.101,5,0.101,6,0.118,10,0.076,11,0.985,18,2.264,19,1.063,20,0.244,25,0.223,26,0.312,28,0.23,29,0.009,30,0.171,31,0.117,32,0.219,33,1.077,35,1.05,39,1.251,48,0.463,52,0.838,54,1.512,74,0.11,84,0.5,92,1.453,96,0.885,128,0.88,322,2.068,418,0.007,419,0.007,438,3.291,457,2.83,460,2.237,461,2.83,462,1.74,463,3.143,465,2.068,632,1.708,725,1.27,1521,5.465,1657,5.129,1659,2.83,1710,4.85,2098,3.913,2186,6.188,2629,6.209,2635,5.886,2641,4.748,2656,5.465,2720,4.748,2721,5.202,2730,5.202,2731,6.449,2732,6.449,2733,6.449,2734,6.449,2735,6.449,2736,7.008,2737,7.326,2738,5.202,2739,7.326,2740,6.449,2741,7.008,2742,7.326,2743,5.202,2744,7.326,2745,5.202,2746,5.202,2747,5.202,2748,5.202,2749,5.202,2750,5.202,2751,5.202,3388,5.892,3389,5.892,3390,5.892,3391,5.892,3392,5.892,3393,5.892,3394,5.892,3395,5.892,3396,5.892,3397,5.892,3398,5.892,3399,5.892]],["title/classes/SelectExpression.html",[0,0.346,72,1.63]],["body/classes/SelectExpression.html",[0,0.435,2,0.242,3,0.095,4,0.095,5,0.095,6,0.113,9,2.528,10,0.072,11,0.947,12,2.034,13,2.247,14,3.166,15,2.391,16,2.026,17,2.181,18,2.177,19,0.875,20,0.291,25,0.208,26,0.314,28,0.228,29,0.009,30,0.169,31,0.12,32,0.223,33,0.653,35,1.056,36,2.125,37,1.743,39,1.152,40,2.231,41,2.22,43,1.716,45,1.664,48,0.453,51,1.303,52,0.636,55,2.075,56,2.279,72,3.44,74,0.106,80,2.279,81,2.279,82,2.334,83,1.24,84,0.379,85,0.728,86,2.344,88,0.961,96,0.847,108,1.805,115,1.716,128,0.827,141,1.181,174,1.933,176,1.716,209,2.708,284,1.636,348,0.291,407,0.656,417,1.716,418,0.007,419,0.007,454,1.764,550,2.16,631,3.182,632,1.296,663,2.667,708,4.297,709,4.435,710,4.435,711,3.588,712,4.09,713,2.848,715,2.76,716,3.678,718,3.196,721,3.678,723,4.307,725,0.848,731,3.678,732,3.678,733,3.678,736,2.954,737,2.575,739,2.66,740,2.954,741,2.954,742,2.954,743,2.954,746,2.954,749,2.848,750,2.954,752,3.196,759,4.054,764,5.661,801,2.954,802,3.069,1097,5.257,1143,4.89,3400,4.89,3401,5.538,3402,5.538,3403,5.538,3404,5.538,3405,5.538,3406,5.538,3407,5.538,3408,5.538,3409,5.538,3410,5.538]],["title/classes/StringAndCollectionFunctions.html",[0,0.346,195,1.819]],["body/classes/StringAndCollectionFunctions.html",[0,0.661,1,2.307,2,0.097,3,0.038,4,0.038,5,0.038,6,0.088,7,0.911,8,1.555,9,2.502,10,0.029,11,0.612,12,1.804,13,1.706,15,2.327,16,0.637,17,2.053,19,0.768,20,0.255,22,1.621,23,1.82,24,1.639,25,0.233,26,0.224,28,0.167,29,0.009,30,0.16,31,0.113,32,0.167,33,1.016,35,0.767,36,1.966,39,1.127,43,2.099,45,1.791,48,0.426,49,1.44,50,0.668,51,1.393,52,0.412,53,0.719,54,0.567,55,2.175,56,1.061,57,0.938,58,1.44,59,0.737,60,1.401,61,0.719,62,1.401,63,0.58,64,1.364,65,0.608,66,1.294,67,0.567,68,1.294,69,0.668,70,1.261,71,0.685,72,1.328,73,0.622,74,0.133,75,3.901,76,3.844,77,3.798,78,3.026,79,1.346,80,2.601,81,2.601,82,2.67,83,1.435,84,0.523,85,0.92,86,1.199,87,1.783,88,1.153,89,0.938,90,0.938,91,0.938,92,1.393,93,0.938,94,1.294,95,0.938,96,0.905,97,2.265,98,0.938,99,0.938,100,0.886,101,0.685,102,1.294,103,0.938,104,0.938,105,1.525,106,1.927,107,0.529,108,1.837,109,0.938,110,0.653,111,0.938,112,0.938,113,0.938,114,0.938,115,0.685,116,0.886,117,0.839,118,0.938,119,3.015,120,0.938,121,0.938,122,0.938,123,0.938,124,0.938,125,0.938,126,0.938,127,0.938,128,1.198,129,0.938,130,2.68,131,0.938,132,2.156,133,0.938,134,0.938,135,2.472,136,0.938,137,2.542,138,0.938,139,0.938,140,0.938,141,1.444,142,0.938,143,0.938,144,0.938,145,0.938,146,0.938,147,0.938,148,0.938,149,0.938,150,1.03,151,0.84,152,0.938,153,0.938,154,0.938,155,0.938,156,0.938,157,0.938,158,0.685,159,0.938,160,2.652,161,2.442,162,0.938,163,0.938,164,0.608,165,0.938,166,0.938,167,0.637,168,1.525,169,0.938,170,0.938,171,0.911,172,0.938,173,0.911,174,2.228,175,0.737,176,2.014,177,2.402,178,1.478,179,2.617,180,1.927,181,3.29,182,1.525,183,1.927,184,2.219,185,1.525,186,0.938,187,1.927,188,1.927,189,2.219,190,0.554,191,1.525,192,0.938,193,1.927,194,0.938,195,2.156,196,1.525,197,0.938,198,1.525,199,0.938,200,1.525,201,0.938,202,1.525,203,0.938,204,1.525,205,0.938,206,1.525,207,0.938,208,1.927,209,2.164,210,0.938,211,0.938,212,1.872,213,0.938,214,0.938,215,0.938,216,0.938,217,1.872,218,0.938,219,1.525,220,0.938,221,0.938,222,0.938,223,0.938,224,0.938,225,0.938,226,0.938,227,1.927,228,0.938,229,0.938,230,0.938,231,0.938,232,0.938,233,0.938,234,0.938,235,0.938,236,0.938,237,0.938,238,0.938,239,0.938,240,0.938,241,0.938,242,0.938,243,0.938,244,0.938,245,0.938,246,0.938,247,0.938,248,0.938,249,0.938,250,0.938,251,0.938,252,0.938,253,0.938,254,0.938,255,0.938,256,1.872,257,0.938,258,0.938,259,0.938,260,0.938,261,0.938,262,0.938,263,1.872,264,0.938,265,0.886,266,1.525,267,0.938,268,1.525,269,1.872,270,0.938,271,0.938,272,0.938,273,0.938,274,0.938,275,0.938,276,1.872,277,0.938,278,0.938,279,2.219,280,2.442,281,1.525,282,0.938,283,0.938,284,1.061,285,0.938,286,0.938,287,1.927,288,0.938,289,0.938,290,0.938,291,0.938,292,0.938,293,0.938,294,0.938,295,0.938,296,0.938,297,0.938,298,0.938,299,0.938,300,0.938,301,0.938,302,0.938,303,0.938,304,0.938,305,0.938,306,0.938,307,0.938,308,0.938,309,0.938,310,1.872,311,0.938,312,0.938,313,0.938,314,0.938,315,0.938,316,0.938,317,0.938,318,0.938,319,0.938,320,0.938,321,0.938,322,0.775,323,1.482,324,0.938,325,0.938,326,0.938,327,0.938,328,1.872,329,0.938,330,0.938,331,0.938,332,0.938,333,0.886,334,0.886,335,0.817,336,0.886,337,0.886,338,0.886,339,0.938,340,0.938,341,1.927,342,2.164,343,1.525,344,0.938,345,1.525,346,0.938,347,0.938,348,0.188,349,2.68,350,0.938,351,0.938,352,0.938,353,0.938,354,0.938,355,0.938,356,0.938,357,0.938,358,0.938,359,0.938,360,0.938,361,0.938,362,0.938,363,0.938,364,1.525,365,1.525,366,0.938,367,0.938,368,0.938,369,0.938,370,0.938,371,0.938,372,0.938,373,0.938,374,0.938,375,0.938,376,0.911,377,0.938,378,0.911,379,0.938,380,0.938,381,0.938,382,0.938,383,0.938,384,1.723,385,1.364,386,0.938,387,0.938,388,0.938,389,0.938,390,0.938,391,0.938,392,0.938,393,0.737,394,0.938,395,0.938,396,0.938,397,0.938,398,0.938,399,0.938,400,0.938,401,1.872,402,0.938,403,0.938,404,0.938,405,0.938,406,2.472,407,0.488,408,0.938,409,0.886,410,2.472,411,0.938,412,0.756,413,2.617,414,0.938,415,2.219,416,0.938,417,0.685,418,0.003,419,0.003,725,0.338,1353,3.172,3411,3.592,3412,3.592,3413,3.592,3414,3.592,3415,2.209,3416,2.209,3417,2.209,3418,2.209,3419,2.209,3420,2.209,3421,2.209,3422,2.209]],["title/classes/StringFunctions.html",[0,0.346,217,1.819]],["body/classes/StringFunctions.html",[0,0.663,1,2.33,2,0.098,3,0.039,4,0.039,5,0.039,6,0.075,7,0.929,8,1.568,9,2.509,10,0.029,11,0.62,12,1.815,13,1.72,15,2.34,16,0.65,17,2.063,19,0.775,20,0.257,22,1.639,23,1.844,24,1.648,25,0.234,26,0.183,28,0.136,29,0.009,30,0.158,31,0.112,32,0.136,33,1.007,35,0.624,36,1.982,39,1.132,43,2.114,45,1.793,48,0.428,49,1.463,50,0.682,51,1.401,52,0.419,53,0.733,54,0.578,55,2.188,56,1.078,57,0.956,58,1.463,59,0.752,60,1.423,61,0.733,62,1.423,63,0.592,64,1.385,65,0.62,66,1.314,67,0.578,68,1.314,69,0.682,70,1.281,71,0.698,72,1.349,73,0.635,74,0.134,75,3.899,76,3.825,77,3.795,78,3.049,79,1.359,80,2.607,81,2.607,82,2.676,83,1.437,84,0.526,85,0.926,86,1.218,87,1.801,88,1.154,89,0.956,90,0.956,91,0.956,92,1.403,93,0.956,94,1.314,95,0.956,96,0.905,97,2.275,98,0.956,99,0.956,100,0.903,101,0.698,102,1.314,103,0.956,104,0.956,105,1.549,106,1.953,107,0.539,108,1.845,109,0.956,110,0.665,111,0.956,112,0.956,113,0.956,114,0.956,115,0.698,116,0.903,117,0.855,118,0.956,119,3.028,120,0.956,121,0.956,122,0.956,123,0.956,124,0.956,125,0.956,126,0.956,127,0.956,128,1.163,129,0.956,130,2.701,131,0.956,132,2.181,133,0.956,134,0.956,135,2.494,136,0.956,137,2.565,138,0.956,139,0.956,140,0.956,141,1.24,142,0.956,143,0.956,144,0.956,145,0.956,146,0.956,147,0.956,148,0.956,149,0.956,150,0.95,151,0.854,152,0.956,153,0.956,154,0.956,155,0.956,156,0.956,157,0.956,158,0.698,159,0.956,160,2.667,161,2.467,162,0.956,163,0.956,164,0.62,165,0.956,166,0.956,167,0.65,168,1.549,169,0.956,170,0.956,171,0.929,172,0.956,173,0.929,174,2.237,175,0.752,176,2.03,177,2.421,178,1.497,179,2.64,180,1.953,181,3.306,182,1.549,183,1.953,184,2.245,185,1.549,186,0.956,187,1.953,188,1.953,189,2.245,190,0.565,191,1.549,192,0.956,193,1.953,194,0.956,195,1.897,196,0.956,197,0.956,198,0.956,199,0.956,200,0.956,201,0.956,202,0.956,203,0.956,204,0.956,205,0.956,206,0.956,207,0.956,208,0.956,209,1.281,210,0.956,211,0.956,212,1.897,213,0.956,214,0.956,215,0.956,216,0.956,217,2.181,218,1.953,219,2.245,220,0.956,221,1.549,222,0.956,223,1.549,224,0.956,225,1.549,226,0.956,227,1.953,228,0.956,229,0.956,230,0.956,231,0.956,232,0.956,233,0.956,234,0.956,235,0.956,236,0.956,237,0.956,238,0.956,239,0.956,240,0.956,241,0.956,242,0.956,243,0.956,244,0.956,245,0.956,246,0.956,247,0.956,248,0.956,249,0.956,250,0.956,251,0.956,252,0.956,253,0.956,254,0.956,255,0.956,256,1.897,257,0.956,258,0.956,259,0.956,260,0.956,261,0.956,262,0.956,263,1.897,264,0.956,265,0.903,266,1.549,267,0.956,268,1.549,269,1.897,270,0.956,271,0.956,272,0.956,273,0.956,274,0.956,275,0.956,276,1.897,277,0.956,278,0.956,279,2.245,280,2.467,281,1.549,282,0.956,283,0.956,284,1.078,285,0.956,286,0.956,287,1.953,288,0.956,289,0.956,290,0.956,291,0.956,292,0.956,293,0.956,294,0.956,295,0.956,296,0.956,297,0.956,298,0.956,299,0.956,300,0.956,301,0.956,302,0.956,303,0.956,304,0.956,305,0.956,306,0.956,307,0.956,308,0.956,309,0.956,310,1.897,311,0.956,312,0.956,313,0.956,314,0.956,315,0.956,316,0.956,317,0.956,318,0.956,319,0.956,320,0.956,321,0.956,322,0.791,323,1.505,324,0.956,325,0.956,326,0.956,327,0.956,328,1.897,329,0.956,330,0.956,331,0.956,332,0.956,333,0.903,334,0.903,335,0.833,336,0.903,337,0.903,338,0.903,339,0.956,340,0.956,341,1.953,342,2.183,343,1.549,344,0.956,345,1.549,346,0.956,347,0.956,348,0.19,349,2.701,350,0.956,351,0.956,352,0.956,353,0.956,354,0.956,355,0.956,356,0.956,357,0.956,358,0.956,359,0.956,360,0.956,361,0.956,362,0.956,363,0.956,364,1.549,365,1.549,366,0.956,367,0.956,368,0.956,369,0.956,370,0.956,371,0.956,372,0.956,373,0.956,374,0.956,375,0.956,376,0.929,377,0.956,378,0.929,379,0.956,380,0.956,381,0.956,382,0.956,383,0.956,384,1.746,385,1.385,386,0.956,387,0.956,388,0.956,389,0.956,390,0.956,391,0.956,392,0.956,393,0.752,394,0.956,395,0.956,396,0.956,397,0.956,398,0.956,399,0.956,400,0.956,401,1.897,402,0.956,403,0.956,404,0.956,405,0.956,406,2.494,407,0.494,408,0.956,409,0.903,410,2.494,411,0.956,412,0.771,413,2.64,414,0.956,415,2.245,416,0.956,417,0.698,418,0.004,419,0.004,3161,3.222,3423,3.649,3424,3.649,3425,2.253,3426,2.253,3427,2.253,3428,2.253,3429,2.253]],["title/interfaces/StructuredTypeFieldOptions.html",[79,1.032,613,2.444]],["body/interfaces/StructuredTypeFieldOptions.html",[3,0.07,4,0.07,5,0.07,6,0.053,10,0.053,19,0.508,24,1.249,25,0.239,28,0.105,29,0.009,30,0.16,31,0.118,33,1.018,39,1.018,45,1.394,48,0.227,51,1.492,52,0.657,59,1.909,61,1.862,63,1.883,65,1.574,67,1.468,69,1.731,71,1.773,73,1.612,74,0.138,78,1.394,79,1.882,83,1.153,84,0.632,85,0.535,88,0.824,92,0.811,96,0.551,97,1.907,108,1.677,128,0.854,141,1.411,150,1.181,151,1.338,158,1.773,167,1.65,190,1.798,348,0.274,407,0.67,418,0.006,419,0.006,420,3.171,421,2.095,422,2.351,423,2.258,424,2.351,425,3.448,426,1.781,427,3.527,428,2.841,429,2.455,430,3.448,431,2.351,432,2.351,433,3.448,434,2.455,435,3.075,436,2.258,437,2.66,438,2.578,439,2.66,440,3.444,441,3.825,442,2.891,443,1.895,444,2.351,445,2.351,446,2.351,447,3.485,448,2.023,449,3.052,450,3.302,451,1.957,452,3.302,453,0.811,454,0.931,455,1.836,456,2.875,457,1.957,458,3.052,459,3.232,460,2.172,461,2.748,462,1.953,463,3.052,464,3.171,465,2.008,466,3.171,467,2.66,468,2.66,469,2.841,470,3.302,471,3.171,472,2.258,473,3.448,474,4.527,475,3.448,476,2.572,477,4.944,478,2.572,479,2.572,480,2.351,481,3.448,482,4.768,483,4.848,484,2.455,485,3.448,486,2.572,487,2.572,488,4.174,489,2.572,490,3.448,491,4.139,492,2.572,493,2.572,494,3.448,495,2.572,496,3.448,497,2.455,498,3.448,499,2.455,500,3.448,501,2.455,502,3.448,503,3.825,504,2.173,505,3.825,506,3.612,507,3.612,508,3.448,509,2.572,510,2.572,511,2.572,512,2.455,513,3.448,514,2.572,515,2.572,516,2.455,517,3.448,518,3.052,519,2.572,520,2.572,521,2.572,522,2.572,523,3.448,524,2.572,525,2.572,526,2.262,527,2.262,528,3.985,529,3.448,530,3.612,531,3.612,532,2.572,533,3.612,534,4.527,535,2.572,536,2.572,537,3.612,538,2.455,539,3.448,540,2.572,541,2.572,542,2.572,543,1.957,544,3.448,545,2.748,546,3.448,547,3.448,548,3.448,549,1.817,550,2.579,551,3.985,552,3.448,553,4.72,554,5.447,555,5.447,556,5.447,557,2.455,558,3.448,559,4.527,560,2.455,561,3.448,562,3.612,563,2.455,564,3.448,565,4.012,566,3.612,567,2.455,568,3.448,569,3.052,570,2.455,571,3.448,572,3.612,573,2.455,574,3.448,575,3.612,576,2.455,577,3.448,578,3.985,579,3.448,580,4.944,581,2.455,582,3.448,583,2.455,584,3.448,585,2.455,586,3.448,587,2.455,588,3.448,589,2.455,590,3.448,591,2.455,592,3.448,593,2.455,594,2.095,595,3.052,596,2.66,597,1.957,598,3.302,599,3.302,600,3.171,601,2.455,602,2.455,603,2.351,604,2.023,605,2.455,606,2.173,607,2.572,608,2.572,609,2.572,610,2.351,611,2.455,612,2.455,613,4.186,614,4.186,615,3.075,616,4.174,617,2.501,618,2.841,619,3.075,620,2.095,621,3.401,622,2.095,623,1.895,624,2.095,625,2.206,626,1.957,627,3.302,628,2.173,629,2.572,630,2.095,631,2.36,632,0.953,633,2.572,634,2.023,635,2.258,636,2.023,637,2.455,638,2.572,639,2.572,640,1.836,641,2.572,642,2.351,643,2.455,644,3.302,645,4.379,646,1.43,647,2.351,648,2.351,649,2.351,650,1.634,651,2.823,652,2.258,653,3.052,654,2.173,655,3.171,656,2.455,657,3.052,658,2.455,659,3.302,660,2.258,661,3.302,662,3.171,663,2.172,664,2.351,665,2.095,666,2.258,667,1.895,668,2.351,669,1.895,670,2.351,671,2.572,672,2.258,673,2.455,674,1.957,675,2.023,676,1.895,677,1.895,678,2.351,679,2.455,680,2.258,681,2.173,682,2.095]],["title/classes/Type.html",[0,0.346,31,0.057]],["body/classes/Type.html",[0,0.663,1,2.325,2,0.098,3,0.038,4,0.038,5,0.038,6,0.088,7,0.926,8,1.631,9,2.519,10,0.029,11,0.619,12,1.923,13,1.848,14,1.64,15,2.412,16,1.323,17,2.142,18,1.128,19,0.849,20,0.271,22,1.636,23,1.84,24,1.647,25,0.235,26,0.226,28,0.149,29,0.009,30,0.16,31,0.115,32,0.135,33,1.002,35,0.684,36,2.061,37,1.075,39,1.143,40,0.713,41,0.9,43,2.182,45,1.794,48,0.428,49,1.459,50,0.679,51,1.399,52,0.418,53,0.73,54,0.576,55,2.185,56,1.075,57,0.953,58,1.459,59,0.749,60,1.419,61,0.73,62,1.419,63,0.589,64,1.381,65,0.618,66,1.31,67,0.576,68,1.31,69,0.679,70,1.277,71,0.696,72,1.345,73,0.632,74,0.134,75,3.894,76,3.824,77,3.786,78,3.025,79,1.357,80,2.606,81,2.606,82,2.675,83,1.437,84,0.525,85,0.925,86,1.214,87,1.798,88,1.154,89,0.953,90,0.953,91,0.953,92,1.401,93,0.953,94,1.31,95,0.953,96,0.905,97,2.273,98,0.953,99,0.953,100,0.9,101,0.696,102,1.31,103,0.953,104,0.953,105,1.544,106,1.948,107,0.537,108,1.844,109,0.953,110,0.663,111,0.953,112,0.953,113,0.953,114,0.953,115,0.696,116,0.9,117,0.852,118,0.953,119,3.026,120,0.953,121,0.953,122,0.953,123,0.953,124,0.953,125,0.953,126,0.953,127,0.953,128,1.08,129,0.953,130,2.697,131,0.953,132,2.176,133,0.953,134,0.953,135,2.49,136,0.953,137,2.561,138,0.953,139,0.953,140,0.953,141,0.479,142,0.953,143,0.953,144,0.953,145,0.953,146,0.953,147,0.953,148,0.953,149,0.953,150,0.949,151,0.851,152,0.953,153,0.953,154,0.953,155,0.953,156,0.953,157,0.953,158,0.696,159,0.953,160,2.664,161,2.462,162,0.953,163,0.953,164,0.618,165,0.953,166,0.953,167,0.647,168,1.544,169,0.953,170,0.953,171,0.926,172,0.953,173,0.926,174,2.235,175,0.749,176,2.027,177,2.418,178,1.493,179,2.636,180,1.948,181,3.303,182,1.544,183,1.948,184,2.24,185,1.544,186,0.953,187,1.948,188,1.948,189,2.24,190,0.563,191,1.544,192,0.953,193,1.948,194,0.953,195,1.892,196,0.953,197,0.953,198,0.953,199,0.953,200,0.953,201,0.953,202,0.953,203,0.953,204,0.953,205,0.953,206,0.953,207,0.953,208,0.953,209,1.277,210,0.953,211,0.953,212,1.892,213,0.953,214,0.953,215,0.953,216,0.953,217,1.892,218,0.953,219,1.544,220,0.953,221,0.953,222,0.953,223,0.953,224,0.953,225,0.953,226,0.953,227,1.948,228,0.953,229,0.953,230,0.953,231,0.953,232,0.953,233,0.953,234,0.953,235,0.953,236,0.953,237,0.953,238,0.953,239,0.953,240,0.953,241,0.953,242,0.953,243,0.953,244,0.953,245,0.953,246,0.953,247,0.953,248,0.953,249,0.953,250,0.953,251,0.953,252,0.953,253,0.953,254,0.953,255,0.953,256,1.892,257,0.953,258,0.953,259,0.953,260,0.953,261,0.953,262,0.953,263,1.892,264,0.953,265,0.9,266,1.544,267,0.953,268,1.544,269,1.892,270,0.953,271,0.953,272,0.953,273,0.953,274,0.953,275,0.953,276,1.892,277,0.953,278,0.953,279,2.24,280,2.462,281,1.544,282,0.953,283,0.953,284,1.075,285,0.953,286,0.953,287,1.948,288,0.953,289,0.953,290,0.953,291,0.953,292,0.953,293,0.953,294,0.953,295,0.953,296,0.953,297,0.953,298,0.953,299,0.953,300,0.953,301,0.953,302,0.953,303,0.953,304,0.953,305,0.953,306,0.953,307,0.953,308,0.953,309,0.953,310,1.892,311,0.953,312,0.953,313,0.953,314,0.953,315,0.953,316,0.953,317,0.953,318,0.953,319,0.953,320,0.953,321,0.953,322,0.788,323,1.5,324,0.953,325,0.953,326,0.953,327,0.953,328,1.892,329,0.953,330,0.953,331,0.953,332,0.953,333,0.9,334,0.9,335,0.83,336,0.9,337,0.9,338,0.9,339,0.953,340,0.953,341,1.948,342,2.179,343,1.544,344,0.953,345,1.544,346,0.953,347,0.953,348,0.19,349,2.697,350,0.953,351,0.953,352,0.953,353,0.953,354,0.953,355,0.953,356,0.953,357,0.953,358,0.953,359,0.953,360,0.953,361,0.953,362,0.953,363,0.953,364,1.544,365,1.544,366,0.953,367,0.953,368,0.953,369,0.953,370,0.953,371,0.953,372,0.953,373,0.953,374,0.953,375,0.953,376,0.926,377,0.953,378,0.926,379,0.953,380,0.953,381,0.953,382,0.953,383,0.953,384,1.742,385,1.381,386,0.953,387,0.953,388,0.953,389,0.953,390,0.953,391,0.953,392,0.953,393,0.749,394,0.953,395,0.953,396,0.953,397,0.953,398,0.953,399,0.953,400,0.953,401,1.892,402,0.953,403,0.953,404,0.953,405,0.953,406,2.49,407,0.493,408,0.953,409,0.9,410,2.49,411,0.953,412,0.768,413,2.636,414,0.953,415,2.24,416,0.953,417,0.696,418,0.004,419,0.004,725,0.343,821,0.768,3430,2.244,3431,2.244,3432,2.244,3433,2.244,3434,2.244,3435,2.244,3436,2.244]],["title/classes/TypeFunctions.html",[0,0.346,263,1.819]],["body/classes/TypeFunctions.html",[0,0.664,1,2.342,2,0.099,3,0.039,4,0.039,5,0.039,6,0.06,7,0.939,8,1.575,9,2.513,10,0.03,11,0.625,12,1.821,13,1.727,15,2.347,16,0.656,17,2.069,19,0.779,20,0.259,22,1.649,23,1.857,24,1.653,25,0.235,26,0.127,28,0.119,29,0.009,30,0.155,31,0.114,32,0.094,33,0.988,35,0.434,36,1.99,39,1.174,43,2.122,45,1.794,48,0.429,49,1.475,50,0.689,51,1.405,52,0.422,53,0.741,54,0.584,55,2.194,56,1.087,57,0.966,58,1.475,59,0.759,60,1.435,61,0.741,62,1.435,63,0.598,64,1.397,65,0.626,66,1.325,67,0.584,68,1.325,69,0.689,70,1.291,71,0.705,72,1.36,73,0.641,74,0.134,75,3.895,76,3.827,77,3.793,78,3.029,79,1.367,80,2.61,81,2.61,82,2.679,83,1.438,84,0.527,85,0.929,86,1.228,87,1.811,88,1.155,89,0.966,90,0.966,91,0.966,92,1.408,93,0.966,94,1.325,95,0.966,96,0.905,97,2.281,98,0.966,99,0.966,100,0.913,101,0.705,102,1.325,103,0.966,104,0.966,105,1.562,106,1.966,107,0.545,108,1.85,109,0.966,110,0.672,111,0.966,112,0.966,113,0.966,114,0.966,115,0.705,116,0.913,117,0.864,118,0.966,119,3.035,120,0.966,121,0.966,122,0.966,123,0.966,124,0.966,125,0.966,126,0.966,127,0.966,128,1.084,129,0.966,130,2.713,131,0.966,132,2.194,133,0.966,134,0.966,135,2.506,136,0.966,137,2.577,138,0.966,139,0.966,140,0.966,141,0.486,142,0.966,143,0.966,144,0.966,145,0.966,146,0.966,147,0.966,148,0.966,149,0.966,150,0.954,151,0.861,152,0.966,153,0.966,154,0.966,155,0.966,156,0.966,157,0.966,158,0.705,159,0.966,160,2.675,161,2.48,162,0.966,163,0.966,164,0.626,165,0.966,166,0.966,167,0.656,168,1.562,169,0.966,170,0.966,171,0.939,172,0.966,173,0.939,174,2.242,175,0.759,176,2.039,177,2.432,178,1.508,179,2.653,180,1.966,181,3.314,182,1.562,183,1.966,184,2.259,185,1.562,186,0.966,187,1.966,188,1.966,189,2.259,190,0.571,191,1.562,192,0.966,193,1.966,194,0.966,195,1.91,196,0.966,197,0.966,198,0.966,199,0.966,200,0.966,201,0.966,202,0.966,203,0.966,204,0.966,205,0.966,206,0.966,207,0.966,208,0.966,209,1.291,210,0.966,211,0.966,212,1.91,213,0.966,214,0.966,215,0.966,216,0.966,217,1.91,218,0.966,219,1.562,220,0.966,221,0.966,222,0.966,223,0.966,224,0.966,225,0.966,226,0.966,227,1.966,228,0.966,229,0.966,230,0.966,231,0.966,232,0.966,233,0.966,234,0.966,235,0.966,236,0.966,237,0.966,238,0.966,239,0.966,240,0.966,241,0.966,242,0.966,243,0.966,244,0.966,245,0.966,246,0.966,247,0.966,248,0.966,249,0.966,250,0.966,251,0.966,252,0.966,253,0.966,254,0.966,255,0.966,256,1.91,257,0.966,258,0.966,259,0.966,260,0.966,261,0.966,262,0.966,263,2.194,264,1.562,265,1.857,266,1.562,267,1.562,268,1.562,269,1.91,270,0.966,271,0.966,272,0.966,273,0.966,274,0.966,275,0.966,276,1.91,277,0.966,278,0.966,279,2.259,280,2.48,281,1.562,282,0.966,283,0.966,284,1.087,285,0.966,286,0.966,287,1.966,288,0.966,289,0.966,290,0.966,291,0.966,292,0.966,293,0.966,294,0.966,295,0.966,296,0.966,297,0.966,298,0.966,299,0.966,300,0.966,301,0.966,302,0.966,303,0.966,304,0.966,305,0.966,306,0.966,307,0.966,308,0.966,309,0.966,310,1.91,311,0.966,312,0.966,313,0.966,314,0.966,315,0.966,316,0.966,317,0.966,318,0.966,319,0.966,320,0.966,321,0.966,322,0.799,323,1.518,324,0.966,325,0.966,326,0.966,327,0.966,328,1.91,329,0.966,330,0.966,331,0.966,332,0.966,333,0.913,334,0.913,335,0.841,336,0.913,337,0.913,338,0.913,339,0.966,340,0.966,341,1.966,342,2.193,343,1.562,344,0.966,345,1.562,346,0.966,347,0.966,348,0.192,349,2.713,350,0.966,351,0.966,352,0.966,353,0.966,354,0.966,355,0.966,356,0.966,357,0.966,358,0.966,359,0.966,360,0.966,361,0.966,362,0.966,363,0.966,364,1.562,365,1.562,366,0.966,367,0.966,368,0.966,369,0.966,370,0.966,371,0.966,372,0.966,373,0.966,374,0.966,375,0.966,376,0.939,377,0.966,378,0.939,379,0.966,380,0.966,381,0.966,382,0.966,383,0.966,384,1.759,385,1.397,386,0.966,387,0.966,388,0.966,389,0.966,390,0.966,391,0.966,392,0.966,393,0.759,394,0.966,395,0.966,396,0.966,397,0.966,398,0.966,399,0.966,400,0.966,401,1.91,402,0.966,403,0.966,404,0.966,405,0.966,406,2.506,407,0.497,408,0.966,409,0.913,410,2.506,411,0.966,412,0.779,413,2.653,414,0.966,415,2.259,416,0.966,417,0.705,418,0.004,419,0.004,725,0.563,3437,3.68,3438,3.68,3439,2.276,3440,2.276]],["title/dependencies.html",[3441,3.241,3442,4.69]],["body/dependencies.html",[29,0.009,418,0.008,419,0.008,443,3.308,2577,5.733,2584,4.997,3442,6.282,3443,7.114,3444,9.201,3445,7.114,3446,7.114,3447,8.173,3448,8.173,3449,7.114,3450,7.114,3451,7.114,3452,7.114,3453,7.114,3454,7.114,3455,7.114,3456,7.114,3457,7.114]],["title/miscellaneous/enumerations.html",[3458,2.747,3459,4.69]],["body/miscellaneous/enumerations.html",[6,0.106,10,0.073,24,1.224,25,0.199,29,0.009,31,0.092,33,1.124,59,2.362,61,2.304,63,2.14,65,1.948,67,1.816,69,2.142,71,2.194,73,1.994,84,0.531,128,1.057,150,0.954,151,1.656,333,2.838,334,2.838,335,2.617,336,2.838,337,2.838,418,0.007,419,0.007,422,3.235,437,3.291,457,3.4,458,3.775,459,3.19,460,2.687,461,3.4,462,2.091,463,3.775,464,3.923,465,2.484,466,3.923,467,3.291,468,3.291,469,3.515,470,4.085,471,3.923,472,3.923,473,3.377,475,3.377,480,3.235,481,3.377,483,4.266,484,3.377,485,3.377,490,3.377,491,4.085,494,3.377,496,3.377,497,3.377,498,3.377,499,3.377,500,3.377,501,3.377,502,3.377,503,2.989,508,3.377,512,3.377,513,3.377,516,3.377,517,3.377,518,3.775,523,3.377,528,3.377,529,3.377,538,3.377,539,3.377,543,2.692,544,3.377,546,3.377,547,3.377,548,3.377,551,3.377,552,3.377,557,3.377,558,3.377,560,3.377,561,3.377,563,3.377,564,3.377,567,3.377,568,3.377,570,3.377,571,3.377,573,3.377,574,3.377,576,3.377,577,3.377,578,3.377,579,3.377,581,3.377,582,3.377,583,3.377,584,3.377,585,3.377,586,3.377,587,3.377,588,3.377,589,3.377,590,3.377,591,3.377,592,3.377,593,3.377,594,3.64,595,3.775,596,3.291,617,3.095,688,5.297,1160,4.949,1161,6.25,1168,4.949,1169,4.949,1433,3.923,1851,4.469,2177,5.704,2217,3.538,2609,5.704,3458,4.194,3459,4.949,3460,7.196,3461,5.605,3462,7.078,3463,6.25,3464,7.078,3465,7.078,3466,6.25,3467,7.078,3468,4.949,3469,6.25,3470,7.078,3471,7.078,3472,7.078,3473,7.078,3474,5.605,3475,5.605,3476,5.605,3477,4.949]],["title/index.html",[10,0.048,2607,2.747,3478,3.241]],["body/index.html",[0,0.579,12,2.092,29,0.009,30,0.097,40,1.601,48,0.491,50,2.37,56,2.402,63,1.324,65,1.82,67,2.01,73,1.863,74,0.111,88,0.628,92,1.003,107,1.766,418,0.006,419,0.006,427,2.69,435,3.431,447,3.132,448,2.504,451,2.422,455,2.273,504,2.69,622,4.374,634,2.504,637,3.985,651,2.985,654,4.811,663,1.914,681,3.527,711,3.075,890,2.98,1046,6.312,1171,3.183,1300,3.183,1390,3.665,1517,4.675,1524,6.361,1530,5.861,1637,3.985,1659,4.144,1738,2.69,1756,4.452,1770,4.452,1867,3.542,1888,3.039,1995,2.795,1997,3.039,2067,3.542,2096,3.773,2098,3.349,2563,5.861,2564,5.712,2568,3.773,2569,4.644,2581,6.312,2584,5.182,2601,5.329,2670,4.064,2782,4.452,2981,6.515,3088,5.329,3109,7.965,3469,5.839,3479,7.705,3480,5.042,3481,5.042,3482,5.042,3483,5.042,3484,5.042,3485,5.042,3486,6.613,3487,5.042,3488,5.042,3489,6.916,3490,5.042,3491,5.042,3492,5.042,3493,6.613,3494,6.613,3495,6.916,3496,5.042,3497,6.613,3498,7.832,3499,5.042,3500,6.613,3501,6.613,3502,6.613,3503,5.042,3504,6.613,3505,5.042,3506,5.042,3507,6.613,3508,6.613,3509,6.613,3510,5.042,3511,6.613,3512,5.042,3513,5.042,3514,5.042,3515,5.042,3516,5.042,3517,5.042,3518,5.042,3519,5.042,3520,5.042,3521,5.042,3522,5.042,3523,5.042,3524,6.613,3525,9.224,3526,5.042,3527,5.042,3528,5.042,3529,7.379,3530,8.628,3531,5.042,3532,5.042,3533,5.042,3534,5.042,3535,7.379,3536,5.042,3537,5.042,3538,5.042,3539,5.042,3540,7.379,3541,6.613,3542,6.613,3543,5.042,3544,6.613,3545,6.613,3546,7.832,3547,6.613,3548,5.042,3549,6.613,3550,5.042,3551,5.042,3552,5.042,3553,5.042,3554,5.042,3555,5.042,3556,8.726,3557,5.042,3558,5.042,3559,5.042,3560,7.832,3561,5.042,3562,7.379,3563,5.042,3564,5.042,3565,5.042,3566,5.042,3567,5.042,3568,5.042,3569,5.042,3570,5.042,3571,5.042,3572,5.042,3573,5.042,3574,5.042,3575,5.042,3576,5.042,3577,5.042,3578,5.042,3579,5.042,3580,5.042,3581,4.452,3582,5.042,3583,5.042,3584,6.613,3585,6.613,3586,5.042,3587,5.042,3588,5.042,3589,4.452,3590,5.042]],["title/license.html",[2607,2.747,3478,3.241,3591,2.958]],["body/license.html",[29,0.008,418,0.008,419,0.008,465,2.393,504,4.508,1530,5.968,1613,6.02,2003,5.296,2247,4.789,3495,6.02,3591,5.495,3592,6.02,3593,8.452,3594,6.818,3595,6.818,3596,6.02,3597,6.02,3598,6.02,3599,7.975,3600,6.818,3601,6.818,3602,6.818,3603,6.818,3604,6.818,3605,6.818,3606,7.975,3607,9.186,3608,6.818,3609,6.818,3610,6.818,3611,6.818,3612,6.818,3613,6.818,3614,6.818,3615,6.818,3616,6.818,3617,6.818,3618,6.818,3619,6.818,3620,7.975,3621,6.818,3622,6.818,3623,6.818,3624,6.818,3625,6.818,3626,6.818,3627,7.975,3628,7.975,3629,6.818,3630,6.818,3631,6.818,3632,6.818,3633,6.818,3634,6.818,3635,6.818,3636,6.818,3637,6.818,3638,6.818,3639,6.818,3640,6.818,3641,6.818,3642,6.818,3643,6.818,3644,6.818,3645,6.818,3646,6.818,3647,6.818,3648,6.818,3649,6.818,3650,6.818,3651,6.818,3652,6.818,3653,6.818,3654,6.818,3655,6.818,3656,6.818,3657,6.818,3658,6.818]],["title/modules.html",[2565,4.871]],["body/modules.html",[29,0.008,418,0.008,419,0.008,2564,5.15,2565,5.909,3659,7.332]],["title/overview.html",[3660,5.337]],["body/overview.html",[2,0.319,29,0.008,164,2.008,418,0.008,419,0.008,421,3.752,2563,5.124,2670,5.88,3256,6.442,3660,6.442,3661,7.296,3662,7.296]],["title/properties.html",[348,0.22,3441,3.241]],["body/properties.html",[29,0.009,348,0.293,418,0.008,419,0.008,435,3.292,1398,2.92,1517,4.662,1637,4.267,2585,6.099,3479,7.579,3489,6.251,3581,6.251,3589,7.197,3591,5.706,3592,6.251,3596,6.251,3597,6.251,3598,6.251,3663,7.08,3664,7.08,3665,8.151,3666,7.08,3667,7.08,3668,7.08,3669,7.08,3670,7.08,3671,7.08,3672,7.08,3673,7.08,3674,7.08,3675,7.08]],["title/miscellaneous/typealiases.html",[3458,2.747,3676,5.311]],["body/miscellaneous/typealiases.html",[6,0.12,7,2.236,10,0.07,23,2.779,25,0.222,29,0.009,31,0.122,33,0.818,37,1.916,55,2.378,65,1.907,67,1.778,69,2.097,73,1.953,75,2.859,76,2.236,77,2.236,78,2.372,80,1.602,84,0.371,150,0.935,333,2.174,334,2.174,335,2.005,336,2.174,337,2.174,418,0.007,419,0.007,422,3.13,427,3.697,440,3.329,441,3.697,444,3.13,445,3.13,446,3.13,447,3.532,448,2.693,449,3.697,450,3.13,451,2.604,452,4,453,1.079,454,1.24,455,2.444,466,3.841,503,2.892,518,3.697,596,2.521,614,3.841,621,3.565,636,3.442,644,4,645,3.697,653,3.697,655,3.841,657,3.697,659,4,661,4,662,3.841,707,4.788,735,6.12,757,4.37,770,4.868,799,5.586,867,4.226,1082,4.37,1094,5.586,1095,4.868,1096,4.868,1097,5.187,1110,5.586,1335,4.788,1342,6.12,1343,5.187,1346,6.12,1437,4.603,1662,5.187,2186,4.868,2190,5.586,2194,5.586,2198,6.157,2212,4.37,2220,5.586,2221,5.586,2222,5.586,2223,5.586,2224,5.586,2625,4.788,2629,5.187,2756,4.788,2780,6.12,2794,6.12,3029,6.12,3031,5.586,3037,6.12,3299,4.37,3335,4.37,3400,4.788,3458,4.058,3460,8.131,3463,7.968,3466,8.165,3468,4.788,3477,4.788,3677,6.931,3678,6.931,3679,5.422,3680,5.422,3681,5.422,3682,5.422,3683,5.422,3684,5.422,3685,7.64,3686,6.931,3687,8.051,3688,6.931,3689,8.051,3690,6.931,3691,8.32,3692,6.931,3693,6.931,3694,7.64,3695,7.64,3696,5.422,3697,6.931,3698,6.931,3699,6.931,3700,6.931,3701,6.931,3702,5.422,3703,5.422,3704,7.64,3705,8.051,3706,6.931,3707,5.422,3708,8.051,3709,5.422,3710,5.422,3711,5.422,3712,5.422,3713,5.422,3714,5.422]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":101,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["0.127.0",{"_index":3663,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":3457,"title":{},"body":{"dependencies.html":{}}}],["00:00",{"_index":510,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["07/schema",{"_index":2413,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["1",{"_index":164,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["1.1.23",{"_index":3452,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3662,"title":{},"body":{"overview.html":{}}}],["128",{"_index":476,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["132",{"_index":3661,"title":{},"body":{"overview.html":{}}}],["15",{"_index":535,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["16",{"_index":474,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["17",{"_index":536,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["17.0.0",{"_index":3444,"title":{},"body":{"dependencies.html":{}}}],["1].tostring",{"_index":3002,"title":{},"body":{"classes/ODataRequest.html":{}}}],["1}\\$skiptoken=([\\d\\w\\s",{"_index":1509,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["2",{"_index":2670,"title":{},"body":{"classes/ODataPathSegments.html":{},"index.html":{},"overview.html":{}}}],["2.0",{"_index":444,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":3455,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1815,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3595,"title":{},"body":{"license.html":{}}}],["23:59:59.999999999999",{"_index":511,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["3",{"_index":3577,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":445,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":3572,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":446,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["6",{"_index":541,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["7.8.0",{"_index":3453,"title":{},"body":{"dependencies.html":{}}}],["754",{"_index":531,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["8",{"_index":488,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["9",{"_index":542,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["9a",{"_index":2278,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["_add",{"_index":710,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["_add(name",{"_index":717,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["_add(node",{"_index":759,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_annotations",{"_index":3016,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2837,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_children",{"_index":709,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_connector",{"_index":3336,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_context",{"_index":3017,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_fields",{"_index":2318,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["_functions",{"_index":1494,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2838,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_keys",{"_index":2317,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["_method",{"_index":2839,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_names",{"_index":90,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["_negated",{"_index":3337,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_options",{"_index":3018,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2840,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2841,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":3019,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":1486,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_requests",{"_index":1703,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responses",{"_index":1707,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2842,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2626,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["_values",{"_index":2757,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["above",{"_index":3626,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1670,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":549,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["acc",{"_index":110,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["acc.params",{"_index":2677,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2676,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc?.field(name",{"_index":111,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["accept",{"_index":423,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":2944,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":2938,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":2935,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":2941,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":18,"title":{},"body":{"classes/Aggregate.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{}}}],["action",{"_index":465,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["action.ts",{"_index":818,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":930,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":824,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":827,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":829,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":826,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":825,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":828,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":937,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":941,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":939,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":938,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":940,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":934,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":837,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":840,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":838,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":839,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":988,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":936,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":990,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":995,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":991,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":989,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":992,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":993,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":994,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":932,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":1016,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":1022,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":1018,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":1017,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":1019,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":1020,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":1021,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":931,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":933,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":935,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":1211,"title":{},"body":{"classes/Field.html":{}}}],["actionimports",{"_index":892,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":1025,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":688,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"miscellaneous/enumerations.html":{}}}],["add(ctx",{"_index":1736,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["add(left",{"_index":311,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2631,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["added",{"_index":3474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["addfield",{"_index":2331,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["additionalitems",{"_index":2309,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["addressinfo",{"_index":3561,"title":{},"body":{"index.html":{}}}],["again",{"_index":3535,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":1,"title":{"classes/Aggregate.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["aggregate(${render(this.value",{"_index":346,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["aggregate(objects.clone(this.value",{"_index":347,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["aggregate(value",{"_index":364,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["aggregate.fromjson(value",{"_index":134,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["aggregatemethod",{"_index":23,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["aggregatetype",{"_index":3678,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aggregation",{"_index":339,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["airport",{"_index":3534,"title":{},"body":{"index.html":{}}}],["airports",{"_index":3525,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":3538,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":3568,"title":{},"body":{"index.html":{}}}],["airports.fetch().subscribe",{"_index":3528,"title":{},"body":{"index.html":{}}}],["airports.query((q",{"_index":3547,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":3550,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":3523,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":3527,"title":{},"body":{"index.html":{}}}],["alias",{"_index":24,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":80,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["all(left",{"_index":404,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1727,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["along",{"_index":3506,"title":{},"body":{"index.html":{}}}],["and(exp",{"_index":3342,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["and(left",{"_index":300,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3618,"title":{},"body":{"license.html":{}}}],["angular",{"_index":3479,"title":{},"body":{"index.html":{},"properties.html":{}}}],["angular/animations",{"_index":3443,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2577,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1635,"title":{},"body":{"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/PassedInitialConfig.html":{}}}],["angular/compiler",{"_index":3445,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2584,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":3446,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":3447,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":3450,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":3490,"title":{},"body":{"index.html":{}}}],["annot",{"_index":1400,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annot.bool",{"_index":1419,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.int",{"_index":1420,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.permissions",{"_index":1421,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.properties",{"_index":1422,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.string",{"_index":1418,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.term",{"_index":1407,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annotatable",{"_index":1397,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue",{"_index":1386,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue(term",{"_index":1392,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation",{"_index":948,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation.ts",{"_index":842,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":846,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":857,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:17",{"_index":859,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:18",{"_index":858,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:2",{"_index":847,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:22",{"_index":1061,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":1066,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":1071,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":1063,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":1064,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":1062,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":1067,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":1065,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:31",{"_index":1068,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:32",{"_index":1069,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:33",{"_index":1070,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":861,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":863,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":862,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":645,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":843,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":651,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":2956,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":1026,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":3109,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":3111,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(left",{"_index":402,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["any)['_names",{"_index":95,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":2357,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["any[]).map((v",{"_index":2264,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["api",{"_index":1637,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{},"properties.html":{}}}],["api.options",{"_index":2982,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apiconfig",{"_index":636,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":3261,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":420,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["apioptions.helper.countparam",{"_index":2985,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apioptions.helper.etag(options.body",{"_index":2988,"title":{},"body":{"classes/ODataRequest.html":{}}}],["app",{"_index":3514,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":3519,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":3517,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":3520,"title":{},"body":{"index.html":{}}}],["application",{"_index":3500,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":2946,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1638,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1639,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["appliesto",{"_index":855,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["apply",{"_index":59,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["applyexpression",{"_index":58,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applyexpression.fromjson(value",{"_index":123,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applyexpressionbuilder",{"_index":1346,"title":{},"body":{"classes/GroupByTransformations.html":{},"miscellaneous/typealiases.html":{}}}],["applymixins(derivedctor",{"_index":142,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatafunctions",{"_index":411,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":408,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":416,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatatransformations",{"_index":414,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":3504,"title":{},"body":{"index.html":{}}}],["arbitrary",{"_index":575,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["arising",{"_index":3655,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":256,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":310,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["array",{"_index":596,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":2323,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(properties",{"_index":1357,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["array.isarray(right",{"_index":282,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.configs",{"_index":2103,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(this.passedconfigs",{"_index":2100,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(value",{"_index":2053,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["arraybuffer",{"_index":2859,"title":{},"body":{"classes/ODataRequest.html":{}}}],["arrays",{"_index":1653,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["arrays.zip(this._requests",{"_index":1761,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["asc",{"_index":3316,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["ascending",{"_index":3300,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["ascending(field",{"_index":3304,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["asp",{"_index":1577,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["associated",{"_index":3608,"title":{},"body":{"license.html":{}}}],["atomicitygroup",{"_index":1683,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["attach",{"_index":2177,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/enumerations.html":{}}}],["attach(model",{"_index":3274,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":2182,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":3286,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":2204,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attr",{"_index":1304,"title":{},"body":{"classes/Field.html":{}}}],["attr?.nodevalue",{"_index":1306,"title":{},"body":{"classes/Field.html":{}}}],["attribute",{"_index":1168,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":1251,"title":{},"body":{"classes/Field.html":{}}}],["attribute_action",{"_index":1248,"title":{},"body":{"classes/Field.html":{}}}],["attribute_alias",{"_index":1218,"title":{},"body":{"classes/Field.html":{}}}],["attribute_applies_to",{"_index":1256,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_term",{"_index":1255,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_type",{"_index":1226,"title":{},"body":{"classes/Field.html":{}}}],["attribute_contains_target",{"_index":1240,"title":{},"body":{"classes/Field.html":{}}}],["attribute_default_value",{"_index":1235,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set",{"_index":1249,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set_path",{"_index":1242,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_type",{"_index":1244,"title":{},"body":{"classes/Field.html":{}}}],["attribute_extends",{"_index":1254,"title":{},"body":{"classes/Field.html":{}}}],["attribute_function",{"_index":1247,"title":{},"body":{"classes/Field.html":{}}}],["attribute_has_stream",{"_index":1239,"title":{},"body":{"classes/Field.html":{}}}],["attribute_include_in_service_document",{"_index":1250,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_bound",{"_index":1241,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_composable",{"_index":1243,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_flags",{"_index":1253,"title":{},"body":{"classes/Field.html":{}}}],["attribute_max_length",{"_index":1230,"title":{},"body":{"classes/Field.html":{}}}],["attribute_name",{"_index":1224,"title":{},"body":{"classes/Field.html":{}}}],["attribute_namespace",{"_index":1219,"title":{},"body":{"classes/Field.html":{}}}],["attribute_nullable",{"_index":1229,"title":{},"body":{"classes/Field.html":{}}}],["attribute_open_type",{"_index":1227,"title":{},"body":{"classes/Field.html":{}}}],["attribute_partner",{"_index":1236,"title":{},"body":{"classes/Field.html":{}}}],["attribute_path",{"_index":1245,"title":{},"body":{"classes/Field.html":{}}}],["attribute_precision",{"_index":1231,"title":{},"body":{"classes/Field.html":{}}}],["attribute_property",{"_index":1237,"title":{},"body":{"classes/Field.html":{}}}],["attribute_qualifier",{"_index":1221,"title":{},"body":{"classes/Field.html":{}}}],["attribute_referenced_property",{"_index":1238,"title":{},"body":{"classes/Field.html":{}}}],["attribute_scale",{"_index":1232,"title":{},"body":{"classes/Field.html":{}}}],["attribute_srid",{"_index":1234,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target",{"_index":1246,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target_namespace",{"_index":1222,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term",{"_index":1223,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term_namespace",{"_index":1220,"title":{},"body":{"classes/Field.html":{}}}],["attribute_type",{"_index":1228,"title":{},"body":{"classes/Field.html":{}}}],["attribute_underlying_type",{"_index":1252,"title":{},"body":{"classes/Field.html":{}}}],["attribute_unicode",{"_index":1233,"title":{},"body":{"classes/Field.html":{}}}],["attribute_uri",{"_index":1217,"title":{},"body":{"classes/Field.html":{}}}],["attribute_value",{"_index":1225,"title":{},"body":{"classes/Field.html":{}}}],["attribute_version",{"_index":1216,"title":{},"body":{"classes/Field.html":{}}}],["attributes",{"_index":1215,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":1440,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":1305,"title":{},"body":{"classes/Field.html":{}}}],["attrs",{"_index":2380,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attrs[field.name",{"_index":2429,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["attrs[key",{"_index":2388,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["author",{"_index":3675,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":3645,"title":{},"body":{"license.html":{}}}],["available",{"_index":2603,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["average",{"_index":336,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["backward",{"_index":2706,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":550,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/GroupByTransformations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":2285,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["baseterm",{"_index":853,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["basetype",{"_index":869,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["basic",{"_index":3574,"title":{},"body":{"index.html":{}}}],["batch",{"_index":458,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":3567,"title":{},"body":{"index.html":{}}}],["batch._requests",{"_index":1714,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1640,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1775,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":491,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["binary32",{"_index":540,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["binary64",{"_index":532,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["binding",{"_index":914,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":980,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":982,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:3",{"_index":983,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:4",{"_index":984,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingstructuredtype",{"_index":3223,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingstructuredtype.issubtypeof(callablebindingstructuredtype",{"_index":3231,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingtype",{"_index":3189,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bit",{"_index":477,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["blob",{"_index":2860,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":618,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bodyqueryoptions",{"_index":424,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":647,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":84,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["boolean((f.value",{"_index":2475,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["boolean(field.collection",{"_index":2239,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["boolean(field.navigation",{"_index":2241,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["bottomcount",{"_index":1351,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["bottomcount(value",{"_index":372,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["bottompercent",{"_index":376,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["bottomsum",{"_index":1352,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["bottomsum(value",{"_index":374,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["bound",{"_index":678,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1779,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1641,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1791,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1783,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":2275,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["browse",{"_index":3659,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3448,"title":{},"body":{"dependencies.html":{}}}],["bugs",{"_index":3670,"title":{},"body":{"properties.html":{}}}],["build",{"_index":1845,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry",{"_index":1830,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1843,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":56,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3580,"title":{},"body":{"index.html":{}}}],["buildjsonbody",{"_index":1792,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildkey",{"_index":1831,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1848,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildlegacybody",{"_index":1774,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildpathandquery",{"_index":2655,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["byte",{"_index":475,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["c",{"_index":3594,"title":{},"body":{"license.html":{}}}],["c.binding()?.type",{"_index":3228,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.clone",{"_index":750,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["c.issupertypeof(type",{"_index":2342,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["c.istypeof(type",{"_index":2260,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["c.tojson",{"_index":1159,"title":{},"body":{"classes/Expression.html":{}}}],["cache",{"_index":447,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":3050,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1886,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":611,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":452,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":3091,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":3165,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1934,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cachekey",{"_index":2850,"title":{},"body":{"classes/ODataRequest.html":{}}}],["california",{"_index":3549,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1966,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["callable.configure",{"_index":3238,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":2044,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callablebindingstructuredtype",{"_index":3229,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callablebindingtype",{"_index":3227,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callableconfig",{"_index":657,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":656,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":2178,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":2188,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":2179,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":2192,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["case",{"_index":119,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["case(left",{"_index":277,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":3437,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(left",{"_index":264,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":173,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["caught",{"_index":641,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":683,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(left",{"_index":257,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":2346,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ch.findchildparser(predicate",{"_index":2348,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["change",{"_index":3469,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["changeset",{"_index":1778,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1642,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1776,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1807,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1777,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1805,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1696,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["characters",{"_index":489,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["charge",{"_index":3603,"title":{},"body":{"license.html":{}}}],["check",{"_index":1300,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":1299,"title":{},"body":{"classes/Field.html":{}}}],["childparser",{"_index":2349,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["childparser((c",{"_index":2259,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["children",{"_index":712,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/GroupByTransformations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["children.push(exp",{"_index":3366,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children.push(syntax.group(exp",{"_index":3365,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children.push(syntax.group(node",{"_index":3370,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children[index",{"_index":748,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["chunk",{"_index":1813,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunk.slice(1",{"_index":1814,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunks",{"_index":1796,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["city",{"_index":3542,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3648,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clean",{"_index":2546,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["clear",{"_index":2758,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2739,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearparameters",{"_index":2744,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":2585,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["clock",{"_index":509,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["clone",{"_index":12,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["close",{"_index":1780,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1810,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":565,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":212,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["commonmodule",{"_index":2576,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["complete.html#_toc406398229",{"_index":1569,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1570,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1573,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1574,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1571,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1572,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complextype",{"_index":1191,"title":{},"body":{"classes/Field.html":{}}}],["complextypes",{"_index":1027,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3583,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":3451,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":3511,"title":{},"body":{"index.html":{}}}],["composable",{"_index":679,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["compute",{"_index":61,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["computed",{"_index":2215,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["computeexpression",{"_index":60,"title":{"classes/ComputeExpression.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["computeexpression.fromjson(value",{"_index":122,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["computeexpressionbuilder",{"_index":735,"title":{},"body":{"classes/ComputeExpression.html":{},"miscellaneous/typealiases.html":{}}}],["computeexpressionbuilder,current",{"_index":722,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["concat",{"_index":1353,"title":{},"body":{"classes/GroupByTransformations.html":{},"classes/StringAndCollectionFunctions.html":{}}}],["concat(left",{"_index":196,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["conditionalfunctions",{"_index":276,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3625,"title":{},"body":{"license.html":{}}}],["config",{"_index":1390,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["config.accept",{"_index":1597,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.alias",{"_index":3203,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":1410,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["config.base",{"_index":2320,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.bodyqueryoptions",{"_index":1595,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.bound",{"_index":2011,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":2013,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":3236,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":3214,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.deleterefby",{"_index":1603,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.entities",{"_index":3208,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":2009,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":2172,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":2208,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":3205,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1599,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fetchpolicy",{"_index":1593,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fields",{"_index":2328,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.flags",{"_index":2471,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1587,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.jsonbatchformat",{"_index":1607,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.keys.map((key",{"_index":2325,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.members",{"_index":2459,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":2069,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["config.namespace",{"_index":3202,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.nonparenthesisforemptyparameterfunction",{"_index":1605,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.open",{"_index":2322,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.params",{"_index":1585,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.prefer",{"_index":1601,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.relativeurls",{"_index":1609,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.return",{"_index":2072,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":2210,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1583,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.stripmetadata",{"_index":1591,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.version",{"_index":1581,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1589,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["configs",{"_index":635,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["configure",{"_index":1951,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["configure(undefined",{"_index":1967,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{}}}],["connection",{"_index":3657,"title":{},"body":{"license.html":{}}}],["connector",{"_index":1360,"title":{},"body":{"classes/GroupByTransformations.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["console.log",{"_index":3546,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":3539,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":3529,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":3533,"title":{},"body":{"index.html":{}}}],["const",{"_index":85,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["constants",{"_index":1167,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["constructor",{"_index":20,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":985,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":1405,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":844,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":3258,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":1388,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["constructor(configs",{"_index":2093,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["constructor(field",{"_index":805,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/OrderByField.html":{}}}],["constructor(group",{"_index":1364,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":1434,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2851,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":821,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/Type.html":{}}}],["constructor(namespace",{"_index":944,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(op",{"_index":1374,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(passedconfigs",{"_index":2111,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["constructor(path",{"_index":981,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":2098,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(properties",{"_index":1326,"title":{},"body":{"classes/GroupBy.html":{}}}],["constructor(property",{"_index":1011,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":960,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":322,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":848,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/ODataBatchRequest.html":{}}}],["constructor(request",{"_index":1617,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":3388,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2628,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":860,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":856,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":955,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":1015,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":713,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["constructor(uri",{"_index":1006,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(value",{"_index":21,"title":{},"body":{"classes/Aggregate.html":{},"classes/SearchTerm.html":{}}}],["constructor(values",{"_index":2761,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(xml",{"_index":1258,"title":{},"body":{"classes/Field.html":{}}}],["constructors",{"_index":143,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["constructors.foreach((basector",{"_index":144,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":1047,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":3219,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":891,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":904,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:11",{"_index":902,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":899,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:5",{"_index":898,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":903,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":901,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:9",{"_index":900,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["containers",{"_index":658,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":3411,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(left",{"_index":198,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":965,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["content",{"_index":800,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["content_id",{"_index":1643,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1644,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1645,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1806,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":3492,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1797,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":3074,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":1436,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1903,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1906,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1905,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1907,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continue",{"_index":2960,"title":{},"body":{"classes/ODataRequest.html":{}}}],["continueonerror",{"_index":605,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3652,"title":{},"body":{"license.html":{}}}],["coordinate",{"_index":555,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["copies",{"_index":3620,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3606,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3593,"title":{},"body":{"license.html":{}}}],["core",{"_index":1579,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["count",{"_index":63,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["countdistinct",{"_index":337,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["countexpression",{"_index":62,"title":{"classes/CountExpression.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["countexpression.fromjson(value",{"_index":127,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["countexpressionbuilder",{"_index":799,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["countexpressionbuilder,current",{"_index":762,"title":{},"body":{"classes/CountExpression.html":{}}}],["countfield",{"_index":771,"title":{"classes/CountField.html":{}},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(field",{"_index":803,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(this.field.clone",{"_index":793,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countryregion",{"_index":3543,"title":{},"body":{"index.html":{}}}],["count}(${object.keys(params",{"_index":785,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["create",{"_index":1992,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{}}}],["createsyncloader",{"_index":2599,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["createsyncloader(passedconfig",{"_index":2591,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["creating",{"_index":1997,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["creation",{"_index":638,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1551,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["cs01.html#_toc365464682",{"_index":1543,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["csdl",{"_index":881,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":1165,"title":{},"body":{"classes/Field.html":{}}}],["csdlaction",{"_index":816,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlactionimport",{"_index":835,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlannotable",{"_index":841,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":864,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":845,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["csdlannotations",{"_index":849,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdlcomplextype",{"_index":865,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlentitycontainer",{"_index":889,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlentityset",{"_index":896,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["csdlentitytype",{"_index":884,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlenummember",{"_index":918,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["csdlenumtype",{"_index":922,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunction",{"_index":830,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunctionimport",{"_index":832,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlinclude",{"_index":942,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlincludeannotations",{"_index":952,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlkey",{"_index":885,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationproperty",{"_index":873,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationpropertybinding",{"_index":908,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlondelete",{"_index":970,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlparameter",{"_index":823,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlproperty",{"_index":872,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlpropertyref",{"_index":888,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlreference",{"_index":949,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlreferentialconstraint",{"_index":969,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlreturntype",{"_index":822,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlschema",{"_index":1023,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlsingleton",{"_index":897,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlstructuralproperty",{"_index":964,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":976,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":978,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":977,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":868,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":878,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":876,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":879,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":875,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":877,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":880,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":852,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdltypedefinition",{"_index":1033,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["ctx",{"_index":1733,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1740,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":723,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/ODataBatchRequest.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["custom",{"_index":338,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["customheaders",{"_index":2926,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":2945,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":2930,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":2933,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":2965,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3579,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1515,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["customparams",{"_index":2970,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":2973,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":2971,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3649,"title":{},"body":{"license.html":{}}}],["data",{"_index":545,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["data(data",{"_index":1444,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":1278,"title":{},"body":{"classes/Field.html":{}}}],["date",{"_index":503,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["date(left",{"_index":228,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1909,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":227,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["datetimeoffset",{"_index":516,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["day(left",{"_index":230,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["days",{"_index":519,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deal",{"_index":3610,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3658,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":528,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["deep",{"_index":3578,"title":{},"body":{"index.html":{}}}],["default",{"_index":141,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["default_fetch_policy",{"_index":1556,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_strip_metadata",{"_index":1557,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_timeout",{"_index":1887,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1558,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["default_version].odata_etag",{"_index":2387,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["default_version].type(value",{"_index":2258,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaults",{"_index":2404,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaultvalue",{"_index":854,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["defined",{"_index":26,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":1046,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"index.html":{}}}],["definition.ts",{"_index":1072,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":1081,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":1079,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":1074,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":1076,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":1080,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":1075,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":1077,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":1078,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1521,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":2929,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleterefby",{"_index":425,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deleting",{"_index":3483,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1695,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":1503,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":3487,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3442,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependson",{"_index":1684,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deps",{"_index":2600,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["derivedctor.prototype",{"_index":147,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["desc",{"_index":3317,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["descending",{"_index":3301,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["descending(field",{"_index":3307,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["description",{"_index":1398,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"properties.html":{}}}],["deseialize",{"_index":1971,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1972,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":615,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1969,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1973,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":3472,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["diego",{"_index":3596,"title":{},"body":{"license.html":{},"properties.html":{}}}],["digits",{"_index":537,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["directive",{"_index":3172,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":3166,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["distribute",{"_index":3616,"title":{},"body":{"license.html":{}}}],["div",{"_index":689,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":317,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":1260,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement",{"_index":1271,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.attributes",{"_index":1268,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":1280,"title":{},"body":{"classes/Field.html":{}}}],["documentation",{"_index":3495,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":1259,"title":{},"body":{"classes/Field.html":{}}}],["double",{"_index":538,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["duration",{"_index":518,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["dynamic",{"_index":3449,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":663,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/GroupByTransformations.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["e().eq(\"emails",{"_index":3563,"title":{},"body":{"index.html":{}}}],["e.istypeof(type",{"_index":3221,"title":{},"body":{"classes/ODataSchema.html":{}}}],["earth",{"_index":554,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["editlink",{"_index":1478,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":544,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.boolean",{"_index":490,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.byte",{"_index":494,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.date",{"_index":502,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.datetimeoffset",{"_index":513,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.decimal",{"_index":523,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.double",{"_index":529,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.duration",{"_index":517,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geography",{"_index":548,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographycollection",{"_index":574,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographylinestring",{"_index":558,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultilinestring",{"_index":568,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultipoint",{"_index":564,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographymultipolygon",{"_index":571,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographypoint",{"_index":552,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geographypolygon",{"_index":561,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometry",{"_index":577,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrycollection",{"_index":592,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrylinestring",{"_index":582,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultilinestring",{"_index":588,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultipoint",{"_index":586,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrymultipolygon",{"_index":590,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrypoint",{"_index":579,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.geometrypolygon",{"_index":584,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.guid",{"_index":473,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int16",{"_index":481,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int32",{"_index":498,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.int64",{"_index":500,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.sbyte",{"_index":496,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.single",{"_index":539,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.stream",{"_index":546,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.string",{"_index":485,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edm.timeofday",{"_index":508,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edmtype",{"_index":472,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["edmtype.binary",{"_index":2283,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.boolean",{"_index":2291,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.byte",{"_index":2293,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.date",{"_index":2286,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.datetimeoffset",{"_index":2289,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.decimal",{"_index":2302,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.double",{"_index":2301,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.duration",{"_index":2290,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.guid",{"_index":2276,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int16",{"_index":2295,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int32",{"_index":2296,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.int64",{"_index":2297,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.sbyte",{"_index":2294,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.single",{"_index":2300,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.string",{"_index":2272,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmtype.timeofday",{"_index":2288,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmx:dataservices",{"_index":1176,"title":{},"body":{"classes/Field.html":{}}}],["edmx:edmx",{"_index":1174,"title":{},"body":{"classes/Field.html":{}}}],["edmx:include",{"_index":1180,"title":{},"body":{"classes/Field.html":{}}}],["edmx:includeannotations",{"_index":1182,"title":{},"body":{"classes/Field.html":{}}}],["edmx:reference",{"_index":1178,"title":{},"body":{"classes/Field.html":{}}}],["element",{"_index":1279,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["empty",{"_index":1533,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["encode",{"_index":167,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["encode([this.value",{"_index":388,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["encode(params",{"_index":2039,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(this.values",{"_index":188,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["encode(v",{"_index":170,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["encode(value",{"_index":623,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encoded",{"_index":1976,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1975,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1800,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":682,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":3412,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(left",{"_index":200,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":654,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":2997,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":890,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":3536,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":2185,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["entitycontainer",{"_index":1028,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["entitycontainerconfig",{"_index":659,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":3107,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":2186,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":460,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":3260,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":661,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":3263,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":677,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":660,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytype",{"_index":680,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":1029,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1828,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptions.html":{}}}],["entry",{"_index":1846,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1928,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1917,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1926,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu",{"_index":2444,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["enu.configure",{"_index":3234,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":456,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":3459,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":652,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toflags(this.members",{"_index":2484,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.toname(this.members",{"_index":2488,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":2483,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":2481,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":1188,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["enumtypeconfig",{"_index":653,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":662,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":1030,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["environmentproviders",{"_index":2579,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["eq(left",{"_index":288,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1565,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["error",{"_index":640,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1726,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('batch",{"_index":1722,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('field",{"_index":2062,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["error('method",{"_index":1344,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["error('no",{"_index":1937,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["error('odata",{"_index":1302,"title":{},"body":{"classes/Field.html":{}}}],["error('unable",{"_index":1297,"title":{},"body":{"classes/Field.html":{}}}],["error(`${this.name",{"_index":2376,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["error(`no",{"_index":2719,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["errorhandler",{"_index":639,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":2248,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`maxlength",{"_index":2255,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`required",{"_index":2253,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors[field.name",{"_index":2432,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errs",{"_index":2430,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["escape",{"_index":81,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["etag",{"_index":426,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":3052,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3644,"title":{},"body":{"license.html":{}}}],["events",{"_index":1725,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["example",{"_index":3498,"title":{},"body":{"index.html":{}}}],["examples",{"_index":3488,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1770,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["execute",{"_index":1735,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":3276,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["exists",{"_index":1857,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exp",{"_index":1361,"title":{},"body":{"classes/GroupByTransformations.html":{},"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.children",{"_index":3378,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.connector",{"_index":3379,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.length",{"_index":3364,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["expand",{"_index":65,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":1131,"title":{},"body":{"classes/ExpandField.html":{}}}],["expandexpression",{"_index":64,"title":{"classes/ExpandExpression.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["expandexpression.factory(opts",{"_index":1111,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandexpression.fromjson(value",{"_index":121,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["expandexpressionbuilder",{"_index":1110,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["expandexpressionbuilder,current",{"_index":1086,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield",{"_index":1088,"title":{"classes/ExpandField.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield>(field",{"_index":1125,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandobject",{"_index":3685,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3686,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandtype",{"_index":3687,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expand}(${object.keys(params",{"_index":1105,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expired",{"_index":1858,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exponentialdecimals",{"_index":598,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":2943,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":74,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3635,"title":{},"body":{"license.html":{}}}],["expression",{"_index":708,"title":{"classes/Expression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/GroupByTransformations.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["expression(key",{"_index":2765,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression).render",{"_index":780,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["expression:101",{"_index":3311,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expression:120",{"_index":3306,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expression:141",{"_index":3354,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:146",{"_index":768,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:156",{"_index":767,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:160",{"_index":3344,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:168",{"_index":3357,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:175",{"_index":761,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:214",{"_index":1092,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:225",{"_index":1091,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:243",{"_index":1085,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:36",{"_index":731,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:39",{"_index":3408,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:40",{"_index":732,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:49",{"_index":3407,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:50",{"_index":733,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:51",{"_index":730,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:65",{"_index":729,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:67",{"_index":3403,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:7",{"_index":716,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:86",{"_index":720,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:90",{"_index":3312,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expressions",{"_index":2782,"title":{},"body":{"classes/ODataQueryOptions.html":{},"index.html":{}}}],["expressions/apply",{"_index":2783,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expressions/expand",{"_index":2784,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expressions/select",{"_index":2785,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["extend",{"_index":893,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":407,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1527,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["f",{"_index":754,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["f.configure",{"_index":2363,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.default",{"_index":2406,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.deserialize(value[f.name",{"_index":2356,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.isstructuredtype",{"_index":2407,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.name",{"_index":2353,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["f.navigation",{"_index":2416,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.nullable",{"_index":2428,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.serialize((value",{"_index":2358,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.structured().defaults",{"_index":2409,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.tojsonschema(expand",{"_index":2422,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.value",{"_index":2479,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["f]{12",{"_index":2282,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f]{12}$/.test",{"_index":2672,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":2281,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["f]{8",{"_index":2280,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fa",{"_index":2279,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["factory",{"_index":711,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"index.html":{}}}],["factory(api",{"_index":1709,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["factory(opts",{"_index":721,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["false",{"_index":175,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["features",{"_index":3075,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":3152,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1524,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["fetchall",{"_index":3531,"title":{},"body":{"index.html":{}}}],["fetching",{"_index":1869,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["fetchnavigationproperty",{"_index":2180,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":2196,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchpolicy",{"_index":427,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":108,"title":{"classes/Field.html":{}},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["field(enu",{"_index":2442,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["field(field",{"_index":764,"title":{},"body":{"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/SelectExpression.html":{}}}],["field(name",{"_index":726,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["field(namevalue",{"_index":2476,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["field(odatametadata.attribute_alias",{"_index":1286,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":1285,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_uri",{"_index":1273,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_version",{"_index":1266,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_action",{"_index":1291,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotation",{"_index":1277,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotations",{"_index":1295,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":1288,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":1292,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":1289,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":1287,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_function",{"_index":1290,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include",{"_index":1274,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":1276,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_term",{"_index":1294,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":1293,"title":{},"body":{"classes/Field.html":{}}}],["field.default",{"_index":2235,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.encode(v",{"_index":2400,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.isstructuredtype",{"_index":2397,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.maxlength",{"_index":2237,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.name",{"_index":2374,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.navigation",{"_index":2367,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.nullable",{"_index":2238,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.precision",{"_index":2243,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.referentials",{"_index":2232,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.scale",{"_index":2245,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.structured",{"_index":2398,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.type",{"_index":2230,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.validate(value",{"_index":2431,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.value",{"_index":2469,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldfactory",{"_index":86,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fieldfactory([...names",{"_index":105,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fieldfactory(value['names",{"_index":140,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fieldnames",{"_index":1310,"title":{},"body":{"classes/Field.html":{}}}],["fieldparser",{"_index":624,"title":{"interfaces/FieldParser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields",{"_index":158,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fields(value",{"_index":2445,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fields.length",{"_index":163,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fields.reduce",{"_index":2355,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields.reduce((acc",{"_index":2408,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields[0].resolve(parser",{"_index":166,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fieldtype",{"_index":1161,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":1267,"title":{},"body":{"classes/Field.html":{}}}],["fieldtype.tag",{"_index":1275,"title":{},"body":{"classes/Field.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["files",{"_index":3609,"title":{},"body":{"license.html":{}}}],["filter",{"_index":67,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":2405,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["filter((key",{"_index":775,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":2079,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1945,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2687,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(left",{"_index":382,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["filter(opts",{"_index":808,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{}}}],["filterconnector",{"_index":1342,"title":{},"body":{"classes/GroupByTransformations.html":{},"miscellaneous/typealiases.html":{}}}],["filterexpression",{"_index":66,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["filterexpression.factory(opts",{"_index":789,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["filterexpression.fromjson(value",{"_index":124,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["filterexpressionbuilder",{"_index":770,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["filterexpressionbuilder,current",{"_index":809,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{}}}],["filtertype",{"_index":3689,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":1395,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["find((f",{"_index":2394,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((field",{"_index":2373,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((k",{"_index":2312,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((p",{"_index":3077,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2634,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["findannotation",{"_index":1387,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findannotation(predicate",{"_index":1399,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findcallablefortype",{"_index":3174,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":3188,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":2344,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["findentitysetfortype",{"_index":3175,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":3191,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":3176,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":3193,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findoptionsfortype",{"_index":2021,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":3177,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":3195,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":448,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2637,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fitness",{"_index":3640,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":525,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["flags",{"_index":664,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["flat",{"_index":580,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floating",{"_index":533,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":684,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(left",{"_index":259,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":3480,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1832,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3624,"title":{},"body":{"license.html":{}}}],["foreach(([key",{"_index":2808,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["foreach(([name",{"_index":2329,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["forget",{"_index":1833,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1852,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":2096,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"index.html":{}}}],["forkjoin(this.configs",{"_index":2104,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["format",{"_index":470,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["format/v4.0/cs01/odata",{"_index":1541,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["format/v4.01/odata",{"_index":1561,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["forroot",{"_index":2570,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["forroot(passedconfig",{"_index":2571,"title":{},"body":{"modules/ODataModule.html":{}}}],["found",{"_index":2375,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fractionalseconds(left",{"_index":232,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3602,"title":{},"body":{"license.html":{}}}],["friends",{"_index":3560,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":3020,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":3032,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":14,"title":{},"body":{"classes/Aggregate.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Function.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{}}}],["fromjson(json",{"_index":36,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["fromjson(req",{"_index":3034,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":451,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2662,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["function",{"_index":128,"title":{"classes/Function.html":{}},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["function('bottomcount",{"_index":373,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('bottompercent",{"_index":377,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('bottomsum",{"_index":375,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('case",{"_index":278,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":258,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":197,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":199,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":229,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":231,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":201,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('filter",{"_index":383,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":260,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":233,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.distance",{"_index":271,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.intersects",{"_index":273,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.length",{"_index":275,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":216,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":214,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":235,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('identity",{"_index":379,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":203,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":205,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":220,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":237,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":239,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":241,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":243,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":245,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('rollup",{"_index":332,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":262,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('search",{"_index":381,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":247,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":207,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":211,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":249,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":222,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('topcount",{"_index":367,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('toppercent",{"_index":371,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('topsum",{"_index":369,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":251,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":253,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":224,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":226,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":255,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["function(name",{"_index":1497,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["function.fromjson(value",{"_index":129,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["functionimport",{"_index":1209,"title":{},"body":{"classes/Field.html":{}}}],["functionimports",{"_index":894,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":833,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":412,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["furnished",{"_index":3623,"title":{},"body":{"license.html":{}}}],["g",{"_index":1667,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["g1",{"_index":1685,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["g2",{"_index":1686,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ge(left",{"_index":294,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["generate",{"_index":3505,"title":{},"body":{"index.html":{}}}],["generated",{"_index":3582,"title":{},"body":{"index.html":{}}}],["generator",{"_index":3486,"title":{},"body":{"index.html":{}}}],["geodistance",{"_index":1320,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geodistance(left",{"_index":270,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["geofunctions",{"_index":269,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["geography",{"_index":551,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographycollection",{"_index":576,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographylinestring",{"_index":560,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultilinestring",{"_index":570,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultipoint",{"_index":567,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographymultipolygon",{"_index":573,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographypoint",{"_index":557,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geographypolygon",{"_index":563,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geointersects",{"_index":1321,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geointersects(left",{"_index":272,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["geolength",{"_index":1322,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geolength(left",{"_index":274,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["geometry",{"_index":578,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrycollection",{"_index":593,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrylinestring",{"_index":583,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultilinestring",{"_index":589,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultipoint",{"_index":587,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrymultipolygon",{"_index":591,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrypoint",{"_index":581,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["geometrypolygon",{"_index":585,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["get'].indexof(this._method",{"_index":2932,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":633,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1855,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(target",{"_index":91,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["getannotations",{"_index":3046,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":3247,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["getbody",{"_index":2882,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcachekey",{"_index":2894,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":3044,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":2125,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":2129,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":2157,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":1450,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":3199,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getetag",{"_index":2150,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":2137,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2886,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1554,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":2148,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":2163,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":2161,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":2152,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":2159,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":2154,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2880,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":3398,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":2127,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":1308,"title":{},"body":{"classes/Field.html":{}}}],["getoptions",{"_index":3040,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2884,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getparseroptions",{"_index":1552,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["getpath",{"_index":2878,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2888,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":3042,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":2165,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":2123,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1834,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1859,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2876,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":3283,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":2133,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":2135,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstructuredtypeschema",{"_index":2200,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":2607,"title":{"index.html":{},"license.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["gettop",{"_index":2131,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":1452,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2890,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2892,"title":{},"body":{"classes/ODataRequest.html":{}}}],["git+https://github.com/diegomvh/angular",{"_index":3673,"title":{},"body":{"properties.html":{}}}],["given",{"_index":1854,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["granted",{"_index":3601,"title":{},"body":{"license.html":{}}}],["group",{"_index":323,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["group(value",{"_index":329,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":135,"title":{"classes/GroupBy.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["groupby((${properties})${transformations",{"_index":361,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["groupby(properties",{"_index":365,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["groupby.fromjson(value",{"_index":136,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["groupbytransformations",{"_index":1334,"title":{"classes/GroupByTransformations.html":{}},"body":{"classes/GroupByTransformations.html":{}}}],["groupbytype",{"_index":3690,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":132,"title":{"classes/Grouping.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["grouping(json['group'].map((v",{"_index":325,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["grouping(objects.clone(this.group",{"_index":327,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["grouping(value",{"_index":330,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["grouping.fromjson(value",{"_index":133,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["groupingoperators",{"_index":328,"title":{"classes/GroupingOperators.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["gt(left",{"_index":292,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":480,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegments.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["haaster",{"_index":3598,"title":{},"body":{"license.html":{},"properties.html":{}}}],["hack",{"_index":1759,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{}}}],["handle",{"_index":1868,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1835,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1861,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1836,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1863,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":796,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1837,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1865,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlers",{"_index":2657,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(key",{"_index":2769,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":306,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["has(target",{"_index":113,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["haskey",{"_index":2737,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2742,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":2314,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["hasstream",{"_index":886,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["hassubsequence",{"_index":703,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(left",{"_index":215,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":704,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(left",{"_index":213,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1516,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headerkey",{"_index":3080,"title":{},"body":{"classes/ODataResponse.html":{}}}],["headers",{"_index":428,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1679,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":1431,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["here",{"_index":3585,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3600,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3646,"title":{},"body":{"license.html":{}}}],["holds",{"_index":1889,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["homepage",{"_index":3669,"title":{},"body":{"properties.html":{}}}],["hour(left",{"_index":234,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["hours",{"_index":520,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["htmlcollection",{"_index":1311,"title":{},"body":{"classes/Field.html":{}}}],["http",{"_index":1550,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1799,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1801,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":2967,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpheaders((options",{"_index":1748,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":3003,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":2976,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams(params",{"_index":2984,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1812,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey",{"_index":3081,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":3104,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":3000,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":2980,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1646,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1539,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["http://json",{"_index":2411,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["httpclientmodule",{"_index":2578,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["httpcontext",{"_index":2864,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httperrorresponse",{"_index":1623,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["httpheaders",{"_index":1633,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":3062,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpheaders(response['headers",{"_index":1823,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["httpparams",{"_index":2857,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1634,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["httpresponsebase",{"_index":1626,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["https://devblogs.microsoft.com/odata/extension",{"_index":1575,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3586,"title":{},"body":{"index.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3589,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://github.com/odata/aspnetcoreodata/issues/171",{"_index":609,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1647",{"_index":608,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1974",{"_index":607,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://json",{"_index":2267,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":3503,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1698,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":439,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identifier",{"_index":479,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identify",{"_index":1879,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["identity",{"_index":378,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["ieee",{"_index":530,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754",{"_index":2936,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":599,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":2939,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2896,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2897,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":601,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":602,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implemented",{"_index":1345,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3636,"title":{},"body":{"license.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2601,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["in(left",{"_index":308,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["include",{"_index":2364,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_etag",{"_index":2381,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_navigation",{"_index":2352,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_parents",{"_index":2311,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["includeannotations",{"_index":606,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3629,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":834,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["includes",{"_index":951,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":2003,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"license.html":{}}}],["incorporates",{"_index":3573,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":3413,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(left",{"_index":202,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2711,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indicating",{"_index":1872,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSchemaElement.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":715,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["init",{"_index":2853,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":2904,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":2913,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":2921,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.context",{"_index":2909,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":2927,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":2918,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":2969,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2901,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":2908,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":2978,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.parseroptions",{"_index":2915,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":2906,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2903,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":2911,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":2916,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":3510,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":3255,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":3256,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["injection",{"_index":2605,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken",{"_index":2580,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken('odata.config",{"_index":2590,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["inside",{"_index":1396,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["install",{"_index":3496,"title":{},"body":{"index.html":{}}}],["installation",{"_index":3493,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":393,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["instead",{"_index":3251,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["int",{"_index":648,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["int16",{"_index":484,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["int32",{"_index":499,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["int64",{"_index":501,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["integer",{"_index":483,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["interface",{"_index":79,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":421,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["invalid",{"_index":3473,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isbatch",{"_index":2844,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":819,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["iscallabletype",{"_index":3226,"title":{},"body":{"classes/ODataSchema.html":{}}}],["iscomplextype",{"_index":2371,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["iscomposable",{"_index":831,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["isedmtype",{"_index":2058,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isentitytype",{"_index":2369,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["isenumtype",{"_index":2060,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isexpired",{"_index":1838,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1870,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2845,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isfield",{"_index":106,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["isflags",{"_index":924,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["iskey",{"_index":2310,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ismutate",{"_index":2846,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":3178,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":3197,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":3438,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(left",{"_index":267,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["isopentype",{"_index":2343,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["isquerybody",{"_index":2847,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isstructuredtype",{"_index":2063,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["issubtypeof",{"_index":1952,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(schema",{"_index":1982,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(type",{"_index":2336,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["issupertypeof",{"_index":1953,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issupertypeof(schema",{"_index":1985,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issupertypeof(type",{"_index":2340,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["istypeof",{"_index":1954,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof(type",{"_index":1988,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["items",{"_index":2308,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["john",{"_index":3565,"title":{},"body":{"index.html":{}}}],["john@example.com\").or(e().eq(\"username",{"_index":3564,"title":{},"body":{"index.html":{}}}],["join",{"_index":284,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json",{"_index":40,"title":{},"body":{"classes/Aggregate.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{},"index.html":{}}}],["json.body",{"_index":3061,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2700,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.map((s",{"_index":2703,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2702,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2559,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":3063,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":3064,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2558,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2699,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":3065,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json['alias",{"_index":345,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['children'].map((c",{"_index":742,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["json['connector",{"_index":3374,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["json['escape",{"_index":186,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['method",{"_index":344,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['name",{"_index":182,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['names",{"_index":744,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["json['negated",{"_index":3375,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["json['normalize",{"_index":185,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['op",{"_index":281,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['properties'].map((p",{"_index":353,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['type",{"_index":386,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["json['values'].map((v",{"_index":183,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["jsonbatchformat",{"_index":429,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["jsonschemacustom",{"_index":2221,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":2222,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":2223,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":2224,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":2220,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschematype",{"_index":2219,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["jsonschematype.array",{"_index":2307,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["jsonschematype.boolean",{"_index":2292,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["jsonschematype.integer",{"_index":2299,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["jsonschematype.null",{"_index":2306,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["jsonschematype.number",{"_index":2303,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["jsonschematype.object",{"_index":2271,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["jsonschematype.string",{"_index":2274,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["jsontype",{"_index":594,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["jsontype.array",{"_index":2494,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["jsontype.integer",{"_index":2495,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["k",{"_index":1922,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponseOptions.html":{}}}],["k.name",{"_index":2313,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.startswith(key",{"_index":1923,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":3154,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2759,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...keys",{"_index":2834,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(keys",{"_index":2771,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":92,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["key(value",{"_index":2735,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key.set(kt.alias",{"_index":2399,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["key.size",{"_index":2401,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keyof",{"_index":676,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys",{"_index":674,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2641,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["keys.includes(key",{"_index":2832,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keytypes",{"_index":2390,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keywords",{"_index":3666,"title":{},"body":{"properties.html":{}}}],["key}=${params[key",{"_index":787,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["key}=${value",{"_index":2697,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3634,"title":{},"body":{"license.html":{}}}],["kt",{"_index":2392,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["kt.name.split",{"_index":2393,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["lambda",{"_index":137,"title":{"classes/Lambda.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":405,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":403,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["lambda.fromjson(value",{"_index":138,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":401,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["last",{"_index":1890,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2643,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1892,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le(left",{"_index":298,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["leap",{"_index":514,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["left",{"_index":77,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["left.split('/').pop().tolowercase()[0",{"_index":398,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op",{"_index":400,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${render(right",{"_index":399,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":209,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["length(left",{"_index":204,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["levels",{"_index":471,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["levels(n",{"_index":1122,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["liability",{"_index":3650,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3647,"title":{},"body":{"license.html":{}}}],["library",{"_index":3489,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":3591,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":3612,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3637,"title":{},"body":{"license.html":{}}}],["line",{"_index":559,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["lines",{"_index":1802,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1560,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["literal",{"_index":37,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":3551,"title":{},"body":{"index.html":{}}}],["loadconfigs",{"_index":2092,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["loader",{"_index":2588,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["loaders",{"_index":2586,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["location",{"_index":3088,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":3051,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logic",{"_index":493,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["logicaloperators",{"_index":287,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["long_description",{"_index":2216,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["looking",{"_index":1994,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["lt(left",{"_index":296,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":2183,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":3571,"title":{},"body":{"index.html":{}}}],["make",{"_index":2602,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["makeenvironmentproviders",{"_index":2583,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["map",{"_index":1411,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2696,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":2421,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["map((key",{"_index":786,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{}}}],["map((n",{"_index":802,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["map((name",{"_index":747,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataResponse.html":{}}}],["map((p",{"_index":357,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["map((response",{"_index":1757,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["map((s",{"_index":2685,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["map((v",{"_index":283,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["map((value",{"_index":2108,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["map([...this.annotations",{"_index":1461,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["map(entries",{"_index":2811,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["map(this.annotations",{"_index":1466,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mapfields",{"_index":2435,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapfields(mapper",{"_index":2448,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapped",{"_index":2452,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapper",{"_index":2450,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["maps",{"_index":2451,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["match",{"_index":1403,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":1508,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":1506,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":1510,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":1404,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["matchespattern",{"_index":218,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["matchespattern(left",{"_index":3425,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matching",{"_index":419,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":335,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["max_age",{"_index":3148,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":612,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime(left",{"_index":236,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":626,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":603,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["meant",{"_index":1996,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["mediacontenttype",{"_index":1484,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":1482,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":1472,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":1480,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":666,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":665,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"interfaces/FieldParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":2497,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3639,"title":{},"body":{"license.html":{}}}],["merge",{"_index":3614,"title":{},"body":{"license.html":{}}}],["message",{"_index":1811,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":459,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":1474,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":22,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["microsoft.odata.sampleservice.models.trippin.airport",{"_index":3526,"title":{},"body":{"index.html":{}}}],["microsoft.odata.sampleservice.models.trippin.person",{"_index":3557,"title":{},"body":{"index.html":{}}}],["min",{"_index":334,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mindatetime(left",{"_index":238,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":450,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute(left",{"_index":240,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["minutes",{"_index":521,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["miscellaneous",{"_index":3458,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":2498,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3592,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mod",{"_index":690,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":319,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":673,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["model.attach(this.entity",{"_index":3287,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfieldoptions",{"_index":3692,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3693,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/model",{"_index":2203,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":2247,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"license.html":{}}}],["module",{"_index":2563,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":2565,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2575,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["month(left",{"_index":242,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":691,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":315,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1647,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1648,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1785,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["n",{"_index":265,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["n.render",{"_index":746,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["name?.resolve(parser",{"_index":112,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["named",{"_index":2377,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["namednodemap",{"_index":1301,"title":{},"body":{"classes/Field.html":{}}}],["names",{"_index":87,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["names.indexof(key",{"_index":2385,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["names.indexof(type",{"_index":2078,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.join",{"_index":2487,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.join(cache_key_separator",{"_index":1910,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.length",{"_index":100,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["names.map((n",{"_index":98,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":2077,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":3253,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["names.reduce",{"_index":109,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["names[0",{"_index":103,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["namespace",{"_index":650,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":2004,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["namevalue",{"_index":2478,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["navigation",{"_index":667,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["navigationproperties",{"_index":870,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":463,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":907,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["navigationpropertybindings",{"_index":1049,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne(left",{"_index":290,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":692,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":321,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["negated",{"_index":3338,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["nestedexpandoptions",{"_index":3694,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nestedorderby",{"_index":3695,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["net",{"_index":1578,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["network",{"_index":449,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":88,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["newline",{"_index":1649,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1650,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["nextlink",{"_index":1501,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2581,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["nicer",{"_index":1993,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["node",{"_index":718,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["node.children",{"_index":3369,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.connector",{"_index":3367,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.length",{"_index":3368,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.negated",{"_index":3371,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["none",{"_index":78,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":628,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3643,"title":{},"body":{"license.html":{}}}],["nonparenthesisforemptyparameterfunction",{"_index":430,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["normalize",{"_index":75,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["normalizevalue",{"_index":57,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue(value",{"_index":156,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["not(exp",{"_index":3350,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["not(left",{"_index":304,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["notexp",{"_index":3377,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["notice",{"_index":3627,"title":{},"body":{"license.html":{}}}],["now",{"_index":244,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["npm",{"_index":3497,"title":{},"body":{"index.html":{}}}],["null",{"_index":151,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["nullable",{"_index":625,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":150,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":3167,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":1507,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":3168,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["numeric",{"_index":524,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["o",{"_index":753,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":3153,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["object",{"_index":595,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["object.assign",{"_index":1463,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{}}}],["object.assign(acc",{"_index":782,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["object.assign(acc.params",{"_index":2678,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":2975,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(json",{"_index":741,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["object.assign(this",{"_index":1408,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1598,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["object.create(null",{"_index":149,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":146,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":2327,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.entries(config.fields).map",{"_index":2473,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":2074,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(json",{"_index":2807,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["object.entries(params",{"_index":2695,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.fromentries(key",{"_index":2403,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":148,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":145,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(attrs",{"_index":2384,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.keys(this.values).reduce",{"_index":791,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects",{"_index":53,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this._segments",{"_index":2704,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(this.properties",{"_index":362,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this.transformations",{"_index":363,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this.value",{"_index":392,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this.values[key",{"_index":792,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects.clone(v",{"_index":193,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["objects.resolvekey(key",{"_index":2402,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["observable",{"_index":442,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1728,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3605,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1517,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{},"properties.html":{}}}],["odata.git",{"_index":3674,"title":{},"body":{"properties.html":{}}}],["odata.include",{"_index":2955,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":3211,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":3155,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":3157,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3587,"title":{},"body":{"index.html":{}}}],["odata/issues",{"_index":3671,"title":{},"body":{"properties.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1827,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:105",{"_index":1874,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:126",{"_index":1856,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:138",{"_index":1853,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:159",{"_index":1850,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:168",{"_index":1871,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:178",{"_index":1866,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:189",{"_index":1862,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:22",{"_index":1842,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:224",{"_index":1864,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1841,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:30",{"_index":1860,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:31",{"_index":1876,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1878,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:55",{"_index":1881,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:76",{"_index":1844,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:93",{"_index":1849,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":2517,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:4",{"_index":2518,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2541,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2544,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2543,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:35",{"_index":2550,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:45",{"_index":2549,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/helper.ts",{"_index":3713,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/loaders.ts",{"_index":2090,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:12",{"_index":2113,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:21",{"_index":2094,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:29",{"_index":2095,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:6",{"_index":2110,"title":{},"body":{"classes/ODataConfigLoader.html":{}}}],["odata/src/lib/loaders.ts:9",{"_index":2112,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/models/options.ts",{"_index":3468,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2566,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata/src/lib/module.ts:49",{"_index":2573,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":1512,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:108",{"_index":1513,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:129",{"_index":1553,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:140",{"_index":1555,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:21",{"_index":1548,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:25",{"_index":1544,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:29",{"_index":1520,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:33",{"_index":1531,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:37",{"_index":1545,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:41",{"_index":1529,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:46",{"_index":1536,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:50",{"_index":1523,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:54",{"_index":1534,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:58",{"_index":1526,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:62",{"_index":1549,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:66",{"_index":1518,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:71",{"_index":1514,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:77",{"_index":1522,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:87",{"_index":1535,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2721,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:11",{"_index":3397,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:15",{"_index":3396,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:19",{"_index":3394,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:23",{"_index":3392,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:26",{"_index":3390,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:29",{"_index":3395,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:33",{"_index":3393,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:36",{"_index":3391,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:41",{"_index":2722,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:43",{"_index":2724,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:46",{"_index":2729,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:49",{"_index":2723,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:52",{"_index":2725,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:55",{"_index":2726,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:58",{"_index":2728,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:6",{"_index":3389,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:61",{"_index":2727,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:8",{"_index":3399,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2625,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:110",{"_index":2653,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:116",{"_index":2642,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:131",{"_index":2651,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:142",{"_index":2649,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:155",{"_index":2639,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:167",{"_index":2633,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:172",{"_index":2636,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:177",{"_index":2648,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:191",{"_index":2638,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:196",{"_index":2644,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:201",{"_index":2632,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:207",{"_index":2640,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:88",{"_index":2630,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:94",{"_index":2646,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":3477,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/apply.ts",{"_index":1335,"title":{},"body":{"classes/GroupByTransformations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/apply.ts:21",{"_index":1338,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["odata/src/lib/resources/query/expressions/apply.ts:36",{"_index":1341,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["odata/src/lib/resources/query/expressions/apply.ts:39",{"_index":1340,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["odata/src/lib/resources/query/expressions/apply.ts:42",{"_index":1337,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["odata/src/lib/resources/query/expressions/apply.ts:45",{"_index":1339,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts",{"_index":1149,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:16",{"_index":1157,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:20",{"_index":1154,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:34",{"_index":1152,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:36",{"_index":1151,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:40",{"_index":1153,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:44",{"_index":1156,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:50",{"_index":1155,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:7",{"_index":1150,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts",{"_index":707,"title":{},"body":{"classes/ComputeExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:19",{"_index":714,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:31",{"_index":734,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:35",{"_index":724,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:58",{"_index":728,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:93",{"_index":719,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:99",{"_index":727,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts",{"_index":757,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:102",{"_index":811,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:112",{"_index":758,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:121",{"_index":769,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:125",{"_index":763,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:14",{"_index":806,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:141",{"_index":760,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:151",{"_index":766,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:181",{"_index":765,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:20",{"_index":815,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:24",{"_index":814,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:30",{"_index":812,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:76",{"_index":810,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:88",{"_index":807,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:97",{"_index":813,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts",{"_index":1082,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:103",{"_index":1144,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:115",{"_index":1132,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:127",{"_index":1133,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:139",{"_index":1141,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:146",{"_index":1138,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:158",{"_index":1145,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:162",{"_index":1147,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:166",{"_index":1134,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:17",{"_index":1128,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:170",{"_index":1130,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:175",{"_index":1135,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:185",{"_index":1083,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:194",{"_index":1093,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:198",{"_index":1087,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:219",{"_index":1090,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:23",{"_index":1148,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:249",{"_index":1084,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:254",{"_index":1089,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:27",{"_index":1146,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:33",{"_index":1139,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:87",{"_index":1129,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:99",{"_index":1140,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/filter.ts",{"_index":3711,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts",{"_index":3299,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:10",{"_index":3327,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:126",{"_index":3305,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:130",{"_index":3308,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:14",{"_index":3326,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:22",{"_index":3324,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:44",{"_index":3323,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:47",{"_index":3325,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:56",{"_index":3302,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:65",{"_index":3313,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:69",{"_index":3309,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:7",{"_index":3322,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:85",{"_index":3303,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:95",{"_index":3310,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts",{"_index":3335,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:12",{"_index":3387,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:16",{"_index":3386,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:176",{"_index":3348,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:183",{"_index":3345,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:187",{"_index":3349,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:191",{"_index":3353,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:195",{"_index":3343,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:199",{"_index":3351,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:209",{"_index":3356,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:23",{"_index":3384,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:45",{"_index":3383,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:48",{"_index":3385,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:57",{"_index":3340,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:58",{"_index":3339,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:73",{"_index":3358,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:77",{"_index":3347,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:9",{"_index":3382,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:93",{"_index":3341,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts",{"_index":3400,"title":{},"body":{"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:10",{"_index":3401,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:19",{"_index":3409,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:23",{"_index":3404,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:44",{"_index":3406,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:73",{"_index":3402,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:78",{"_index":3405,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts",{"_index":7,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:1002",{"_index":1382,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:18",{"_index":3332,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:221",{"_index":1313,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:229",{"_index":1319,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:233",{"_index":1318,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:244",{"_index":1315,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:253",{"_index":1316,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:293",{"_index":1314,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:302",{"_index":1317,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:308",{"_index":3415,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:31",{"_index":3334,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:312",{"_index":3416,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:316",{"_index":3417,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:32",{"_index":3331,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:320",{"_index":3418,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:324",{"_index":3419,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:328",{"_index":3420,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:33",{"_index":3333,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:332",{"_index":3422,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:347",{"_index":706,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:350",{"_index":705,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:356",{"_index":3426,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:363",{"_index":3427,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:366",{"_index":3428,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:369",{"_index":3429,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:420",{"_index":685,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:423",{"_index":686,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:426",{"_index":687,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:432",{"_index":3439,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:440",{"_index":3440,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:448",{"_index":1323,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:451",{"_index":1324,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:454",{"_index":1325,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:460",{"_index":756,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:465",{"_index":3292,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:472",{"_index":3298,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:476",{"_index":3297,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:487",{"_index":3294,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:495",{"_index":3295,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:547",{"_index":3293,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:554",{"_index":3296,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:598",{"_index":694,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:601",{"_index":699,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:604",{"_index":697,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:607",{"_index":695,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:610",{"_index":696,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:613",{"_index":698,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:618",{"_index":1365,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:621",{"_index":1371,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:625",{"_index":1370,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:632",{"_index":1367,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:636",{"_index":1368,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:658",{"_index":1366,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:661",{"_index":1369,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:667",{"_index":1372,"title":{},"body":{"classes/GroupingOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:670",{"_index":1373,"title":{},"body":{"classes/GroupingOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:682",{"_index":27,"title":{},"body":{"classes/Aggregate.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:689",{"_index":47,"title":{},"body":{"classes/Aggregate.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:693",{"_index":46,"title":{},"body":{"classes/Aggregate.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:702",{"_index":38,"title":{},"body":{"classes/Aggregate.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:710",{"_index":42,"title":{},"body":{"classes/Aggregate.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:732",{"_index":34,"title":{},"body":{"classes/Aggregate.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:735",{"_index":44,"title":{},"body":{"classes/Aggregate.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:740",{"_index":1327,"title":{},"body":{"classes/GroupBy.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:746",{"_index":1333,"title":{},"body":{"classes/GroupBy.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:750",{"_index":1332,"title":{},"body":{"classes/GroupBy.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:758",{"_index":1329,"title":{},"body":{"classes/GroupBy.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:765",{"_index":1330,"title":{},"body":{"classes/GroupBy.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:802",{"_index":1328,"title":{},"body":{"classes/GroupBy.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:808",{"_index":1331,"title":{},"body":{"classes/GroupBy.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:858",{"_index":3430,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:864",{"_index":3436,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:868",{"_index":3435,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:877",{"_index":3432,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:885",{"_index":3433,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:910",{"_index":3431,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:914",{"_index":3434,"title":{},"body":{"classes/Type.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:924",{"_index":1375,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:931",{"_index":1381,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:935",{"_index":1380,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:946",{"_index":1377,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:954",{"_index":1378,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:985",{"_index":1376,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:992",{"_index":1379,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:998",{"_index":1383,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2756,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:104",{"_index":2775,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:120",{"_index":2781,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:134",{"_index":2778,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:142",{"_index":2767,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:149",{"_index":2768,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:158",{"_index":2779,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:176",{"_index":2764,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:181",{"_index":2766,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:187",{"_index":2774,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:193",{"_index":2770,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:197",{"_index":2777,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:204",{"_index":2772,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:212",{"_index":2763,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:98",{"_index":2762,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2836,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2862,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2867,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2865,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2868,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2870,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:225",{"_index":2871,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:23",{"_index":2863,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:24",{"_index":2866,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:276",{"_index":2877,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:285",{"_index":2879,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:289",{"_index":2881,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:293",{"_index":2883,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:30",{"_index":2869,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:302",{"_index":2885,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:31",{"_index":2861,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:311",{"_index":2887,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:317",{"_index":2889,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:323",{"_index":2891,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:327",{"_index":2893,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:331",{"_index":2895,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:337",{"_index":2875,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:345",{"_index":2872,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:349",{"_index":2873,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:353",{"_index":2874,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2856,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2854,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2855,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2858,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:44",{"_index":2852,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3710,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":1430,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:103",{"_index":2158,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:107",{"_index":2160,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:111",{"_index":2162,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:115",{"_index":2164,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:119",{"_index":2140,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":1441,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:120",{"_index":2166,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:127",{"_index":2144,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:128",{"_index":2145,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:129",{"_index":2146,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:139",{"_index":2139,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:140",{"_index":2167,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:147",{"_index":2143,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:173",{"_index":2124,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:177",{"_index":2126,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:181",{"_index":2128,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:185",{"_index":2130,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:189",{"_index":2132,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:19",{"_index":1449,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:194",{"_index":2134,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:199",{"_index":2136,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:206",{"_index":2114,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:207",{"_index":2138,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:214",{"_index":2119,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:218",{"_index":2118,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":1451,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:30",{"_index":1453,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:35",{"_index":1447,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:36",{"_index":1443,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:37",{"_index":1445,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":1438,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":1439,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:83",{"_index":2149,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:87",{"_index":2151,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:91",{"_index":2153,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:95",{"_index":2155,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:99",{"_index":2156,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":817,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":1160,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:46",{"_index":1162,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:48",{"_index":1164,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:49",{"_index":1163,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":3122,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":3134,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":3133,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":3132,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":3130,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:25",{"_index":3131,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:27",{"_index":3129,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":3128,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:34",{"_index":3147,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:38",{"_index":3135,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:42",{"_index":3139,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:59",{"_index":3146,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:65",{"_index":3141,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:70",{"_index":3143,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:76",{"_index":3137,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":3015,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:134",{"_index":3026,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:135",{"_index":3043,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:145",{"_index":3023,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":3045,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:155",{"_index":3022,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:156",{"_index":3047,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:178",{"_index":3030,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:202",{"_index":3028,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:220",{"_index":3036,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:247",{"_index":3039,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":3027,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:31",{"_index":3021,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:47",{"_index":3033,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:59",{"_index":3035,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:80",{"_index":3038,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":3025,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:94",{"_index":3041,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3714,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1612,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:111",{"_index":1627,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:121",{"_index":1624,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:42",{"_index":1620,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:43",{"_index":1619,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:44",{"_index":1621,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:50",{"_index":1632,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:54",{"_index":1631,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:88",{"_index":1629,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3712,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":1385,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:18",{"_index":1389,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:30",{"_index":1401,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:39",{"_index":1394,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":1428,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":1427,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":1424,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":1425,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":1426,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":1423,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1949,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1957,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:24",{"_index":1977,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:36",{"_index":1968,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:58",{"_index":1970,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:68",{"_index":1979,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1960,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:78",{"_index":1974,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1958,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:86",{"_index":1965,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1959,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/element.ts",{"_index":3239,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:19",{"_index":3248,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:29",{"_index":3245,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:38",{"_index":3246,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:47",{"_index":3244,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:58",{"_index":3242,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:68",{"_index":3243,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:7",{"_index":3241,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:8",{"_index":3240,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/entity",{"_index":2169,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":2434,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/parsers/callable.ts",{"_index":2027,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:110",{"_index":2041,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:117",{"_index":2038,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:123",{"_index":2043,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:13",{"_index":2612,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:138",{"_index":2040,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:14",{"_index":2615,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:15",{"_index":2614,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:152",{"_index":2037,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:16",{"_index":2611,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:169",{"_index":2036,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:17",{"_index":2613,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:18",{"_index":2610,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:28",{"_index":2623,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:36",{"_index":2617,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:43",{"_index":2616,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:56",{"_index":2620,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:60",{"_index":2621,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:64",{"_index":2618,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:69",{"_index":2622,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:73",{"_index":2624,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:79",{"_index":2619,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:91",{"_index":2030,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:92",{"_index":2031,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:93",{"_index":2029,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:94",{"_index":2035,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:95",{"_index":2034,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:96",{"_index":2033,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:97",{"_index":2028,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/enum",{"_index":2465,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/schema/parsers/structured",{"_index":2212,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":3173,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:12",{"_index":3181,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":3186,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":3180,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":3185,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":3184,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":3182,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":3179,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:39",{"_index":3198,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:46",{"_index":3200,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:54",{"_index":3194,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:60",{"_index":3196,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:66",{"_index":3190,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":3192,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":3187,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":2175,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:12",{"_index":2201,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:6",{"_index":2187,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":2184,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":3257,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":3262,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":3266,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":3259,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":3270,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:34",{"_index":3284,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:44",{"_index":3282,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:58",{"_index":3280,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":422,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:180",{"_index":3328,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:185",{"_index":3330,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:190",{"_index":3329,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:208",{"_index":702,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:209",{"_index":701,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3709,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/wiki",{"_index":3590,"title":{},"body":{"index.html":{}}}],["odata_config",{"_index":2589,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata_entityid_headers",{"_index":3053,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":3512,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1651,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":3049,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionoptions",{"_index":2190,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataactionresource",{"_index":2189,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotatable",{"_index":1384,"title":{"classes/ODataAnnotatable.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:18",{"_index":1964,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:30",{"_index":2006,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:39",{"_index":2005,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation",{"_index":1391,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation(annot",{"_index":1412,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odataannotations",{"_index":1429,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:12",{"_index":2121,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:153",{"_index":2120,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:161",{"_index":2116,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:169",{"_index":2117,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:19",{"_index":2122,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:41",{"_index":2754,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:49",{"_index":2752,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:57",{"_index":2753,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:63",{"_index":2147,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":2115,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:71",{"_index":2141,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:79",{"_index":2142,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataapi",{"_index":1636,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":1511,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{}}}],["odatabaseservice",{"_index":2176,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:100",{"_index":2199,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:26",{"_index":2195,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:63",{"_index":2191,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1611,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1730,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1701,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1712,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildjsonbody",{"_index":1751,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildjsonbody(this._requests",{"_index":1773,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody",{"_index":1767,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parsejsonresponse(this._requests",{"_index":1758,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parselegacyresponse(this._requests",{"_index":1769,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1826,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:105",{"_index":2532,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:126",{"_index":2527,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:138",{"_index":2526,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:14",{"_index":2522,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:159",{"_index":2525,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:168",{"_index":2531,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:178",{"_index":2530,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:189",{"_index":2528,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:22",{"_index":2520,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:224",{"_index":2529,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:23",{"_index":2519,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:29",{"_index":2521,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:38",{"_index":2533,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:54",{"_index":2545,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:55",{"_index":2534,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:64",{"_index":2548,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:76",{"_index":2523,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:79",{"_index":2547,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:93",{"_index":2524,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacacheentry",{"_index":1847,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1948,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":3212,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1961,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":2568,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odataconfigasyncloader",{"_index":2089,"title":{"classes/ODataConfigAsyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odataconfigloader",{"_index":2091,"title":{"classes/ODataConfigLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader",{"_index":2097,"title":{"classes/ODataConfigSyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader(passedconfig.config",{"_index":2592,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odatacontext",{"_index":1437,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":3029,"title":{},"body":{"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":1490,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesannotations(this.helper",{"_index":1492,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitiesoptions",{"_index":3697,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":3031,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":1468,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentityannotations(this.helper",{"_index":1493,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitycontainer",{"_index":2168,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":3215,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3698,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityservice",{"_index":2174,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:19",{"_index":3277,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:27",{"_index":3275,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityset",{"_index":2170,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":2173,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":3553,"title":{},"body":{"index.html":{}}}],["odataentitysetservice",{"_index":3264,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":2211,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataentitytypekey(key",{"_index":2326,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataenumtype",{"_index":2433,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":3206,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":2447,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":2474,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":2045,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatafunctionoptions",{"_index":2194,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatafunctionresource",{"_index":2193,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":410,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1559,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[options?.version",{"_index":2257,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[parseroptions?.version",{"_index":2386,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[this.version",{"_index":1610,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":2516,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2540,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":1170,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_data_services",{"_index":1281,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_reference",{"_index":1272,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_schema",{"_index":1284,"title":{},"body":{"classes/Field.html":{}}}],["odatametadatatype",{"_index":440,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":2202,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3699,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodelfieldoptions",{"_index":3700,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":3464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2564,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":3502,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":2197,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["odataoperators",{"_index":406,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1662,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":2032,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":2075,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odatapathsegments",{"_index":1657,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2705,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2720,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":3037,"title":{},"body":{"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":1459,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3701,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2780,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":2198,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2786,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this._values",{"_index":2827,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2755,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(new",{"_index":2812,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(objects.clone(this._values",{"_index":2826,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odatareferential",{"_index":2225,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatareferential(referential",{"_index":2233,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatarequest",{"_index":1618,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1658,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1660,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2562,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":3024,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":3151,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options.parseroptions",{"_index":3072,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1956,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement",{"_index":1950,"title":{"classes/ODataSchemaElement.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement:29",{"_index":1991,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:38",{"_index":2002,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:47",{"_index":1989,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:58",{"_index":1983,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:68",{"_index":1986,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:7",{"_index":1962,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:8",{"_index":1963,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odatasegment",{"_index":2629,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2569,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odatasingletonresource",{"_index":3278,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odatasingletonservice",{"_index":3268,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":3183,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":3209,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":49,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":2332,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser",{"_index":2046,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser).field",{"_index":2066,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatasyntax",{"_index":415,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odatatransformations",{"_index":413,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["odataversion",{"_index":441,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":1435,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odatawithout",{"_index":3499,"title":{},"body":{"index.html":{}}}],["of([this.passedconfigs",{"_index":2102,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["of(cached",{"_index":1936,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["of(this.passedconfigs",{"_index":2101,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["offset",{"_index":507,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ok",{"_index":1825,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["omit",{"_index":1576,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["omitnullvalues",{"_index":1580,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["ondelete",{"_index":966,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["one",{"_index":2606,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["onerror",{"_index":1614,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(response",{"_index":1622,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1615,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(response",{"_index":1625,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":279,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":672,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1540,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1563,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["opentype",{"_index":871,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["operator",{"_index":130,"title":{"classes/Operator.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":312,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":301,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":318,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":289,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":295,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":293,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":307,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":309,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":299,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":297,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":320,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":316,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":291,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":305,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":303,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":314,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operator.fromjson(value",{"_index":131,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["operators",{"_index":409,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":795,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["option(key",{"_index":2773,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":797,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["options",{"_index":83,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["options.body",{"_index":2990,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.bodyqueryoptions",{"_index":2996,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.context",{"_index":2989,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.custom",{"_index":2423,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.custom[f.name",{"_index":2424,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.etag",{"_index":2986,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.expand",{"_index":2417,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.fetchpolicy",{"_index":2994,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.headers",{"_index":1749,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.helper",{"_index":3110,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":3103,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes",{"_index":3117,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":3113,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":3120,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.observe",{"_index":2991,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.params",{"_index":1754,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.parseroptions",{"_index":2995,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.reportprogress",{"_index":2992,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.required",{"_index":2426,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.required[f.name",{"_index":2427,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.responsetype",{"_index":2993,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.select",{"_index":2418,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select).indexof(f.name",{"_index":2419,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.withcount",{"_index":2983,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.withcredentials",{"_index":1755,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options?.nonparenthesisforemptyparameterfunction",{"_index":2667,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["opts",{"_index":631,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/GroupByTransformations.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts(new",{"_index":1358,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["opts(node",{"_index":1126,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["or(exp",{"_index":3352,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["or(left",{"_index":302,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["order",{"_index":3315,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderby",{"_index":69,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":1136,"title":{},"body":{"classes/ExpandField.html":{}}}],["orderbyexpression",{"_index":68,"title":{"classes/OrderByExpression.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["orderbyexpression.factory(opts",{"_index":1116,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["orderbyexpression.fromjson(value",{"_index":125,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["orderbyexpressionbuilder",{"_index":1095,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["orderbyexpressionbuilder,current",{"_index":1137,"title":{},"body":{"classes/ExpandField.html":{},"classes/OrderByExpression.html":{}}}],["orderbyfield",{"_index":3314,"title":{"classes/OrderByField.html":{}},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(field",{"_index":3321,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(this.field.clone",{"_index":3319,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyobject",{"_index":3704,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3705,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1737,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1566,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["other.annotations",{"_index":1462,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["other.context",{"_index":1465,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["otherwise",{"_index":3654,"title":{},"body":{"license.html":{}}}],["out",{"_index":3656,"title":{},"body":{"license.html":{}}}],["output",{"_index":1999,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["override",{"_index":739,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["overview",{"_index":3660,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":675,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["p.configure",{"_index":2087,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":2084,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.istypeof(this.type",{"_index":397,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["p.name",{"_index":2080,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":2083,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":3078,"title":{},"body":{"classes/ODataResponse.html":{}}}],["p.tojson",{"_index":351,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["pack",{"_index":2436,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["pack(value",{"_index":2453,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["package",{"_index":3441,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":597,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parameter",{"_index":621,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":2051,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":2049,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":2047,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parameters(value",{"_index":2740,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":2082,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":190,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["params[p.name",{"_index":2081,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":2316,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parent.children.push(this",{"_index":2361,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parentelement",{"_index":1309,"title":{},"body":{"classes/Field.html":{}}}],["parentelement.children",{"_index":1312,"title":{},"body":{"classes/Field.html":{}}}],["parenthesis",{"_index":1532,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataPathSegments.html":{}}}],["parse",{"_index":1298,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parsejsonresponse",{"_index":1820,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parselegacyresponse",{"_index":1795,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parser",{"_index":45,"title":{"interfaces/Parser.html":{}},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parser.deserialize(value",{"_index":2261,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.encode(v",{"_index":172,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parser.isstructuredtype",{"_index":394,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parser.parsefromstring(xml",{"_index":1261,"title":{},"body":{"classes/Field.html":{}}}],["parser.serialize(value",{"_index":2263,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.structured",{"_index":395,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parser?.findchildparser((p",{"_index":396,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parserfortype",{"_index":2020,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["parserfortype(this.base",{"_index":2360,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype(this.return.type",{"_index":2085,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":2057,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions",{"_index":51,"title":{"interfaces/ParserOptions.html":{}},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["parseroptions?.stringasenum",{"_index":2485,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":642,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1567,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["partial",{"_index":1442,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["particular",{"_index":3641,"title":{},"body":{"license.html":{}}}],["partner",{"_index":967,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["passed",{"_index":2608,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig",{"_index":2574,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig?.loader",{"_index":2597,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfigs",{"_index":2099,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["passedinitialconfig",{"_index":2572,"title":{"interfaces/PassedInitialConfig.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["patch",{"_index":1676,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["patch'].indexof(this._method",{"_index":2949,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":3279,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":438,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["path(value",{"_index":2733,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.endswith",{"_index":2666,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.length",{"_index":2669,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.slice(1",{"_index":2665,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2664,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.substring(0",{"_index":2668,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2654,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2627,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["pathandparams(undefined",{"_index":2645,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["pathandparamsfromqueryoptions",{"_index":2793,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["pathandparamsfromqueryoptions(this._values",{"_index":2803,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["pathandparamsfromsegments",{"_index":2674,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparamsfromsegments(this._segments",{"_index":2683,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["paths",{"_index":2679,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment",{"_index":457,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegment.entityset",{"_index":1900,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegment.function",{"_index":2660,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment.navigationproperty",{"_index":2709,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegment.property",{"_index":2710,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2658,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathwithparams",{"_index":2848,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":219,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["payload",{"_index":630,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":3556,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":3569,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":3555,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":3558,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3599,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":649,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3621,"title":{},"body":{"license.html":{}}}],["person",{"_index":3604,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3622,"title":{},"body":{"license.html":{}}}],["pick",{"_index":2383,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picked",{"_index":2382,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picks",{"_index":2379,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["pipe",{"_index":1756,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["please",{"_index":3484,"title":{},"body":{"index.html":{}}}],["point",{"_index":534,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["points",{"_index":566,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["policy",{"_index":1525,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["polygon",{"_index":562,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["polygons",{"_index":572,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["portions",{"_index":3631,"title":{},"body":{"license.html":{}}}],["post",{"_index":1675,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":2962,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":526,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":1402,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["predicate(this",{"_index":2345,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["prefer",{"_index":431,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":2964,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":2954,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":2963,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":2952,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`omit",{"_index":2958,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":2950,"title":{},"body":{"classes/ODataRequest.html":{}}}],["preference",{"_index":3144,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference.split(',').foreach((prefer",{"_index":3164,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference_applied",{"_index":3054,"title":{},"body":{"classes/ODataResponse.html":{}}}],["preferenceapplied",{"_index":3085,"title":{},"body":{"classes/ODataResponse.html":{}}}],["prefix",{"_index":82,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["pretty",{"_index":1998,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["private",{"_index":454,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/GroupByTransformations.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":3485,"title":{},"body":{"index.html":{}}}],["projects/.../apply.ts",{"_index":3679,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../builder.ts",{"_index":3466,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../compute.ts",{"_index":3680,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../count.ts",{"_index":3681,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../durations.ts",{"_index":3682,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../expand.ts",{"_index":3684,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../filter.ts",{"_index":3688,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../helper.ts",{"_index":3696,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":3461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../options.ts",{"_index":3463,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../orderby.ts",{"_index":3703,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3683,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../search.ts",{"_index":3706,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":3702,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../select.ts",{"_index":3707,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../structured",{"_index":3691,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../syntax.ts",{"_index":3677,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":3460,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":348,"title":{"properties.html":{}},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"properties.html":{}}}],["property",{"_index":462,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":1489,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.ts",{"_index":963,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":1054,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":998,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":999,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":1000,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":1002,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":1001,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":997,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":971,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":1055,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":974,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":972,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":975,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":973,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":1012,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":1057,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:41",{"_index":1013,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:42",{"_index":1014,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:46",{"_index":986,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:47",{"_index":987,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":1056,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":996,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":1196,"title":{},"body":{"classes/Field.html":{}}}],["propertyrefs",{"_index":887,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["props",{"_index":1354,"title":{},"body":{"classes/GroupByTransformations.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["protected",{"_index":174,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1568,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["protocol/odata",{"_index":1564,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["provide",{"_index":2595,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["provided",{"_index":3632,"title":{},"body":{"license.html":{}}}],["provideodataclient",{"_index":2594,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["provider",{"_index":2582,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["providers",{"_index":2567,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["proxy",{"_index":89,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["public",{"_index":453,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3615,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3642,"title":{},"body":{"license.html":{}}}],["put",{"_index":700,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":629,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1873,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1839,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1875,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.expand",{"_index":3559,"title":{},"body":{"index.html":{}}}],["q.filter",{"_index":3541,"title":{},"body":{"index.html":{}}}],["q.filter().clear",{"_index":3554,"title":{},"body":{"index.html":{}}}],["q.filter().push",{"_index":3548,"title":{},"body":{"index.html":{}}}],["qualifier",{"_index":850,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["queries",{"_index":3522,"title":{},"body":{"index.html":{}}}],["query",{"_index":622,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query((q",{"_index":3540,"title":{},"body":{"index.html":{}}}],["querycustomtype",{"_index":55,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":3465,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":3481,"title":{},"body":{"index.html":{}}}],["queryoption",{"_index":437,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoption.apply",{"_index":2788,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.compute",{"_index":2787,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.count",{"_index":1103,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.expand",{"_index":1099,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.filter",{"_index":773,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.format",{"_index":2791,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.levels",{"_index":1104,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.orderby",{"_index":1100,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.search",{"_index":774,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.select",{"_index":1098,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.skip",{"_index":1101,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.skiptoken",{"_index":2790,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoption.top",{"_index":1102,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoption.transform",{"_index":2789,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":2794,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["r",{"_index":1665,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1946,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1706,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["r2",{"_index":1687,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":2298,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw",{"_index":2217,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"miscellaneous/enumerations.html":{}}}],["raw(`'${serialized",{"_index":2491,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":2359,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw(key",{"_index":2673,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":2492,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(v.render",{"_index":2801,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["read",{"_index":1891,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["readlink",{"_index":1476,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":1172,"title":{},"body":{"classes/Field.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["readonlyarray",{"_index":2899,"title":{},"body":{"classes/ODataRequest.html":{}}}],["reduce",{"_index":1897,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":777,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["reference",{"_index":464,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":943,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":945,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:16",{"_index":947,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:17",{"_index":946,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:21",{"_index":956,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:23",{"_index":959,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:24",{"_index":957,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:25",{"_index":958,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":1007,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":1010,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":1009,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":1008,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":671,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":669,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":1257,"title":{},"body":{"classes/Field.html":{}}}],["referential",{"_index":670,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":1199,"title":{},"body":{"classes/Field.html":{}}}],["referentialconstraints",{"_index":968,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":668,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["reg",{"_index":1414,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["reg.test(a.term",{"_index":1417,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["regexp",{"_index":1393,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["regexp(`^${term",{"_index":1415,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["region",{"_index":634,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":2067,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"index.html":{}}}],["relative",{"_index":1537,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{}}}],["relativeurls",{"_index":432,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["remove",{"_index":1851,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/enumerations.html":{}}}],["remove(...keys",{"_index":2830,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(keys",{"_index":2776,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["removed",{"_index":3475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":15,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":189,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(n",{"_index":99,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(p",{"_index":358,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":285,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(this.field",{"_index":783,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["render(this.group",{"_index":326,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(this.transformations",{"_index":360,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(this.value",{"_index":3360,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["render(undefined",{"_index":41,"title":{},"body":{"classes/Aggregate.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/Type.html":{}}}],["render(v",{"_index":191,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(value(syntax",{"_index":153,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render",{"_index":155,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":9,"title":{"interfaces/Renderable.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory",{"_index":115,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory(c",{"_index":743,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["renderablefactory(json['transformations",{"_index":355,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory(json['value",{"_index":343,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory(p",{"_index":354,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory(v",{"_index":184,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["renderablefactory(value",{"_index":2810,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["replace",{"_index":3083,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2843,"title":{},"body":{"classes/ODataRequest.html":{}}}],["repository",{"_index":3672,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":604,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1719,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["req.api",{"_index":1720,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1933,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1943,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1929,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1931,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1724,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1944,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1895,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":617,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["request('post",{"_index":1750,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.request.method",{"_index":1781,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.tojson(options",{"_index":1794,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.urlwithparams",{"_index":1818,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request>('post",{"_index":1766,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requester",{"_index":1718,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1704,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests.map((request",{"_index":1793,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests[index].request",{"_index":1809,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["required",{"_index":736,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["res",{"_index":1671,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1938,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1942,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":3056,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1902,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.headers",{"_index":3057,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1682,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1790,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":3291,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1940,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2538,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1782,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1784,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1786,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1788,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1787,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1677,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(this.request.body",{"_index":1681,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${request.tolegacy(options",{"_index":1789,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1680,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":3058,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":3059,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2561,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":3290,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":3060,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res['body",{"_index":1689,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res['headers",{"_index":1688,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["reset",{"_index":3470,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resolve",{"_index":16,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve'].includes(key",{"_index":114,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve([this.field",{"_index":781,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["resolve([this.value",{"_index":387,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve(parser",{"_index":43,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve(this.values",{"_index":187,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolve(values",{"_index":157,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["resolvekey",{"_index":2389,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["resource",{"_index":1659,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resourceparams",{"_index":2923,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":2974,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":2972,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":2922,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1888,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":2218,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["response",{"_index":1547,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["response.body",{"_index":1803,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1798,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.ok",{"_index":1691,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['body",{"_index":1824,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['status",{"_index":1822,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2551,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":610,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1661,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responses.map((response",{"_index":1821,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1753,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1741,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restorerequester",{"_index":1732,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["restriction",{"_index":3611,"title":{},"body":{"license.html":{}}}],["result",{"_index":1734,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["result.params",{"_index":2681,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2680,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":418,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":96,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":35,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["returntype",{"_index":820,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["right",{"_index":76,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["rights",{"_index":3613,"title":{},"body":{"license.html":{}}}],["rollup",{"_index":1355,"title":{},"body":{"classes/GroupByTransformations.html":{},"classes/GroupingOperators.html":{}}}],["rollup(...values",{"_index":331,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["root",{"_index":3515,"title":{},"body":{"index.html":{}}}],["round",{"_index":553,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["round(left",{"_index":261,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":443,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1885,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["s",{"_index":1898,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataSingletonService.html":{}}}],["s.key",{"_index":2693,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1899,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2701,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1901,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2686,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["same",{"_index":1723,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sbyte",{"_index":497,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["scale",{"_index":527,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":50,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["schema.alias",{"_index":2016,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":2284,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.default",{"_index":2305,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.format",{"_index":2287,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.maxlength",{"_index":2304,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.namespace",{"_index":2015,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":2268,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.org/draft",{"_index":2412,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.pattern",{"_index":2277,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.properties",{"_index":2420,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.required",{"_index":2425,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.ts",{"_index":1024,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":1034,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":1043,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":1036,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":1041,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":1038,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":1040,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":1042,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":1035,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":1039,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":1045,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":1044,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":1037,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":2273,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schemaconfig",{"_index":644,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":643,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1840,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1877,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1919,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1918,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":71,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["search(left",{"_index":380,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["search(opts",{"_index":1113,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["searchconnector",{"_index":1343,"title":{},"body":{"classes/GroupByTransformations.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpression",{"_index":70,"title":{"classes/SearchExpression.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["searchexpression.factory(opts",{"_index":1114,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["searchexpression.fromjson(value",{"_index":126,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["searchexpressionbuilder",{"_index":1096,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpressionbuilder,current",{"_index":3346,"title":{},"body":{"classes/SearchExpression.html":{}}}],["searchterm",{"_index":3359,"title":{"classes/SearchTerm.html":{}},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(this.value",{"_index":3361,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(value",{"_index":3381,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["second(left",{"_index":246,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["seconds",{"_index":515,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["segment",{"_index":2635,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segment.clearkey",{"_index":2690,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2671,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2691,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2659,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2661,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2663,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2656,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2712,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2717,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1710,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2647,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegment.batch",{"_index":1711,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2708,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2688,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2713,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2692,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.reduce",{"_index":2675,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1896,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2714,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2715,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":73,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(opts",{"_index":1142,"title":{},"body":{"classes/ExpandField.html":{}}}],["selectexpression",{"_index":72,"title":{"classes/SelectExpression.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["selectexpression.factory(opts",{"_index":1108,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["selectexpression.fromjson(value",{"_index":120,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["selectexpressionbuilder",{"_index":1097,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["selectexpressionbuilder,current",{"_index":1143,"title":{},"body":{"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["selector",{"_index":3513,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3708,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3619,"title":{},"body":{"license.html":{}}}],["send",{"_index":1519,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["send(options",{"_index":1743,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendjson(options",{"_index":1747,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendlegacy",{"_index":1765,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sent",{"_index":1528,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["sequence",{"_index":486,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialization",{"_index":1980,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":619,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":2042,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1978,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1981,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1819,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":681,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntitySet.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":637,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2587,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["sessionstorage",{"_index":2552,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":905,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set.ts",{"_index":906,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:3",{"_index":909,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:5",{"_index":912,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:6",{"_index":910,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:7",{"_index":913,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:8",{"_index":911,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["setcache",{"_index":3123,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":3136,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":3124,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":3138,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":3125,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":3140,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied",{"_index":3126,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied(preference",{"_index":3142,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setup",{"_index":3501,"title":{},"body":{"index.html":{}}}],["setversion",{"_index":3127,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":3145,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3628,"title":{},"body":{"license.html":{}}}],["side",{"_index":3664,"title":{},"body":{"properties.html":{}}}],["signed",{"_index":482,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["single",{"_index":543,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleconfigorarray",{"_index":2105,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleconfigorarray.pipe",{"_index":2107,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleton",{"_index":461,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":3265,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":1048,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":1050,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":1051,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":1053,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":1052,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":3267,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":895,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":3273,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":468,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skip(n",{"_index":1118,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["skiptoken",{"_index":469,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["software",{"_index":3607,"title":{},"body":{"license.html":{}}}],["sort",{"_index":3471,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["specified",{"_index":1303,"title":{},"body":{"classes/Field.html":{}}}],["split",{"_index":3076,"title":{},"body":{"classes/ODataResponse.html":{}}}],["split(newline_regexp",{"_index":1804,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["srid",{"_index":836,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["standalone",{"_index":2593,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["standardaggregatemethods",{"_index":3467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["started",{"_index":3478,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1699,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1808,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":3414,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(left",{"_index":206,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1883,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":3545,"title":{},"body":{"index.html":{}}}],["static",{"_index":13,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["status",{"_index":1816,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["statustext",{"_index":1817,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2542,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":455,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":3170,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["storerequester",{"_index":1716,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["stream",{"_index":547,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["streaming",{"_index":600,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":25,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["string(name",{"_index":2378,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["stringandcollectionfunctions",{"_index":195,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":433,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":217,"title":{"classes/StringFunctions.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":569,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["strings.titlecase(this.name",{"_index":2335,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.uniqueid",{"_index":1664,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1546,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["stripmetadata",{"_index":434,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":882,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["structured",{"_index":866,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["structuredtype",{"_index":2068,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["structuredtypeconfig",{"_index":655,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":614,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":613,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":2181,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":2065,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["styleurls",{"_index":3518,"title":{},"body":{"index.html":{}}}],["sub",{"_index":693,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["sub(left",{"_index":313,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["sub)seconds",{"_index":522,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["subject",{"_index":1613,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3617,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":3530,"title":{},"body":{"index.html":{}}}],["subscribe((airports",{"_index":3532,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3630,"title":{},"body":{"license.html":{}}}],["substring",{"_index":208,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["substring(left",{"_index":3421,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["subtype",{"_index":1984,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["sum",{"_index":333,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["super",{"_index":737,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["super(annotationlist",{"_index":851,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(config",{"_index":2007,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["super(field",{"_index":2228,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["super(init",{"_index":3055,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":883,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super.clone",{"_index":1713,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["super.flush",{"_index":2560,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["super.tojson",{"_index":740,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["supertype",{"_index":1987,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["support",{"_index":3575,"title":{},"body":{"index.html":{}}}],["supported",{"_index":1307,"title":{},"body":{"classes/Field.html":{}}}],["switch",{"_index":117,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["switchmap",{"_index":3537,"title":{},"body":{"index.html":{}}}],["symbol",{"_index":93,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["symbol.tostringtag",{"_index":176,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":2609,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"miscellaneous/enumerations.html":{}}}],["syntax",{"_index":417,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["syntax.group(node",{"_index":3373,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["syntax.rollup(e",{"_index":1356,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["system",{"_index":556,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["t",{"_index":39,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":3491,"title":{},"body":{"index.html":{}}}],["tag",{"_index":1169,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":1204,"title":{},"body":{"classes/Field.html":{}}}],["tag_action_import",{"_index":1210,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotation",{"_index":1185,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotations",{"_index":1184,"title":{},"body":{"classes/Field.html":{}}}],["tag_complex_type",{"_index":1190,"title":{},"body":{"classes/Field.html":{}}}],["tag_data_services",{"_index":1175,"title":{},"body":{"classes/Field.html":{}}}],["tag_edmx",{"_index":1173,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_container",{"_index":1205,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_set",{"_index":1206,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_type",{"_index":1192,"title":{},"body":{"classes/Field.html":{}}}],["tag_enum_type",{"_index":1187,"title":{},"body":{"classes/Field.html":{}}}],["tag_function",{"_index":1201,"title":{},"body":{"classes/Field.html":{}}}],["tag_function_import",{"_index":1208,"title":{},"body":{"classes/Field.html":{}}}],["tag_include",{"_index":1179,"title":{},"body":{"classes/Field.html":{}}}],["tag_include_annotations",{"_index":1181,"title":{},"body":{"classes/Field.html":{}}}],["tag_key",{"_index":1194,"title":{},"body":{"classes/Field.html":{}}}],["tag_member",{"_index":1189,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property",{"_index":1197,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property_binding",{"_index":1212,"title":{},"body":{"classes/Field.html":{}}}],["tag_on_delete",{"_index":1200,"title":{},"body":{"classes/Field.html":{}}}],["tag_parameter",{"_index":1203,"title":{},"body":{"classes/Field.html":{}}}],["tag_property",{"_index":1193,"title":{},"body":{"classes/Field.html":{}}}],["tag_property_ref",{"_index":1195,"title":{},"body":{"classes/Field.html":{}}}],["tag_reference",{"_index":1177,"title":{},"body":{"classes/Field.html":{}}}],["tag_referential_constraint",{"_index":1198,"title":{},"body":{"classes/Field.html":{}}}],["tag_return_type",{"_index":1202,"title":{},"body":{"classes/Field.html":{}}}],["tag_schema",{"_index":1186,"title":{},"body":{"classes/Field.html":{}}}],["tag_singleton",{"_index":1207,"title":{},"body":{"classes/Field.html":{}}}],["tag_term",{"_index":1183,"title":{},"body":{"classes/Field.html":{}}}],["tag_type_definition",{"_index":1213,"title":{},"body":{"classes/Field.html":{}}}],["tags",{"_index":1171,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(res",{"_index":1880,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1924,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1904,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1908,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1925,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1884,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1939,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["target",{"_index":94,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["targetnamespace",{"_index":954,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["templateurl",{"_index":3516,"title":{},"body":{"index.html":{}}}],["term",{"_index":646,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["term(value",{"_index":3355,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["termnamespace",{"_index":953,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["terms",{"_index":1031,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["text",{"_index":1768,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":2947,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":1262,"title":{},"body":{"classes/Field.html":{}}}],["text_plain",{"_index":2898,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._add(countfield",{"_index":804,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["this._add(exp",{"_index":3376,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(field",{"_index":3410,"title":{},"body":{"classes/SelectExpression.html":{}}}],["this._add(name",{"_index":755,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._add(new",{"_index":3320,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(node",{"_index":1127,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{}}}],["this._add(notexp",{"_index":3380,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(syntax.aggregate(value",{"_index":1347,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["this._add(syntax.groupby(properties",{"_index":1359,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["this._add(transformations.filter(exp",{"_index":1362,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["this._add(transformations.search(exp",{"_index":1363,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["this._annotations",{"_index":3101,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_etag",{"_index":3106,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_id",{"_index":3108,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":2912,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._children",{"_index":801,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.length",{"_index":1158,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.map((c",{"_index":749,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.map((n",{"_index":745,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._children.push",{"_index":3372,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.push(node",{"_index":752,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupByTransformations.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["this._connector",{"_index":3362,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._context",{"_index":3097,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._fields",{"_index":2472,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._fields.filter",{"_index":2366,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["this._fields.foreach((f",{"_index":2362,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._fields.map((f",{"_index":2496,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._fields.push(field",{"_index":2333,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._functions",{"_index":1495,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":2966,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._keys",{"_index":2324,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._method",{"_index":2900,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._negated",{"_index":3363,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._options",{"_index":3071,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":3093,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":3079,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":3090,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setpreferenceapplied(preferenceapplied",{"_index":3087,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":3084,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":2979,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":3013,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":3009,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":2925,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":2999,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}?${this._params",{"_index":3010,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":3094,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":1487,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._requests",{"_index":1715,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1705,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1729,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1731,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses",{"_index":1708,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses).foreach((tuple",{"_index":1762,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":2910,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2682,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2698,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2716,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2707,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._values",{"_index":2802,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.clear",{"_index":2835,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.delete(key",{"_index":2833,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(key",{"_index":2805,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.apply",{"_index":2817,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.compute",{"_index":2816,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.count",{"_index":2825,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.expand",{"_index":2814,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.filter",{"_index":2819,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.levels",{"_index":2824,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.orderby",{"_index":2820,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.search",{"_index":2818,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.select",{"_index":2813,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.skip",{"_index":2822,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.skiptoken",{"_index":2823,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.top",{"_index":2821,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.get(queryoption.transform",{"_index":2815,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.has(key",{"_index":2829,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.keys",{"_index":2831,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.keys()].reduce((acc",{"_index":2804,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this._values.set(key",{"_index":2809,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.accept",{"_index":1596,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.add(ctx",{"_index":1771,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.addfield(name",{"_index":2330,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.alias",{"_index":342,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.annotatedvalue(computed",{"_index":2252,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(long_description",{"_index":2415,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(term",{"_index":2334,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["this.annotations",{"_index":1409,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.annotations.find(predicate",{"_index":1413,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.api",{"_index":1721,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":3288,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":2019,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(bindingtype",{"_index":3224,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(callablebindingtype",{"_index":3230,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":2206,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options",{"_index":1752,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":2942,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":2937,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":2934,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":2940,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":2920,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":2928,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":2931,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":2919,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":2968,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.jsonbatchformat",{"_index":1744,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.options.params",{"_index":2977,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":2961,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":2953,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":2951,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.omitnullvalues",{"_index":2957,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":2948,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":3114,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":2917,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.requester",{"_index":1717,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this.path",{"_index":3007,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":3008,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":2205,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataSingletonService.html":{}}}],["this.base",{"_index":2319,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.body",{"_index":3066,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":3096,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1594,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":3011,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":3001,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":3012,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":2010,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1911,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1912,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1920,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":3171,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":3210,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find((c",{"_index":3225,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":3237,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":1263,"title":{},"body":{"classes/Field.html":{}}}],["this.children",{"_index":2347,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.children.some((c",{"_index":2341,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.client",{"_index":3269,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.singleton(this.name",{"_index":3285,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.collection",{"_index":2050,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.complete",{"_index":1693,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":2012,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.configs",{"_index":2106,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["this.containers",{"_index":3213,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":3218,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":1464,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":1456,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":1458,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.default",{"_index":2234,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.deleterefby",{"_index":1602,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.deserialize(this.default",{"_index":2266,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.entities",{"_index":3207,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.find((e",{"_index":3222,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":3235,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":3289,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entitysetpath",{"_index":2008,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":2171,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":3232,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":2207,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1894,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1927,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1921,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1915,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1913,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":2251,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.enums",{"_index":3204,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":3220,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":3233,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error(response",{"_index":1697,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.escape",{"_index":194,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.factory.entityset",{"_index":3524,"title":{},"body":{"index.html":{}}}],["this.fetchpolicy",{"_index":1592,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field",{"_index":1106,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.field.clone",{"_index":1107,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.field.resolve(parser",{"_index":794,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["this.field.tojson",{"_index":772,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.fields",{"_index":2351,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields().find",{"_index":2477,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.fields().map(mapper",{"_index":2480,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.find((s",{"_index":2718,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":1416,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.findchildparser(predicate",{"_index":2350,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.flags",{"_index":2470,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1914,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":1498,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.cachekey",{"_index":2539,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":1265,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects",{"_index":1270,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects(dataservices",{"_index":1283,"title":{},"body":{"classes/Field.html":{}}}],["this.getresponse(req",{"_index":1935,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group",{"_index":1666,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.group.tojson",{"_index":324,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1930,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1932,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1586,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":3092,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":3073,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(headerkey",{"_index":3082,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":3105,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":3089,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(preference_applied",{"_index":3086,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":3067,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":1460,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.annotations(data",{"_index":1455,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":1454,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":1500,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":1504,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":1479,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":1499,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":1469,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":1471,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":1496,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":1470,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":1485,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":1483,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":1473,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":1481,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":1475,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":1502,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":1488,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":1467,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":1477,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":1457,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.id",{"_index":1663,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.ieee754compatible",{"_index":3159,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isentitytype",{"_index":2372,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.isenumtype",{"_index":2061,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.isexpired(entry",{"_index":1916,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isquerybody",{"_index":2998,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.isstructuredtype",{"_index":2064,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.istypeof(schema.type",{"_index":3254,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.istypeof(type",{"_index":2337,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.jsonbatchformat",{"_index":1606,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.keys",{"_index":2391,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.location",{"_index":3163,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":3169,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":2236,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.members",{"_index":2458,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":3156,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.method",{"_index":341,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.name",{"_index":178,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.names",{"_index":738,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.names.push(name",{"_index":751,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.namespace",{"_index":2070,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["this.namespace}.${this.name",{"_index":2076,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":2489,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":2486,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${params.join",{"_index":192,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.name}(${value",{"_index":389,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.name}('${this.type",{"_index":390,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":2240,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.next(response",{"_index":1692,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":1505,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.nonparenthesisforemptyparameterfunction",{"_index":1604,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.normalize",{"_index":181,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":2048,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.observe",{"_index":2907,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":3566,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":3552,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":280,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":2321,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.option",{"_index":788,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.count",{"_index":1124,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.levels",{"_index":1123,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.skip",{"_index":1119,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoption.top",{"_index":1121,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.options",{"_index":3102,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.helper.context",{"_index":3098,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.version",{"_index":3095,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.op}(${left",{"_index":286,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.order",{"_index":3318,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.parameters",{"_index":2073,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":2088,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":2086,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1584,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.params.keys().length",{"_index":3004,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.parent",{"_index":2338,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.fields",{"_index":2365,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.isentitytype",{"_index":2370,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.issubtypeof(type",{"_index":2339,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.keys",{"_index":2368,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parse(parser",{"_index":2262,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser",{"_index":2014,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.binding",{"_index":2026,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":2022,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":2023,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.encode(v",{"_index":2056,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":2025,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.field(enu",{"_index":2461,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.fields(value",{"_index":2460,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.mapfields(mapper",{"_index":2462,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.pack(value",{"_index":2464,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":2018,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":2055,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":2024,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.tojsonschema(options",{"_index":2270,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser.unpack(value",{"_index":2463,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parseroptions",{"_index":2052,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.path",{"_index":3006,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.path.endswith($batch",{"_index":3014,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.pathandparams",{"_index":2694,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.path}?${this.params",{"_index":3005,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.payload",{"_index":3100,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":2242,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.prefer",{"_index":1600,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.properties",{"_index":356,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.properties.get(name",{"_index":1491,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.properties.map((p",{"_index":350,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.property",{"_index":2226,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.put(req.cachekey",{"_index":2537,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1941,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":3521,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":2227,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.references",{"_index":1269,"title":{},"body":{"classes/Field.html":{}}}],["this.referentials",{"_index":2231,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.referentials.length",{"_index":2315,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.relativeurls",{"_index":1608,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.reportprogress",{"_index":2905,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.body",{"_index":1690,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.headers",{"_index":1678,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1672,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1673,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.urlwithparams",{"_index":1674,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2902,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":3116,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":3115,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":3118,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":3121,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":2924,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":2914,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2554,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.restorerequester(handler",{"_index":1742,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.return",{"_index":2071,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":2244,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.schema",{"_index":3249,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.alias",{"_index":3252,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.api",{"_index":3250,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.namespace}.${this.name",{"_index":2017,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataSchemaElement.html":{}}}],["this.schemas",{"_index":1282,"title":{},"body":{"classes/Field.html":{}}}],["this.scope(r",{"_index":1947,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2535,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.segment.key",{"_index":2736,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2730,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2741,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2734,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2732,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2684,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegment.action",{"_index":2747,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.entityset",{"_index":2745,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.function",{"_index":2748,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.navigationproperty",{"_index":2751,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.property",{"_index":2750,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegment.singleton",{"_index":2746,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2749,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.send(options).pipe(map((response",{"_index":1772,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendjson(options",{"_index":1745,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendlegacy(options",{"_index":1746,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.serialize(value",{"_index":2490,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":2209,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.status",{"_index":3068,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":3069,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2553,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2557,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2556,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storerequester",{"_index":1739,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.streaming",{"_index":3158,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1582,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.stripmetadata",{"_index":1590,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.structured().validate(value",{"_index":2250,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype",{"_index":2229,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tags(res",{"_index":2536,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":1406,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1893,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.titleize(description",{"_index":2414,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tojson(parser",{"_index":2265,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tolegacy",{"_index":1668,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.transformations",{"_index":359,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.transformations?.tojson",{"_index":352,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.type",{"_index":384,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.type.startswith('edm",{"_index":2059,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.url",{"_index":3070,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":2249,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.value",{"_index":385,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.value.tojson",{"_index":340,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.values.map((v",{"_index":179,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["this.values[key",{"_index":778,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[name",{"_index":798,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.expand",{"_index":1112,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.filter",{"_index":790,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.orderby",{"_index":1117,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.search",{"_index":1115,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoption.select",{"_index":1109,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.version",{"_index":1264,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1588,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["through",{"_index":2604,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["throw",{"_index":1296,"title":{},"body":{"classes/Field.html":{},"classes/GroupByTransformations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["throwerror",{"_index":1882,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["time",{"_index":505,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["time(left",{"_index":248,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["timeofday",{"_index":512,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["timeout",{"_index":1829,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1995,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["titleize",{"_index":1955,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleize(term",{"_index":1990,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleized",{"_index":2000,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["todo",{"_index":1669,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["tojson",{"_index":17,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["tojson(undefined",{"_index":1628,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tojsonschema",{"_index":2493,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tojsonschema(options",{"_index":2269,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["tolegacy",{"_index":1616,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tolegacy(undefined",{"_index":1630,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tolower",{"_index":3423,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(left",{"_index":221,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2828,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":467,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["top(n",{"_index":1120,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["topcount",{"_index":1348,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["topcount(value",{"_index":366,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["toppercent",{"_index":1350,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["toppercent(value",{"_index":370,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["topsum",{"_index":1349,"title":{},"body":{"classes/GroupByTransformations.html":{}}}],["topsum(value",{"_index":368,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["toqueryarguments",{"_index":2760,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3653,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":1336,"title":{},"body":{"classes/GroupByTransformations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["tostring(undefined",{"_index":2650,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["totaloffsetminutes(left",{"_index":250,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds(left",{"_index":252,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":3424,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(left",{"_index":223,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":466,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["transformations",{"_index":349,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["trim",{"_index":3161,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(left",{"_index":225,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":3509,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":3507,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":3508,"title":{},"body":{"index.html":{}}}],["trips",{"_index":3562,"title":{},"body":{"index.html":{}}}],["true",{"_index":107,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":171,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["tslib",{"_index":3454,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":2792,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tuple[0].isstopped",{"_index":1763,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tuple[0].onload(tuple[1",{"_index":1764,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tuple[1",{"_index":1760,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#batch",{"_index":1700,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":3272,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":31,"title":{"classes/Type.html":{}},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["type('cast",{"_index":266,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["type('isof",{"_index":268,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["type(this.name",{"_index":391,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["type(undefined",{"_index":2001,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["type(value",{"_index":2731,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type.fromjson(value",{"_index":139,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["type.startswith(this.alias",{"_index":3217,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":3216,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":867,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":925,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":919,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:11",{"_index":1058,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:112",{"_index":2511,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:12",{"_index":920,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:13",{"_index":921,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:132",{"_index":2505,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:14",{"_index":2467,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:142",{"_index":2512,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:15",{"_index":2466,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:157",{"_index":2515,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:17",{"_index":874,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:177",{"_index":2513,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:181",{"_index":2510,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:19",{"_index":2439,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:23",{"_index":2468,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:3",{"_index":928,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":915,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:32",{"_index":2503,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:33",{"_index":917,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:34",{"_index":2501,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:35",{"_index":2446,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:36",{"_index":2502,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:37",{"_index":2500,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:38",{"_index":2499,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:39",{"_index":916,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:4",{"_index":927,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:42",{"_index":2214,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:43",{"_index":2213,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:44",{"_index":2443,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:45",{"_index":961,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:46",{"_index":962,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:49",{"_index":1003,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:5",{"_index":929,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:51",{"_index":1005,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataReferential.html":{}}}],["type.ts:52",{"_index":1004,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["type.ts:53",{"_index":2449,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:6",{"_index":926,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:63",{"_index":2440,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:64",{"_index":2508,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:7",{"_index":2438,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:70",{"_index":2507,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:73",{"_index":2455,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:78",{"_index":2506,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:8",{"_index":1059,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:83",{"_index":2441,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:87",{"_index":2457,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:9",{"_index":1060,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:91",{"_index":2454,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:93",{"_index":2509,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:98",{"_index":2504,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["typealiases",{"_index":3676,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":1214,"title":{},"body":{"classes/Field.html":{}}}],["typedefinitions",{"_index":1032,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefunctions",{"_index":263,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":102,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types",{"_index":52,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types(undefined",{"_index":2652,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(v",{"_index":169,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isarray(value",{"_index":2798,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(errors",{"_index":2256,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(params",{"_index":784,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(this.segment.key",{"_index":2738,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2743,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.values[key",{"_index":776,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(value",{"_index":2410,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(values.get(key",{"_index":2796,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isfunction(value",{"_index":152,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(parser",{"_index":165,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(v",{"_index":161,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isobject(value",{"_index":154,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.isplainobject(data",{"_index":3112,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(options.body",{"_index":2987,"title":{},"body":{"classes/ODataRequest.html":{}}}],["types.isplainobject(payload",{"_index":3119,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.payload",{"_index":3099,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":2395,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isplainobject(value",{"_index":116,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.rawtype(this",{"_index":177,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["types.rawtype(v).endswith('expression",{"_index":2800,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.rawtype(value).endswith('expression",{"_index":779,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["typescript",{"_index":3665,"title":{},"body":{"properties.html":{}}}],["unchanged",{"_index":3476,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":19,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":1073,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":923,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["unicode",{"_index":979,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["union",{"_index":1432,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["union(other",{"_index":1446,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["unique",{"_index":478,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["united",{"_index":3544,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":2109,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["unpack",{"_index":2437,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpack(value",{"_index":2456,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpacked",{"_index":1094,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["unsigned",{"_index":495,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["unsuccessful",{"_index":1694,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1433,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/enumerations.html":{}}}],["update(attrs",{"_index":3281,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(data",{"_index":1448,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["updating",{"_index":3482,"title":{},"body":{"index.html":{}}}],["uri",{"_index":950,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["url",{"_index":620,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urls",{"_index":1538,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["urlwithparams",{"_index":2849,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":3494,"title":{},"body":{"index.html":{}}}],["use",{"_index":1530,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataSchemaElement.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2598,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["usevalue",{"_index":2596,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["using",{"_index":1867,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["utf",{"_index":487,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["utils",{"_index":54,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["utils/arrays",{"_index":1654,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/http",{"_index":1655,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":3201,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1656,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":3048,"title":{},"body":{"classes/ODataResponse.html":{}}}],["v",{"_index":160,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["v.isfield",{"_index":162,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["v.tojson",{"_index":180,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["v2",{"_index":3668,"title":{},"body":{"properties.html":{}}}],["v3",{"_index":3667,"title":{},"body":{"properties.html":{}}}],["v4",{"_index":3581,"title":{},"body":{"index.html":{},"properties.html":{}}}],["v4.0",{"_index":1542,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1562,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v[field.name",{"_index":2396,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["validate",{"_index":2246,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["validate(member",{"_index":2514,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":33,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/GroupByTransformations.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["value).reduce",{"_index":2482,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.$type",{"_index":118,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["value.length",{"_index":2254,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["value.map((v",{"_index":2054,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["value.some((v",{"_index":2799,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value.tojson",{"_index":2806,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":616,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":2354,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["valued",{"_index":492,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["values",{"_index":97,"title":{},"body":{"classes/Aggregate.html":{},"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values.filter",{"_index":159,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values.get(key",{"_index":2797,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["values.has(key",{"_index":2795,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["values.join",{"_index":104,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":168,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":210,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["values=nulls",{"_index":2959,"title":{},"body":{"classes/ODataRequest.html":{}}}],["values[index",{"_index":2689,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3597,"title":{},"body":{"license.html":{},"properties.html":{}}}],["var",{"_index":1738,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["variable",{"_index":627,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["variables",{"_index":1702,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":435,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"modules/ODataModule.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"properties.html":{}}}],["version.replace(/\\;/g",{"_index":3160,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":3149,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":3150,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":1166,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":3162,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3576,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3584,"title":{},"body":{"index.html":{}}}],["void",{"_index":632,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"interfaces/FieldParser.html":{},"classes/GroupByTransformations.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3638,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3633,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3651,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3588,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2555,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":2981,"title":{},"body":{"classes/ODataRequest.html":{},"index.html":{}}}],["withcredentials",{"_index":436,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":504,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"license.html":{}}}],["works",{"_index":3570,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":3271,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["xssi_prefix",{"_index":1652,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year(left",{"_index":254,"title":{},"body":{"classes/Aggregate.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/GroupBy.html":{},"classes/Grouping.html":{},"classes/GroupingOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":725,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GroupBy.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/Type.html":{},"classes/TypeFunctions.html":{}}}],["zone",{"_index":506,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/FieldParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["zone.js",{"_index":3456,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Aggregate.html":{"url":"classes/Aggregate.html","title":"class - Aggregate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Aggregate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: Renderable, method: AggregateMethod, alias: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:682\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        method\n                                                  \n                                                        \n                                                                        AggregateMethod\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:732\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Aggregate\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:702\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Aggregate\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:710\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:735\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:693\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         { $type: any; value: any; method: AggregateMethod; alias: string; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:689\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jsonBatchFormat\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relativeUrls\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOption[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jsonBatchFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jsonBatchFormat:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relativeUrls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relativeUrls:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  apply = 'apply',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport enum JsonType {\n  string = 'string',\n  number = 'number',\n  integer = 'integer',\n  object = 'object',\n  array = 'array',\n  boolean = 'boolean',\n  null = 'null'\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n  relativeUrls?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(left: T | string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:420\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(left: T | string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:423\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(left: T | string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:426\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:598\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:607\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:610\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:604\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:613\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:601\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:209\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:208\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  apply = 'apply',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport enum JsonType {\n  string = 'string',\n  number = 'number',\n  integer = 'integer',\n  object = 'object',\n  array = 'array',\n  boolean = 'boolean',\n  null = 'null'\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n  relativeUrls?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(left: T, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:350\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(left: T, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:347\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeExpression.html":{"url":"classes/ComputeExpression.html","title":"class - ComputeExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                names\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                factory\n                            \n                            \n                                field\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(name: string, node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ComputeExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:86\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     ComputeExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                        \n                    factory(opts: (builder: ComputeExpressionBuilder,current: ComputeExpression) => void, current?: ComputeExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:35\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                        ComputeExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ComputeExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string, opts: (e: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:99\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ComputeExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ComputeExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:65\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:51\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:50\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:31\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport {\n  FieldFactory,\n  functions,\n  ODataFunctions,\n  ODataOperators,\n  operators,\n  Renderable,\n  RenderableFactory,\n} from './syntax';\n\nexport type ComputeExpressionBuilder = {\n  t: Required;\n  e: () => ComputeExpression;\n};\nexport class ComputeExpression extends Expression {\n  names: string[];\n  constructor({\n    children,\n    names,\n  }: {\n    children?: Renderable[];\n    names?: string[];\n  } = {}) {\n    super({ children });\n    this.names = names || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ComputeExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: ComputeExpressionBuilder,\n      current?: ComputeExpression\n    ) => ComputeExpression,\n    current?: ComputeExpression\n  ): ComputeExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new ComputeExpression(),\n      },\n      current\n    ) as ComputeExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {\n      names: this.names,\n    });\n  }\n\n  static fromJson(json: { [name: string]: any }): ComputeExpression {\n    return new ComputeExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n      names: json['names'],\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let children = this._children.map((n) =>\n      n.render({ aliases, escape, prefix, parser, options })\n    );\n    return this.names\n      .map((name, index) => `${children[index]} as ${name}`)\n      .join(',');\n  }\n\n  clone() {\n    return new ComputeExpression({\n      children: this._children.map((c) => c.clone()),\n      names: [...this.names],\n    });\n  }\n\n  private _add(name: string, node: Renderable): ComputeExpression {\n    this.names.push(name);\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    name: string,\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ComputeExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(name, node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(left: T | string, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:460\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountExpression.html":{"url":"classes/CountExpression.html","title":"class - CountExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                factory\n                            \n                            \n                                field\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:112\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CountExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:175\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     CountExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                        \n                    factory(opts: (builder: CountExpressionBuilder,current: CountExpression) => void, current?: CountExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:125\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                        CountExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CountExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F[], opts?: (e?: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:181\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        F[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CountExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:151\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CountExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:156\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:146\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:50\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:121\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport {\n  render,\n  FieldFactory,\n  Renderable,\n  RenderableFactory,\n  resolve,\n} from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJson() {\n    return {\n      field: this.field.toJson(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const params: { [name: string]: string } = [\n      QueryOption.filter,\n      QueryOption.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser: resolve([this.field], parser),\n            options,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.factory(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  resolve(parser: any) {\n    return this.field.resolve(parser);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Required;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'CountExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression\n    ) => CountExpression,\n    current?: CountExpression\n  ): CountExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new CountExpression(),\n      },\n      current\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): CountExpression {\n    return new CountExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: FieldFactory>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountField.html":{"url":"classes/CountField.html","title":"class - CountField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                filter\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:88\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     CountField\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                        \n                    option(name: QueryOption, opts?: O)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:102\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        O\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { field: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:20\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport {\n  render,\n  FieldFactory,\n  Renderable,\n  RenderableFactory,\n  resolve,\n} from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJson() {\n    return {\n      field: this.field.toJson(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const params: { [name: string]: string } = [\n      QueryOption.filter,\n      QueryOption.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser: resolve([this.field], parser),\n            options,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.factory(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  resolve(parser: any) {\n    return this.field.resolve(parser);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Required;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'CountExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression\n    ) => CountExpression,\n    current?: CountExpression\n  ): CountExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new CountExpression(),\n      },\n      current\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): CountExpression {\n    return new CountExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: FieldFactory>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[],\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean,\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(\n    public name: string,\n    public value?: number,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean,\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(\n    public name: string,\n    public value?: number,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(\n    public path: string,\n    public target: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n  ) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[],\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean,\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string,\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                    CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                    CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                    CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                    CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[],\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete,\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(\n    public property: string,\n    public referencedProperty: string,\n  ) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean,\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean,\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(\n    public name: string,\n    public alias?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string,\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(\n    public term: string,\n    public qualifier?: string,\n  ) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[],\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandExpression.html":{"url":"classes/ExpandExpression.html","title":"class - ExpandExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                factory\n                            \n                            \n                                field\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:185\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:249\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:243\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ExpandExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                        \n                    factory(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void, current?: ExpandExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:198\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                            ExpandExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F, opts?: (e?: ExpandField>) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:254\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        F\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:219\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:225\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:214\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:50\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:194\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType, Unpacked } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport {\n  FieldFactory,\n  render,\n  Renderable,\n  RenderableFactory,\n  resolve,\n} from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJson() {\n    return {\n      field: this.field.toJson(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve([this.field], parser);\n    const params: { [name: string]: string } = [\n      QueryOption.select,\n      QueryOption.expand,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.orderBy,\n      QueryOption.skip,\n      QueryOption.top,\n      QueryOption.count,\n      QueryOption.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n            options,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(\n      typeof this.field === 'string' ? this.field : this.field.clone(),\n      values\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOption.select,\n      SelectExpression.factory(opts, this.values[QueryOption.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOption.expand,\n      ExpandExpression.factory(opts, this.values[QueryOption.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.factory(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  search(opts: (builder: SearchExpressionBuilder) => SearchExpression) {\n    return this.option(\n      QueryOption.search,\n      SearchExpression.factory(opts, this.values[QueryOption.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOption.orderBy,\n      OrderByExpression.factory(opts, this.values[QueryOption.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOption.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOption.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOption.levels, n);\n  }\n\n  count() {\n    return this.option(QueryOption.count, true);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name] as O;\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Required;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new ExpandExpression(),\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): ExpandExpression {\n    return new ExpandExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    field: F,\n    opts?: (e: ExpandField>) => void\n  ): ExpandExpression {\n    let node = new ExpandField>(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandField.html":{"url":"classes/ExpandField.html","title":"class - ExpandField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                count\n                            \n                            \n                                expand\n                            \n                            \n                                filter\n                            \n                            \n                                levels\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                search\n                            \n                            \n                                select\n                            \n                            \n                                skip\n                            \n                            \n                                toJson\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ExpandField\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:170\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expand\n                        \n                    \n                \n            \n            \n                \nexpand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ExpandExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        levels\n                        \n                    \n                \n            \n            \n                \nlevels(n: number | \"max\")\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                n\n                                            \n                                                        number | \"max\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | \"max\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                        \n                    option(name: QueryOption, opts?: O)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:175\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        O\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     O\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderBy\n                        \n                    \n                \n            \n            \n                \norderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(opts: (builder: SearchExpressionBuilder) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n            \n                \nskip(n: number)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                n\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { field: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        top\n                        \n                    \n                \n            \n            \n                \ntop(n: number)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                n\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:23\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType, Unpacked } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport {\n  FieldFactory,\n  render,\n  Renderable,\n  RenderableFactory,\n  resolve,\n} from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJson() {\n    return {\n      field: this.field.toJson(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve([this.field], parser);\n    const params: { [name: string]: string } = [\n      QueryOption.select,\n      QueryOption.expand,\n      QueryOption.filter,\n      QueryOption.search,\n      QueryOption.orderBy,\n      QueryOption.skip,\n      QueryOption.top,\n      QueryOption.count,\n      QueryOption.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({\n            aliases,\n            prefix,\n            escape,\n            parser,\n            options,\n          });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(\n      typeof this.field === 'string' ? this.field : this.field.clone(),\n      values\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOption.select,\n      SelectExpression.factory(opts, this.values[QueryOption.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOption.expand,\n      ExpandExpression.factory(opts, this.values[QueryOption.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOption.filter,\n      FilterExpression.factory(opts, this.values[QueryOption.filter])\n    );\n  }\n\n  search(opts: (builder: SearchExpressionBuilder) => SearchExpression) {\n    return this.option(\n      QueryOption.search,\n      SearchExpression.factory(opts, this.values[QueryOption.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOption.orderBy,\n      OrderByExpression.factory(opts, this.values[QueryOption.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOption.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOption.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOption.levels, n);\n  }\n\n  count() {\n    return this.option(QueryOption.count, true);\n  }\n\n  // Option Handler\n  private option(name: QueryOption, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name] as O;\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Required;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new ExpandExpression(),\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): ExpandExpression {\n    return new ExpandExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    field: F,\n    opts?: (e: ExpandField>) => void\n  ): ExpandExpression {\n    let node = new ExpandField>(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Expression.html":{"url":"classes/Expression.html","title":"class - Expression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Expression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/base.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                length\n                            \n                            \n                                    Abstract\n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                        \n                    clone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Expression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        render\n                        \n                    \n                \n            \n            \n                \n                        \n                    render(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; children: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:16\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Renderable } from './syntax';\n\nexport abstract class Expression implements Renderable {\n  protected _children: Renderable[];\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    this._children = children || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Expression';\n  }\n\n  abstract render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n\n  abstract clone(): Expression;\n\n  children() {\n    return this._children;\n  }\n\n  length() {\n    return this._children.length;\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      children: this._children.map((c) => c.toJson()),\n    };\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(\n    public name: string,\n    public fieldType: FieldType,\n  ) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes,\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ],\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES,\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[],\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FieldParser.html":{"url":"interfaces/FieldParser.html","title":"interface - FieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Parser\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxLength\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nullable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            precision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scale\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxLength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxLength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nullable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nullable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        precision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scale\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scale:     number | \"variable\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \"variable\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  apply = 'apply',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport enum JsonType {\n  string = 'string',\n  number = 'number',\n  integer = 'integer',\n  object = 'object',\n  array = 'array',\n  boolean = 'boolean',\n  null = 'null'\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n  relativeUrls?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: Normalize, escape: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:221\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        Normalize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        escape\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:293\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Function\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:244\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:253\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:302\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:233\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         { $type: any; name: string; values: any; normalize: Normalize; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:229\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                geoDistance\n                            \n                            \n                                geoIntersects\n                            \n                            \n                                geoLength\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        geoDistance\n                        \n                    \n                \n            \n            \n                \ngeoDistance(left: T, right: string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:448\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoIntersects\n                        \n                    \n                \n            \n            \n                \ngeoIntersects(left: T, right: string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:451\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoLength\n                        \n                    \n                \n            \n            \n                \ngeoLength(left: T, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:454\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupBy.html":{"url":"classes/GroupBy.html","title":"class - GroupBy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupBy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(properties: Renderable[], transformations?: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:740\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        Renderable[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        transformations\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:802\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         GroupBy\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:758\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GroupBy\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:765\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:808\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:750\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         { $type: any; properties: any; transformations: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:746\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupByTransformations.html":{"url":"classes/GroupByTransformations.html","title":"class - GroupByTransformations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupByTransformations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/apply.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/apply.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/apply.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/apply.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/apply.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/apply.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Objects } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterConnector, FilterExpression } from './filter';\nimport { SearchConnector, SearchExpression } from './search';\nimport {\n  FieldFactory,\n  functions,\n  ODataFunctions,\n  ODataOperators,\n  operators,\n  syntax,\n  transformations,\n  Renderable,\n  RenderableFactory,\n  AggregateMethod,\n} from './syntax';\n\nclass GroupByTransformations implements Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n    parser?: Parser | undefined;\n    options?: ParserOptions | undefined;\n  }): string {\n    throw new Error('Method not implemented.');\n  }\n  toString(): string {\n    throw new Error('Method not implemented.');\n  }\n  toJson() {\n    throw new Error('Method not implemented.');\n  }\n  clone() {\n    throw new Error('Method not implemented.');\n  }\n  resolve(parser: any) {\n    throw new Error('Method not implemented.');\n  }\n}\n\nexport type ApplyExpressionBuilder = {\n  t: Required;\n  e: () => ApplyExpression;\n};\nexport class ApplyExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ApplyExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: ApplyExpressionBuilder,\n      current?: ApplyExpression\n    ) => ApplyExpression,\n    current?: ApplyExpression\n  ): ApplyExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new ApplyExpression(),\n      },\n      current\n    ) as ApplyExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): ApplyExpression {\n    return new ApplyExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join('/');\n  }\n\n  clone() {\n    return new ApplyExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ApplyExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  aggregate(\n    value: any,\n    method: AggregateMethod,\n    alias: string\n  ): ApplyExpression {\n    return this._add(syntax.aggregate(value, method, alias));\n  }\n\n  //topcount\n  topCount(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  //topsum\n  topSum(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  //toppercent\n  topPercent(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  //bottomcount\n  bottomCount(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  //bottomsum\n  bottomSum(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  //bottompercent\n  bottomPercent(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  identity(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  concat(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  //groupby\n  groupBy(\n    props: (e: { rollup: (f: any) => any }) => any | any[],\n    opts?: (e: GroupByTransformations) => GroupByTransformations\n  ): ApplyExpression {\n    let properties = props({ rollup: (e: any) => syntax.rollup(e) });\n    properties = Array.isArray(properties) ? properties : [properties];\n    let options = undefined;\n    if (opts !== undefined) options = opts(new GroupByTransformations());\n    return this._add(syntax.groupby(properties, options));\n  }\n\n  //filter\n  filter(\n    opts: (e: {\n      t: T;\n      e: (connector?: FilterConnector) => FilterExpression;\n      o: ODataOperators;\n      f: ODataFunctions;\n    }) => FilterExpression\n  ) {\n    const exp = opts({\n      t: FieldFactory>(),\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n      e: (connector: FilterConnector = 'and') =>\n        new FilterExpression({ connector }),\n    }) as FilterExpression;\n    return this._add(transformations.filter(exp));\n  }\n\n  //expand\n  expand(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n\n  //search\n  search(\n    opts: (e: {\n      t: T;\n      e: (connector?: SearchConnector) => SearchExpression;\n      o: ODataOperators;\n      f: ODataFunctions;\n    }) => SearchExpression\n  ) {\n    const exp = opts({\n      t: FieldFactory>(),\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n      e: (connector: SearchConnector = 'AND') =>\n        new SearchExpression({ connector }),\n    }) as SearchExpression;\n    return this._add(transformations.search(exp));\n  }\n\n  //compute\n  compute(\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ApplyExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:618\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:658\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Grouping\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:632\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Grouping\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:636\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:661\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:625\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; group: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:621\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupingOperators.html":{"url":"classes/GroupingOperators.html","title":"class - GroupingOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupingOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                rollup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        group\n                        \n                    \n                \n            \n            \n                \ngroup(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:667\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Grouping\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rollup\n                        \n                    \n                \n            \n            \n                \nrollup(...values: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:670\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:924\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:985\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Lambda\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:946\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Lambda\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:954\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:992\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:935\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         { $type: any; op: string; values: any; alias: string; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:931\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(left: T, right: any, alias?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:1002\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                alias\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Lambda\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(left: T, right: any, alias?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:998\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                alias\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Lambda\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotatable.html":{"url":"classes/ODataAnnotatable.html","title":"class - ODataAnnotatable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotatable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/annotation.ts:39\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/annotation.ts:30\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot),\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot),\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                            \n                                    Abstract\n                                union\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: Map, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ODataMetadataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                        \n                    clone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                        \n                    data(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        union\n                        \n                    \n                \n            \n            \n                \n                        \n                    union(other: ODataAnnotations)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            ODataAnnotations\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n\n  entity(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(this.helper, this.annotations);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                deleteRefBy\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                jsonBatchFormat\n                            \n                            \n                                nonParenthesisForEmptyParameterFunction\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                relativeUrls\n                            \n                            \n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parserOptions\n                                \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:108\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:71\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOption[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:66\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRefBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"path\" | \"id\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:29\n                        \n                    \n\n            \n                \n                    Delete reference by path or by id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:50\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:58\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jsonBatchFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:41\n                        \n                    \n\n            \n                \n                    Use JSON Batch Format\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nonParenthesisForEmptyParameterFunction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:33\n                        \n                    \n\n            \n                \n                    No use parenthesis for empty parameters functions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:54\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        relativeUrls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:46\n                        \n                    \n\n            \n                \n                    Relative urls\nhttp://docs.oasis-open.org/odata/odata-json-format/v4.0/cs01/odata-json-format-v4.0-cs01.html#_Toc365464682\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:25\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:37\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:21\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:62\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parserOptions\n                    \n                \n\n                \n                    \n                        getparserOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:129\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:140\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  QueryOption,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum: boolean;\n  /**\n   * Delete reference by path or by id\n   */\n  deleteRefBy: 'path' | 'id';\n  /**\n   * No use parenthesis for empty parameters functions\n   */\n  nonParenthesisForEmptyParameterFunction: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Use JSON Batch Format\n   */\n  jsonBatchFormat: boolean;\n  /**\n   * Relative urls\n   * http://docs.oasis-open.org/odata/odata-json-format/v4.0/cs01/odata-json-format-v4.0-cs01.html#_Toc365464682\n   */\n  relativeUrls: boolean;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOption[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n    /**\n     * @link https://devblogs.microsoft.com/odata/extension-omit-null-value-properties-in-asp-net-core-odata/\n     */\n    omitNullValues?: boolean;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum || false;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy ?? 'path';\n    this.nonParenthesisForEmptyParameterFunction =\n      config.nonParenthesisForEmptyParameterFunction ?? false;\n    this.jsonBatchFormat = config.jsonBatchFormat ?? false;\n    this.relativeUrls = config.relativeUrls ?? true;\n  }\n\n  get parserOptions(): ParserOptions {\n    return {\n      version: this.version,\n      stringAsEnum: this.stringAsEnum,\n      deleteRefBy: this.deleteRefBy,\n      nonParenthesisForEmptyParameterFunction:\n        this.nonParenthesisForEmptyParameterFunction,\n      ...this.accept,\n    };\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                id\n                            \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                toJson\n                            \n                            \n                                toLegacy\n                            \n                            \n                                    \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:44\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(response: HttpErrorResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            HttpErrorResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(response: HttpResponseBase)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            HttpResponseBase\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { [name: string]: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLegacy\n                        \n                    \n                \n            \n            \n                \ntoLegacy(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toString\n                        \n                    \n                \n            \n            \n                \n                        \n                    toString()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/types/batch.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n  HttpResponseBase,\n} from '@angular/common/http';\nimport { map, Observable, Subject } from 'rxjs';\nimport { ODataApi } from '../../api';\nimport {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport { PathSegment } from '../../types';\nimport { Arrays } from '../../utils/arrays';\nimport { Http } from '../../utils/http';\nimport { Strings } from '../../utils/strings';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { ODataOptions } from './options';\nimport { ODataApiOptions } from '../../options';\n\nexport class ODataBatchRequest extends Subject {\n  id: string;\n  group: string;\n  constructor(public request: ODataRequest) {\n    super();\n    this.id = Strings.uniqueId({ prefix: 'r' });\n    this.group = Strings.uniqueId({ prefix: 'g' });\n  }\n\n  override toString() {\n    return this.toLegacy();\n  }\n\n  toLegacy({ relativeUrls }: { relativeUrls?: boolean } = {}): string {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${\n        relativeUrls ? this.request.pathWithParams : this.request.urlWithParams\n      } ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    if (this.request.method === 'GET' || this.request.method === 'DELETE') {\n      res.push(NEWLINE);\n    } else {\n      res.push(`${NEWLINE}${JSON.stringify(this.request.body)}`);\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  toJson({ relativeUrls }: { relativeUrls?: boolean } = {}) {\n    let res: { [name: string]: any } = {\n      id: this.id,\n      method: this.request.method,\n      url: relativeUrls\n        ? this.request.pathWithParams\n        : this.request.urlWithParams,\n      //'atomicityGroup': this.group\n      //\"dependsOn\": [\"g1\", \"g2\", \"r2\"]\n    };\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res['headers'] = headers\n        .keys()\n        .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`);\n    }\n    if (!(this.request.method === 'GET' || this.request.method === 'DELETE')) {\n      res['body'] = this.request.body;\n    }\n\n    return res;\n  }\n\n  onLoad(response: HttpResponseBase) {\n    if (response.ok) {\n      this.next(response);\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(response as HttpErrorResponse);\n    }\n  }\n\n  onError(response: HttpErrorResponse) {\n    this.error(response);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  private _responses: HttpResponseBase[] | null = null;\n  responses() {\n    return this._responses;\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegment.batch, $BATCH);\n    return new ODataBatchResource(api, { segments });\n  }\n\n  override clone(): ODataBatchResource {\n    const batch = super.clone() as ODataBatchResource;\n    batch._requests = [...this._requests];\n    return batch;\n  }\n  //#endregion\n\n  private storeRequester() {\n    const current = this.api.requester;\n    // Switch to the batch requester\n    this.api.requester = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    return current;\n  }\n\n  private restoreRequester(\n    handler: ((req: ODataRequest) => Observable) | undefined\n  ) {\n    this.api.requester = handler;\n  }\n\n  /**\n   * Add to batch request\n   * @param ctx The context for the request\n   * @returns The result of execute the context\n   */\n  add(ctx: (batch: this) => R): R {\n    // Store original requester\n    var handler = this.storeRequester();\n    // Execute the context\n    const result = ctx(this);\n    // Restore original requester\n    this.restoreRequester(handler);\n\n    return result;\n  }\n\n  send(options?: ODataOptions): Observable> {\n    if (this.api.options.jsonBatchFormat) {\n      return this.sendJson(options);\n    } else {\n      return this.sendLegacy(options);\n    }\n  }\n\n  private sendJson(options?: ODataOptions): Observable> {\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n    });\n    return this.api\n      .request('POST', this, {\n        body: ODataBatchResource.buildJsonBody(\n          this._requests,\n          this.api.options\n        ),\n        responseType: 'json',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseJsonResponse(this._requests, response),\n          ];\n          //HACK: tuple[1] === undefined\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped && tuple[1]) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        })\n      );\n  }\n\n  private sendLegacy(\n    options?: ODataOptions\n  ): Observable> {\n    const bound = Strings.uniqueId({ prefix: BATCH_PREFIX });\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n      [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n      [ACCEPT]: MULTIPART_MIXED,\n    });\n    return this.api\n      .request>('POST', this, {\n        body: ODataBatchResource.buildLegacyBody(\n          bound,\n          this._requests,\n          this.api.options\n        ),\n        responseType: 'text',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseLegacyResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped && tuple[1]) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        })\n      );\n  }\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => R,\n    options?: ODataOptions\n  ): Observable]> {\n    let result = this.add(ctx);\n    return this.send(options).pipe(map((response) => [result, response]));\n  }\n\n  body() {\n    return ODataBatchResource.buildLegacyBody(\n      Strings.uniqueId({ prefix: BATCH_PREFIX }),\n      this._requests,\n      this.api.options\n    );\n  }\n\n  json() {\n    return ODataBatchResource.buildJsonBody(this._requests, this.api.options);\n  }\n\n  static buildLegacyBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[],\n    options: ODataApiOptions\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const request of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (request.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (request.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId({ prefix: CHANGESET_PREFIX });\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (request.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${request.toLegacy(options)}`);\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static buildJsonBody(\n    requests: ODataBatchRequest[],\n    options: ODataApiOptions\n  ): Object {\n    return {\n      requests: requests.map((request) => request.toJson(options)),\n    };\n  }\n\n  static parseLegacyResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ): HttpResponseBase[] {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = (response.body || '').split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      let request = requests[index].request;\n      let { code, message } = Http.parseResponseStatus(chunk[0]);\n      chunk = chunk.slice(1);\n\n      let headers: HttpHeaders = new HttpHeaders();\n      var index = 1;\n      for (; index = 200 && code ({\n            body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          });\n    });\n  }\n\n  static parseJsonResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ): HttpResponseBase[] {\n    const responses: Object[] =\n      (response.body ? response.body : {})['responses'] ?? [];\n\n    return responses.map((response: any, index: number) => {\n      let request = requests[index].request;\n      let code = response['status'];\n\n      let headers: HttpHeaders = new HttpHeaders(response['headers']);\n      let body: string | { error: any; text: string } = response['body'];\n      if (code === 0) {\n        code = !!body ? 200 : 0;\n      }\n\n      let ok = code >= 200 && code ({\n            body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:76\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Build an entry from a payload and some options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataCacheEntry\n\n                        \n                            \n                                The entry to store in the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:93\n                        \n                    \n\n\n            \n                \n                        Build a key from store an entry in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                names\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The names of the entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The key for the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:159\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:138\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries that are matching with the given options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:126\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Return the payload from the cache if it exists and is not expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name of the entry\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                The payload of the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:224\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:178\n                        \n                    \n\n\n            \n                \n                        Using the request, handle the fetching of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request to fetch\n\n                                            \n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Observable of the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:168\n                        \n                    \n\n\n            \n                \n                        Check if the entry is expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            ODataCacheEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The cache entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Boolean indicating if the entry is expired\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:105\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Put some payload in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name for the entry\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                        \n                    \n\n\n            \n                \n                        Using the resource on the request build an array of string to identify the scope of the request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to build the scope\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the scope of the request\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/cache.ts:55\n                        \n                    \n\n\n            \n                \n                        Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to build the tags\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the tags of the response\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegment } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegment.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request'],\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key\n          ? `${context.entitySet}(${context.key})`\n          : context.entitySet,\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] },\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {},\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>,\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        }),\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n            \n                Description\n            \n            \n                A cache entry that holds a payload, a last read time, and a timeout for the entry.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegment } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegment.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request'],\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key\n          ? `${context.entitySet}(${context.key})`\n          : context.entitySet,\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] },\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {},\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>,\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        }),\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>,\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:86\n                        \n                    \n\n\n            \n                \n                        Returns the binding parameter of the callable.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The binding parameter of the callable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:58\n                        \n                    \n\n\n            \n                \n                        Deseialize the given value from the callable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to deserialize\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for deserialization\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Deserialized value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:78\n                        \n                    \n\n\n            \n                \n                        Encode the given value for the callable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to encode\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for encoding\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Encoded value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/callable.ts:68\n                        \n                    \n\n\n            \n                \n                        Serialize the given value for the callable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to serialize\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for serialization\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Serialized value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:58\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:68\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:47\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:29\n\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:38\n\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallableConfig, ParserOptions, Parser } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataCallableParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable extends ODataSchemaElement {\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias,\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({\n      options,\n      parserForType,\n      findOptionsForType,\n    });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:94\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:169\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     R\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T,\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`,\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter),\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigAsyncLoader.html":{"url":"classes/ODataConfigAsyncLoader.html","title":"class - ODataConfigAsyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigAsyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configs$: Observable | Observable[] | Observable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configs$\n                                                  \n                                                        \n                                                                        Observable | Observable[] | Observable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/loaders.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigLoader.html":{"url":"classes/ODataConfigLoader.html","title":"class - ODataConfigLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfigs()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/loaders.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigSyncLoader.html":{"url":"classes/ODataConfigSyncLoader.html","title":"class - ODataConfigSyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigSyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passedConfigs: ApiConfig | ApiConfig[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passedConfigs\n                                                  \n                                                        \n                                                                        ApiConfig | ApiConfig[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/loaders.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                entity\n                            \n                            \n                                function\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:161\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataEntitiesAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:169\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:218\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataEntityAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:214\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntitiesAnnotations)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:153\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            ODataEntitiesAnnotations\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntitiesAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ODataMetadataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:19\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:173\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:177\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:181\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:185\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:189\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:194\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:199\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:207\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n\n  entity(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(this.helper, this.annotations);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:71\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataEntityAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:79\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:127\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntitiesAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:128\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntityAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type: \"single\" | \"collection\")\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:129\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                        \"single\" | \"collection\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntityAnnotations | ODataEntitiesAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntityAnnotations)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:63\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            ODataEntityAnnotations\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntityAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ODataMetadataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:19\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:83\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:87\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:95\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:99\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:103\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:107\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:111\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:115\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:120\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:140\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n\n  entity(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(this.helper, this.annotations);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:58\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:68\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:47\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:29\n\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:38\n\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer extends ODataSchemaElement {\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                        \n                    attach(value: M)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    M\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        M\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                        \n                    entity(key?: EntityKey)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/entity.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            EntityKey\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResource\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:63\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                                    R\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        P | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataActionResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataActionOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                        \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:26\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                                    R\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        P | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataFunctionResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataFunctionOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:100\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    S\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resource\n                                            \n                                                            ODataNavigationPropertyResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataQueryArgumentsOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:12\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ODataModel } from '../models/model';\nimport { EntityKey, ODataResource } from '../resources';\nimport { ODataBaseService } from './base';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entityType\n                            \n                            \n                                service\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:58\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:68\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:47\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:29\n\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:38\n\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet extends ODataSchemaElement {\n  entityType: string;\n  service: { new (...params: any[]): any };\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entityType = config.entityType;\n    this.service = config.service;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n  FieldParser,\n  EdmType,\n  JsonType as JsonSchemaType,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string | EdmType;\n  private parser: Parser;\n  collection: boolean;\n  navigation: boolean;\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable ?? true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: JsonSchemaType.object } as any);\n\n    switch (this.type) {\n      case EdmType.String:\n        schema.type = JsonSchemaType.string;\n        break;\n      case EdmType.Guid:\n        schema.type = JsonSchemaType.string;\n        schema.pattern = '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n        break;\n      case EdmType.Binary:\n        schema.type = JsonSchemaType.string;\n        schema.contentEncoding = 'base64';\n      break;\n      case EdmType.Date:\n        schema.type = JsonSchemaType.string;\n        schema.format = 'date';\n        break;\n      case EdmType.TimeOfDay:\n        schema.type = JsonSchemaType.string;\n        schema.format = 'time';\n        break;\n      case EdmType.DateTimeOffset:\n        schema.type = JsonSchemaType.string;\n        schema.format = 'date-time';\n        break;\n      case EdmType.Duration:\n        schema.type = JsonSchemaType.string;\n        schema.format = 'duration';\n        break;\n      case EdmType.Boolean:\n        schema.type = JsonSchemaType.boolean;\n        break;\n      case EdmType.Byte:\n      case EdmType.SByte:\n      case EdmType.Int16:\n      case EdmType.Int32:\n      case EdmType.Int64:\n        //TODO: Range\n        schema.type = JsonSchemaType.integer;\n        break;\n      case EdmType.Single:\n      case EdmType.Double:\n      case EdmType.Decimal:\n        schema.type = JsonSchemaType.number;\n        break;\n      case EdmType.Boolean:\n        schema.type = JsonSchemaType.boolean;\n        break;\n    }\n    if (this.maxLength) schema.maxLength = this.maxLength;\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, JsonSchemaType.null];\n    if (this.collection)\n      schema = {\n        type: JsonSchemaType.array,\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[] = [];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).forEach(([name, config]) => this.addField(name, config));\n  }\n\n  addField(\n    name: string,\n    config: StructuredTypeFieldConfig\n  ): ODataStructuredTypeFieldParser {\n    const field = new ODataStructuredTypeFieldParser(name, this, config);\n    this._fields.push(field);\n    return field;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  isSupertypeOf(type: string): boolean {\n    return (\n      this.isTypeOf(type) || this.children.some((c) => c.isSupertypeOf(type))\n    );\n  }\n\n  isOpenType() {\n    return this.open;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  isEntityType(): boolean {\n    return (\n      this._keys !== undefined ||\n      (this.parent !== undefined && this.parent.isEntityType())\n    );\n  }\n\n  isComplexType(): boolean {\n    return !this.isEntityType();\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {}\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag)\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {}\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: JsonSchemaType.object,\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                unpack\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:63\n                        \n                    \n\n\n            \n                \n                        Deseialize the given value from the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to deserialize\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for deserialization\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     E\n\n                        \n                            \n                                Deserialized value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:83\n                        \n                    \n\n\n            \n                \n                        Encode the given value for the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to encode\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for encoding\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Encoded value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(enu: string | E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:44\n                        \n                    \n\n\n            \n                \n                        Find a field by name or value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                enu\n                                            \n                                                        string | E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name or value of the field\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The field with the given name or value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the fields of the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEnumTypeFieldParser[]\n\n                        \n                            \n                                The fields of the enum type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:53\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Map the fields of the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mapper\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that maps the value to the new value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The fields mapped by the mapper\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:73\n                        \n                    \n\n\n            \n                \n                        Serialize the given value for the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value to serialize\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Options for serialization\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Serialized value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/enum-type.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:58\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:68\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:47\n\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:29\n\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataSchemaElement\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataSchemaElement:38\n\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EnumTypeConfig, Parser, ParserOptions } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType extends ODataSchemaElement {\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: E } | { [value: number]: string };\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias,\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({ options, parserForType, findOptionsForType });\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return this.parser.fields(value);\n  }\n\n  /**\n   * Find a field by name or value.\n   * @param enu The name or value of the field\n   * @returns The field with the given name or value\n   */\n  field(enu: string | E) {\n    return this.parser.field(enu);\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.parser.mapFields(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  unpack(value: E) {\n    return this.parser.unpack(value);\n  }\n\n  pack(value: number[]) {\n    return this.parser.pack(value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                value\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                titleize\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     E\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n  FieldParser,\n  JsonType\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f),\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value)),\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue,\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0,\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toFlags(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    return (this.flags) ?\n      ({\n        title: this.name,\n        type: JsonType.array,\n        items: {\n          type: JsonType.integer,\n        }\n      }) :\n      ({\n        type: JsonType.integer,\n        enum: this._fields.map((f) => f.value)\n      });\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0,\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotatable\n            \n\n            \n                Implements\n            \n            \n                            FieldParser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _fields\n                            \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                unpack\n                            \n                            \n                                validate\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     E\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(nameValue: string | E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nameValue\n                                            \n                                                        string | E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEnumTypeFieldParser[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    R\n                            \n                        \n                    \n\n            \n                \n                        Map the fields of the enum type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mapper\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that maps the value to the new value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The fields mapped by the mapper\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     E\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:142\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { title: string; type: any; items: { type: any; }; enum?: undefined; } | { type: any; enum: any; title?: undefined; items?: undefined; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [] | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n  FieldParser,\n  JsonType\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f),\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value)),\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue,\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0,\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toFlags(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    return (this.flags) ?\n      ({\n        title: this.name,\n        type: JsonType.array,\n        items: {\n          type: JsonType.integer,\n        }\n      }) :\n      ({\n        type: JsonType.integer,\n        enum: this._fields.map((f) => f.value)\n      });\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {},\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0,\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:29\n\n                        \n                    \n\n\n            \n                \n                        Restore the response from the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to get the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse | undefined\n\n                        \n                            \n                                The response from the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:14\n\n                        \n                    \n\n\n            \n                \n                        Store the response in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to store the response\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to store in the cache\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:76\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Build an entry from a payload and some options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataCacheEntry\n\n                        \n                            \n                                The entry to store in the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:93\n\n                        \n                    \n\n\n            \n                \n                        Build a key from store an entry in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                names\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The names of the entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The key for the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:159\n\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:138\n\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries that are matching with the given options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:126\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Return the payload from the cache if it exists and is not expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name of the entry\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                The payload of the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:189\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:224\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:178\n\n                        \n                    \n\n\n            \n                \n                        Using the request, handle the fetching of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request to fetch\n\n                                            \n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Observable of the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:168\n\n                        \n                    \n\n\n            \n                \n                        Check if the entry is expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            ODataCacheEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The cache entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Boolean indicating if the entry is expired\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:105\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Put some payload in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name for the entry\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:38\n\n                        \n                    \n\n\n            \n                \n                        Using the resource on the request build an array of string to identify the scope of the request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to build the scope\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the scope of the request\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:55\n\n                        \n                    \n\n\n            \n                \n                        Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to build the tags\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the tags of the response\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    let scope = this.scope(req);\n    let tags = this.tags(res);\n    this.put(req.cacheKey, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    let scope = this.scope(req);\n    return this.get(req.cacheKey, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        flush\n                        \n                    \n                \n            \n            \n                \n                        \n                    flush()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:54\n\n                        \n                    \n\n\n            \n                \n                        Flush the cache and clean the storage\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:79\n\n                        \n                    \n\n\n            \n                \n                        Restore the response from the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to get the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse | undefined\n\n                        \n                            \n                                The response from the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:64\n\n                        \n                    \n\n\n            \n                \n                        Store the response in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to store the response\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to store in the cache\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/storage.ts:45\n                        \n                    \n\n\n            \n                \n                        Restore the cache from the storage\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/cache/storage.ts:35\n                        \n                    \n\n\n            \n                \n                        Store the cache in the storage\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:76\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Build an entry from a payload and some options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataCacheEntry\n\n                        \n                            \n                                The entry to store in the cache\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:93\n\n                        \n                    \n\n\n            \n                \n                        Build a key from store an entry in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                names\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The names of the entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The key for the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:138\n\n                        \n                    \n\n\n            \n                \n                        Remove all cache entries that are matching with the given options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:126\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Return the payload from the cache if it exists and is not expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name of the entry\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                The payload of the entry\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:189\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:224\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:178\n\n                        \n                    \n\n\n            \n                \n                        Using the request, handle the fetching of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request to fetch\n\n                                            \n                                        \n                                        \n                                                res$\n                                            \n                                                            Observable>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Observable of the response\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:168\n\n                        \n                    \n\n\n            \n                \n                        Check if the entry is expired\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            ODataCacheEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The cache entry\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Boolean indicating if the entry is expired\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:105\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Put some payload in the cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The name for the entry\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The payload to store in the cache\n\n                                            \n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:38\n\n                        \n                    \n\n\n            \n                \n                        Using the resource on the request build an array of string to identify the scope of the request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The request with the resource to build the scope\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the scope of the request\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataCache\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataCache:55\n\n                        \n                    \n\n\n            \n                \n                        Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            ODataResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response to build the tags\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                Array of string to identify the tags of the response\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries())),\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]'),\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJson(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJson(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(passedConfig: PassedInitialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/module.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                passedConfig\n                                            \n                                                            PassedInitialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  EnvironmentProviders,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n  makeEnvironmentProviders,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n// Standalone version\nexport function provideODataClient(\n  passedConfig: PassedInitialConfig\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    { provide: ODATA_CONFIG, useValue: passedConfig },\n    passedConfig?.loader || {\n      provide: ODataConfigLoader,\n      useFactory: createSyncLoader,\n      deps: [ODATA_CONFIG],\n    },\n    ODataClient,\n    ODataServiceFactory,\n  ]);\n}\n\n// Module version\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                field\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:64\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataEnumTypeParser\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:79\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    F\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: ParserOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ParserOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataStructuredTypeParser\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T,\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`,\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter),\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {},\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJson\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:88\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:88\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:167\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataPathSegments\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:155\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataPathSegments\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:207\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            (EntityKey | undefined)[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:142\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/segments.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PATH_SEPARATOR } from '../../constants';\nimport { Parser, ParserOptions, PathSegment } from '../../types';\nimport { Objects } from '../../utils';\nimport { buildPathAndQuery, raw } from '../query';\nimport { EntityKey } from '../resource';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegment;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment,\n  escape: boolean = false,\n  parser?: Parser,\n  options?: ParserOptions\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegment.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({\n          func: { [segment.path]: segment.parameters },\n          escape,\n        })\n      : buildPathAndQuery({ func: segment.path, escape });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    // HACK: Remove parenthesis\n    if (\n      path.endsWith('()') &&\n      options?.nonParenthesisForEmptyParameterFunction\n    ) {\n      path = path.substring(0, path.length - 2);\n    }\n\n    return [path, params];\n  } else {\n    //TODO: Parser key\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key, escape }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport const pathAndParamsFromSegments = (\n  segments: ODataSegment[],\n  {\n    escape,\n    parser,\n    options,\n  }: {\n    escape?: boolean;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): [string, { [name: string]: any }] => {\n  const result = segments.reduce(\n    (acc, segment) => {\n      const [path, params] = pathSegmentsBuilder(\n        segment,\n        escape,\n        parser,\n        options\n      );\n      acc.paths.push(path);\n      acc.params = Object.assign(acc.params, params);\n      return acc;\n    },\n    { paths: [] as string[], params: {} as { [name: string]: any } }\n  );\n  return [result.paths.join(PATH_SEPARATOR), result.params];\n};\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams({\n    escape,\n    parser,\n    options,\n  }: {\n    escape?: boolean;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): [string, { [name: string]: any }] {\n    return pathAndParamsFromSegments(this._segments, {\n      escape,\n      parser,\n      options,\n    });\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString({ escape }: { escape?: boolean } = {}): string {\n    const [path, params] = this.pathAndParams({ escape });\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJson() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  static fromJson(json: { [name: string]: any }[]): ODataPathSegments {\n    return new ODataPathSegments(\n      json.map((s: any) => ({\n        name: s.name,\n        path: s.path,\n        type: s.type,\n        key: s.key,\n        parameters: s.parameters,\n      }))\n    );\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegment.entitySet,\n            PathSegment.navigationProperty,\n            PathSegment.property,\n          ].indexOf(s.name) !== -1\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                values\n                                            \n                                                            (EntityKey | undefined)[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegment } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegment.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegment.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegment.action);\n  }\n  function() {\n    return this.segments.get(PathSegment.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegment.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegment.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:49\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataPropertyAnnotations\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:57\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataPropertyAnnotations)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:41\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            ODataPropertyAnnotations\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataPropertyAnnotations\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:12\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ODataMetadataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Partial\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotations\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotations:19\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext,\n  ) {}\n\n  attributes(\n    data: { [name: string]: any },\n    metadata: ODataMetadataType,\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [name: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection',\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context),\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context,\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/,\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n\n  entity(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(this.helper, this.annotations);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                fromJson\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJson\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values?: Map)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:98\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                        Map\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:98\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:212\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:176\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n\n                        \n                            Returns :         ODataQueryOptions\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(key: QueryOption, exp?: Expression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                exp\n                                            \n                                                            Expression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromJson\n                        \n                    \n                \n            \n            \n                \nfromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:142\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:149\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataQueryOptions\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: QueryOption)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:193\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(keys: QueryOption[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:204\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                            QueryOption[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(key: QueryOption, opts?: O)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:187\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    O\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            QueryOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                        O\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(keys: QueryOption[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                            QueryOption[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:134\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:158\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataQueryArguments\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/options.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parser, ParserOptions, QueryOption } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  buildPathAndQuery,\n  Expand,\n  Filter,\n  OrderBy,\n  QueryCustomType,\n  raw,\n  Select,\n  Transform,\n} from './builder';\nimport {\n  ComputeExpression,\n  Expression,\n  FilterExpression,\n  OrderByExpression,\n  RenderableFactory,\n  SearchExpression,\n} from './expressions';\nimport { ApplyExpression } from './expressions/apply';\nimport { ExpandExpression } from './expressions/expand';\nimport { SelectExpression } from './expressions/select';\nimport { ODataQueryOptionHandler } from './handlers';\n\nexport type ODataQueryArguments = {\n  [QueryOption.select]?: Select | SelectExpression | null;\n  [QueryOption.expand]?: Expand | ExpandExpression | null;\n  [QueryOption.compute]?: string | ComputeExpression | null;\n  [QueryOption.apply]?: string | ApplyExpression | null;\n  [QueryOption.filter]?: Filter | FilterExpression | null;\n  [QueryOption.search]?: string | SearchExpression | null;\n  [QueryOption.transform]?: Transform | null;\n  [QueryOption.orderBy]?: OrderBy | OrderByExpression | null;\n  [QueryOption.top]?: number | null;\n  [QueryOption.skip]?: number | null;\n  [QueryOption.skiptoken]?: string | null;\n  [QueryOption.format]?: string | null;\n  [QueryOption.levels]?: number | 'max' | null;\n  [QueryOption.count]?: boolean | null;\n};\n\n// Create a path and params tuple from the query options\nexport const pathAndParamsFromQueryOptions = (\n  values: Map,\n  {\n    escape,\n    parser,\n    options,\n  }: { escape?: boolean; parser?: Parser; options?: ParserOptions } = {}\n): [string, { [name: string]: any }] => {\n  const aliases: QueryCustomType[] = [];\n  const queryOptions = [\n    QueryOption.select,\n    QueryOption.filter,\n    QueryOption.search,\n    QueryOption.compute,\n    QueryOption.apply,\n    QueryOption.transform,\n    QueryOption.orderBy,\n    QueryOption.top,\n    QueryOption.skip,\n    QueryOption.skiptoken,\n    QueryOption.expand,\n    QueryOption.format,\n    QueryOption.levels,\n    QueryOption.count,\n  ]\n    .filter((key) => values.has(key) && !Types.isEmpty(values.get(key)))\n    .reduce((acc, key) => {\n      let value = values.get(key);\n      if (\n        Types.rawType(value).endsWith('Expression') ||\n        (Types.isArray(value) &&\n          value.some((v: any) => Types.rawType(v).endsWith('Expression')))\n      ) {\n        value = Types.isArray(value)\n          ? value.map((v: Expression) =>\n              Types.rawType(v).endsWith('Expression')\n                ? raw(v.render({ aliases, escape, parser, options }))\n                : v\n            )\n          : raw(\n              (value as Expression).render({\n                aliases,\n                escape,\n                parser,\n                options,\n              })\n            );\n      }\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  return buildPathAndQuery({ ...queryOptions, aliases, escape });\n};\n\nexport class ODataQueryOptions {\n  private _values: Map;\n\n  constructor(values?: Map) {\n    this._values = values ?? new Map();\n  }\n\n  pathAndParams({\n    escape,\n    parser,\n    options,\n  }: {\n    escape?: boolean;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): [string, { [name: string]: any }] {\n    return pathAndParamsFromQueryOptions(this._values, {\n      escape,\n      parser,\n      options,\n    });\n  }\n\n  toString({\n    escape,\n    parser,\n  }: { escape?: boolean; parser?: Parser } = {}): string {\n    const [path, params] = this.pathAndParams({ escape, parser });\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJson() {\n    return [...this._values.keys()].reduce((acc, key) => {\n      let value = this._values.get(key);\n      value = 'toJson' in value ? value.toJson() : value;\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  fromJson(json: { [name: string]: any }): this {\n    Object.entries(json || {}).forEach(([key, value]) => {\n      this._values.set(key as QueryOption, RenderableFactory(value));\n    });\n    return this;\n  }\n\n  static fromJson(json: { [name: string]: any }): ODataQueryOptions {\n    const entries = Object.entries(json || {}).map(([key, value]) => [\n      key,\n      RenderableFactory(value),\n    ]) as [QueryOption, any][];\n    new Map(entries);\n    return new ODataQueryOptions(new Map(entries));\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this._values.get(QueryOption.select) ?? null,\n      expand: this._values.get(QueryOption.expand) ?? null,\n      transform: this._values.get(QueryOption.transform) ?? null,\n      compute: this._values.get(QueryOption.compute) ?? null,\n      apply: this._values.get(QueryOption.apply) ?? null,\n      search: this._values.get(QueryOption.search) ?? null,\n      filter: this._values.get(QueryOption.filter) ?? null,\n      orderBy: this._values.get(QueryOption.orderBy) ?? null,\n      top: this._values.get(QueryOption.top) ?? null,\n      skip: this._values.get(QueryOption.skip) ?? null,\n      skiptoken: this._values.get(QueryOption.skiptoken) ?? null,\n      levels: this._values.get(QueryOption.levels) ?? null,\n      count: this._values.get(QueryOption.count) ?? null,\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    return new ODataQueryOptions(Objects.clone(this._values));\n  }\n\n  // Set Renderable\n  expression(key: QueryOption, exp?: Expression) {\n    if (exp !== undefined) this._values.set(key, exp);\n    return this._values.get(key);\n  }\n\n  // Option Handler\n  option(key: QueryOption, opts?: O) {\n    if (opts !== undefined) this._values.set(key, opts);\n    return new ODataQueryOptionHandler(this._values, key);\n  }\n\n  // Query Options tools\n  has(key: QueryOption) {\n    return this._values.has(key);\n  }\n\n  remove(...keys: QueryOption[]) {\n    for (let key of this._values.keys()) {\n      if (keys.includes(key)) \n        this._values.delete(key);\n    }\n  }\n\n  keep(...keys: QueryOption[]) {\n    for (let key of this._values.keys()) {\n      if (!keys.includes(key)) \n        this._values.delete(key);\n    }\n  }\n\n  // Clear\n  clear() {\n    this._values.clear();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n  FieldParser,\n  EdmType,\n  JsonType as JsonSchemaType,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements FieldParser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string | EdmType;\n  private parser: Parser;\n  collection: boolean;\n  navigation: boolean;\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable ?? true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: JsonSchemaType.object } as any);\n\n    switch (this.type) {\n      case EdmType.String:\n        schema.type = JsonSchemaType.string;\n        break;\n      case EdmType.Guid:\n        schema.type = JsonSchemaType.string;\n        schema.pattern = '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n        break;\n      case EdmType.Binary:\n        schema.type = JsonSchemaType.string;\n        schema.contentEncoding = 'base64';\n      break;\n      case EdmType.Date:\n        schema.type = JsonSchemaType.string;\n        schema.format = 'date';\n        break;\n      case EdmType.TimeOfDay:\n        schema.type = JsonSchemaType.string;\n        schema.format = 'time';\n        break;\n      case EdmType.DateTimeOffset:\n        schema.type = JsonSchemaType.string;\n        schema.format = 'date-time';\n        break;\n      case EdmType.Duration:\n        schema.type = JsonSchemaType.string;\n        schema.format = 'duration';\n        break;\n      case EdmType.Boolean:\n        schema.type = JsonSchemaType.boolean;\n        break;\n      case EdmType.Byte:\n      case EdmType.SByte:\n      case EdmType.Int16:\n      case EdmType.Int32:\n      case EdmType.Int64:\n        //TODO: Range\n        schema.type = JsonSchemaType.integer;\n        break;\n      case EdmType.Single:\n      case EdmType.Double:\n      case EdmType.Decimal:\n        schema.type = JsonSchemaType.number;\n        break;\n      case EdmType.Boolean:\n        schema.type = JsonSchemaType.boolean;\n        break;\n    }\n    if (this.maxLength) schema.maxLength = this.maxLength;\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, JsonSchemaType.null];\n    if (this.collection)\n      schema = {\n        type: JsonSchemaType.array,\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[] = [];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).forEach(([name, config]) => this.addField(name, config));\n  }\n\n  addField(\n    name: string,\n    config: StructuredTypeFieldConfig\n  ): ODataStructuredTypeFieldParser {\n    const field = new ODataStructuredTypeFieldParser(name, this, config);\n    this._fields.push(field);\n    return field;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  isSupertypeOf(type: string): boolean {\n    return (\n      this.isTypeOf(type) || this.children.some((c) => c.isSupertypeOf(type))\n    );\n  }\n\n  isOpenType() {\n    return this.open;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  isEntityType(): boolean {\n    return (\n      this._keys !== undefined ||\n      (this.parent !== undefined && this.parent.isEntityType())\n    );\n  }\n\n  isComplexType(): boolean {\n    return !this.isEntityType();\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {}\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag)\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {}\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: JsonSchemaType.object,\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                            \n                                isQueryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                                \n                                    cacheKey\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOption[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpContext\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                        \n                    factory(api: ODataApi, method: string, resource: ODataResource, options)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:225\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                api\n                                            \n                                                            ODataApi\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                method\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataRequest\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:345\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:349\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:353\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isQueryBody\n                        \n                    \n                \n            \n            \n                \nisQueryBody()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/request.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:276\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:285\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:289\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:293\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:302\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:311\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:317\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:323\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:327\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        cacheKey\n                    \n                \n\n                \n                    \n                        getcacheKey()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:331\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { ODataApi } from '../api';\nimport {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { FetchPolicy, ParserOptions, QueryOption } from '../types';\nimport { Http, Types } from '../utils';\nimport { ODataResource } from './resource';\nimport { ODataOptions } from './types';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly context?: HttpContext;\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOption[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    context?: HttpContext;\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?:\n      | HttpParams\n      | {\n          [param: string]:\n            | string\n            | number\n            | boolean\n            | ReadonlyArray;\n        };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?: FetchPolicy;\n    parserOptions?: ParserOptions;\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOption[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n    this.context = init.context;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null)\n      this._body = this.resource.serialize(this._body, init.parserOptions);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions = [\n      ...(this.api.options.bodyQueryOptions || []),\n      ...(init.bodyQueryOptions || []),\n    ];\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams(\n      init.parserOptions,\n    );\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`,\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`,\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`,\n      );\n    // Omit Null Values\n    if (\n      this.api.options.prefer?.omitNullValues === true &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`omit-values=nulls`);\n    // Continue on Error\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {},\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {},\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n  }\n\n  static factory(\n    api: ODataApi,\n    method: string,\n    resource: ODataResource,\n    options: ODataOptions & {\n      body?: any;\n      etag?: string;\n      responseType?:\n        | 'arraybuffer'\n        | 'blob'\n        | 'json'\n        | 'text'\n        | 'value'\n        | 'property'\n        | 'entity'\n        | 'entities';\n      observe: 'events' | 'response';\n      withCount?: boolean;\n      bodyQueryOptions?: QueryOption[];\n    },\n  ) {\n    const apiOptions = api.options;\n    let params = options.params || {};\n    if (options.withCount) {\n      params = Http.mergeHttpParams(params, apiOptions.helper.countParam());\n    }\n\n    let etag = options.etag;\n    if (etag === undefined && Types.isPlainObject(options.body)) {\n      etag = apiOptions.helper.etag(options.body);\n    }\n\n    return new ODataRequest({\n      method,\n      etag,\n      api,\n      resource,\n      params,\n      context: options.context,\n      body: options.body,\n      observe: options.observe,\n      headers: options.headers,\n      reportProgress: options.reportProgress,\n      responseType: options.responseType,\n      fetchPolicy: options.fetchPolicy,\n      parserOptions: options.parserOptions,\n      withCredentials: options.withCredentials,\n      bodyQueryOptions: options.bodyQueryOptions,\n    });\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this.isQueryBody() ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this.isQueryBody() ? 'POST' : this._method;\n  }\n\n  get body() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`),\n        )[1].toString()\n      : this._body;\n  }\n\n  get params() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`),\n        )[0]\n      : this._params;\n  }\n\n  get headers() {\n    return this.isQueryBody()\n      ? Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN })\n      : this._headers;\n  }\n\n  get pathWithParams() {\n    return this.params.keys().length > 0\n      ? `${this.path}?${this.params}`\n      : this.path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this.path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  get cacheKey() {\n    return this._params.keys().length > 0\n      ? `${this._path}?${this._params}`\n      : this._path;\n  }\n\n  isQueryBody() {\n    return (\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`))\n    );\n  }\n\n  isBatch() {\n    return this.path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                            HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                property\n                            \n                            \n                                toJson\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:202\n                        \n                    \n\n\n            \n                \n                        Handle the response body as entities\n\n\n                        \n                            Returns :         ODataEntities\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:178\n                        \n                    \n\n\n            \n                \n                        Handle the response body as an entity\n\n\n                        \n                            Returns :         ODataEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:47\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            HttpResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(req: ODataRequest, json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:59\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            ODataRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:220\n                        \n                    \n\n\n            \n                \n                        Handle the response body as a property\n\n\n                        \n                            Returns :         ODataProperty\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/response.ts:247\n                        \n                    \n\n\n            \n                \n                        Handle the response body as a value\n\n\n                        \n                            Returns :     T | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:94\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:135\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:156\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n  PREFERENCE_APPLIED,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJson(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    },\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJson() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options.parserOptions);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const headerKey = Http.resolveHeaderKey(\n        this.headers,\n        ODATA_VERSION_HEADERS,\n      );\n      if (headerKey) {\n        const version = (this.headers.get(headerKey) || '').replace(\n          /\\;/g,\n          '',\n        ) as '2.0' | '3.0' | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const preferenceApplied = this.headers.get(PREFERENCE_APPLIED);\n      if (preferenceApplied) {\n        this._options.setPreferenceApplied(preferenceApplied);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {},\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: Map;\n  get annotations(): Map {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) this._annotations.set(options.helper.ODATA_ETAG, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) this._annotations.set(options.helper.ODATA_ID, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    let entities = payload ? annots.data(payload) : null;\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context,\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(\n            data as { [name: string]: any },\n            this.api.options.stripMetadata,\n          )\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setPreferenceApplied\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ParserOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ParserOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ODataResponseOptions\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cacheControl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                features\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                location\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPreferenceApplied\n                        \n                    \n                \n            \n            \n                \nsetPreferenceApplied(preference: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                preference\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/responses/options.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                version\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: ParserOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setPreferenceApplied(preference: string) {\n    preference.split(',').forEach((prefer) => {\n      // TODO: resolve preference\n    });\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:66\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                bindingType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEntitySetForType(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                        \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                        \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:60\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/schema.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataApi } from '../api';\nimport { Parser, ParserOptions, SchemaConfig } from '../types';\nimport { OData } from '../utils/odata';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema extends ODataAnnotatable {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    super(config);\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this),\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this),\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this),\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this),\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[],\n    );\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    const bindingStructuredType =\n      bindingType !== undefined\n        ? this.api.findStructuredTypeForType(bindingType)\n        : undefined;\n    return this.callables.find((c) => {\n      const isCallableType = c.isTypeOf(type);\n      const callableBindingType = c.binding()?.type;\n      const callableBindingStructuredType =\n        callableBindingType !== undefined\n          ? this.api.findStructuredTypeForType(callableBindingType)\n          : undefined;\n      return (\n        isCallableType &&\n        (!bindingStructuredType ||\n          (callableBindingStructuredType &&\n            bindingStructuredType.isSubtypeOf(callableBindingStructuredType)))\n      );\n    }) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) =>\n      enu.configure({ options, parserForType, findOptionsForType }),\n    );\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ options, parserForType, findOptionsForType }),\n    );\n    // Configure callables\n    this.callables.forEach((callable) =>\n      callable.configure({ options, parserForType, findOptionsForType }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchemaElement.html":{"url":"classes/ODataSchemaElement.html","title":"class - ODataSchemaElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchemaElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/element.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:58\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:68\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ODataSchemaElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:47\n                        \n                    \n\n\n            \n                \n                        Returns a boolean indicating if the structured type is of the given type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    String representation of the type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the callable is type of the given type\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:29\n                        \n                    \n\n\n            \n                \n                        Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The titleized string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/schema/element.ts:38\n                        \n                    \n\n\n            \n                \n                        Returns a full type of the structured type including the namespace/alias.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:39\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Find an annotation inside the annotatable and return its value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                term\n                                            \n                                                        string | RegExp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The term of the annotation to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                The value of the annotation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataAnnotatable\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataAnnotatable:30\n\n                        \n                    \n\n\n            \n                \n                        Find an annotation inside the annotatable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                predicate\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function that returns true if the annotation match.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The annotation that matches the predicate.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/element.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\nimport { Strings } from '../utils';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataSchemaElement extends ODataAnnotatable {\n  name: string;\n  schema: ODataSchema;\n\n  constructor(\n    config: { annotations?: AnnotationConfig[]; name: string },\n    schema: ODataSchema,\n  ) {\n    super(config);\n    this.schema = schema;\n    this.name = config.name;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  /**\n   * Returns a full type of the structured type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string): boolean {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a subtype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSubtypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a supertype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSupertypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Factory method to create an entity set service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entitySetName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the entity set.\n\n                                            \n                                        \n                                        \n                                                apiNameOrEntityType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Name of the API or the type of the entity.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataEntitySetService\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Factory method to create a singleton service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                singletonName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the singleton.\n\n                                            \n                                        \n                                        \n                                                apiNameOrEntityType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Name of the API or the type of the entity.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ODataSingletonService\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string,\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType,\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string,\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                            ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                        \n                    attach(model: M)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataEntityService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataEntityService:27\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    M\n                            \n                        \n                    \n\n            \n                \n                        Attach an existing model to this service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                        M\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The model to attach.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                        \n                    entity()\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataEntityService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataEntityService:19\n\n                        \n                    \n\n\n            \n                \n                        Get the entity resource for this service.\n\n\n                        \n                            Returns :         ODataSingletonResource\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                        \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/singleton.ts:58\n                        \n                    \n\n\n            \n                \n                        Patch the singleton entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                attrs\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The attributes for the entity.\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The options for the request.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(attrs: Partial, options?)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/services/singleton.ts:44\n                        \n                    \n\n\n            \n                \n                        Update the singleton entity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                attrs\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The attributes for the entity.\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The options for the request.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:63\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                                    R\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        P | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataActionResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataActionOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                        \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:26\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    P\n                                    R\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        P | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resource\n                                            \n                                                            ODataFunctionResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataFunctionOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ODataBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         ODataBaseService:100\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    S\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resource\n                                            \n                                                            ODataNavigationPropertyResource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                responseType\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            ODataQueryArgumentsOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:34\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport type { ODataModel } from '../models/model';\nimport type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string },\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string },\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: Normalize)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:465\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        Normalize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:547\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Operator\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:487\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Operator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:495\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:554\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:476\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         { $type: any; op: string; values: any; normalize: Normalize; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:472\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByExpression.html":{"url":"classes/OrderByExpression.html","title":"class - OrderByExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                ascending\n                            \n                            \n                                clone\n                            \n                            \n                                descending\n                            \n                            \n                                    Static\n                                factory\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ascending\n                        \n                    \n                \n            \n            \n                \nascending(field: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:120\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         OrderByExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descending\n                        \n                    \n                \n            \n            \n                \ndescending(field: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                        \n                    factory(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void, current?: OrderByExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:69\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                            OrderByExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:95\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         OrderByExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:101\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:90\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:50\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:65\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, FieldFactory, Renderable, RenderableFactory } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      field: this.field.toJson(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Required;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new OrderByExpression(),\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): OrderByExpression {\n    return new OrderByExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByField.html":{"url":"classes/OrderByField.html","title":"class - OrderByField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: Renderable, order: \"asc\" | \"desc\")\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        order\n                                                  \n                                                        \n                                                                    \"asc\" | \"desc\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         OrderByField\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; field: any; order: \"asc\" | \"desc\"; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:10\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, FieldFactory, Renderable, RenderableFactory } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      field: this.field.toJson(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `${render(this.field, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Required;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new OrderByExpression(),\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): OrderByExpression {\n    return new OrderByExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        ParserOptions | StructuredTypeFieldOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:190\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        ParserOptions | StructuredTypeFieldOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/types.ts:185\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        ParserOptions | StructuredTypeFieldOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  apply = 'apply',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport enum JsonType {\n  string = 'string',\n  number = 'number',\n  integer = 'integer',\n  object = 'object',\n  array = 'array',\n  boolean = 'boolean',\n  null = 'null'\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n  relativeUrls?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParserOptions.html":{"url":"interfaces/ParserOptions.html","title":"interface - ParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  apply = 'apply',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport enum JsonType {\n  string = 'string',\n  number = 'number',\n  integer = 'integer',\n  object = 'object',\n  array = 'array',\n  boolean = 'boolean',\n  null = 'null'\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n  relativeUrls?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PassedInitialConfig.html":{"url":"interfaces/PassedInitialConfig.html","title":"interface - PassedInitialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PassedInitialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            config\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:         ApiConfig | ApiConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiConfig | ApiConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loader:     Provider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Provider\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  EnvironmentProviders,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n  makeEnvironmentProviders,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n// Standalone version\nexport function provideODataClient(\n  passedConfig: PassedInitialConfig\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    { provide: ODATA_CONFIG, useValue: passedConfig },\n    passedConfig?.loader || {\n      provide: ODataConfigLoader,\n      useFactory: createSyncLoader,\n      deps: [ODATA_CONFIG],\n    },\n    ODataClient,\n    ODataServiceFactory,\n  ]);\n}\n\n// Module version\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        clone\n                                    \n                                \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        resolve\n                                    \n                                \n                                \n                                    \n                                        toJson\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries())),\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]'),\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJson(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJson(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  apply = 'apply',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport enum JsonType {\n  string = 'string',\n  number = 'number',\n  integer = 'integer',\n  object = 'object',\n  array = 'array',\n  boolean = 'boolean',\n  null = 'null'\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n  relativeUrls?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchExpression.html":{"url":"classes/SearchExpression.html","title":"class - SearchExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _connector\n                            \n                            \n                                    Private\n                                _negated\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                and\n                            \n                            \n                                clone\n                            \n                            \n                                connector\n                            \n                            \n                                    Static\n                                factory\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                negated\n                            \n                            \n                                not\n                            \n                            \n                                or\n                            \n                            \n                                render\n                            \n                            \n                                term\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _connector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SearchConnector\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _negated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable, connector?: SearchConnector)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                connector\n                                            \n                                                            SearchConnector\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        and\n                        \n                    \n                \n            \n            \n                \nand(exp: SearchExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exp\n                                            \n                                                        SearchExpression\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:160\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     SearchExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connector\n                        \n                    \n                \n            \n            \n                \nconnector()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:183\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         SearchConnector\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                        \n                    factory(opts: (builder: SearchExpressionBuilder,current: SearchExpression) => void, current?: SearchExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:77\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                        SearchExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:176\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        negated\n                        \n                    \n                \n            \n            \n                \nnegated()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:187\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(exp: SearchExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exp\n                                            \n                                                        SearchExpression\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        or\n                        \n                    \n                \n            \n            \n                \nor(exp: SearchExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exp\n                                            \n                                                        SearchExpression\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:141\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n            \n                \nterm(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SearchExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:168\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:50\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:73\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, syntax, Renderable, RenderableFactory } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SearchExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(syntax.group(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(syntax.group(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? syntax.group(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  static fromJson(json: { [name: string]: any }): SearchExpression {\n    return new SearchExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n      connector: json['connector'],\n      negated: json['negated'],\n    });\n  }\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchTerm.html":{"url":"classes/SearchTerm.html","title":"class - SearchTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         SearchTerm\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; value: string; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, syntax, Renderable, RenderableFactory } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SearchExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(syntax.group(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(syntax.group(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? syntax.group(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  static fromJson(json: { [name: string]: any }): SearchExpression {\n    return new SearchExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n      connector: json['connector'],\n      negated: json['negated'],\n    });\n  }\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:19\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            EntityKey\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EntityKey\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:29\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegment } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegment.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegment.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegment.action);\n  }\n  function() {\n    return this.segments.get(PathSegment.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegment.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegment.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectExpression.html":{"url":"classes/SelectExpression.html","title":"class - SelectExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/select.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                factory\n                            \n                            \n                                field\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                    \n                                toJson\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                        \n                    _add(node: Renderable)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            Renderable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:67\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         SelectExpression\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                        \n                    factory(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void, current?: SelectExpression)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:23\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                opts\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                            SelectExpression\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:44\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SelectExpression\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:49\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        toJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    toJson()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:39\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:36\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     {}\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:40\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         Expression\n\n                        \n                    \n                    \n                        \n                                Defined in         Expression:50\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, ParserOptions } from '../../../types';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FieldFactory, Renderable, RenderableFactory } from './syntax';\n\nexport type SelectExpressionBuilder = {\n  t: Required;\n  e: () => SelectExpression;\n};\nexport class SelectExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SelectExpression';\n  }\n\n  static factory(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression,\n    current?: SelectExpression\n  ): SelectExpression {\n    return opts(\n      {\n        t: FieldFactory>(),\n        e: () => new SelectExpression(),\n      },\n      current\n    ) as SelectExpression;\n  }\n\n  override toJson() {\n    const json = super.toJson();\n    return Object.assign(json, {});\n  }\n\n  static fromJson(json: { [name: string]: any }): SelectExpression {\n    return new SelectExpression({\n      children: json['children'].map((c: any) => RenderableFactory(c)),\n    });\n  }\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix, parser, options }))\n      .join(',');\n  }\n\n  clone() {\n    return new SelectExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): SelectExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: any): SelectExpression {\n    return this._add(field);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:308\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:312\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:316\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:320\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(left: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:324\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(left: any, right: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:328\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'right'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(left: any, right: number, length?: number, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:332\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                right\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                length\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(left: any | string, pattern: string, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:356\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        any | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                pattern\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(left: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:363\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(left: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:366\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(left: any, normalize: Normalize)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:369\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                normalize\n                                            \n                                                            Normalize\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'none'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Function\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegment {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOption {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  apply = 'apply',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\nexport enum EdmType {\n  //Edm.Guid 16-byte (128-bit) unique identifier\n  Guid = 'Edm.Guid',\n  //Edm.Int16 Signed 16-bit integer\n  Int16 = 'Edm.Int16',\n  //Edm.String Sequence of UTF-8 characters\n  String = 'Edm.String',\n  //Edm.Boolean Binary-valued logic\n  Boolean = 'Edm.Boolean',\n  //Edm.Byte Unsigned 8-bit integer\n  Byte = 'Edm.Byte',\n  //Edm.SByte Signed 8-bit integer\n  SByte = 'Edm.SByte',\n  //Edm.Int32 Signed 16-bit integer\n  Int32 = 'Edm.Int32',\n  //Edm.Int64 Signed 16-bit integer\n  Int64 = 'Edm.Int64',\n  //Edm.Date Date without a time-zone offset\n  Date = 'Edm.Date',\n  //Edm.TimeOfDay Clock time 00:00-23:59:59.999999999999\n  TimeOfDay = 'Edm.TimeOfDay',\n  //Edm.DateTimeOffset Date and time with a time-zone offset, no leap seconds\n  DateTimeOffset = 'Edm.DateTimeOffset',\n  //Edm.Duration Signed duration in days, hours, minutes, and (sub)seconds\n  Duration = 'Edm.Duration',\n  //Edm.Decimal Numeric values with fixed precision and scale\n  Decimal = 'Edm.Decimal',\n  //Edm.Double IEEE 754 binary64 floating-point number (15-17 decimal digits)\n  Double = 'Edm.Double',\n  //Edm.Single IEEE 754 binary32 floating-point number (6-9 decimal digits)\n  Single = 'Edm.Single',\n  //Edm.Binary Binary data\n  Binary = 'Edm.Binary',\n  //Edm.Stream Binary data stream\n  Stream = 'Edm.Stream',\n  //Edm.Geography Abstract base type for all Geography types\n  Geography = 'Edm.Geography',\n  //Edm.GeographyPoint A point in a round-earth coordinate system\n  GeographyPoint = 'Edm.GeographyPoint',\n  //Edm.GeographyLineString Line string in a round-earth coordinate system\n  GeographyLineString = 'Edm.GeographyLineString',\n  //Edm.GeographyPolygon Polygon in a round-earth coordinate system\n  GeographyPolygon = 'Edm.GeographyPolygon',\n  //Edm.GeographyMultiPoint Collection of points in a round-earth coordinate system\n  GeographyMultiPoint = 'Edm.GeographyMultiPoint',\n  //Edm.GeographyMultiLineString Collection of line strings in a round-earth coordinate system\n  GeographyMultiLineString = 'Edm.GeographyMultiLineString',\n  //Edm.GeographyMultiPolygon Collection of polygons in a round-earth coordinate system\n  GeographyMultiPolygon = 'Edm.GeographyMultiPolygon',\n  //Edm.GeographyCollection Collection of arbitrary Geography values\n  GeographyCollection = 'Edm.GeographyCollection',\n  //Edm.Geometry Abstract base type for all Geometry types\n  Geometry = 'Edm.Geometry',\n  //Edm.GeometryPoint Point in a flat-earth coordinate system\n  GeometryPoint = 'Edm.GeometryPoint',\n  //Edm.GeometryLineString Line string in a flat-earth coordinate system\n  GeometryLineString = 'Edm.GeometryLineString',\n  //Edm.GeometryPolygon Polygon in a flat-earth coordinate system\n  GeometryPolygon = 'Edm.GeometryPolygon',\n  //Edm.GeometryMultiPoint Collection of points in a flat-earth coordinate system\n  GeometryMultiPoint = 'Edm.GeometryMultiPoint',\n  //Edm.GeometryMultiLineString Collection of line strings in a flat-earth coordinate system\n  GeometryMultiLineString = 'Edm.GeometryMultiLineString',\n  //Edm.GeometryMultiPolygon Collection of polygons in a flat-earth coordinate system\n  GeometryMultiPolygon = 'Edm.GeometryMultiPolygon',\n  //Edm.GeometryCollection Collection of arbitrary Geometry values\n  GeometryCollection = 'Edm.GeometryCollection',\n}\n\nexport enum JsonType {\n  string = 'string',\n  number = 'number',\n  integer = 'integer',\n  object = 'object',\n  array = 'array',\n  boolean = 'boolean',\n  null = 'null'\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOption[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n  relativeUrls?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport interface FieldParser extends Parser {\n  nullable?: boolean;\n  default?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number | 'variable';\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Type.html":{"url":"classes/Type.html","title":"class - Type","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Type\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                    Static\n                                fromJson\n                            \n                            \n                                render\n                            \n                            \n                                resolve\n                            \n                            \n                                toJson\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, value?: any)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:858\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:910\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJson\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJson(json: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:877\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:885\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(parser: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:914\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parser\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:868\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { $type: any; name: string; type: string; value: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:864\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(left: T | string, type?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:432\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    N\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     N\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(left: T | string, type?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:440\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                left\n                                            \n                                                        T | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataStructuredTypeFieldParser } from '../../../schema';\nimport { Parser, ParserOptions } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\nimport { ApplyExpression } from './apply';\nimport { ComputeExpression } from './compute';\nimport { CountExpression } from './count';\nimport { ExpandExpression } from './expand';\nimport { FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchExpression } from './search';\nimport { SelectExpression } from './select';\n\nexport type Normalize = 'all' | 'right' | 'left' | 'none';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string;\n  toJson(): any;\n  clone(): any;\n  resolve(parser: any): any;\n}\n\nexport const FieldFactory = (\n  names: (string | Renderable)[] = []\n): any =>\n  new Proxy({ _names: names } as T, {\n    get(target: T, key: string | symbol) {\n      let names = (target as any)['_names'] as (string | Renderable)[];\n      if (key === 'render') {\n        return ({\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        }: {\n          aliases?: QueryCustomType[];\n          escape?: boolean;\n          prefix?: string;\n          parser?: Parser;\n          options?: ParserOptions;\n        }) => {\n          let values = names.map((n: any) =>\n            render(n, { aliases, escape, prefix, parser, options })\n          );\n          if (prefix && (names.length === 0 || typeof names[0] === 'string')) {\n            values = [prefix, ...values];\n          }\n          return values.join('/');\n        };\n      } else if (key === 'clone') {\n        return () => FieldFactory([...names]);\n      } else if (key === 'isField') {\n        return () => true;\n      } else if (key === 'toJson') {\n        return () => ({\n          $type: 'Field',\n          names: names,\n        });\n      } else if (key === 'resolve') {\n        return (parser: any) =>\n          names.reduce(\n            (acc: any, name: string | Renderable) =>\n              typeof name === 'string'\n                ? acc?.field(name)\n                : name?.resolve(parser),\n            parser\n          );\n      } else {\n        return FieldFactory([...names, key as string]);\n      }\n    },\n\n    has(target: T, key: string): any {\n      return (\n        ['toJson', 'isField', 'clone', 'render', 'resolve'].includes(key) ||\n        key in target\n      );\n    },\n  });\n\nexport const RenderableFactory = (value: any): Renderable => {\n  if (Types.isPlainObject(value) && '$type' in value) {\n    switch (value.$type) {\n      case 'SelectExpression':\n        return SelectExpression.fromJson(value);\n      case 'ExpandExpression':\n        return ExpandExpression.fromJson(value);\n      case 'ComputeExpression':\n        return ComputeExpression.fromJson(value);\n      case 'ApplyExpression':\n        return ApplyExpression.fromJson(value);\n      case 'FilterExpression':\n        return FilterExpression.fromJson(value);\n      case 'OrderByExpression':\n        return OrderByExpression.fromJson(value);\n      case 'SearchExpression':\n        return SearchExpression.fromJson(value);\n      case 'CountExpression':\n        return CountExpression.fromJson(value);\n      case 'Function':\n        return Function.fromJson(value);\n      case 'Operator':\n        return Operator.fromJson(value);\n      case 'Grouping':\n        return Grouping.fromJson(value);\n      case 'Aggregate':\n        return Aggregate.fromJson(value);\n      case 'GroupBy':\n        return GroupBy.fromJson(value);\n      case 'Lambda':\n        return Lambda.fromJson(value);\n      case 'Type':\n        return Type.fromJson(value);\n      case 'Field':\n        return FieldFactory(value['names']);\n      default:\n        return value;\n    }\n  }\n  return value;\n};\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  } = {}\n): string | number | boolean | null {\n  if (Types.isFunction(value)) {\n    return render(value(syntax), {\n      aliases,\n      normalize,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  if (Types.isObject(value) && 'render' in value) {\n    return render(value.render({ aliases, escape, prefix, parser, options }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n      parser,\n      options,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport function resolve(values: any, parser?: Parser) {\n  if (parser !== undefined) {\n    let fields = values.filter(\n      (v: any) => Types.isObject(v) && 'isField' in v && v.isField()\n    );\n    if (fields.length === 1 && Types.isObject(parser) && 'field' in parser) {\n      return fields[0].resolve(parser);\n    }\n  }\n  return parser;\n}\n\nexport function encode(\n  values: any,\n  parser?: Parser,\n  options?: ParserOptions\n) {\n  if (parser !== undefined) {\n    return values.map((v: any) => {\n      if (Types.isArray(v)) return encode(v, parser, options);\n      if (Types.isObject(v) || v == null) return v;\n      try {\n        return parser.encode(v, options);\n      } catch {\n        return v;\n      }\n    });\n  }\n  return values;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: Normalize,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Function {\n    return new Function(\n      json['name'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize'],\n      json['escape']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, ...values] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    const params = [\n      left,\n      ...values.map((v: any) =>\n        render(v, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          normalize: this.normalize === 'all' || this.normalize === 'right',\n          options,\n        })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('concat', [left, right], normalize);\n  }\n\n  contains(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('contains', [left, right], normalize);\n  }\n\n  endsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('endswith', [left, right], normalize);\n  }\n\n  indexOf(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('indexof', [left, right], normalize);\n  }\n\n  length(left: any, normalize: Normalize = 'right') {\n    return new Function('length', [left], normalize);\n  }\n\n  startsWith(left: any, right: any, normalize: Normalize = 'right') {\n    return new Function('startswith', [left, right], normalize);\n  }\n\n  subString(\n    left: any,\n    right: number,\n    length?: number,\n    normalize: Normalize = 'none'\n  ) {\n    let values = [left, right];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubset', [left, right], normalize);\n  }\n  hasSubsequence(left: T, right: any, normalize: Normalize = 'none') {\n    return new Function('hassubsequence', [left, right], normalize);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(\n    left: any | string,\n    pattern: string,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('matchesPattern', [left, pattern], normalize);\n  }\n  toLower(left: any, normalize: Normalize = 'none') {\n    return new Function('tolower', [left], normalize);\n  }\n  toUpper(left: any, normalize: Normalize = 'none') {\n    return new Function('toupper', [left], normalize);\n  }\n  trim(left: any, normalize: Normalize = 'none') {\n    return new Function('trim', [left], normalize);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(left: any, normalize: Normalize = 'none') {\n    return new Function('date', [left], normalize);\n  }\n  day(left: any, normalize: Normalize = 'none') {\n    return new Function('day', [left], normalize);\n  }\n  fractionalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('fractionalseconds', [left], normalize);\n  }\n  hour(left: any, normalize: Normalize = 'none') {\n    return new Function('hour', [left], normalize);\n  }\n  maxdatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('maxdatetime', [left], normalize);\n  }\n  mindatetime(left: any, normalize: Normalize = 'none') {\n    return new Function('mindatetime', [left], normalize);\n  }\n  minute(left: any, normalize: Normalize = 'none') {\n    return new Function('minute', [left], normalize);\n  }\n  month(left: any, normalize: Normalize = 'none') {\n    return new Function('month', [left], normalize);\n  }\n  now() {\n    return new Function('now', [], 'none');\n  }\n  second(left: any, normalize: Normalize = 'none') {\n    return new Function('second', [left], normalize);\n  }\n  time(left: any, normalize: Normalize = 'none') {\n    return new Function('time', [left], normalize);\n  }\n  totaloffsetminutes(left: any, normalize: Normalize = 'none') {\n    return new Function('totaloffsetminutes', [left], normalize);\n  }\n  totalseconds(left: any, normalize: Normalize = 'none') {\n    return new Function('totalseconds', [left], normalize);\n  }\n  year(left: any, normalize: Normalize = 'none') {\n    return new Function('year', [left], normalize);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(left: T | string, normalize: Normalize = 'none') {\n    return new Function('ceiling', [left], normalize);\n  }\n  floor(left: T | string, normalize: Normalize = 'none') {\n    return new Function('floor', [left], normalize);\n  }\n  round(left: T | string, normalize: Normalize = 'none') {\n    return new Function('round', [left], normalize);\n  }\n}\n\nexport class TypeFunctions {\n  cast(left: T | string, type?: string): N {\n    return FieldFactory>([\n      type !== undefined\n        ? new Type('cast', type, left)\n        : new Type('cast', left as string),\n    ]);\n  }\n\n  isof(left: T | string, type?: string) {\n    return type !== undefined\n      ? new Type('isof', type, left)\n      : new Type('isof', left as string);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.distance', [left, right], normalize);\n  }\n  geoIntersects(left: T, right: string, normalize: Normalize = 'right') {\n    return new Function('geo.intersects', [left, right], normalize);\n  }\n  geoLength(left: T, normalize: Normalize = 'none') {\n    return new Function('geo.length', [left], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(left: T | string, right: any, normalize: Normalize = 'none') {\n    return new Function('case', [left, right], normalize);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: Normalize\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      normalize: this.normalize,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Operator {\n    return new Operator(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['normalize']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      normalize: this.normalize === 'all' || this.normalize === 'left',\n      options,\n    });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                parser,\n                normalize:\n                  this.normalize === 'all' || this.normalize === 'right',\n                options,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            parser,\n            normalize: this.normalize === 'all' || this.normalize === 'right',\n            options,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(left: any, normalize: Normalize = 'none') {\n    return new Operator('not', [left], normalize);\n  }\n  has(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize: Normalize = 'right') {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize: Normalize = 'right') {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Grouping {\n    return new Grouping(json['group'].map((v: any) => RenderableFactory(v)));\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `(${render(this.group, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupingOperators {\n  group(value: any) {\n    return new Grouping(value);\n  }\n  rollup(...values: any) {\n    return new Function('rollup', values, 'none');\n  }\n}\n\nexport type AggregateMethod =\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'average'\n  | 'countdistinct'; //, or with custom aggregation methods;\n\nexport class Aggregate implements Renderable {\n  constructor(\n    protected value: Renderable,\n    protected method: AggregateMethod,\n    protected alias: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Aggregate';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value.toJson(),\n      method: this.method,\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Aggregate {\n    return new Aggregate(\n      RenderableFactory(json['value']),\n      json['method'],\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    return `aggregate(${render(this.value, {\n      aliases,\n      escape,\n      prefix,\n      parser,\n      options,\n    })} with ${this.method} as ${this.alias})`;\n  }\n\n  clone() {\n    return new Aggregate(Objects.clone(this.value), this.method, this.alias);\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class GroupBy implements Renderable {\n  constructor(\n    protected properties: Renderable[],\n    protected transformations?: Renderable\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'GroupBy';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      properties: this.properties.map((p) => p.toJson()),\n      transformations: this.transformations?.toJson(),\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): GroupBy {\n    return new GroupBy(\n      json['properties'].map((p: any) => RenderableFactory(p)),\n      RenderableFactory(json['transformations'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    const properties = this.properties\n      .map((p) =>\n        render(p, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      )\n      .join(',');\n    const transformations = this.transformations\n      ? ', ' +\n        render(this.transformations, {\n          aliases,\n          escape,\n          prefix,\n          parser,\n          options,\n        })\n      : '';\n    return `groupby((${properties})${transformations})`;\n  }\n\n  clone() {\n    return new GroupBy(\n      Objects.clone(this.properties),\n      Objects.clone(this.transformations)\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class Transformations {\n  aggregate(value: Renderable, method: AggregateMethod, alias: string) {\n    return new Aggregate(value, method, alias);\n  }\n  groupby(properties: Renderable[], options?: Renderable) {\n    return new GroupBy(properties, options);\n  }\n  topCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topcount', [value, field], normalize);\n  }\n\n  topSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('topsum', [value, field], normalize);\n  }\n  topPercent(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('toppercent', [value, field], normalize);\n  }\n\n  bottomCount(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomcount', [value, field], normalize);\n  }\n\n  bottomSum(value: number, field: Renderable, normalize: Normalize = 'none') {\n    return new Function('bottomsum', [value, field], normalize);\n  }\n\n  bottomPercent(\n    value: number,\n    field: Renderable,\n    normalize: Normalize = 'none'\n  ) {\n    return new Function('bottompercent', [value, field], normalize);\n  }\n\n  identity() {\n    return new Function('identity', [], 'none');\n  }\n  search(left: any, normalize: Normalize = 'none') {\n    return new Function('search', [left], normalize);\n  }\n  filter(left: any, normalize: Normalize = 'none') {\n    return new Function('filter', [left], normalize);\n  }\n}\n\nexport class Type implements Renderable {\n  constructor(\n    protected name: string,\n    protected type: string,\n    protected value?: any\n  ) {}\n  get [Symbol.toStringTag]() {\n    return 'Type';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      type: this.type,\n      value: this.value,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Type {\n    return new Type(\n      json['name'],\n      json['type'],\n      RenderableFactory(json['value'])\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    let value;\n    if (this.value) {\n      parser = resolve([this.value], parser);\n      let [left, right] = encode([this.value], parser, options);\n\n      value = render(left, { aliases, escape, prefix, parser, options });\n    }\n    return value\n      ? `${this.name}(${value}, '${this.type}')`\n      : `${this.name}('${this.type}')`;\n  }\n\n  clone() {\n    return new Type(this.name, this.type, Objects.clone(this.value));\n  }\n\n  resolve(parser: any) {\n    parser =\n      parser instanceof ODataStructuredTypeFieldParser &&\n      parser.isStructuredType()\n        ? parser.structured()\n        : parser;\n    return parser?.findChildParser((p: any) => p.isTypeOf(this.type));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJson() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values.map((v) =>\n        Types.isObject(v) && 'toJson' in v ? v.toJson() : v\n      ),\n      alias: this.alias,\n    };\n  }\n\n  static fromJson(json: { [name: string]: any }): Lambda {\n    return new Lambda(\n      json['op'],\n      json['values'].map((v: any) => RenderableFactory(v)),\n      json['alias']\n    );\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n    parser,\n    options,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n    parser?: Parser;\n    options?: ParserOptions;\n  }): string {\n    parser = resolve(this.values, parser);\n    let [left, right] = encode(this.values, parser, options);\n\n    left = render(left, { aliases, escape, prefix, parser });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n        options,\n        parser,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n  resolve(parser: any) {\n    return parser;\n  }\n}\n\nexport class LambdaOperators {\n  any(left: T, right: any, alias?: string) {\n    return new Lambda('any', [left, right], alias);\n  }\n\n  all(left: T, right: any, alias?: string) {\n    return new Lambda('all', [left, right], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataTransformations {}\nexport interface ODataTransformations extends Transformations {}\n\napplyMixins(ODataTransformations, [Transformations]);\nexport const transformations: ODataTransformations =\n  new ODataTransformations();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax\n  extends ODataOperators,\n    ODataFunctions,\n    ODataTransformations {}\napplyMixins(ODataSyntax, [\n  ODataOperators,\n  ODataFunctions,\n  ODataTransformations,\n]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.0.0\n        \n            @angular/common : ^17.0.0\n        \n            @angular/compiler : ^17.0.0\n        \n            @angular/core : ^17.0.0\n        \n            @angular/forms : ^17.0.0\n        \n            @angular/platform-browser : ^17.0.0\n        \n            @angular/platform-browser-dynamic : ^17.0.0\n        \n            @angular/router : ^17.0.0\n        \n            @compodoc/compodoc : ^1.1.23\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EdmType   (projects/.../types.ts)\n                        \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            JsonType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegment   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOption   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        EdmType\n                    \n                \n                        \n                            \n                                 Guid\n                            \n                        \n                        \n                            \n                                Value : Edm.Guid\n                            \n                        \n                        \n                            \n                                 Int16\n                            \n                        \n                        \n                            \n                                Value : Edm.Int16\n                            \n                        \n                        \n                            \n                                 String\n                            \n                        \n                        \n                            \n                                Value : Edm.String\n                            \n                        \n                        \n                            \n                                 Boolean\n                            \n                        \n                        \n                            \n                                Value : Edm.Boolean\n                            \n                        \n                        \n                            \n                                 Byte\n                            \n                        \n                        \n                            \n                                Value : Edm.Byte\n                            \n                        \n                        \n                            \n                                 SByte\n                            \n                        \n                        \n                            \n                                Value : Edm.SByte\n                            \n                        \n                        \n                            \n                                 Int32\n                            \n                        \n                        \n                            \n                                Value : Edm.Int32\n                            \n                        \n                        \n                            \n                                 Int64\n                            \n                        \n                        \n                            \n                                Value : Edm.Int64\n                            \n                        \n                        \n                            \n                                 Date\n                            \n                        \n                        \n                            \n                                Value : Edm.Date\n                            \n                        \n                        \n                            \n                                 TimeOfDay\n                            \n                        \n                        \n                            \n                                Value : Edm.TimeOfDay\n                            \n                        \n                        \n                            \n                                 DateTimeOffset\n                            \n                        \n                        \n                            \n                                Value : Edm.DateTimeOffset\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                Value : Edm.Duration\n                            \n                        \n                        \n                            \n                                 Decimal\n                            \n                        \n                        \n                            \n                                Value : Edm.Decimal\n                            \n                        \n                        \n                            \n                                 Double\n                            \n                        \n                        \n                            \n                                Value : Edm.Double\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : Edm.Single\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n                        \n                            \n                                Value : Edm.Binary\n                            \n                        \n                        \n                            \n                                 Stream\n                            \n                        \n                        \n                            \n                                Value : Edm.Stream\n                            \n                        \n                        \n                            \n                                 Geography\n                            \n                        \n                        \n                            \n                                Value : Edm.Geography\n                            \n                        \n                        \n                            \n                                 GeographyPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyPoint\n                            \n                        \n                        \n                            \n                                 GeographyLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyLineString\n                            \n                        \n                        \n                            \n                                 GeographyPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyPolygon\n                            \n                        \n                        \n                            \n                                 GeographyMultiPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiPoint\n                            \n                        \n                        \n                            \n                                 GeographyMultiLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiLineString\n                            \n                        \n                        \n                            \n                                 GeographyMultiPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyMultiPolygon\n                            \n                        \n                        \n                            \n                                 GeographyCollection\n                            \n                        \n                        \n                            \n                                Value : Edm.GeographyCollection\n                            \n                        \n                        \n                            \n                                 Geometry\n                            \n                        \n                        \n                            \n                                Value : Edm.Geometry\n                            \n                        \n                        \n                            \n                                 GeometryPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryPoint\n                            \n                        \n                        \n                            \n                                 GeometryLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryLineString\n                            \n                        \n                        \n                            \n                                 GeometryPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryPolygon\n                            \n                        \n                        \n                            \n                                 GeometryMultiPoint\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiPoint\n                            \n                        \n                        \n                            \n                                 GeometryMultiLineString\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiLineString\n                            \n                        \n                        \n                            \n                                 GeometryMultiPolygon\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryMultiPolygon\n                            \n                        \n                        \n                            \n                                 GeometryCollection\n                            \n                        \n                        \n                            \n                                Value : Edm.GeometryCollection\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        JsonType\n                    \n                \n                        \n                            \n                                 string\n                            \n                        \n                        \n                            \n                                Value : string\n                            \n                        \n                        \n                            \n                                 number\n                            \n                        \n                        \n                            \n                                Value : number\n                            \n                        \n                        \n                            \n                                 integer\n                            \n                        \n                        \n                            \n                                Value : integer\n                            \n                        \n                        \n                            \n                                 object\n                            \n                        \n                        \n                            \n                                Value : object\n                            \n                        \n                        \n                            \n                                 array\n                            \n                        \n                        \n                            \n                                Value : array\n                            \n                        \n                        \n                            \n                                 boolean\n                            \n                        \n                        \n                            \n                                Value : boolean\n                            \n                        \n                        \n                            \n                                 null\n                            \n                        \n                        \n                            \n                                Value : null\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PathSegment\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOption\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 apply\n                            \n                        \n                        \n                            \n                                Value : apply\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 levels\n                            \n                        \n                        \n                            \n                                Value : levels\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelEventType\n                    \n                \n                        \n                            \n                                 Change\n                            \n                        \n                        \n                            \n                                Value : change\n                            \n                        \n                        \n                            \n                                 Reset\n                            \n                        \n                        \n                            \n                                Value : reset\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Sort\n                            \n                        \n                        \n                            \n                                Value : sort\n                            \n                        \n                        \n                            \n                                 Destroy\n                            \n                        \n                        \n                            \n                                Value : destroy\n                            \n                        \n                        \n                            \n                                 Add\n                            \n                        \n                        \n                            \n                                Value : add\n                            \n                        \n                        \n                            \n                                 Remove\n                            \n                        \n                        \n                            \n                                Value : remove\n                            \n                        \n                        \n                            \n                                 Invalid\n                            \n                        \n                        \n                            \n                                Value : invalid\n                            \n                        \n                        \n                            \n                                 Request\n                            \n                        \n                        \n                            \n                                Value : request\n                            \n                        \n                        \n                            \n                                 Sync\n                            \n                        \n                        \n                            \n                                Value : sync\n                            \n                        \n                        \n                            \n                                 Attach\n                            \n                        \n                        \n                            \n                                Value : attach\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nWithout Schema\nWith Schema\nUsage\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nExample :npm i angular-odataWithout Schema\nImport ODataModule into your application module definition and setup the module for the serviceRootUrl.\nExample :import { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      config: {\n        serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n      }\n    })\n    ...\n  ]\n})\nexport class AppModule {}With Schema\nUse OData Angular Generator for generate the Config and the Module definition.\nImport ODataModule, Config and Module into your application module.\nSetup ODataModule with Config and import it along with Module.\nExample :import { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({ config: TripPinConfig }),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}Usage\nInject and use the ODataServiceFactory\nExample :import { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entitySet(\n      \"Airports\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Airport\"\n    );\n    let airports = airportsService.entities();\n\n    // Fetch airports\n    airports.fetch().subscribe(({ entities }) => {\n      console.log(\"Airports: \", entities);\n    });\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports\n      .fetchAll()\n      .subscribe((airports) => console.log(\"All Airports: \", airports));\n\n    // Fetch airport with key and fetch again from cache\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          // From Cache!\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      )\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Clone airports resource and filter new resource\n    airports\n      .clone()\n      .query((q) =>\n        q.filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) =>\n      q.filter().push({ Location: { City: { Region: \"California\" } } })\n    );\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Store airports resource\n    var json = airports.toJson();\n    // Load airports resource\n    airports = this.odata.fromJson(json) as ODataEntitySetResource;\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) => q.filter().clear());\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let peopleService = this.factory.entitySet(\n      \"People\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Person\"\n    );\n    let people = peopleService.entities();\n\n    // Clone people resource and expand and fetch\n    people\n      .clone()\n      .query((q) =>\n        q.expand({\n          Friends: {\n            expand: { Friends: { select: [\"AddressInfo\"] } },\n          },\n          Trips: { select: [\"Name\", \"Tags\"] },\n        })\n      )\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Clone people resource and filter with expressions\n    people\n      .clone()\n      .query((q) =>\n        q.filter(({ e }) =>\n          e().eq(\"Emails\", \"john@example.com\").or(e().eq(\"UserName\", \"john\"))\n        )\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec(() =>\n        forkJoin({\n          airports: airports.fetch(),\n          people: people.fetch({ withCount: true }),\n        })\n      )\n      .subscribe();\n  }\n}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    132 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.127.0\n        \n            Description : Client side OData typescript library for Angular\n        \n            Keywords : client, odata, odata v4, odata v3, odata v2, typescript, api, @angular, angular\n        \n            Homepage : https://github.com/diegomvh/angular-odata\n        \n            Bugs : https://github.com/diegomvh/angular-odata/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/diegomvh/angular-odata.git\n        \n            Author : Diego van Haaster\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AggregateMethod   (projects/.../syntax.ts)\n                        \n                        \n                            AggregateType   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            ApplyExpressionBuilder   (projects/.../apply.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            ComputeExpressionBuilder   (projects/.../compute.ts)\n                        \n                        \n                            CountExpressionBuilder   (projects/.../count.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandExpressionBuilder   (projects/.../expand.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterConnector   (projects/.../filter.ts)\n                        \n                        \n                            FilterExpressionBuilder   (projects/.../filter.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            GroupByType   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            NestedOrderBy   (projects/.../builder.ts)\n                        \n                        \n                            Normalize   (projects/.../syntax.ts)\n                        \n                        \n                            ODataActionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataFunctionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByExpressionBuilder   (projects/.../orderby.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            SearchConnector   (projects/.../search.ts)\n                        \n                        \n                            SearchExpressionBuilder   (projects/.../search.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectExpressionBuilder   (projects/.../select.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n    \n    \n        \n            \n                \n                    \n                    AggregateMethod\n                \n            \n            \n                \n                        \"sum\" | \"min\" | \"max\" | \"average\" | \"countdistinct\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Normalize\n                \n            \n            \n                \n                        \"all\" | \"right\" | \"left\" | \"none\"\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    AggregateType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                            ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                         | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                            FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupByType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedOrderBy\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                            OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         |  | NestedOrderBy\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                            SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/apply.ts\n    \n    \n        \n            \n                \n                    \n                    ApplyExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n    \n    \n        \n            \n                \n                    \n                    ComputeExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/count.ts\n    \n    \n        \n            \n                \n                    \n                    CountExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n    \n    \n        \n            \n                \n                    \n                    ExpandExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/filter.ts\n    \n    \n        \n            \n                \n                    \n                    FilterConnector\n                \n            \n            \n                \n                        \"and\" | \"or\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataActionOptions\n                \n            \n            \n                \n                            ODataQueryArgumentsOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataFunctionOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n    \n    \n        \n            \n                \n                    \n                    OrderByExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/search.ts\n    \n    \n        \n            \n                \n                    \n                    SearchConnector\n                \n            \n            \n                \n                        \"AND\" | \"OR\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SearchExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/select.ts\n    \n    \n        \n            \n                \n                    \n                    SelectExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
