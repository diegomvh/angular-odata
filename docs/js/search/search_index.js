var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiOptions.html",[0,1.108,1,2.55]],["body/interfaces/ApiOptions.html",[0,1.95,1,3.771,2,2.126,3,0.068,4,0.068,5,0.068,6,0.052,7,2.402,8,0.052,9,0.591,10,0.235,11,4.099,12,4.279,13,4.73,14,3.105,15,4.525,16,3.853,17,4.483,18,4.73,19,2.004,20,4.279,21,4.73,22,4.483,23,3.999,24,4.099,25,1.88,26,0.14,27,0.009,28,3.302,29,3.2,30,3.411,31,0.707,32,3.862,33,4.31,34,0.222,35,2.773,36,1.796,37,0.136,38,2.402,39,2.402,40,2.402,41,3.57,42,2.05,43,3.122,44,3.395,45,1.98,46,2.402,47,3.395,48,0.775,49,0.954,50,1.853,51,2.323,52,1.98,53,3.122,54,3.302,55,2.197,56,2.798,57,1.841,58,3.122,59,3.251,60,1.042,61,3.105,62,0.862,63,2.029,64,2.463,65,2.539,66,3.122,67,2.323,68,2.798,69,3.122,70,2.62,71,2.539,72,2.62,73,2.798,74,3.251,75,3.251,76,1.88,77,0.258,78,3.395,79,3.395,80,3.251,81,2.516,82,2.516,83,2.402,84,1.106,85,0.543,86,2.05,87,2.516,88,2.209,89,2.647,90,2.647,91,2.647,92,3.301,93,2.402,94,0.559,95,2.516,96,2.516,97,4.099,98,0.954,99,3.771,100,2.857,101,3.138,102,4.339,103,2.463,104,2.897,105,2.255,106,1.114,107,3.138,108,2.706,109,2.05,110,3.36,111,2.05,112,1.914,113,0.595,114,2.209,115,2.647,116,2.126,117,2.391,118,0.932,119,2.647,120,0.51,121,1.914,122,2.3,123,2.05,124,2.516,125,0.16,126,1.746,127,2.647,128,2.209,129,2.647,130,1.796,131,2.647,132,2.402,133,2.516,134,3.395,135,4.525,136,1.435,137,2.402,138,2.402,139,2.402,140,1.644,141,1.288,142,2.879,143,2.3,144,3.122,145,2.05,146,3.251,147,2.516,148,3.122,149,2.516,150,3.395,151,2.3,152,3.395,153,3.251,154,2.259,155,2.402,156,2.126,157,3.005,158,2.3,159,1.399,160,0.739,161,3.411,162,1.927,163,1.914,164,1.399,165,1.399,166,2.402,167,2.402,168,1.914,169,2.402,170,2.647,171,1.644,172,2.3,173,2.402,174,0.836,175,1.98,176,1.914,177,1.914,178,1.914,179,2.402,180,2.516,181,0.102,182,2.3,183,2.126,184,1.98,185,0.005,186,0.005]],["title/classes/ArithmeticFunctions.html",[187,0.351,188,1.875]],["body/classes/ArithmeticFunctions.html",[0,1.497,3,0.048,4,0.048,5,0.048,6,0.077,8,0.036,10,0.136,19,0.701,26,0.122,27,0.009,31,0.689,34,0.296,37,0.133,60,1.112,62,1.157,77,0.253,84,0.734,85,0.899,94,0.526,98,1.958,106,1.377,113,0.891,120,0.678,125,0.16,141,1.683,160,1.366,174,1.184,181,0.136,185,0.004,186,0.004,187,0.676,188,2.534,189,0.116,190,1.223,191,0.569,192,4.332,193,4.332,194,4.332,195,1.894,196,0.171,197,2.797,198,0.608,199,1.894,200,2.797,201,1.894,202,2.797,203,0.933,204,0.45,205,0.788,206,2.209,207,1.311,208,1.187,209,2.117,210,2.319,211,2.702,212,2.702,213,2.789,214,1.121,215,1.961,216,1.871,217,1.619,218,1.223,219,0.701,220,0.807,221,1.223,222,1.894,223,1.894,224,1.223,225,1.223,226,1.601,227,1.223,228,1.223,229,1.223,230,2.21,231,2.664,232,1.223,233,1.223,234,1.223,235,1.223,236,1.223,237,1.223,238,1.223,239,1.223,240,1.223,241,1.223,242,1.223,243,3.927,244,1.164,245,1.69,246,1.223,247,1.091,248,1.223,249,1.223,250,1.187,251,0.219,252,2.076,253,2.586,254,1.086,255,0.933,256,1.445,257,2.9,258,3.115,259,1.223,260,1.223,261,1.894,262,1.223,263,2.318,264,2.318,265,1.223,266,2.25,267,1.223,268,1.223,269,1.223,270,1.223,271,1.223,272,1.223,273,1.223,274,1.223,275,1.223,276,1.223,277,1.223,278,1.223,279,1.223,280,1.894,281,1.56,282,1.223,283,1.223,284,2.25,285,1.223,286,2.61,287,1.223,288,1.894,289,1.223,290,1.223,291,2.25,292,1.223,293,1.894,294,1.223,295,1.223,296,1.223,297,1.223,298,1.223,299,1.223,300,1.223,301,2.25,302,1.223,303,1.223,304,1.223,305,1.223,306,1.223,307,1.223,308,1.223,309,1.223,310,1.223,311,1.223,312,1.223,313,1.223,314,1.223,315,1.223,316,1.223,317,1.223,318,1.223,319,1.223,320,1.223,321,1.223,322,1.223,323,1.223,324,1.223,325,1.223,326,1.223,327,1.223,328,1.223,329,1.223,330,1.223,331,1.223,332,1.223,333,2.25,334,1.223,335,1.223,336,1.223,337,1.223,338,2.25,339,1.223,340,1.894,341,1.223,342,1.223,343,1.894,344,1.223,345,1.223,346,1.223,347,1.153,348,2.25,349,1.223,350,1.223,351,1.223,352,2.534,353,2.61,354,2.824,355,3.743,356,3.94,357,1.894,358,1.223,359,1.223,360,0.867,361,1.223,362,1.223,363,2.25,364,1.223,365,1.223,366,1.223,367,1.223,368,1.223,369,1.223,370,1.223,371,1.223,372,1.223,373,1.223,374,1.223,375,1.223,376,1.223,377,1.223,378,1.223,379,1.223,380,1.223,381,1.223,382,1.223,383,1.223,384,1.223,385,1.223,386,2.25,387,1.223,388,1.223,389,1.223,390,1.223,391,1.223,392,1.223,393,1.223,394,1.223,395,1.223,396,1.223,397,1.223,398,1.737,399,0.981,400,1.839,401,1.223,402,1.223,403,1.223,404,2.25,405,1.909,406,1.223,407,1.223,408,1.223,409,2.25,410,1.223,411,1.223,412,1.223,413,1.223,414,2.9,415,1.223,416,1.187,417,2.9,418,1.223,419,1.007,420,2.61,421,1.223,422,0.91]],["title/classes/ArithmeticOperators.html",[187,0.351,386,1.875]],["body/classes/ArithmeticOperators.html",[0,1.474,3,0.047,4,0.047,5,0.047,6,0.092,8,0.035,10,0.173,19,0.681,26,0.125,27,0.009,31,0.699,34,0.29,37,0.132,60,1.107,62,1.033,77,0.25,84,0.72,85,0.897,94,0.517,98,1.947,106,1.337,113,0.878,120,0.666,125,0.163,141,1.667,160,1.353,174,1.183,181,0.173,185,0.004,186,0.004,187,0.673,188,2.21,189,0.112,190,1.188,191,0.557,195,1.188,196,0.218,198,0.775,199,1.188,201,1.188,203,0.907,204,0.437,205,0.766,206,2.185,207,1.282,208,1.154,209,2.093,210,2.295,211,2.692,212,2.692,213,2.779,214,1.09,215,1.94,216,1.852,217,1.598,218,1.188,219,0.681,220,0.784,221,1.188,222,1.852,223,1.852,224,1.188,225,1.188,226,1.566,227,1.188,228,1.188,229,1.188,230,2.181,231,2.629,232,1.188,233,1.188,234,1.188,235,1.188,236,1.188,237,1.188,238,1.188,239,1.188,240,1.188,241,1.188,242,1.188,243,3.945,244,1.139,245,1.652,246,1.188,247,1.06,248,1.188,249,1.188,250,1.154,251,0.215,252,2.06,253,2.564,254,1.062,255,0.907,256,1.414,257,2.866,258,3.083,259,1.188,260,1.188,261,1.852,262,1.188,263,2.276,264,2.276,265,1.188,266,2.21,267,1.188,268,1.188,269,1.188,270,1.188,271,1.188,272,1.188,273,1.188,274,1.188,275,1.188,276,1.188,277,1.188,278,1.188,279,1.188,280,1.852,281,1.526,282,1.188,283,1.188,284,2.21,285,1.188,286,2.57,287,1.188,288,1.852,289,1.188,290,1.188,291,2.21,292,1.188,293,1.852,294,1.188,295,1.188,296,1.188,297,1.188,298,1.188,299,1.188,300,1.188,301,2.21,302,1.188,303,1.188,304,1.188,305,1.188,306,1.188,307,1.188,308,1.188,309,1.188,310,1.188,311,1.188,312,1.188,313,1.188,314,1.188,315,1.188,316,1.188,317,1.188,318,1.188,319,1.188,320,1.188,321,1.188,322,1.188,323,1.188,324,1.188,325,1.188,326,1.188,327,1.188,328,1.188,329,1.188,330,1.188,331,1.188,332,1.188,333,2.21,334,1.188,335,1.188,336,1.188,337,1.188,338,2.21,339,1.188,340,1.852,341,1.188,342,1.188,343,1.852,344,1.188,345,1.188,346,1.188,347,1.121,348,2.21,349,1.188,350,1.188,351,1.188,352,3.252,353,2.57,354,2.787,355,3.812,356,3.984,357,1.852,358,1.188,359,1.188,360,0.842,361,1.188,362,1.188,363,2.21,364,1.188,365,1.188,366,1.188,367,1.188,368,1.188,369,1.188,370,1.188,371,1.188,372,1.188,373,1.188,374,1.188,375,1.188,376,1.188,377,1.188,378,1.188,379,1.188,380,1.188,381,1.188,382,1.188,383,1.188,384,1.188,385,1.188,386,2.496,387,1.852,388,1.188,389,1.852,390,1.188,391,1.852,392,1.188,393,1.852,394,1.188,395,1.852,396,1.188,397,1.852,398,1.699,399,0.954,400,1.798,401,1.188,402,1.188,403,1.188,404,2.21,405,1.875,406,1.188,407,1.188,408,1.188,409,2.21,410,1.188,411,1.188,412,1.188,413,1.188,414,2.866,415,1.188,416,1.154,417,2.866,418,1.188,419,0.979,420,2.57,421,1.188,422,0.885,423,3.17,424,4.237,425,4.237,426,4.237,427,4.237,428,4.237,429,2.718,430,0.934,431,2.718,432,2.718,433,2.718,434,2.718,435,2.718]],["title/interfaces/Cache.html",[0,1.108,41,1.931]],["body/interfaces/Cache.html",[0,1.986,1,3.384,2,2.251,3,0.072,4,0.072,5,0.072,6,0.087,7,2.543,8,0.055,9,0.382,10,0.15,11,2.436,12,2.543,13,3.702,14,1.845,15,3.735,16,3.016,17,2.664,18,3.702,19,1.826,20,2.543,21,3.702,22,2.664,23,3.465,24,2.436,26,0.137,27,0.009,28,2.727,29,2.643,30,2.816,31,0.703,32,3.616,33,4.036,34,0.235,35,2.86,36,1.902,37,0.137,38,2.543,39,2.543,40,2.543,41,3.677,42,2.17,43,3.25,44,3.534,45,2.096,46,2.543,47,3.534,48,0.821,49,1.01,50,1.962,51,2.418,52,2.096,53,3.25,54,3.386,55,2.287,56,2.912,57,1.898,58,3.25,59,3.384,60,1.053,61,3.183,62,0.897,63,2.112,64,2.564,65,2.643,66,3.25,67,2.418,68,2.912,69,3.25,70,2.727,71,2.643,72,2.727,73,2.912,74,3.384,75,3.384,76,1.956,77,0.26,78,3.534,79,3.534,80,3.384,81,2.664,82,2.664,83,2.543,84,1.124,85,0.565,86,2.17,87,2.664,88,2.339,89,2.803,90,2.803,91,2.803,92,3.362,93,2.543,94,0.582,95,2.664,96,2.664,97,4.203,98,1.01,99,3.889,100,2.946,101,3.236,102,4.475,103,2.564,104,3.016,105,2.312,106,1.319,107,3.236,108,2.816,109,2.17,110,3.465,111,2.17,112,2.027,113,0.63,114,2.339,115,3.894,116,3.594,117,3.362,118,1.372,119,3.894,120,0.75,121,2.027,122,2.436,123,2.17,124,2.664,125,0.165,126,1.817,127,2.803,128,2.339,129,2.803,130,1.902,131,2.803,132,2.543,133,2.664,134,3.534,135,4.591,136,1.52,137,2.543,138,2.543,139,2.543,140,1.74,141,1.34,142,2.925,143,2.436,144,3.25,145,2.17,146,3.384,147,2.664,148,3.25,149,2.664,150,3.534,151,2.436,152,3.534,153,3.384,154,2.351,155,2.543,156,2.251,157,3.128,158,2.436,159,1.481,160,1.25,161,3.497,162,2.006,163,2.027,164,1.481,165,1.481,166,2.543,167,2.543,168,2.027,169,2.543,170,2.803,171,1.74,172,2.436,173,2.543,174,0.862,175,2.096,176,2.027,177,2.027,178,2.027,179,2.543,180,2.664,181,0.196,182,2.436,183,2.251,184,2.096,185,0.006,186,0.006,191,0.77,196,0.189,198,0.673,436,3.702,437,4.22,438,4.22]],["title/classes/CollectionFunctions.html",[187,0.351,284,1.875]],["body/classes/CollectionFunctions.html",[0,1.506,3,0.048,4,0.048,5,0.048,6,0.069,8,0.037,10,0.112,19,0.709,26,0.12,27,0.009,31,0.69,34,0.298,37,0.133,60,1.109,62,1.131,77,0.251,84,0.739,85,0.899,94,0.53,98,1.963,106,1.37,113,0.896,120,0.683,125,0.159,141,1.689,160,1.371,174,1.185,181,0.112,185,0.004,186,0.004,187,0.677,188,2.266,189,0.117,190,1.236,191,0.574,195,1.236,196,0.141,198,0.501,199,1.236,201,1.236,203,0.943,204,0.454,205,0.796,206,2.217,207,1.322,208,1.2,209,2.127,210,2.328,211,2.706,212,2.706,213,2.792,214,1.134,215,1.969,216,1.879,217,1.627,218,1.236,219,0.709,220,0.815,221,1.236,222,1.91,223,1.91,224,1.236,225,1.236,226,1.615,227,1.236,228,1.236,229,1.236,230,2.221,231,2.677,232,1.236,233,1.236,234,1.236,235,1.236,236,1.236,237,1.236,238,1.236,239,1.236,240,1.236,241,1.236,242,1.236,243,3.929,244,1.174,245,1.704,246,1.236,247,1.103,248,1.236,249,1.236,250,1.2,251,0.221,252,2.082,253,2.595,254,1.095,255,0.943,256,1.458,257,2.913,258,3.128,259,1.236,260,1.236,261,1.91,262,1.236,263,2.334,264,2.334,265,1.236,266,2.266,267,1.236,268,1.236,269,1.236,270,1.236,271,1.236,272,1.236,273,1.236,274,1.236,275,1.236,276,1.236,277,1.236,278,1.236,279,1.236,280,1.91,281,1.573,282,1.236,283,1.236,284,2.549,285,1.91,286,3.231,287,1.236,288,2.625,289,1.91,290,1.236,291,2.266,292,1.236,293,1.91,294,1.236,295,1.236,296,1.236,297,1.236,298,1.236,299,1.236,300,1.236,301,2.266,302,1.236,303,1.236,304,1.236,305,1.236,306,1.236,307,1.236,308,1.236,309,1.236,310,1.236,311,1.236,312,1.236,313,1.236,314,1.236,315,1.236,316,1.236,317,1.236,318,1.236,319,1.236,320,1.236,321,1.236,322,1.236,323,1.236,324,1.236,325,1.236,326,1.236,327,1.236,328,1.236,329,1.236,330,1.236,331,1.236,332,1.236,333,2.266,334,1.236,335,1.236,336,1.236,337,1.236,338,2.266,339,1.236,340,1.91,341,1.236,342,1.236,343,1.91,344,1.236,345,1.236,346,1.236,347,1.166,348,2.266,349,1.236,350,1.236,351,1.236,352,2.549,353,2.625,354,2.838,355,3.749,356,3.943,357,1.91,358,1.236,359,1.236,360,0.876,361,1.236,362,1.236,363,2.266,364,1.236,365,1.236,366,1.236,367,1.236,368,1.236,369,1.236,370,1.236,371,1.236,372,1.236,373,1.236,374,1.236,375,1.236,376,1.236,377,1.236,378,1.236,379,1.236,380,1.236,381,1.236,382,1.236,383,1.236,384,1.236,385,1.236,386,2.266,387,1.236,388,1.236,389,1.236,390,1.236,391,1.236,392,1.236,393,1.236,394,1.236,395,1.236,396,1.236,397,1.236,398,1.752,399,0.992,400,1.854,401,1.236,402,1.236,403,1.236,404,2.266,405,1.922,406,1.236,407,1.236,408,1.236,409,2.266,410,1.236,411,1.236,412,1.236,413,1.236,414,2.913,415,1.236,416,1.2,417,2.913,418,1.236,419,1.018,420,2.625,421,1.236,422,0.92,439,4.368,440,4.368,441,2.827,442,2.827]],["title/classes/ComputeExpression.html",[187,0.351,443,3.306]],["body/classes/ComputeExpression.html",[3,0.087,4,0.087,5,0.087,6,0.109,8,0.086,9,0.603,10,0.209,25,1.823,26,0.137,27,0.009,31,0.39,34,0.414,37,0.1,49,1.776,60,0.618,62,1.02,66,4.112,77,0.249,85,0.786,94,0.661,98,1.883,106,1.234,113,0.761,117,3.62,118,1.559,120,0.949,125,0.168,126,1.581,154,3.154,171,2.103,174,0.852,181,0.219,185,0.006,186,0.006,187,0.405,189,0.211,191,0.875,196,0.287,198,0.993,206,2.065,207,2.245,209,2.643,210,2.415,211,2.3,212,2.3,213,2.356,215,2.042,216,2.066,220,2.14,251,0.276,252,1.791,281,2.672,360,1.581,414,3.149,416,2.828,417,3.149,419,2.399,422,1.66,430,0.706,443,6.867,444,4.503,445,4.343,446,4.386,447,4.206,448,4.206,449,4.2,450,2.623,451,6.662,452,2.595,453,3.387,454,6.662,455,4.919,456,5.1,457,5.1,458,4.503,459,5.1,460,4.198,461,5.1,462,3.582,463,5.1,464,2.299,465,5.1,466,3.387,467,3.387,468,3.582,469,5.369,470,4.11,471,2.45,472,7.42,473,3.074,474,5.1,475,2.827,476,4.503,477,5.1,478,2.72,479,2.827,480,5.1,481,3.074,482,4.206,483,3.554,484,5.1]],["title/classes/ConditionalFunctions.html",[187,0.351,348,1.875]],["body/classes/ConditionalFunctions.html",[0,1.511,3,0.049,4,0.049,5,0.049,6,0.057,8,0.037,10,0.073,19,0.713,26,0.119,27,0.009,31,0.69,34,0.299,37,0.133,60,1.112,62,1.097,77,0.252,84,0.742,85,0.899,94,0.532,98,1.966,106,1.36,113,0.9,120,0.686,125,0.158,141,1.693,160,1.374,174,1.186,181,0.073,185,0.004,186,0.004,187,0.678,188,2.275,189,0.118,190,1.244,191,0.577,195,1.244,196,0.092,198,0.327,199,1.244,201,1.244,203,0.95,204,0.457,205,0.802,206,2.223,207,1.328,208,1.208,209,2.133,210,2.334,211,2.709,212,2.709,213,2.795,214,1.141,215,1.973,216,1.883,217,1.632,218,1.244,219,0.713,220,0.821,221,1.244,222,1.92,223,1.92,224,1.244,225,1.244,226,1.623,227,1.244,228,1.244,229,1.244,230,2.228,231,2.685,232,1.244,233,1.244,234,1.244,235,1.244,236,1.244,237,1.244,238,1.244,239,1.244,240,1.244,241,1.244,242,1.244,243,3.931,244,1.18,245,1.713,246,1.244,247,1.11,248,1.244,249,1.244,250,1.208,251,0.222,252,2.086,253,2.6,254,1.101,255,0.95,256,1.465,257,2.921,258,3.135,259,1.244,260,1.244,261,1.92,262,1.244,263,2.344,264,2.344,265,1.244,266,2.275,267,1.244,268,1.244,269,1.244,270,1.244,271,1.244,272,1.244,273,1.244,274,1.244,275,1.244,276,1.244,277,1.244,278,1.244,279,1.244,280,1.92,281,1.581,282,1.244,283,1.244,284,2.275,285,1.244,286,2.635,287,1.244,288,1.92,289,1.244,290,1.244,291,2.275,292,1.244,293,1.92,294,1.244,295,1.244,296,1.244,297,1.244,298,1.244,299,1.244,300,1.244,301,2.275,302,1.244,303,1.244,304,1.244,305,1.244,306,1.244,307,1.244,308,1.244,309,1.244,310,1.244,311,1.244,312,1.244,313,1.244,314,1.244,315,1.244,316,1.244,317,1.244,318,1.244,319,1.244,320,1.244,321,1.244,322,1.244,323,1.244,324,1.244,325,1.244,326,1.244,327,1.244,328,1.244,329,1.244,330,1.244,331,1.244,332,1.244,333,2.275,334,1.244,335,1.244,336,1.244,337,1.244,338,2.275,339,1.244,340,1.92,341,1.244,342,1.244,343,1.92,344,1.244,345,1.244,346,1.244,347,1.174,348,2.558,349,1.92,350,1.244,351,1.92,352,2.558,353,2.635,354,2.847,355,3.753,356,3.945,357,1.92,358,1.244,359,1.244,360,0.882,361,1.244,362,1.244,363,2.275,364,1.244,365,1.244,366,1.244,367,1.244,368,1.244,369,1.244,370,1.244,371,1.244,372,1.244,373,1.244,374,1.244,375,1.244,376,1.244,377,1.244,378,1.244,379,1.244,380,1.244,381,1.244,382,1.244,383,1.244,384,1.244,385,1.244,386,2.275,387,1.244,388,1.244,389,1.244,390,1.244,391,1.244,392,1.244,393,1.244,394,1.244,395,1.244,396,1.244,397,1.244,398,1.76,399,0.999,400,1.864,401,1.244,402,1.244,403,1.244,404,2.275,405,1.93,406,1.244,407,1.244,408,1.244,409,2.275,410,1.244,411,1.244,412,1.244,413,1.244,414,2.921,415,1.244,416,1.208,417,2.921,418,1.244,419,1.025,420,2.635,421,1.244,422,0.926,485,3.538,486,2.846]],["title/classes/CountExpression.html",[187,0.351,487,3.56]],["body/classes/CountExpression.html",[3,0.078,4,0.078,5,0.078,6,0.102,8,0.059,9,0.559,10,0.202,19,1.142,25,1.756,26,0.135,27,0.009,28,2.873,31,0.473,34,0.452,37,0.105,49,1.882,60,0.953,61,3.624,62,0.945,67,2.548,77,0.235,85,0.847,94,0.613,98,2.019,106,1.233,113,0.922,117,3.732,118,1.445,120,1.006,125,0.156,126,1.411,154,3.015,160,1.458,171,1.878,174,0.962,181,0.213,185,0.006,186,0.006,187,0.491,189,0.188,191,0.812,196,0.279,198,0.968,203,1.519,204,0.993,205,1.283,206,2.173,207,2.275,209,2.569,210,2.558,211,2.569,212,2.569,213,2.633,215,2.069,216,2.064,217,1.142,220,2.022,230,1.558,251,0.29,252,1.885,253,2.399,281,2.525,360,1.915,422,1.482,430,0.855,445,4.246,447,3.9,448,3.9,449,4.051,450,2.342,452,2.512,453,3.024,455,2.744,460,4.168,464,2.052,466,3.024,467,3.024,468,3.198,471,2.187,473,3.723,475,2.524,478,2.429,479,2.524,481,2.744,482,2.875,483,4.422,487,7.333,488,3.67,489,4.554,490,3.723,491,4.554,492,4.554,493,4.554,494,4.554,495,4.554,496,3.408,497,4.554,498,4.554,499,4.656,500,4.103,501,6.334,502,3.024,503,4.103,504,3.024,505,3.198,506,3.408,507,2.744,508,3.408,509,3.198,510,3.198,511,3.723,512,3.024,513,3.408,514,4.021,515,3.198,516,3.408,517,3.408,518,3.408,519,3.408,520,3.408,521,2.187,522,3.408,523,4.021,524,3.024,525,2.875,526,3.408,527,4.623,528,4.979,529,2.262,530,4.103,531,2.524,532,2.628,533,4.021,534,4.021]],["title/classes/CountField.html",[187,0.351,501,3.56]],["body/classes/CountField.html",[3,0.082,4,0.082,5,0.082,6,0.111,8,0.062,10,0.196,19,1.194,25,1.711,26,0.132,27,0.009,28,3.561,31,0.487,34,0.458,37,0.108,49,1.91,60,0.929,61,3.489,62,0.729,67,3.158,77,0.237,85,0.853,94,0.473,98,2.007,106,1.201,113,0.95,117,3.758,118,1.114,120,1.073,125,0.158,154,2.876,160,1.481,171,1.964,174,0.98,181,0.205,185,0.006,186,0.006,187,0.506,189,0.197,191,0.836,196,0.271,198,0.916,203,1.589,204,1.023,205,1.341,206,2.223,207,2.317,209,2.473,210,2.597,211,2.599,212,2.599,213,2.663,215,2.107,216,2.096,217,1.596,220,1.374,230,1.629,251,0.297,252,1.28,253,2.731,360,1.973,422,1.55,430,0.659,445,3.162,449,3.678,460,3.938,464,2.146,471,2.287,473,3.837,475,2.639,478,2.54,479,2.639,481,2.87,482,4.834,483,4.084,487,7.135,488,3.837,490,2.87,499,5.085,500,4.228,501,6.758,502,3.162,503,4.228,504,3.162,505,3.344,506,3.563,507,2.87,508,3.563,509,3.344,510,3.344,511,3.837,512,3.162,513,3.563,514,4.205,515,3.344,516,3.563,517,3.563,518,3.563,519,3.563,520,3.563,521,2.287,522,3.563,523,4.205,524,4.763,525,3.006,526,4.764,527,4.764,528,5.131,529,2.365,530,4.228,531,2.639,532,2.748,533,4.205,534,4.205,535,2.293,536,3.837,537,4.762,538,4.762,539,3.837,540,4.205,541,4.762,542,4.762,543,4.762,544,4.762,545,4.762]],["title/classes/CsdlAction.html",[187,0.351,546,2.55]],["body/classes/CsdlAction.html",[3,0.097,4,0.097,5,0.097,6,0.113,8,0.074,9,0.646,10,0.229,26,0.133,27,0.009,31,0.682,37,0.13,48,1.836,55,2.785,62,1.338,63,2.047,77,0.259,84,1.192,125,0.172,159,2.506,162,2.443,164,2.506,165,2.506,178,4.137,181,0.224,185,0.007,186,0.007,187,0.684,189,0.235,196,0.278,251,0.362,430,1.133,546,4.122,547,2.645,548,3.775,549,5.438,550,5.438,551,1.945,552,5.191,553,5.191,554,5.684,555,5.684,556,5.684,557,5.684,558,5.684,559,5.684,560,3.28,561,3.588,562,3.28,563,3.775,564,3.425,565,3.28,566,3.122]],["title/classes/CsdlActionImport.html",[187,0.351,565,2.55]],["body/classes/CsdlActionImport.html",[3,0.101,4,0.101,5,0.101,6,0.111,8,0.077,9,0.661,10,0.204,26,0.131,27,0.009,31,0.665,37,0.131,48,1.836,55,3.391,62,1.306,63,3.072,77,0.26,84,1.203,125,0.173,159,2.564,162,2.5,164,2.564,165,2.564,178,3.509,181,0.204,185,0.007,186,0.007,187,0.69,189,0.244,196,0.268,251,0.365,430,0.816,546,3.403,547,2.581,548,3.916,549,4.613,550,4.613,551,2.017,552,4.785,553,4.785,560,3.403,561,3.723,562,3.403,563,3.916,564,3.553,565,4.217,566,3.195,567,5.897,568,5.897,569,5.897,570,5.897]],["title/classes/CsdlAnnotable.html",[187,0.351,571,2.448]],["body/classes/CsdlAnnotable.html",[3,0.111,4,0.111,5,0.111,6,0.107,8,0.084,9,0.699,10,0.212,26,0.124,27,0.009,31,0.495,37,0.129,48,1.809,77,0.255,84,1.144,94,0.642,125,0.149,136,2.33,159,2.271,162,2.214,164,2.271,165,2.271,181,0.166,185,0.008,186,0.008,187,0.68,189,0.268,196,0.249,219,1.938,226,2.392,251,0.342,430,0.895,547,2.502,566,2.829,571,4.583,572,4.841,573,5.053,574,6.47,575,4.74,576,6.47,577,6.47,578,4.084,579,4.659,580,3.734,581,4.084,582,4.544,583,3.586,584,4.544]],["title/classes/CsdlAnnotation.html",[187,0.351,575,2.356]],["body/classes/CsdlAnnotation.html",[3,0.109,4,0.109,5,0.109,6,0.111,8,0.083,9,0.693,10,0.211,26,0.128,27,0.009,31,0.488,37,0.128,48,1.813,77,0.259,84,1.137,94,0.633,125,0.147,136,3.07,159,2.237,162,2.181,164,2.237,165,2.237,181,0.163,185,0.007,186,0.007,187,0.677,189,0.264,196,0.265,219,1.921,226,2.356,251,0.34,430,0.882,547,2.579,566,2.787,571,4.247,572,4.77,573,4.422,575,4.546,578,4.024,579,5.337,580,3.679,581,4.024,582,4.477,583,3.533,584,4.477,585,6.374,586,6.374,587,7.662]],["title/classes/CsdlAnnotations.html",[187,0.351,578,2.789]],["body/classes/CsdlAnnotations.html",[3,0.107,4,0.107,5,0.107,6,0.11,8,0.081,9,0.685,10,0.223,26,0.131,27,0.009,31,0.479,37,0.127,48,1.816,77,0.259,84,1.128,94,0.752,125,0.146,136,2.253,159,2.196,162,2.141,164,2.196,165,2.196,181,0.16,185,0.007,186,0.007,187,0.673,189,0.259,196,0.273,219,1.9,226,3.131,251,0.337,430,0.866,452,1.939,547,2.563,566,2.735,571,4.695,572,4.682,573,5.089,575,4.703,578,4.783,579,5.314,580,3.611,581,3.95,582,4.394,583,3.467,584,4.394,588,6.256,589,6.256,590,6.256,591,6.256,592,4.682]],["title/classes/CsdlComplexType.html",[187,0.351,593,2.662]],["body/classes/CsdlComplexType.html",[3,0.098,4,0.098,5,0.098,6,0.093,8,0.074,9,0.818,10,0.232,26,0.132,27,0.009,31,0.698,34,0.319,37,0.127,48,1.809,57,1.611,77,0.255,94,0.777,125,0.17,141,1.307,160,1.061,181,0.147,185,0.007,186,0.007,187,0.672,189,0.237,196,0.282,219,1.797,251,0.34,430,1.17,452,2.674,547,2.169,551,1.957,593,4.32,594,3.043,595,2.84,596,5.972,597,3.301,598,5.93,599,6.272,600,5.93,601,4.502,602,4.502,603,5.719,604,5.05,605,5.05,606,5.05,607,5.05,608,5.05,609,5.05,610,2.84,611,3.05,612,3.973,613,3.446,614,4.526,615,3.798,616,4.017,617,4.526]],["title/classes/CsdlEntityContainer.html",[187,0.351,618,3.306]],["body/classes/CsdlEntityContainer.html",[3,0.104,4,0.104,5,0.104,6,0.116,8,0.079,9,0.674,10,0.234,26,0.133,27,0.009,34,0.449,37,0.092,48,1.809,56,3.022,62,0.931,63,2.192,77,0.249,125,0.166,151,4.968,181,0.156,185,0.007,186,0.007,187,0.483,189,0.252,196,0.286,251,0.308,430,1.191,547,2.71,551,2.082,562,4.968,565,4.968,610,3.999,618,5.575,619,4.334,620,5.373,621,8.608,622,8.608,623,8.608,624,8.608,625,6.442,626,6.442,627,6.085,628,6.085,629,6.085,630,6.085,631,6.085,632,5.373,633,6.085,634,3.667]],["title/classes/CsdlEntitySet.html",[187,0.351,625,3.306]],["body/classes/CsdlEntitySet.html",[3,0.11,4,0.11,5,0.11,6,0.115,8,0.084,9,0.698,10,0.224,26,0.132,27,0.009,31,0.655,34,0.36,37,0.097,48,1.794,57,1.817,77,0.252,125,0.168,163,3.098,181,0.165,182,5.049,185,0.008,186,0.008,187,0.512,189,0.267,196,0.282,251,0.319,430,1.068,547,2.687,551,2.207,564,5.272,610,3.204,619,4.265,625,5.775,635,5.198,636,7.724,637,6.144,638,6.45,639,5.695,640,6.45,641,6.45,642,5.695,643,4.283]],["title/classes/CsdlEntityType.html",[187,0.351,613,2.662]],["body/classes/CsdlEntityType.html",[3,0.095,4,0.095,5,0.095,6,0.105,8,0.072,9,0.814,10,0.235,26,0.134,27,0.009,31,0.702,34,0.309,37,0.126,48,1.814,57,1.559,77,0.254,94,0.766,125,0.169,141,1.265,160,1.553,181,0.142,185,0.007,186,0.007,187,0.665,189,0.229,196,0.286,219,1.76,251,0.336,430,1.202,452,2.651,547,2.454,551,1.893,593,3.334,594,3.443,595,2.748,596,5.94,597,3.282,598,5.896,599,6.235,600,5.896,601,4.469,602,4.469,604,4.885,605,4.885,606,4.885,607,4.885,608,4.885,609,4.885,610,2.748,611,2.951,612,3.891,613,4.231,614,5.285,615,5.559,616,3.886,617,4.432,644,4.885,645,4.885,646,4.885]],["title/classes/CsdlEnumMember.html",[187,0.351,647,3.306]],["body/classes/CsdlEnumMember.html",[3,0.114,4,0.114,5,0.114,6,0.112,8,0.086,9,0.711,10,0.215,26,0.126,27,0.009,31,0.509,37,0.118,48,1.78,51,3.566,60,1.07,77,0.249,84,1.196,125,0.172,156,3.55,181,0.171,185,0.008,186,0.008,187,0.624,189,0.275,196,0.27,219,1.669,251,0.325,430,0.921,547,2.616,551,2.277,595,3.306,647,6.262,648,5.877,649,6.943,650,4.675,651,5.364,652,5.364]],["title/classes/CsdlEnumType.html",[187,0.351,650,3.103]],["body/classes/CsdlEnumType.html",[3,0.11,4,0.11,5,0.11,6,0.115,8,0.083,9,0.697,10,0.224,26,0.131,27,0.009,31,0.654,37,0.116,48,1.799,51,3.659,60,0.779,77,0.253,84,0.889,125,0.171,156,4.661,181,0.165,185,0.007,186,0.007,187,0.611,189,0.266,196,0.282,219,1.611,251,0.319,430,1.065,547,2.684,551,2.198,595,3.191,647,6.539,650,5.407,651,7.042,652,7.042,653,6.425,654,5.673,655,6.425,656,6.425,657,6.425]],["title/classes/CsdlFunction.html",[187,0.351,560,2.55]],["body/classes/CsdlFunction.html",[3,0.096,4,0.096,5,0.096,6,0.114,8,0.073,9,0.64,10,0.228,26,0.134,27,0.009,31,0.693,37,0.129,48,1.837,55,2.761,62,1.349,63,2.018,77,0.259,84,1.188,125,0.171,159,2.484,162,2.422,164,2.484,165,2.484,178,4.122,181,0.224,185,0.007,186,0.007,187,0.682,189,0.232,196,0.281,251,0.361,430,1.128,546,3.235,547,2.668,548,3.722,549,5.418,550,5.418,551,1.918,552,5.172,553,5.172,560,4.085,561,5.306,562,3.235,563,3.722,564,3.378,565,3.235,566,3.095,658,5.605,659,5.605,660,5.605,661,5.605,662,5.605,663,5.605,664,5.605]],["title/classes/CsdlFunctionImport.html",[187,0.351,562,2.55]],["body/classes/CsdlFunctionImport.html",[3,0.099,4,0.099,5,0.099,6,0.112,8,0.075,9,0.654,10,0.218,26,0.132,27,0.009,31,0.685,37,0.13,48,1.836,55,3.376,62,1.325,63,2.087,77,0.26,84,1.198,125,0.172,159,2.537,162,2.473,164,2.537,165,2.537,178,3.472,181,0.202,185,0.007,186,0.007,187,0.687,189,0.24,196,0.274,251,0.363,430,1,546,3.345,547,2.619,548,3.849,549,4.564,550,4.564,551,1.983,552,4.748,553,4.748,560,3.345,561,3.659,562,4.172,563,5.637,564,5.115,565,3.345,566,3.161,665,5.796,666,5.796,667,5.796,668,5.796,669,5.796]],["title/classes/CsdlInclude.html",[187,0.351,670,3.103]],["body/classes/CsdlInclude.html",[3,0.111,4,0.111,5,0.111,6,0.111,8,0.084,9,0.702,10,0.213,26,0.125,27,0.009,34,0.363,37,0.125,48,1.79,77,0.257,88,3.604,94,0.646,125,0.125,140,3.539,141,2.004,181,0.167,185,0.008,186,0.008,187,0.658,189,0.269,196,0.267,219,1.63,251,0.343,430,0.9,547,2.596,571,4.298,573,3.753,575,4.136,579,3.918,580,3.753,610,3.229,670,5.82,671,5.24,672,5.741,673,6.502,674,7.754,675,2.76,676,4.567,677,4.866,678,5.24,679,5.446,680,4.866,681,4.866]],["title/classes/CsdlIncludeAnnotations.html",[187,0.351,679,3.103]],["body/classes/CsdlIncludeAnnotations.html",[3,0.109,4,0.109,5,0.109,6,0.113,8,0.083,9,0.694,10,0.224,26,0.128,27,0.009,34,0.356,37,0.124,48,1.798,77,0.259,88,3.539,94,0.634,125,0.123,140,2.634,141,1.46,181,0.164,185,0.007,186,0.007,187,0.653,189,0.264,196,0.275,219,1.601,251,0.34,430,1.061,547,2.64,571,4.252,573,3.686,575,4.092,579,5.258,580,3.686,610,3.172,670,5.388,671,5.147,675,2.711,676,4.486,677,4.779,678,5.147,679,5.775,680,6.383,681,6.529,682,6.386,683,6.386,684,6.386,685,6.386,686,6.386]],["title/classes/CsdlKey.html",[187,0.351,614,2.789]],["body/classes/CsdlKey.html",[3,0.107,4,0.107,5,0.107,6,0.106,8,0.081,9,0.806,10,0.16,26,0.114,27,0.009,31,0.682,34,0.347,37,0.13,48,1.779,57,1.752,77,0.25,94,0.75,125,0.167,141,1.422,160,1.154,181,0.16,185,0.007,186,0.007,187,0.688,189,0.257,196,0.244,219,1.893,251,0.35,547,2.46,593,3.749,594,3.451,595,3.089,596,5.399,597,3.202,598,5.752,599,6.083,600,5.752,601,4.348,602,4.348,610,3.089,611,3.318,612,4.185,613,3.749,614,5.132,615,4.131,616,5.938,617,5.468,687,6.22,688,6.22,689,6.22]],["title/classes/CsdlNavigationProperty.html",[187,0.351,602,2.272]],["body/classes/CsdlNavigationProperty.html",[3,0.097,4,0.097,5,0.097,6,0.112,8,0.074,9,0.645,10,0.232,26,0.139,27,0.009,31,0.691,37,0.127,48,1.822,57,1.598,63,2.043,77,0.259,84,1.08,94,0.775,125,0.168,159,1.991,162,3.051,164,1.991,165,1.991,168,2.725,181,0.146,185,0.007,186,0.007,187,0.67,189,0.235,196,0.285,219,1.788,251,0.339,430,1.167,452,2.418,547,2.605,551,1.941,566,2.481,583,3.145,597,2.097,601,2.918,602,3.668,611,4.592,612,3.953,690,3.985,691,5.803,692,5.602,693,5.602,694,5.602,695,5.924,696,5.325,697,5.325,698,5.674,699,5.674,700,5.674,701,5.674,702,5.674,703,5.01,704,5.01,705,5.01,706,3.582]],["title/classes/CsdlNavigationPropertyBinding.html",[187,0.351,637,3.103]],["body/classes/CsdlNavigationPropertyBinding.html",[3,0.116,4,0.116,5,0.116,6,0.113,8,0.088,9,0.72,10,0.174,26,0.127,27,0.009,29,3.922,37,0.102,48,1.724,57,2.451,77,0.254,125,0.131,163,4.179,181,0.174,185,0.008,186,0.008,187,0.539,189,0.281,196,0.272,219,1.702,226,3.278,251,0.281,547,2.633,637,5.587,707,6.789,708,6.789,709,6.789,710,7.955]],["title/classes/CsdlOnDelete.html",[187,0.351,697,2.789]],["body/classes/CsdlOnDelete.html",[3,0.108,4,0.108,5,0.108,6,0.106,8,0.082,9,0.687,10,0.161,26,0.134,27,0.009,31,0.664,37,0.131,48,1.807,57,1.769,63,3.054,77,0.258,84,1.13,94,0.754,125,0.163,159,2.204,162,2.971,164,2.204,165,2.204,168,3.017,181,0.161,185,0.007,186,0.007,187,0.69,189,0.26,196,0.245,219,1.904,251,0.351,547,2.47,566,2.746,583,3.481,597,2.322,601,3.23,602,3.23,611,4.354,612,4.209,690,4.411,691,5.422,692,4.171,693,4.171,694,4.171,695,4.411,696,4.795,697,5.154,706,3.965,711,6.281,712,6.281,713,6.281]],["title/classes/CsdlParameter.html",[187,0.351,553,2.662]],["body/classes/CsdlParameter.html",[3,0.094,4,0.094,5,0.094,6,0.115,8,0.072,9,0.634,10,0.231,26,0.137,27,0.009,31,0.679,37,0.129,48,1.837,55,2.732,62,1.358,63,1.986,77,0.259,84,1.266,125,0.171,159,3,162,2.924,164,3,165,3,178,3.365,181,0.198,185,0.007,186,0.007,187,0.679,189,0.228,196,0.284,251,0.359,430,1.157,546,3.182,547,2.684,548,3.662,549,4.423,550,4.423,551,1.887,552,4.64,553,4.882,560,3.182,561,3.481,562,3.182,563,3.662,564,3.323,565,3.182,566,3.737,714,5.514,715,5.514,716,5.514,717,5.514,718,5.514,719,5.514,720,5.514,721,5.514]],["title/classes/CsdlProperty.html",[187,0.351,601,2.272]],["body/classes/CsdlProperty.html",[3,0.094,4,0.094,5,0.094,6,0.114,8,0.071,9,0.632,10,0.235,26,0.139,27,0.009,31,0.688,37,0.126,48,1.824,57,1.547,63,1.977,77,0.259,84,1.251,94,0.763,125,0.167,159,2.931,162,3.033,164,2.931,165,2.931,168,2.637,181,0.141,185,0.007,186,0.007,187,0.663,189,0.227,196,0.288,219,1.752,251,0.335,430,1.2,452,2.382,547,2.657,551,1.879,566,3.652,583,4.629,597,2.03,601,3.593,602,2.824,611,4.684,612,3.872,690,3.856,691,5.761,692,3.646,693,3.646,694,3.646,695,3.856,696,4.411,697,4.411,703,4.848,704,4.848,705,4.848,706,5.273,722,5.49,723,5.49,724,5.49,725,5.49,726,5.49,727,5.49,728,5.49]],["title/classes/CsdlPropertyRef.html",[187,0.351,617,2.789]],["body/classes/CsdlPropertyRef.html",[3,0.105,4,0.105,5,0.105,6,0.109,8,0.079,9,0.803,10,0.207,26,0.121,27,0.009,31,0.679,34,0.341,37,0.13,48,1.788,57,1.721,77,0.257,94,0.741,125,0.172,141,1.97,160,1.133,181,0.157,185,0.007,186,0.007,187,0.684,189,0.253,196,0.26,219,1.872,251,0.348,430,0.845,547,2.542,551,2.09,593,3.681,594,3.566,595,3.034,596,5.356,597,3.186,598,5.723,599,6.052,600,5.723,601,4.321,602,4.321,610,3.034,611,3.258,612,4.139,613,3.681,614,4.714,615,4.057,616,4.29,617,5.092,729,5.394,730,6.593]],["title/classes/CsdlReference.html",[187,0.351,676,3.103]],["body/classes/CsdlReference.html",[3,0.107,4,0.107,5,0.107,6,0.113,8,0.081,9,0.686,10,0.229,26,0.131,27,0.009,34,0.349,37,0.123,48,1.803,77,0.252,88,4.809,94,0.753,125,0.12,140,2.583,141,1.432,181,0.161,185,0.007,186,0.007,187,0.648,189,0.259,196,0.28,219,1.57,251,0.337,430,1.128,452,1.941,547,2.625,571,4.696,573,5.008,575,4.628,579,3.774,580,3.614,592,4.686,610,3.11,670,6.095,671,5.047,675,2.658,676,5.325,677,6.341,678,6.993,679,6.095,680,4.686,681,4.686,731,6.263,732,6.263,733,6.263,734,6.263,735,6.263]],["title/classes/CsdlReferentialConstraint.html",[187,0.351,696,2.789]],["body/classes/CsdlReferentialConstraint.html",[3,0.106,4,0.106,5,0.106,6,0.11,8,0.08,9,0.681,10,0.159,26,0.135,27,0.009,31,0.662,37,0.13,48,1.812,57,2.377,63,2.227,77,0.259,84,1.122,94,0.747,125,0.162,159,2.171,162,2.959,164,2.171,165,2.171,168,4.153,181,0.159,185,0.007,186,0.007,187,0.687,189,0.256,196,0.262,219,1.886,251,0.349,547,2.553,566,2.704,583,3.428,597,2.286,601,3.181,602,3.181,611,4.5,612,4.17,690,4.344,691,5.385,692,4.107,693,4.107,694,4.107,695,4.344,696,5.119,697,4.75,706,3.904,736,6.185,737,6.185,738,7.524]],["title/classes/CsdlReturnType.html",[187,0.351,552,2.662]],["body/classes/CsdlReturnType.html",[3,0.096,4,0.096,5,0.096,6,0.114,8,0.073,9,0.639,10,0.231,26,0.136,27,0.009,31,0.68,37,0.129,48,1.837,55,2.756,62,1.349,63,2.013,77,0.258,84,1.268,125,0.165,159,3.01,162,2.935,164,3.01,165,3.01,178,3.394,181,0.199,185,0.007,186,0.007,187,0.681,189,0.231,196,0.281,251,0.36,430,1.162,546,3.226,547,2.666,548,3.712,549,4.461,550,4.461,552,4.907,553,4.67,560,3.226,561,3.529,562,3.226,563,3.712,564,3.369,565,3.226,566,3.75,739,5.59,740,5.59,741,5.59,742,5.59,743,5.59,744,5.59,745,5.59,746,5.59]],["title/classes/CsdlSchema.html",[187,0.351,747,3.56]],["body/classes/CsdlSchema.html",[3,0.091,4,0.091,5,0.091,6,0.117,8,0.069,9,0.621,10,0.238,26,0.138,27,0.009,34,0.473,37,0.08,48,1.826,51,2.203,62,0.817,63,1.923,77,0.243,94,0.681,125,0.103,140,3.302,141,1.893,181,0.137,185,0.007,186,0.007,187,0.424,189,0.221,196,0.292,251,0.284,419,2.982,430,1.239,452,1.655,546,4.78,547,2.737,560,4.78,571,4.437,573,4.78,575,4.417,578,5.228,580,3.082,581,5.228,592,3.997,593,4.991,594,2.267,610,4.21,613,4.991,618,6.197,619,2.565,650,5.817,672,4.716,675,2.267,747,5.532,748,5.341,749,8.281,750,8.281,751,8.281,752,7.312,753,8.281,754,8.281,755,8.281,756,8.281,757,6.197,758,5.341,759,5.341,760,5.341,761,5.341,762,5.341,763,5.341,764,5.341,765,5.341,766,5.341,767,5.341,768,5.341,769,5.341,770,4.304,771,4.304]],["title/classes/CsdlSingleton.html",[187,0.351,626,3.306]],["body/classes/CsdlSingleton.html",[3,0.114,4,0.114,5,0.114,6,0.114,8,0.086,9,0.71,10,0.214,26,0.138,27,0.009,34,0.37,37,0.1,48,1.778,57,1.867,77,0.253,125,0.169,163,3.184,181,0.17,185,0.008,186,0.008,187,0.526,189,0.274,196,0.279,251,0.325,430,0.917,547,2.666,551,2.268,610,3.292,626,5.87,637,6.19,643,4.402,772,6.629,773,8.813,774,6.629,775,6.629,776,6.629,777,6.629]],["title/classes/CsdlStructuralProperty.html",[187,0.351,691,2.934]],["body/classes/CsdlStructuralProperty.html",[3,0.104,4,0.104,5,0.104,6,0.112,8,0.079,9,0.673,10,0.206,26,0.138,27,0.009,31,0.685,37,0.129,48,1.814,57,1.711,63,2.187,77,0.259,84,1.113,94,0.739,125,0.171,159,2.132,162,3.087,164,2.132,165,2.132,168,2.917,181,0.156,185,0.007,186,0.007,187,0.683,189,0.251,196,0.271,219,1.866,251,0.347,430,0.84,547,2.603,551,2.078,566,2.656,583,3.366,597,2.245,601,3.124,602,3.124,611,4.589,612,4.124,690,4.266,691,5.569,692,4.034,693,4.034,694,4.034,695,4.266,696,4.698,697,4.698,706,3.835,778,6.074,779,6.074,780,6.074,781,6.074]],["title/classes/CsdlStructuredType.html",[187,0.351,596,2.934]],["body/classes/CsdlStructuredType.html",[3,0.098,4,0.098,5,0.098,6,0.115,8,0.074,9,0.818,10,0.232,26,0.132,27,0.009,31,0.698,34,0.318,37,0.127,48,1.808,57,1.605,77,0.255,94,0.71,125,0.17,141,1.303,160,1.057,181,0.146,185,0.007,186,0.007,187,0.671,189,0.236,196,0.282,219,1.793,251,0.339,430,1.169,547,2.676,551,1.95,593,3.434,594,3.755,595,2.83,596,5.445,597,3.299,598,5.926,599,6.268,600,5.926,601,4.499,602,4.499,610,2.83,611,3.04,612,3.964,613,3.434,614,4.516,615,3.785,616,4.003,617,4.516,648,5.032,649,5.032,654,5.032,782,5.032,783,5.032,784,5.032,785,5.699]],["title/classes/CsdlTerm.html",[187,0.351,581,2.789]],["body/classes/CsdlTerm.html",[3,0.096,4,0.096,5,0.096,6,0.118,8,0.073,9,0.64,10,0.236,26,0.138,27,0.009,31,0.623,37,0.123,48,1.827,77,0.261,84,1.254,94,0.556,125,0.162,136,2.015,159,2.948,162,2.874,164,2.948,165,2.948,181,0.144,185,0.007,186,0.007,187,0.647,189,0.232,196,0.291,219,1.773,226,2.068,251,0.321,430,1.22,547,2.742,551,1.914,566,3.672,571,3.919,572,4.187,573,4.081,575,4.135,578,3.532,579,4.261,580,3.229,581,4.464,582,5.9,583,4.655,584,5.9,786,5.595,787,5.595,788,5.595,789,5.595,790,5.595,791,5.595,792,5.595,793,5.595,794,5.595,795,5.595,796,5.595]],["title/classes/CsdlTypeDefinition.html",[187,0.351,757,3.306]],["body/classes/CsdlTypeDefinition.html",[3,0.101,4,0.101,5,0.101,6,0.117,8,0.077,9,0.662,10,0.235,26,0.14,27,0.009,31,0.635,34,0.33,37,0.089,48,1.818,77,0.254,84,1.263,94,0.727,125,0.164,159,2.996,164,2.996,165,2.996,181,0.152,185,0.007,186,0.007,187,0.47,189,0.245,196,0.29,251,0.303,430,1.204,452,1.833,547,2.717,551,2.023,566,3.733,571,4.604,573,4.928,575,4.554,580,3.413,592,4.425,610,2.937,675,2.51,706,5.39,757,5.477,797,5.913,798,8.538,799,5.913,800,5.913,801,5.913,802,5.913,803,5.913,804,5.913,805,5.913,806,5.913]],["title/classes/DateAndTimeFunctions.html",[187,0.351,301,1.875]],["body/classes/DateAndTimeFunctions.html",[0,1.45,3,0.045,4,0.045,5,0.045,6,0.106,8,0.034,10,0.205,19,0.661,26,0.13,27,0.009,31,0.686,34,0.285,37,0.132,60,1.116,62,1.298,77,0.249,84,0.706,85,0.896,94,0.507,98,1.934,106,1.33,113,0.863,120,0.653,125,0.168,128,2.292,141,1.65,160,1.339,174,1.181,181,0.205,185,0.004,186,0.004,187,0.67,188,2.167,189,0.109,190,1.152,191,0.543,195,1.152,196,0.261,198,0.927,199,1.152,201,1.152,203,0.879,204,0.424,205,0.742,206,2.161,207,1.251,208,1.119,209,2.066,210,2.269,211,2.681,212,2.681,213,2.768,214,1.057,215,1.918,216,1.831,217,1.575,218,1.152,219,0.661,220,0.76,221,1.152,222,1.808,223,1.808,224,1.152,225,1.152,226,1.529,227,1.152,228,1.152,229,1.152,230,2.149,231,2.591,232,1.152,233,1.152,234,1.152,235,1.152,236,1.152,237,1.152,238,1.152,239,1.152,240,1.152,241,1.152,242,1.152,243,3.915,244,1.112,245,1.613,246,1.152,247,1.028,248,1.152,249,1.152,250,1.119,251,0.211,252,2.042,253,2.54,254,1.037,255,0.879,256,1.38,257,2.83,258,3.048,259,1.152,260,1.152,261,1.808,262,1.152,263,2.232,264,2.232,265,1.152,266,2.167,267,1.152,268,1.152,269,1.152,270,1.152,271,1.152,272,1.152,273,1.152,274,1.152,275,1.152,276,1.152,277,1.152,278,1.152,279,1.152,280,1.808,281,1.49,282,1.152,283,1.152,284,2.167,285,1.152,286,2.528,287,1.152,288,1.808,289,1.152,290,1.152,291,2.167,292,1.152,293,1.808,294,1.152,295,1.152,296,1.152,297,1.152,298,1.152,299,1.152,300,1.152,301,2.454,302,1.808,303,1.152,304,1.808,305,1.152,306,1.808,307,1.152,308,1.808,309,1.152,310,1.808,311,1.152,312,1.808,313,1.152,314,1.808,315,1.152,316,1.808,317,1.152,318,2.528,319,1.152,320,1.808,321,1.152,322,1.808,323,1.152,324,1.808,325,1.152,326,1.808,327,1.152,328,1.808,329,1.152,330,1.152,331,1.152,332,1.152,333,2.167,334,1.152,335,1.152,336,1.152,337,1.152,338,2.167,339,1.152,340,1.808,341,1.152,342,1.152,343,1.808,344,1.152,345,1.152,346,1.152,347,1.087,348,2.167,349,1.152,350,1.152,351,1.152,352,2.454,353,2.528,354,2.746,355,3.708,356,3.919,357,1.808,358,1.152,359,1.152,360,0.817,361,1.152,362,1.152,363,2.167,364,1.152,365,1.152,366,1.152,367,1.152,368,1.152,369,1.152,370,1.152,371,1.152,372,1.152,373,1.152,374,1.152,375,1.152,376,1.152,377,1.152,378,1.152,379,1.152,380,1.152,381,1.152,382,1.152,383,1.152,384,1.152,385,1.152,386,2.167,387,1.152,388,1.152,389,1.152,390,1.152,391,1.152,392,1.152,393,1.152,394,1.152,395,1.152,396,1.152,397,1.152,398,1.658,399,0.925,400,1.756,401,1.152,402,1.152,403,1.152,404,2.167,405,1.838,406,1.152,407,1.152,408,1.152,409,2.167,410,1.152,411,1.152,412,1.152,413,1.152,414,2.83,415,1.152,416,1.119,417,2.83,418,1.152,419,0.949,420,2.528,421,1.152,422,0.858,807,4.136,808,4.136,809,4.136,810,4.136,811,4.136,812,4.136,813,4.136,814,4.136,815,2.905,816,4.136,817,4.136,818,4.136,819,2.636,820,2.636,821,2.636,822,2.636,823,2.636,824,2.636,825,2.636,826,2.636,827,2.636,828,2.636,829,2.636,830,2.636,831,2.636,832,2.636]],["title/classes/ExpandExpression.html",[187,0.351,833,3.103]],["body/classes/ExpandExpression.html",[3,0.073,4,0.073,5,0.073,6,0.1,8,0.055,9,0.532,10,0.197,19,1.064,25,1.63,26,0.133,27,0.009,28,2.737,31,0.45,34,0.47,37,0.102,49,1.835,60,0.93,62,0.901,64,2.573,65,3.666,67,2.427,68,2.923,70,2.737,77,0.231,84,0.935,85,0.867,94,0.584,98,1.899,106,1.06,113,0.879,117,3.76,118,1.581,120,0.981,125,0.153,126,1.315,154,2.926,160,1.422,171,1.75,174,0.934,181,0.209,185,0.006,186,0.006,187,0.467,189,0.176,191,0.773,196,0.275,198,0.952,203,1.416,204,0.946,205,1.195,206,2.094,207,2.509,209,2.521,210,2.495,211,2.521,212,2.521,213,2.583,215,2.008,216,2.013,217,1.064,220,1.949,230,1.452,251,0.28,252,1.816,253,2.312,281,2.433,360,1.824,422,1.381,430,0.814,445,4.182,447,3.715,448,3.715,449,3.983,450,2.182,452,2.459,453,2.817,455,3.547,460,4.331,464,1.912,466,2.817,467,2.817,468,2.98,471,2.038,473,2.557,475,2.351,478,2.263,479,2.351,481,2.557,482,2.678,483,3.893,490,3.547,496,4.404,499,4.487,500,3.908,502,2.817,503,3.908,504,3.908,505,2.98,506,3.175,507,2.557,508,3.175,509,2.98,510,2.98,511,3.547,512,2.817,513,3.175,515,2.98,516,3.175,517,5.737,518,3.175,519,3.175,520,3.175,521,2.038,522,3.175,524,2.817,525,2.678,526,3.175,527,4.404,529,2.107,531,2.351,532,2.449,833,6.362,834,3.419,835,4.242,836,4.242,837,4.242,838,3.419,839,3.746,840,4.242,841,5.881,842,4.242,843,4.242,844,4.266,845,3.908,846,3.715,847,3.908,848,4.846,849,4.133,850,4.404,851,4.404,852,4.404,853,3.419,854,3.419,855,3.419,856,3.746,857,3.746,858,3.746,859,3.746,860,5.057,861,3.746,862,3.746,863,3.746,864,3.746,865,3.746,866,3.746,867,3.746,868,3.746,869,5.446,870,3.746,871,3.746,872,3.746,873,3.175,874,3.746,875,3.746,876,3.746,877,3.746]],["title/classes/ExpandField.html",[187,0.351,841,3.56]],["body/classes/ExpandField.html",[3,0.069,4,0.069,5,0.069,6,0.114,8,0.052,10,0.219,19,1.004,25,1.59,26,0.136,27,0.009,28,3.309,31,0.432,34,0.464,37,0.099,49,1.796,60,0.863,62,1.148,64,3.111,65,3.607,67,2.934,68,3.534,70,3.309,71,2.547,72,2.628,75,3.261,77,0.228,84,1.15,85,0.861,94,0.397,98,1.796,106,1.255,113,0.844,117,3.797,118,1.822,120,1.024,125,0.167,154,2.626,160,1.392,171,1.651,174,0.91,181,0.228,185,0.005,186,0.005,187,0.449,189,0.166,191,0.742,196,0.282,198,0.987,203,1.336,204,0.908,205,1.128,206,2.03,207,2.602,209,2.326,210,2.442,211,2.481,212,2.481,213,2.542,215,1.958,216,1.971,217,1.417,220,1.155,230,1.37,251,0.271,252,1.076,253,2.567,360,1.751,422,1.303,430,0.554,445,2.806,449,3.417,455,2.412,460,4.116,464,1.804,471,1.923,473,2.412,475,2.219,478,2.135,479,2.219,481,2.412,482,4.492,483,2.135,490,2.412,496,2.996,499,4.725,500,3.753,502,2.658,503,3.753,504,3.753,505,2.812,506,2.996,507,2.412,508,2.996,509,2.812,510,2.812,511,3.405,512,2.658,513,2.996,515,2.812,516,2.996,517,5.615,518,2.996,519,2.996,520,2.996,521,1.923,522,2.996,524,4.349,525,2.527,526,4.229,527,4.229,529,1.988,531,2.219,532,2.31,535,2.035,536,3.226,539,3.226,540,3.535,833,6.132,834,3.226,838,3.226,839,3.535,841,6.047,844,4.492,845,3.753,846,3.567,847,4.349,848,5.172,849,3.969,850,4.229,851,4.229,852,4.229,853,3.226,854,3.226,855,3.226,856,3.535,857,3.535,858,3.535,859,3.535,860,4.901,861,3.535,862,3.535,863,3.535,864,3.535,865,3.535,866,3.535,867,4.99,868,3.535,869,6.276,870,4.99,871,3.535,872,4.99,873,4.901,874,3.535,875,3.535,876,3.535,877,3.535,878,4.003,879,4.003,880,4.003,881,4.003,882,4.003,883,4.003,884,3.226,885,3.535,886,4.003,887,4.003,888,3.226,889,4.003,890,3.226,891,3.535,892,4.003,893,4.003,894,4.003,895,4.003,896,4.003]],["title/classes/Expression.html",[187,0.351,445,2.194]],["body/classes/Expression.html",[3,0.103,4,0.103,5,0.103,6,0.117,8,0.078,9,0.67,10,0.19,25,1.868,26,0.135,27,0.009,31,0.461,34,0.413,37,0.091,77,0.223,85,0.805,120,1.099,125,0.142,181,0.19,185,0.007,186,0.007,187,0.479,189,0.249,191,0.973,196,0.288,198,0.985,206,2.296,207,1.824,209,2.709,210,2.61,211,2.296,212,2.296,213,2.352,215,2.301,216,2.196,217,1.857,230,2.063,251,0.307,252,2.155,281,3.012,422,1.962,445,4.264,447,5.062,449,4.327,450,3.1,464,2.717,478,3.216,531,4.105,535,2.668,597,3.273,897,6.029,898,7.407,899,6.029,900,6.029,901,6.029,902,6.029,903,6.029,904,6.029,905,4.858,906,4.858]],["title/classes/Field.html",[98,1.058,187,0.351]],["body/classes/Field.html",[3,0.066,4,0.066,5,0.066,6,0.091,8,0.083,9,0.496,10,0.098,23,3.95,26,0.119,27,0.009,29,1.73,33,3.547,34,0.48,37,0.058,48,1.572,49,2.251,51,2.262,54,2.976,55,2.139,56,2.724,57,1.967,58,2.128,59,2.216,60,0.466,62,0.979,63,2.305,77,0.22,94,0.381,98,1.532,100,1.678,110,1.974,113,1.18,125,0.148,130,2.472,133,2.424,136,1.975,140,1.583,141,0.878,142,1.382,158,2.216,159,1.347,160,0.712,162,1.313,163,1.844,164,1.347,165,1.347,168,1.844,174,1.15,178,1.844,181,0.098,182,3.166,185,0.005,186,0.005,187,0.436,189,0.159,196,0.206,203,1.281,219,0.962,220,2.713,226,1.419,244,1.474,251,0.159,252,1.474,449,1.844,529,4.675,546,2.216,549,2.424,550,2.424,551,1.313,552,2.313,553,2.313,560,2.216,561,2.424,562,2.216,564,2.313,565,2.216,566,1.678,575,2.048,578,2.424,579,2.313,581,2.424,582,2.696,583,2.128,584,2.696,593,2.313,594,1.63,597,1.419,598,2.549,600,2.549,601,1.974,602,1.974,611,2.048,613,2.313,614,2.424,615,2.549,617,2.424,618,2.873,619,2.634,625,2.873,626,2.873,634,2.313,636,3.39,637,2.696,643,2.549,647,2.873,650,2.696,651,3.094,652,3.094,670,2.696,675,2.328,676,3.853,677,2.873,679,2.696,680,2.873,681,2.873,692,2.549,693,2.549,694,2.549,696,2.424,697,2.424,706,2.424,747,4.42,752,3.39,757,2.873,770,3.094,771,3.094,907,3.39,908,7.373,909,3.839,910,5.485,911,8.535,912,2.634,913,4.42,914,1.907,915,3.39,916,4.843,917,3.839,918,2.424,919,3.839,920,3.839,921,3.839,922,3.839,923,3.839,924,3.839,925,3.839,926,3.839,927,3.839,928,3.839,929,3.839,930,3.839,931,3.839,932,3.839,933,3.839,934,2.696,935,3.839,936,3.839,937,3.839,938,3.839,939,3.839,940,3.839,941,3.839,942,3.839,943,3.839,944,3.839,945,3.839,946,3.839,947,3.839,948,3.839,949,3.839,950,3.839,951,3.839,952,3.839,953,3.839,954,3.839,955,3.839,956,3.839,957,3.839,958,3.839,959,3.839,960,3.839,961,3.694,962,3.839,963,3.839,964,3.839,965,3.839,966,3.839,967,3.839,968,3.839,969,3.839,970,3.839,971,3.839,972,3.839,973,3.839,974,3.839,975,3.839,976,3.839,977,3.839,978,3.839,979,3.839,980,3.839,981,3.839,982,3.839,983,3.839,984,3.839,985,3.839,986,3.839,987,3.839,988,3.839,989,3.839,990,3.839,991,3.839,992,3.839,993,3.839,994,3.839,995,3.839,996,3.839,997,3.839,998,3.839,999,3.839,1000,3.839,1001,3.839,1002,3.839,1003,3.839,1004,3.839,1005,3.839,1006,5.485,1007,6.4,1008,3.839,1009,3.839,1010,3.839,1011,3.094,1012,3.839,1013,3.839,1014,6.982,1015,5.485,1016,3.839,1017,3.839,1018,3.839,1019,3.839,1020,3.839,1021,3.839,1022,8.609,1023,3.839,1024,5.485,1025,3.839,1026,3.853,1027,3.839,1028,3.839,1029,2.821,1030,3.839,1031,3.839,1032,3.839,1033,3.839,1034,3.839,1035,3.839,1036,3.839,1037,3.839,1038,3.839,1039,3.839,1040,3.839,1041,3.839,1042,3.839,1043,3.839,1044,3.839,1045,4.03,1046,3.839,1047,3.094,1048,3.839,1049,2.424,1050,3.839,1051,6.4,1052,5.485,1053,5.651,1054,3.839,1055,3.839,1056,3.839,1057,3.839,1058,3.839,1059,3.839,1060,3.839,1061,3.839]],["title/classes/Field-1.html",[98,0.881,187,0.292,1062,1.475]],["body/classes/Field-1.html",[0,1.485,3,0.047,4,0.047,5,0.047,6,0.088,8,0.036,9,0.388,10,0.152,19,0.691,26,0.125,27,0.009,31,0.688,34,0.293,37,0.132,48,0.833,60,1.109,62,1.039,77,0.254,84,0.727,85,0.898,94,0.522,98,1.972,106,1.37,113,0.885,120,0.672,125,0.165,126,1.328,141,1.675,160,1.476,174,1.184,181,0.165,185,0.004,186,0.004,187,0.675,188,2.23,189,0.114,190,1.205,191,0.563,195,1.205,196,0.207,198,0.603,199,1.205,201,1.205,203,0.92,204,0.443,205,0.777,206,2.197,207,1.296,208,1.17,209,2.105,210,2.307,211,2.697,212,2.697,213,2.784,214,1.105,215,1.951,216,1.862,217,1.703,218,1.873,219,0.691,220,1.516,221,1.873,222,1.873,223,1.873,224,1.873,225,2.297,226,2.19,227,1.205,228,1.205,229,1.205,230,2.195,231,2.646,232,1.205,233,1.873,234,1.205,235,1.205,236,1.205,237,1.205,238,1.205,239,1.205,240,1.205,241,1.205,242,1.205,243,3.924,244,1.152,245,1.671,246,1.205,247,1.075,248,1.205,249,1.205,250,1.17,251,0.245,252,2.068,253,2.575,254,1.074,255,0.92,256,1.429,257,2.883,258,3.099,259,1.205,260,1.205,261,1.873,262,1.205,263,2.297,264,2.297,265,1.205,266,2.23,267,1.205,268,1.205,269,1.205,270,1.205,271,1.205,272,1.205,273,1.205,274,1.205,275,1.205,276,1.205,277,1.205,278,1.205,279,1.205,280,1.873,281,1.543,282,1.205,283,1.205,284,2.23,285,1.205,286,2.591,287,1.205,288,1.873,289,1.205,290,1.205,291,2.23,292,1.205,293,1.873,294,1.205,295,1.205,296,1.205,297,1.205,298,1.205,299,1.205,300,1.205,301,2.23,302,1.205,303,1.205,304,1.205,305,1.205,306,1.205,307,1.205,308,1.205,309,1.205,310,1.205,311,1.205,312,1.205,313,1.205,314,1.205,315,1.205,316,1.205,317,1.205,318,1.205,319,1.205,320,1.205,321,1.205,322,1.205,323,1.205,324,1.205,325,1.205,326,1.205,327,1.205,328,1.205,329,1.205,330,1.205,331,1.205,332,1.205,333,2.23,334,1.205,335,1.205,336,1.205,337,1.205,338,2.23,339,1.205,340,1.873,341,1.205,342,1.205,343,1.873,344,1.205,345,1.205,346,1.205,347,1.137,348,2.23,349,1.205,350,1.205,351,1.205,352,2.515,353,2.591,354,2.805,355,3.735,356,3.935,357,1.873,358,1.205,359,1.205,360,0.855,361,1.205,362,1.205,363,2.23,364,1.205,365,1.205,366,1.205,367,1.205,368,1.205,369,1.205,370,1.205,371,1.205,372,1.205,373,1.205,374,1.205,375,1.205,376,1.205,377,1.205,378,1.205,379,1.205,380,1.205,381,1.205,382,1.205,383,1.205,384,1.205,385,1.205,386,2.23,387,1.205,388,1.205,389,1.205,390,1.205,391,1.205,392,1.205,393,1.205,394,1.205,395,1.205,396,1.205,397,1.205,398,1.718,399,0.968,400,1.819,401,1.205,402,1.205,403,1.205,404,2.23,405,1.892,406,1.205,407,1.205,408,1.205,409,2.23,410,1.205,411,1.205,412,1.205,413,1.205,414,2.883,415,1.205,416,1.17,417,2.883,418,1.205,419,0.993,420,2.591,421,1.205,422,0.897,551,0.943,1063,3.009,1064,2.757,1065,2.757,1066,2.757,1067,2.757,1068,2.757]],["title/classes/Function.html",[62,0.676,187,0.351]],["body/classes/Function.html",[0,1.492,3,0.048,4,0.048,5,0.048,6,0.088,8,0.036,10,0.111,19,0.697,25,0.964,26,0.124,27,0.009,31,0.694,34,0.295,37,0.132,60,1.108,62,1.125,77,0.252,84,0.731,85,0.898,94,0.525,98,1.956,106,1.342,113,0.889,120,0.824,125,0.161,141,1.68,160,1.364,174,1.184,181,0.111,185,0.004,186,0.004,187,0.676,188,2.243,189,0.115,190,1.216,191,0.567,195,1.216,196,0.208,198,0.606,199,1.216,201,1.216,203,0.928,204,0.447,205,0.783,206,2.204,207,1.305,208,1.18,209,2.204,210,2.456,211,2.7,212,2.72,213,2.787,214,1.115,215,2.122,216,2.025,217,1.709,218,1.216,219,0.697,220,0.802,221,1.216,222,1.886,223,1.886,224,1.216,225,1.216,226,1.594,227,1.216,228,1.216,229,1.216,230,2.204,231,2.657,232,1.216,233,1.216,234,1.216,235,1.216,236,1.216,237,1.216,238,1.216,239,1.216,240,1.216,241,1.216,242,1.216,243,3.932,244,1.159,245,1.682,246,1.216,247,1.085,248,1.216,249,1.216,250,1.18,251,0.246,252,2.073,253,2.728,254,1.081,255,0.928,256,1.439,257,2.893,258,3.109,259,1.216,260,1.216,261,1.886,262,1.216,263,2.31,264,2.31,265,1.216,266,2.243,267,1.216,268,1.216,269,1.216,270,1.216,271,1.216,272,1.216,273,1.216,274,1.216,275,1.216,276,1.216,277,1.216,278,1.216,279,1.216,280,1.886,281,1.553,282,1.216,283,1.216,284,2.243,285,1.216,286,2.602,287,1.216,288,1.886,289,1.216,290,1.216,291,2.243,292,1.216,293,1.886,294,1.216,295,1.216,296,1.216,297,1.216,298,1.216,299,1.216,300,1.216,301,2.243,302,1.216,303,1.216,304,1.216,305,1.216,306,1.216,307,1.216,308,1.216,309,1.216,310,1.216,311,1.216,312,1.216,313,1.216,314,1.216,315,1.216,316,1.216,317,1.216,318,1.216,319,1.216,320,1.216,321,1.216,322,1.216,323,1.216,324,1.216,325,1.216,326,1.216,327,1.216,328,1.216,329,1.216,330,1.216,331,1.216,332,1.216,333,2.243,334,1.216,335,1.216,336,1.216,337,1.216,338,2.243,339,1.216,340,1.886,341,1.216,342,1.216,343,1.886,344,1.216,345,1.216,346,1.216,347,1.147,348,2.243,349,1.216,350,1.216,351,1.216,352,2.527,353,2.602,354,2.817,355,3.74,356,3.938,357,1.886,358,1.216,359,1.216,360,0.862,361,1.216,362,1.216,363,2.243,364,1.216,365,1.216,366,1.216,367,1.216,368,1.216,369,1.216,370,1.216,371,1.216,372,1.216,373,1.216,374,1.216,375,1.216,376,1.216,377,1.216,378,1.216,379,1.216,380,1.216,381,1.216,382,1.216,383,1.216,384,1.216,385,1.216,386,2.243,387,1.216,388,1.216,389,1.216,390,1.216,391,1.216,392,1.216,393,1.216,394,1.216,395,1.216,396,1.216,397,1.216,398,1.729,399,0.976,400,1.831,401,1.216,402,1.216,403,1.216,404,2.243,405,1.903,406,1.216,407,1.216,408,1.216,409,2.243,410,1.216,411,1.216,412,1.216,413,1.216,414,2.893,415,1.216,416,1.18,417,2.893,418,1.216,419,1.001,420,2.602,421,1.216,422,0.905,464,1.253,535,1.553,551,0.951,1069,2.781,1070,2.781,1071,2.781,1072,2.781,1073,2.781]],["title/classes/GeoFunctions.html",[187,0.351,338,1.875]],["body/classes/GeoFunctions.html",[0,1.493,3,0.048,4,0.048,5,0.048,6,0.077,8,0.036,10,0.136,19,0.698,26,0.122,27,0.009,31,0.695,34,0.295,37,0.132,60,1.11,62,1.155,77,0.252,84,0.731,85,0.898,94,0.525,98,1.957,106,1.377,113,0.889,120,0.676,125,0.16,141,1.681,160,1.364,174,1.184,181,0.136,185,0.004,186,0.004,187,0.676,188,2.244,189,0.115,190,1.217,191,0.567,195,1.217,196,0.171,198,0.607,199,1.217,201,1.217,203,0.929,204,0.447,205,0.784,206,2.205,207,1.306,208,1.181,209,2.113,210,2.315,211,2.701,212,2.701,213,2.787,214,1.116,215,1.957,216,1.868,217,1.616,218,1.217,219,0.698,220,0.803,221,1.217,222,1.887,223,1.887,224,1.217,225,1.217,226,1.595,227,1.217,228,1.217,229,1.217,230,2.205,231,2.658,232,1.217,233,1.217,234,1.217,235,1.217,236,1.217,237,1.217,238,1.217,239,1.217,240,1.217,241,1.217,242,1.217,243,3.939,244,1.16,245,1.683,246,1.217,247,1.086,248,1.217,249,1.217,250,1.181,251,0.219,252,2.073,253,2.583,254,1.082,255,0.929,256,1.44,257,2.894,258,3.11,259,1.217,260,1.217,261,1.887,262,1.217,263,2.311,264,2.311,265,1.217,266,2.244,267,1.217,268,1.217,269,1.217,270,1.217,271,1.217,272,1.217,273,1.217,274,1.217,275,1.217,276,1.217,277,1.217,278,1.217,279,1.217,280,1.887,281,1.554,282,1.217,283,1.217,284,2.244,285,1.217,286,2.604,287,1.217,288,1.887,289,1.217,290,1.217,291,2.244,292,1.217,293,1.887,294,1.217,295,1.217,296,1.217,297,1.217,298,1.217,299,1.217,300,1.217,301,2.244,302,1.217,303,1.217,304,1.217,305,1.217,306,1.217,307,1.217,308,1.217,309,1.217,310,1.217,311,1.217,312,1.217,313,1.217,314,1.217,315,1.217,316,1.217,317,1.217,318,1.217,319,1.217,320,1.217,321,1.217,322,1.217,323,1.217,324,1.217,325,1.217,326,1.217,327,1.217,328,1.217,329,1.217,330,1.217,331,1.217,332,1.217,333,2.244,334,1.217,335,1.217,336,1.217,337,1.217,338,2.528,339,1.887,340,2.604,341,1.217,342,1.887,343,2.604,344,1.217,345,1.887,346,1.217,347,1.78,348,2.244,349,1.217,350,1.217,351,1.217,352,2.528,353,2.604,354,2.818,355,3.74,356,3.938,357,1.887,358,1.217,359,1.217,360,0.863,361,1.217,362,1.217,363,2.244,364,1.217,365,1.217,366,1.217,367,1.217,368,1.217,369,1.217,370,1.217,371,1.217,372,1.217,373,1.217,374,1.217,375,1.217,376,1.217,377,1.217,378,1.217,379,1.217,380,1.217,381,1.217,382,1.217,383,1.217,384,1.217,385,1.217,386,2.244,387,1.217,388,1.217,389,1.217,390,1.217,391,1.217,392,1.217,393,1.217,394,1.217,395,1.217,396,1.217,397,1.217,398,1.73,399,0.977,400,1.832,401,1.217,402,1.217,403,1.217,404,2.244,405,1.904,406,1.217,407,1.217,408,1.217,409,2.244,410,1.217,411,1.217,412,1.217,413,1.217,414,2.894,415,1.217,416,1.181,417,2.894,418,1.217,419,1.002,420,2.604,421,1.217,422,0.906,430,0.731,1074,4.316,1075,4.316,1076,4.316,1077,2.783,1078,2.783,1079,2.783]],["title/classes/Grouping.html",[187,0.351,398,1.771]],["body/classes/Grouping.html",[0,1.498,3,0.048,4,0.048,5,0.048,6,0.089,8,0.036,10,0.111,19,0.702,25,0.968,26,0.124,27,0.009,31,0.689,34,0.296,37,0.133,60,1.108,62,1.046,77,0.251,84,0.734,85,0.899,94,0.527,98,1.959,106,1.343,113,0.892,120,0.827,125,0.159,141,1.684,160,1.366,174,1.185,181,0.111,185,0.004,186,0.004,187,0.676,188,2.252,189,0.116,190,1.224,191,0.569,195,1.224,196,0.208,198,0.609,199,1.224,201,1.224,203,0.934,204,0.45,205,0.788,206,2.209,207,1.311,208,1.188,209,2.343,210,2.461,211,2.703,212,2.703,213,2.789,214,1.122,215,2.126,216,2.029,217,1.713,218,1.224,219,0.702,220,0.807,221,1.224,222,1.895,223,1.895,224,1.224,225,1.224,226,1.602,227,1.224,228,1.224,229,1.224,230,2.211,231,2.665,232,1.224,233,1.224,234,1.224,235,1.224,236,1.224,237,1.224,238,1.224,239,1.224,240,1.224,241,1.224,242,1.224,243,3.927,244,1.165,245,1.691,246,1.224,247,1.092,248,1.224,249,1.224,250,1.188,251,0.247,252,2.077,253,2.587,254,1.087,255,0.934,256,1.446,257,2.901,258,3.116,259,1.224,260,1.224,261,1.895,262,1.224,263,2.319,264,2.319,265,1.224,266,2.252,267,1.224,268,1.224,269,1.224,270,1.224,271,1.224,272,1.224,273,1.224,274,1.224,275,1.224,276,1.224,277,1.224,278,1.224,279,1.224,280,1.895,281,1.561,282,1.224,283,1.224,284,2.252,285,1.224,286,2.611,287,1.224,288,1.895,289,1.224,290,1.224,291,2.252,292,1.224,293,1.895,294,1.224,295,1.224,296,1.224,297,1.224,298,1.224,299,1.224,300,1.224,301,2.252,302,1.224,303,1.224,304,1.224,305,1.224,306,1.224,307,1.224,308,1.224,309,1.224,310,1.224,311,1.224,312,1.224,313,1.224,314,1.224,315,1.224,316,1.224,317,1.224,318,1.224,319,1.224,320,1.224,321,1.224,322,1.224,323,1.224,324,1.224,325,1.224,326,1.224,327,1.224,328,1.224,329,1.224,330,1.224,331,1.224,332,1.224,333,2.252,334,1.224,335,1.224,336,1.224,337,1.224,338,2.252,339,1.224,340,1.895,341,1.224,342,1.224,343,1.895,344,1.224,345,1.224,346,1.224,347,1.154,348,2.252,349,1.224,350,1.224,351,1.224,352,2.535,353,2.611,354,2.825,355,3.744,356,3.94,357,1.895,358,1.224,359,1.224,360,0.868,361,1.224,362,1.224,363,2.252,364,1.224,365,1.224,366,1.224,367,1.224,368,1.224,369,1.224,370,1.224,371,1.224,372,1.224,373,1.224,374,1.224,375,1.224,376,1.224,377,1.224,378,1.224,379,1.224,380,1.224,381,1.224,382,1.224,383,1.224,384,1.224,385,1.224,386,2.252,387,1.224,388,1.224,389,1.224,390,1.224,391,1.224,392,1.224,393,1.224,394,1.224,395,1.224,396,1.224,397,1.224,398,2.395,399,0.982,400,2.535,401,1.224,402,1.224,403,1.224,404,2.252,405,1.91,406,1.224,407,1.224,408,1.224,409,2.252,410,1.224,411,1.224,412,1.224,413,1.224,414,2.901,415,1.224,416,1.188,417,2.901,418,1.224,419,1.008,420,2.611,421,1.224,422,0.911,464,1.261,535,1.561,1080,2.799,1081,2.799,1082,2.799,1083,2.799,1084,2.799,1085,2.799]],["title/classes/Lambda.html",[187,0.351,404,1.875]],["body/classes/Lambda.html",[0,1.493,3,0.048,4,0.048,5,0.048,6,0.089,8,0.036,10,0.111,19,0.698,25,0.964,26,0.124,27,0.009,31,0.689,34,0.295,37,0.132,60,1.108,62,1.044,77,0.253,84,0.732,85,0.898,94,0.525,98,1.957,106,1.342,113,0.889,120,0.825,125,0.159,141,1.796,160,1.364,174,1.184,181,0.111,185,0.004,186,0.004,187,0.676,188,2.244,189,0.115,190,1.217,191,0.567,195,1.217,196,0.208,198,0.607,199,1.217,201,1.217,203,0.929,204,0.448,205,0.784,206,2.205,207,1.306,208,1.182,209,2.205,210,2.457,211,2.701,212,2.701,213,2.787,214,1.116,215,2.123,216,2.026,217,1.71,218,1.217,219,0.698,220,0.803,221,1.217,222,1.887,223,1.887,224,1.217,225,1.217,226,1.596,227,1.217,228,1.217,229,1.217,230,2.206,231,2.659,232,1.217,233,1.217,234,1.217,235,1.217,236,1.217,237,1.217,238,1.217,239,1.217,240,1.217,241,1.217,242,1.217,243,3.926,244,1.16,245,1.684,246,1.217,247,1.086,248,1.217,249,1.217,250,1.182,251,0.246,252,2.074,253,2.729,254,1.082,255,0.929,256,1.44,257,2.895,258,3.11,259,1.217,260,1.217,261,1.887,262,1.217,263,2.312,264,2.312,265,1.217,266,2.244,267,1.217,268,1.217,269,1.217,270,1.217,271,1.217,272,1.217,273,1.217,274,1.217,275,1.217,276,1.217,277,1.217,278,1.217,279,1.217,280,1.887,281,1.555,282,1.217,283,1.217,284,2.244,285,1.217,286,2.604,287,1.217,288,1.887,289,1.217,290,1.217,291,2.244,292,1.217,293,1.887,294,1.217,295,1.217,296,1.217,297,1.217,298,1.217,299,1.217,300,1.217,301,2.244,302,1.217,303,1.217,304,1.217,305,1.217,306,1.217,307,1.217,308,1.217,309,1.217,310,1.217,311,1.217,312,1.217,313,1.217,314,1.217,315,1.217,316,1.217,317,1.217,318,1.217,319,1.217,320,1.217,321,1.217,322,1.217,323,1.217,324,1.217,325,1.217,326,1.217,327,1.217,328,1.217,329,1.217,330,1.217,331,1.217,332,1.217,333,2.244,334,1.217,335,1.217,336,1.217,337,1.217,338,2.244,339,1.217,340,1.887,341,1.217,342,1.217,343,1.887,344,1.217,345,1.217,346,1.217,347,1.148,348,2.244,349,1.217,350,1.217,351,1.217,352,2.528,353,2.982,354,2.818,355,3.741,356,3.938,357,1.887,358,1.217,359,1.217,360,0.863,361,1.217,362,1.217,363,2.244,364,1.217,365,1.217,366,1.217,367,1.217,368,1.217,369,1.217,370,1.217,371,1.217,372,1.217,373,1.217,374,1.217,375,1.217,376,1.217,377,1.217,378,1.217,379,1.217,380,1.217,381,1.217,382,1.217,383,1.217,384,1.217,385,1.217,386,2.244,387,1.217,388,1.217,389,1.217,390,1.217,391,1.217,392,1.217,393,1.217,394,1.217,395,1.217,396,1.217,397,1.217,398,1.731,399,0.977,400,1.833,401,1.217,402,1.217,403,1.217,404,2.736,405,1.904,406,1.217,407,1.217,408,1.217,409,2.244,410,1.217,411,1.217,412,1.217,413,1.217,414,2.895,415,1.217,416,1.182,417,2.895,418,1.217,419,1.003,420,2.604,421,1.217,422,0.906,430,0.385,464,1.255,535,1.555,1086,2.459,1087,2.784,1088,2.784,1089,2.784,1090,2.784,1091,2.784]],["title/classes/LambdaOperators.html",[187,0.351,409,1.875]],["body/classes/LambdaOperators.html",[0,1.503,3,0.048,4,0.048,5,0.048,6,0.069,8,0.037,10,0.112,19,0.707,26,0.12,27,0.009,31,0.69,34,0.297,37,0.133,60,1.113,62,1.049,77,0.252,84,0.737,85,0.899,94,0.529,98,1.998,106,1.369,113,0.895,120,0.682,125,0.159,141,1.829,160,1.37,174,1.185,181,0.112,185,0.004,186,0.004,187,0.677,188,2.262,189,0.117,190,1.233,191,0.573,195,1.233,196,0.141,198,0.5,199,1.233,201,1.233,203,0.941,204,0.453,205,0.794,206,2.215,207,1.319,208,1.197,209,2.125,210,2.326,211,2.705,212,2.705,213,2.792,214,1.131,215,1.967,216,1.877,217,1.626,218,1.233,219,0.707,220,0.813,221,1.233,222,1.906,223,1.906,224,1.233,225,1.233,226,1.612,227,1.233,228,1.233,229,1.233,230,2.218,231,2.674,232,1.233,233,1.233,234,1.233,235,1.233,236,1.233,237,1.233,238,1.233,239,1.233,240,1.233,241,1.233,242,1.233,243,3.929,244,1.172,245,1.7,246,1.233,247,1.1,248,1.233,249,1.233,250,1.197,251,0.221,252,2.081,253,2.593,254,1.093,255,0.941,256,1.455,257,2.91,258,3.125,259,1.233,260,1.233,261,1.906,262,1.233,263,2.33,264,2.33,265,1.233,266,2.262,267,1.233,268,1.233,269,1.233,270,1.233,271,1.233,272,1.233,273,1.233,274,1.233,275,1.233,276,1.233,277,1.233,278,1.233,279,1.233,280,1.906,281,1.57,282,1.233,283,1.233,284,2.262,285,1.233,286,2.622,287,1.233,288,1.906,289,1.233,290,1.233,291,2.262,292,1.233,293,1.906,294,1.233,295,1.233,296,1.233,297,1.233,298,1.233,299,1.233,300,1.233,301,2.262,302,1.233,303,1.233,304,1.233,305,1.233,306,1.233,307,1.233,308,1.233,309,1.233,310,1.233,311,1.233,312,1.233,313,1.233,314,1.233,315,1.233,316,1.233,317,1.233,318,1.233,319,1.233,320,1.233,321,1.233,322,1.233,323,1.233,324,1.233,325,1.233,326,1.233,327,1.233,328,1.233,329,1.233,330,1.233,331,1.233,332,1.233,333,2.262,334,1.233,335,1.233,336,1.233,337,1.233,338,2.262,339,1.233,340,1.906,341,1.233,342,1.233,343,1.906,344,1.233,345,1.233,346,1.233,347,1.163,348,2.262,349,1.233,350,1.233,351,1.233,352,2.545,353,2.622,354,2.835,355,3.748,356,3.942,357,1.906,358,1.233,359,1.233,360,0.874,361,1.233,362,1.233,363,2.262,364,1.233,365,1.233,366,1.233,367,1.233,368,1.233,369,1.233,370,1.233,371,1.233,372,1.233,373,1.233,374,1.233,375,1.233,376,1.233,377,1.233,378,1.233,379,1.233,380,1.233,381,1.233,382,1.233,383,1.233,384,1.233,385,1.233,386,2.262,387,1.233,388,1.233,389,1.233,390,1.233,391,1.233,392,1.233,393,1.233,394,1.233,395,1.233,396,1.233,397,1.233,398,1.748,399,0.99,400,1.85,401,1.233,402,1.233,403,1.233,404,2.752,405,1.919,406,1.233,407,1.233,408,1.233,409,2.545,410,1.906,411,1.233,412,1.906,413,1.233,414,2.91,415,1.233,416,1.197,417,2.91,418,1.233,419,1.015,420,2.622,421,1.233,422,0.918,430,0.603,1092,2.82,1093,2.82]],["title/classes/LogicalOperators.html",[187,0.351,363,1.875]],["body/classes/LogicalOperators.html",[0,1.454,3,0.045,4,0.045,5,0.045,6,0.099,8,0.034,10,0.191,19,0.665,26,0.127,27,0.009,31,0.701,34,0.286,37,0.132,60,1.105,62,1.023,77,0.25,84,0.709,85,0.897,94,0.509,98,1.936,106,1.332,113,0.866,120,0.656,125,0.165,141,1.653,160,1.342,174,1.181,181,0.191,185,0.004,186,0.004,187,0.67,188,2.175,189,0.11,190,1.159,191,0.546,195,1.159,196,0.24,198,0.853,199,1.159,201,1.159,203,0.884,204,0.426,205,0.747,206,2.165,207,1.257,208,1.125,209,2.071,210,2.274,211,2.683,212,2.683,213,2.77,214,1.063,215,1.922,216,1.835,217,1.579,218,1.159,219,0.665,220,0.765,221,1.159,222,1.816,223,1.816,224,1.159,225,1.159,226,1.536,227,1.159,228,1.159,229,1.159,230,2.155,231,2.598,232,1.159,233,1.159,234,1.159,235,1.159,236,1.159,237,1.159,238,1.159,239,1.159,240,1.159,241,1.159,242,1.159,243,3.95,244,1.117,245,1.621,246,1.159,247,1.034,248,1.159,249,1.159,250,1.125,251,0.212,252,2.045,253,2.544,254,1.042,255,0.884,256,1.386,257,2.836,258,3.054,259,1.159,260,1.159,261,1.816,262,1.159,263,2.24,264,2.24,265,1.159,266,2.175,267,1.159,268,1.159,269,1.159,270,1.159,271,1.159,272,1.159,273,1.159,274,1.159,275,1.159,276,1.159,277,1.159,278,1.159,279,1.159,280,1.816,281,1.496,282,1.159,283,1.159,284,2.175,285,1.159,286,2.536,287,1.159,288,1.816,289,1.159,290,1.159,291,2.175,292,1.159,293,1.816,294,1.159,295,1.159,296,1.159,297,1.159,298,1.159,299,1.159,300,1.159,301,2.175,302,1.159,303,1.159,304,1.159,305,1.159,306,1.159,307,1.159,308,1.159,309,1.159,310,1.159,311,1.159,312,1.159,313,1.159,314,1.159,315,1.159,316,1.159,317,1.159,318,1.159,319,1.159,320,1.159,321,1.159,322,1.159,323,1.159,324,1.159,325,1.159,326,1.159,327,1.159,328,1.159,329,1.159,330,1.159,331,1.159,332,1.159,333,2.175,334,1.159,335,1.159,336,1.159,337,1.159,338,2.175,339,1.159,340,1.816,341,1.159,342,1.159,343,1.816,344,1.159,345,1.159,346,1.159,347,1.093,348,2.175,349,1.159,350,1.159,351,1.159,352,3.392,353,2.536,354,2.754,355,3.839,356,4.001,357,1.816,358,1.159,359,1.159,360,0.822,361,1.159,362,1.159,363,2.462,364,1.816,365,1.159,366,1.816,367,1.159,368,1.816,369,1.159,370,1.816,371,1.159,372,1.816,373,1.159,374,1.816,375,1.159,376,1.159,377,1.159,378,1.159,379,1.159,380,1.816,381,1.159,382,1.816,383,1.159,384,1.816,385,1.159,386,2.175,387,1.159,388,1.159,389,1.159,390,1.159,391,1.159,392,1.159,393,1.159,394,1.159,395,1.159,396,1.159,397,1.159,398,1.666,399,0.93,400,1.764,401,1.159,402,1.159,403,1.159,404,2.175,405,1.845,406,1.159,407,1.159,408,1.159,409,2.175,410,1.159,411,1.159,412,1.159,413,1.159,414,2.836,415,1.159,416,1.125,417,2.836,418,1.159,419,0.955,420,2.536,421,1.159,422,0.863,430,1.029,1094,4.155,1095,4.155,1096,4.155,1097,4.155,1098,4.155,1099,4.155,1100,2.651,1101,2.651,1102,2.651,1103,2.651,1104,2.651,1105,2.651,1106,2.651,1107,2.651,1108,2.651]],["title/classes/ODataAnnotatable.html",[187,0.351,1109,2.194]],["body/classes/ODataAnnotatable.html",[3,0.098,4,0.098,5,0.098,6,0.11,8,0.074,9,0.708,10,0.201,25,1.601,26,0.132,27,0.009,31,0.548,34,0.319,37,0.108,60,0.995,62,1.198,76,2.391,77,0.246,84,0.791,85,0.814,106,1.228,113,1.07,118,1.337,120,1.002,125,0.151,135,4.338,136,3.152,137,3.443,138,3.443,139,3.443,142,2.955,174,0.917,181,0.211,185,0.007,186,0.007,187,0.569,189,0.236,191,0.941,196,0.265,198,0.99,204,0.918,251,0.236,254,1.796,675,3.858,1109,3.558,1110,5.045,1111,4.135,1112,4.135,1113,3.441,1114,7.165,1115,2.575,1116,4.509,1117,3.971,1118,4.221,1119,5.714,1120,4.142,1121,4.548,1122,4.548,1123,2.795,1124,3.971,1125,4.78,1126,5.714,1127,3.942,1128,3.229,1129,3.971,1130,5.045,1131,5.045,1132,5.045,1133,5.045,1134,3.607,1135,5.045,1136,1.907,1137,5.045,1138,5.045,1139,5.045,1140,2.939,1141,5.045,1142,5.045,1143,5.045,1144,5.045,1145,5.045,1146,5.045,1147,5.045,1148,5.045]],["title/classes/ODataAnnotation.html",[187,0.351,1116,2.356]],["body/classes/ODataAnnotation.html",[3,0.1,4,0.1,5,0.1,6,0.115,8,0.076,9,0.77,10,0.233,26,0.132,27,0.009,31,0.605,34,0.326,37,0.109,60,0.881,62,0.894,76,2.424,77,0.254,84,1.005,85,0.797,106,0.917,113,1.085,120,0.93,125,0.112,135,4.716,136,3.167,137,4.765,138,4.765,139,4.765,142,2.617,174,0.93,181,0.15,185,0.007,186,0.007,187,0.577,189,0.242,196,0.284,198,0.908,204,0.939,251,0.242,254,1.465,675,3.682,1109,2.902,1110,5.159,1113,2.806,1116,4.412,1117,3.238,1118,3.737,1120,3.798,1121,4.027,1122,4.027,1124,3.238,1125,4.807,1127,3.49,1128,2.633,1129,3.238,1130,6.415,1131,5.159,1132,5.159,1133,5.159,1134,3.689,1135,5.159,1136,1.95,1137,5.159,1138,5.159,1139,5.159,1140,3.005,1141,5.159,1142,5.159,1143,5.159,1144,5.159,1145,5.159,1146,5.159,1147,5.159,1148,5.159,1149,7.266,1150,5.843,1151,5.843,1152,5.843,1153,5.843,1154,5.843]],["title/classes/ODataAnnotations.html",[187,0.351,1155,3.103]],["body/classes/ODataAnnotations.html",[3,0.075,4,0.075,5,0.075,6,0.111,8,0.057,9,0.62,10,0.199,14,1.907,25,1.831,26,0.136,27,0.009,30,2.095,32,3.668,34,0.335,37,0.111,48,1.333,49,1.642,54,3.434,55,2.675,57,1.229,61,1.907,71,1.966,72,2.029,73,2.167,77,0.241,85,0.893,94,0.681,106,1.076,113,0.651,118,1.021,120,1.024,125,0.154,142,2.47,160,1.572,161,3.294,174,1.143,177,3.294,181,0.199,185,0.006,186,0.006,187,0.587,189,0.181,191,0.788,196,0.273,198,0.889,204,0.701,216,2.153,244,1.843,251,0.248,252,1.613,419,2.161,430,0.604,535,2.161,597,3.169,961,3.958,1128,3.694,1134,3.788,1136,2.67,1155,6.131,1156,3.265,1157,4.469,1158,5.051,1159,4.49,1160,3.2,1161,4.363,1162,5.794,1163,3.658,1164,4.905,1165,4.363,1166,4.363,1167,3.265,1168,4.363,1169,4.133,1170,4.363,1171,5.794,1172,4.363,1173,5.794,1174,4.363,1175,4.49,1176,4.363,1177,4.363,1178,4.363,1179,4.363,1180,4.363,1181,3.265,1182,3.265,1183,3.265,1184,3.265,1185,3.265,1186,2.244,1187,5.314,1188,5.988,1189,5.132,1190,5.132,1191,4.554,1192,5.314,1193,5.132,1194,5.132,1195,3.265,1196,5.545,1197,3.265,1198,3.265,1199,3.265,1200,3.265,1201,3.265,1202,3.265,1203,3.265,1204,4.49,1205,4.49,1206,3.265,1207,3.265,1208,3.265,1209,3.265,1210,3.265,1211,3.265,1212,3.265,1213,3.265,1214,3.265,1215,5.132,1216,3.265,1217,4.49,1218,5.545,1219,3.984,1220,5.132,1221,3.265,1222,3.265,1223,3.265,1224,4.49,1225,5.988,1226,4.49,1227,4.49,1228,4.49,1229,3.265,1230,3.265,1231,3.265,1232,3.265,1233,3.265,1234,3.265,1235,5.132,1236,3.265,1237,4.49,1238,3.265,1239,3.265,1240,3.265]],["title/classes/ODataApiOptions.html",[187,0.351,1241,3.901]],["body/classes/ODataApiOptions.html",[1,4.622,3,0.075,4,0.075,5,0.075,6,0.117,8,0.057,9,0.621,10,0.21,11,4.473,12,4.139,13,4.668,14,3.002,15,4.438,16,3.986,17,4.335,18,4.668,19,1.943,20,4.139,21,4.668,22,4.335,23,4.118,24,3.964,25,1.732,26,0.136,27,0.009,28,3.193,29,3.493,30,3.551,31,0.68,32,3.672,33,3.806,34,0.383,37,0.066,41,2.628,44,2.636,51,2.479,53,3.331,54,3.193,59,3.469,60,0.729,74,3.964,76,2.006,77,0.236,78,2.636,79,2.636,80,2.525,81,4.335,82,4.335,83,2.636,84,0.605,85,0.661,86,2.25,87,2.762,88,2.425,92,3.29,103,3.75,104,3.091,105,2.348,111,3.091,125,0.084,126,2.128,181,0.176,185,0.006,186,0.006,187,0.347,189,0.181,196,0.289,204,0.703,217,1.507,244,1.176,251,0.181,254,1.507,255,2.586,419,2.165,535,2.165,914,2.173,1011,4.844,1113,2.887,1115,1.972,1157,4.267,1241,5.308,1242,4.375,1243,4.375,1244,4.375,1245,6.011,1246,4.844,1247,3.849,1248,4.375,1249,7.394,1250,4.375,1251,4.222,1252,4.375,1253,4.375,1254,3.992,1255,4.844,1256,4.375,1257,7.394,1258,7.394,1259,4.375,1260,5.193,1261,3.944,1262,4.375,1263,6.011,1264,5.308,1265,4.375,1266,4.375,1267,4.375,1268,4.375,1269,6.011,1270,3.469,1271,4.375,1272,4.375,1273,4.498,1274,6.011,1275,4.375,1276,4.375,1277,3.863,1278,4.375,1279,6.011,1280,6.011,1281,4.498,1282,3.274,1283,7.377,1284,8.203,1285,4.375,1286,4.375,1287,4.375,1288,8.008,1289,8.008,1290,8.008,1291,8.008,1292,8.008,1293,8.008,1294,8.008,1295,4.375,1296,4.375,1297,4.375,1298,4.375,1299,4.375,1300,4.375,1301,4.375,1302,3.863,1303,4.375,1304,4.375,1305,4.375,1306,4.375,1307,3.863,1308,6.011,1309,4.375,1310,4.375,1311,4.375,1312,3.863,1313,4.375,1314,3.863,1315,4.375,1316,4.375,1317,4.375,1318,3.863,1319,4.375,1320,3.863,1321,4.375,1322,6.011,1323,4.375,1324,4.375,1325,4.375,1326,4.375,1327,4.375,1328,6.011,1329,4.375,1330,6.011,1331,4.375,1332,4.375,1333,4.375,1334,3.863]],["title/classes/ODataBaseService.html",[187,0.351,1335,3.103]],["body/classes/ODataBaseService.html",[3,0.065,4,0.065,5,0.065,6,0.114,8,0.049,10,0.222,19,2.235,26,0.137,27,0.009,34,0.354,35,3.856,36,1.701,37,0.057,46,4.851,57,2.268,60,0.769,77,0.213,85,0.667,105,2.942,125,0.169,126,1.965,145,4.376,176,4.441,181,0.233,185,0.005,186,0.005,187,0.3,189,0.156,191,0.712,196,0.281,198,0.985,244,2.455,251,0.224,252,2.49,430,1.165,535,1.951,597,1.395,619,4.086,1335,3.806,1336,3.774,1337,6.516,1338,6.516,1339,6.134,1340,3.659,1341,3.332,1342,4.866,1343,5.597,1344,3.774,1345,4.452,1346,5.49,1347,4.15,1348,6.554,1349,6.166,1350,6.151,1351,3.774,1352,4.437,1353,3.774,1354,3.774,1355,3.774,1356,3.774,1357,5.49,1358,6.554,1359,6.151,1360,3.774,1361,3.774,1362,3.774,1363,3.774,1364,3.774,1365,4.744,1366,6.225,1367,5.843,1368,3.774,1369,4.002,1370,3.774,1371,3.774,1372,3.332,1373,3.774,1374,3.041,1375,2.651,1376,3.041,1377,2.092,1378,3.774,1379,6.339,1380,6.339,1381,5.418,1382,3.774]],["title/classes/ODataBatchRequest.html",[187,0.351,1383,3.901]],["body/classes/ODataBatchRequest.html",[3,0.054,4,0.054,5,0.054,6,0.103,8,0.093,9,0.429,10,0.146,11,2.739,16,4.379,19,1.19,24,2.739,26,0.108,27,0.009,29,1.42,30,3.051,34,0.463,35,3.154,36,1.42,37,0.071,48,0.923,49,1.714,50,1.465,52,1.565,53,4.547,76,1.905,77,0.241,84,0.79,85,0.846,94,0.567,103,3.722,104,4.164,105,2.485,109,3.821,113,1.225,118,1.11,120,0.872,121,1.514,125,0.131,130,3.446,160,0.88,172,3.932,174,0.978,175,2.357,179,2.86,181,0.146,184,1.565,185,0.005,186,0.005,187,0.377,189,0.13,191,0.623,196,0.252,198,0.853,204,0.507,213,2.164,214,2.547,215,1.748,216,0.828,219,0.79,220,1.965,244,2.362,247,1.851,251,0.13,360,1.471,400,2.423,423,2.358,436,1.989,460,2.441,471,1.514,485,3.824,515,3.333,525,3.603,913,4.6,914,1.565,1029,2.936,1045,2.739,1062,2.289,1063,2.213,1136,1.051,1140,2.441,1163,3.634,1186,2.936,1247,1.565,1251,3.333,1261,2.531,1270,4.789,1273,2.358,1340,2.739,1347,2.139,1349,3.151,1352,3.388,1383,6.561,1384,3.151,1385,5.04,1386,4.746,1387,4.746,1388,6.352,1389,3.151,1390,4.288,1391,4.746,1392,3.151,1393,3.151,1394,4.746,1395,6.561,1396,3.151,1397,4.746,1398,7.43,1399,3.151,1400,3.151,1401,3.151,1402,3.151,1403,5.77,1404,2.783,1405,2.093,1406,3.151,1407,3.151,1408,2.783,1409,3.551,1410,4.746,1411,4.19,1412,5.708,1413,3.824,1414,3.151,1415,4.746,1416,3.151,1417,3.151,1418,4.6,1419,4.746,1420,4.746,1421,4.746,1422,3.151,1423,3.151,1424,5.708,1425,3.151,1426,3.151,1427,3.151,1428,2.783,1429,2.358,1430,3.151,1431,3.333,1432,3.551,1433,4.106,1434,6.352,1435,4.786,1436,4.746,1437,6.814,1438,4.746,1439,2.783,1440,3.333,1441,3.151,1442,3.551,1443,4.746,1444,4.746,1445,4.133,1446,7.824,1447,4.746,1448,2.783,1449,2.093,1450,4.746,1451,6.352,1452,4.746,1453,5.708,1454,3.151,1455,4.746,1456,3.151,1457,3.151,1458,3.151,1459,3.151,1460,3.151,1461,3.151,1462,3.151,1463,3.151,1464,3.151,1465,3.151,1466,3.151,1467,3.151,1468,3.151,1469,3.151,1470,4.746,1471,3.151,1472,2.783,1473,3.151,1474,4.6,1475,3.151,1476,3.151,1477,5.77,1478,3.151,1479,3.151,1480,3.151,1481,7.824,1482,2.783,1483,3.151,1484,3.151,1485,3.151,1486,3.151,1487,3.151,1488,5.708,1489,3.151,1490,5.708,1491,2.783,1492,5.708,1493,2.996,1494,2.783,1495,4.271,1496,3.151,1497,3.151,1498,3.151,1499,4.19,1500,3.151,1501,3.151,1502,5.04,1503,3.151,1504,3.151,1505,3.151,1506,3.151,1507,5.708,1508,5.358,1509,6.352,1510,3.151,1511,4.746,1512,2.531,1513,3.151,1514,3.151,1515,2.358,1516,3.151,1517,3.151,1518,3.151,1519,3.151,1520,3.151,1521,3.151,1522,4.746,1523,4.19,1524,3.151,1525,4.746,1526,4.19,1527,4.19,1528,3.824,1529,4.746,1530,3.151,1531,4.746,1532,4.746,1533,4.746,1534,4.746,1535,3.151,1536,3.151,1537,3.151,1538,4.19,1539,3.151,1540,2.783,1541,3.151,1542,3.151,1543,3.151,1544,3.151,1545,4.746,1546,7.824,1547,4.746,1548,6.352,1549,6.814,1550,3.151,1551,5.708,1552,6.352,1553,4.746,1554,3.151,1555,3.151,1556,3.151,1557,3.151,1558,3.151,1559,3.151,1560,3.151,1561,3.151,1562,3.151,1563,3.151,1564,3.151,1565,3.151,1566,3.151,1567,2.783,1568,3.151,1569,3.151,1570,3.151,1571,3.151,1572,3.151,1573,5.708,1574,3.151,1575,3.151,1576,3.151,1577,3.151,1578,3.151,1579,4.746,1580,8.097,1581,5.708,1582,3.151,1583,3.151,1584,3.151,1585,5.708,1586,4.753,1587,3.551,1588,6.352,1589,4.746,1590,3.151,1591,3.151,1592,3.151,1593,3.151,1594,3.151,1595,3.151]],["title/classes/ODataCache.html",[187,0.351,1596,2.934]],["body/classes/ODataCache.html",[0,0.796,3,0.054,4,0.054,5,0.054,6,0.112,8,0.041,9,0.432,10,0.215,25,1.784,26,0.135,27,0.009,31,0.439,34,0.381,35,3.643,36,1.431,37,0.072,41,3.915,42,1.633,43,3.534,49,1.719,50,3.645,52,1.577,60,0.695,76,2.896,77,0.251,84,1.031,85,0.815,103,3.546,105,2.28,106,1.289,113,1.227,116,4.724,118,1.599,120,1.038,125,0.172,126,1.777,160,1.482,174,0.734,181,0.22,185,0.005,186,0.006,187,0.252,189,0.131,191,0.627,196,0.277,198,1.001,204,0.51,217,1.196,251,0.197,254,0.796,436,4.315,446,3.279,450,1.633,521,3.062,597,2.754,815,3.352,914,1.577,918,5.64,1029,2.454,1049,3.012,1062,1.273,1123,2.989,1136,2.127,1163,3.058,1247,2.37,1254,2.108,1255,6.176,1270,4.609,1347,2.873,1352,1.693,1369,2.004,1377,1.759,1390,4.982,1433,4.813,1445,5.075,1474,3.846,1477,4.62,1483,2.108,1493,5.042,1512,1.693,1596,3.169,1597,2.803,1598,5.574,1599,6.152,1600,4.29,1601,3.846,1602,4.478,1603,4.771,1604,3.846,1605,4.29,1606,4.29,1607,3.846,1608,3.846,1609,3.846,1610,6.125,1611,4.772,1612,3.175,1613,2.558,1614,3.175,1615,5.771,1616,6.814,1617,4.768,1618,3.571,1619,3.175,1620,3.175,1621,4.025,1622,2.558,1623,3.175,1624,2.454,1625,3.352,1626,3.175,1627,3.571,1628,5.574,1629,3.352,1630,3.175,1631,2.558,1632,3.175,1633,2.558,1634,3.175,1635,2.558,1636,3.175,1637,4.801,1638,2.376,1639,2.558,1640,3.571,1641,3.175,1642,2.645,1643,2.558,1644,3.175,1645,3.352,1646,3.175,1647,3.571,1648,3.175,1649,4.423,1650,5.867,1651,3.571,1652,3.175,1653,3.846,1654,2.803,1655,2.803,1656,2.108,1657,2.803,1658,4.213,1659,2.803,1660,3.846,1661,4.213,1662,5.062,1663,4.213,1664,3.571,1665,2.803,1666,2.803,1667,2.803,1668,2.558,1669,2.558,1670,2.558,1671,2.803,1672,4.213,1673,2.803,1674,2.803,1675,2.803,1676,2.803,1677,2.803,1678,2.803,1679,2.803,1680,2.803,1681,4.213,1682,2.803,1683,4.213,1684,2.803,1685,4.213,1686,2.803,1687,2.803,1688,2.803,1689,2.803,1690,2.803,1691,2.558,1692,2.803,1693,2.803,1694,2.803,1695,2.803,1696,2.803,1697,2.803,1698,2.803,1699,2.803,1700,2.803,1701,2.803,1702,2.803,1703,5.63,1704,2.803,1705,4.213,1706,2.803,1707,2.803,1708,2.803,1709,2.803,1710,2.803,1711,2.803,1712,2.803,1713,2.558,1714,2.803,1715,2.803,1716,2.803]],["title/interfaces/ODataCacheEntry.html",[0,1.108,1617,2.934]],["body/interfaces/ODataCacheEntry.html",[0,0.989,2,2.105,3,0.068,4,0.068,5,0.068,6,0.051,8,0.051,9,0.506,26,0.106,27,0.009,31,0.302,34,0.416,35,3.384,36,1.779,37,0.084,41,3.904,42,2.03,43,3.918,49,1.339,50,3.471,52,1.96,76,2.98,77,0.25,84,1.162,85,0.839,103,3.263,105,2.245,106,1.216,113,1.281,116,4.763,118,0.923,120,1.02,125,0.162,160,1.511,174,0.832,185,0.005,186,0.006,187,0.313,198,0.89,204,0.634,217,0.989,251,0.163,254,0.989,436,3.532,446,2.877,521,3.396,597,2.402,815,4.564,914,1.96,918,5.734,1029,2.877,1049,2.492,1062,1.583,1123,1.539,1136,2.168,1163,2.984,1247,1.96,1255,6.564,1270,4.081,1347,2.521,1352,2.105,1369,2.492,1377,2.187,1390,4.474,1433,4.498,1445,4.992,1474,4.509,1477,5.237,1483,2.621,1493,4.463,1512,2.105,1596,2.621,1597,3.485,1598,4.863,1599,6.349,1600,2.954,1602,2.772,1603,4.186,1605,2.954,1606,2.954,1610,6.157,1615,5.445,1616,6.824,1617,4.695,1618,2.954,1621,3.532,1624,2.03,1625,2.772,1627,2.954,1628,5.291,1629,2.772,1637,3.929,1640,2.954,1642,2.187,1645,2.772,1647,2.954,1649,4.081,1650,5.586,1651,2.954,1653,4.509,1654,3.485,1655,3.485,1656,2.621,1657,3.485,1658,4.94,1659,4.94,1660,5.237,1661,5.738,1662,6.845,1663,4.94,1664,4.186,1665,3.485,1666,3.485,1667,3.485,1668,3.181,1669,3.181,1670,3.181,1671,3.485,1672,4.94,1673,3.485,1674,3.485,1675,3.485,1676,3.485,1677,3.485,1678,3.485,1679,3.485,1680,3.485,1681,4.94,1682,3.485,1683,4.94,1684,3.485,1685,4.94,1686,3.485,1687,3.485,1688,3.485,1689,3.485,1690,3.485,1691,3.181,1692,3.485,1693,3.485,1694,3.485,1695,3.485,1696,3.485,1697,3.485,1698,3.485,1699,3.485,1700,3.485,1701,3.485,1702,3.485,1703,6.243,1704,3.485,1705,4.94,1706,3.485,1707,3.485,1708,3.485,1709,3.485,1710,3.485,1711,3.485,1712,3.485,1713,3.181,1714,3.485,1715,3.485,1716,3.485]],["title/classes/ODataCallable.html",[187,0.351,1717,3.56]],["body/classes/ODataCallable.html",[3,0.071,4,0.071,5,0.071,6,0.112,8,0.054,9,0.523,10,0.229,25,1.612,26,0.14,27,0.009,29,3.773,31,0.649,34,0.403,37,0.062,45,2.053,60,1.11,62,0.885,76,2.625,77,0.249,85,0.758,86,2.972,92,3.639,94,0.574,100,3.32,101,3.466,105,2.89,106,0.907,107,3.779,108,3.779,110,3.711,112,2.776,118,1.352,120,0.529,125,0.169,126,1.281,132,2.491,136,2.599,142,2.081,148,3.999,174,0.529,178,3.201,179,4.016,180,4.207,181,0.224,185,0.006,186,0.006,187,0.328,189,0.171,191,0.759,196,0.291,198,1.045,204,0.664,251,0.171,254,1.809,256,1.928,430,0.999,452,2.629,594,3.063,643,5.472,675,3.428,912,4.021,1026,2.903,1109,3.31,1111,3.336,1112,3.336,1113,2.776,1115,2.605,1116,3.083,1117,2.291,1118,3.711,1120,3.466,1121,3.203,1122,3.203,1123,3.15,1124,2.291,1125,2.291,1127,2.776,1128,1.863,1129,2.291,1624,4.448,1642,3.693,1717,4.658,1718,4.134,1719,5.827,1720,3.846,1721,4.059,1722,4.059,1723,3.649,1724,4.016,1725,4.794,1726,5.78,1727,4.134,1728,4.134,1729,4.134,1730,5.4,1731,3.093,1732,3.093,1733,2.491,1734,4.134,1735,5.788,1736,2.745,1737,4.134,1738,3.336,1739,4.134,1740,5.103,1741,5.103,1742,5.103,1743,4.134,1744,5.103,1745,5.103,1746,4.134,1747,3.336,1748,4.134,1749,5.103,1750,4.325,1751,2.903,1752,3.093,1753,2.903,1754,2.903,1755,3.093,1756,2.903,1757,2.205,1758,3.093,1759,2.386,1760,3.093,1761,1.985,1762,2.61,1763,2.61,1764,2.291,1765,2.61,1766,2.491,1767,2.61,1768,2.61,1769,2.61,1770,2.903,1771,3.093,1772,2.745,1773,2.903,1774,2.491,1775,2.491,1776,2.291,1777,6.664,1778,4.134,1779,5.78,1780,4.134,1781,4.134,1782,4.134,1783,2.745,1784,3.65,1785,3.65,1786,3.65,1787,4.134,1788,4.134,1789,3.846,1790,3.846,1791,3.65,1792,2.745,1793,2.745,1794,2.745,1795,4.134]],["title/classes/ODataCallableParser.html",[187,0.351,1730,3.306]],["body/classes/ODataCallableParser.html",[3,0.073,4,0.073,5,0.073,6,0.115,8,0.056,9,0.536,10,0.223,19,1.838,25,1.518,26,0.138,27,0.009,31,0.561,34,0.409,37,0.089,49,1.026,51,2.445,60,0.52,77,0.255,85,0.858,92,3.929,98,1.026,100,3.805,101,3.264,105,2.894,106,0.93,107,3.264,108,3.521,110,3.77,112,2.059,113,1.218,114,4.063,118,1.003,120,0.759,125,0.169,130,1.932,140,3.365,141,1.865,148,4.063,161,2.847,162,1.467,174,0.938,176,3.521,177,2.059,181,0.221,185,0.006,186,0.006,187,0.471,189,0.177,191,0.779,196,0.285,198,0.913,204,0.689,217,1.486,251,0.177,256,2.267,405,2.135,430,1.014,446,2.205,462,3.011,521,3.521,551,1.467,594,2.516,643,4.868,914,2.129,934,3.011,1045,3.922,1062,1.719,1113,2.847,1115,1.932,1136,1.431,1140,3.049,1352,3.162,1512,2.287,1720,4.231,1723,3.743,1730,4.436,1736,2.847,1738,3.422,1747,2.475,1757,3.162,1783,5.605,1789,4.441,1790,4.441,1792,2.847,1793,2.847,1794,2.847,1796,3.786,1797,5.928,1798,4.288,1799,4.288,1800,4.288,1801,5.476,1802,4.288,1803,4.288,1804,4.288,1805,4.288,1806,4.288,1807,4.288,1808,5.235,1809,4.288,1810,4.288,1811,5.235,1812,4.288,1813,6.473,1814,4.095,1815,5.085,1816,3.208,1817,3.786,1818,3.208,1819,3.786,1820,3.208,1821,3.786,1822,5.418,1823,3.743,1824,4.164,1825,3.786,1826,3.786,1827,3.208,1828,3.208,1829,3.208,1830,3.208,1831,3.208,1832,4.436,1833,3.208,1834,4.436,1835,3.208,1836,3.208,1837,3.011,1838,3.208,1839,2.707,1840,2.707,1841,5.235,1842,3.786,1843,6,1844,3.786,1845,3.786,1846,2.847,1847,2.847,1848,2.707,1849,6.473,1850,7.204,1851,5.235,1852,5.235,1853,3.786,1854,3.786,1855,3.786,1856,3.786,1857,3.786,1858,3.786]],["title/classes/ODataConfigAsyncLoader.html",[187,0.351,1859,3.306]],["body/classes/ODataConfigAsyncLoader.html",[3,0.108,4,0.108,5,0.108,6,0.106,8,0.082,10,0.162,26,0.095,27,0.009,34,0.457,35,3.94,36,2.847,37,0.123,49,1.512,60,0.924,85,0.851,113,0.943,122,4.399,123,4.474,125,0.121,181,0.162,185,0.007,186,0.007,187,0.65,189,0.261,191,1.001,196,0.246,198,0.725,204,1.015,217,2.052,251,0.315,529,3.785,597,2.817,1136,2.108,1656,4.195,1823,3.988,1859,5.703,1860,5.091,1861,5.644,1862,7.122,1863,6.318,1864,6.318,1865,6.318,1866,4.728,1867,4.195,1868,4.195,1869,5.091,1870,5.091,1871,5.091,1872,5.091,1873,5.091,1874,5.091,1875,5.091,1876,5.091,1877,5.091,1878,5.091,1879,5.091]],["title/classes/ODataConfigLoader.html",[187,0.351,1861,2.934]],["body/classes/ODataConfigLoader.html",[3,0.11,4,0.11,5,0.11,6,0.1,8,0.084,27,0.009,34,0.461,35,3.866,36,2.907,37,0.124,49,1.544,60,0.936,85,0.855,113,0.963,122,3.723,123,4.499,185,0.008,186,0.008,187,0.656,189,0.267,191,1.014,196,0.208,198,0.74,204,1.037,217,1.935,251,0.267,529,3.833,597,3.163,1136,2.152,1656,4.283,1823,4.072,1859,4.827,1860,5.198,1861,5.683,1862,7.156,1866,4.827,1867,4.283,1868,4.283,1869,5.198,1870,5.198,1871,5.198,1872,5.198,1873,5.198,1874,5.198,1875,5.198,1876,5.198,1877,5.198,1878,5.198,1879,5.198,1880,6.45]],["title/classes/ODataConfigSyncLoader.html",[187,0.351,1867,2.934]],["body/classes/ODataConfigSyncLoader.html",[3,0.109,4,0.109,5,0.109,6,0.106,8,0.082,10,0.163,26,0.095,27,0.009,34,0.457,35,3.856,36,2.858,37,0.123,49,1.518,60,0.926,85,0.852,113,0.947,122,3.661,123,4.672,125,0.122,181,0.163,185,0.007,186,0.007,187,0.651,189,0.262,191,1.004,196,0.246,198,0.728,204,1.019,217,2.055,251,0.316,529,3.794,597,2.824,1136,2.116,1656,4.212,1823,4.004,1859,4.746,1860,5.111,1861,5.651,1862,7.129,1866,4.746,1867,5.073,1868,4.212,1869,6.157,1870,5.111,1871,5.111,1872,5.111,1873,5.111,1874,5.111,1875,5.111,1876,5.111,1877,5.111,1878,5.111,1879,5.111,1881,6.342,1882,6.342,1883,6.342]],["title/classes/ODataEntitiesAnnotations.html",[187,0.351,1218,2.934]],["body/classes/ODataEntitiesAnnotations.html",[3,0.073,4,0.073,5,0.073,6,0.112,8,0.055,9,0.611,10,0.209,14,1.854,25,1.817,26,0.135,27,0.009,30,2.036,32,3.624,34,0.328,37,0.11,48,1.313,49,1.835,54,3.393,55,1.654,57,1.194,61,2.953,62,0.9,71,3.044,72,3.141,73,3.355,77,0.244,85,0.892,94,0.724,106,1.06,113,0.633,118,0.992,120,1.015,125,0.156,142,1.527,160,1.562,161,3.244,174,1.139,177,3.244,181,0.197,185,0.006,186,0.006,187,0.579,189,0.175,191,0.773,196,0.287,198,0.91,204,0.681,216,2.136,244,1.816,251,0.175,252,1.581,419,2.627,452,2.458,535,2.118,597,2.697,961,3.899,1128,3.666,1134,3.714,1136,2.434,1155,6.186,1156,3.173,1157,4.211,1158,5.007,1159,4.402,1160,3.138,1162,5.055,1163,2.261,1164,3.906,1167,3.173,1169,4.071,1171,5.735,1173,5.735,1175,4.402,1181,3.173,1182,3.173,1183,3.173,1184,3.173,1185,3.173,1186,2.18,1187,5.267,1188,5.935,1189,5.055,1190,5.055,1191,4.486,1192,5.267,1193,5.055,1194,5.055,1195,3.173,1196,5.507,1197,3.173,1198,3.173,1199,3.173,1200,3.173,1201,3.173,1202,3.173,1203,3.173,1204,5.46,1205,4.402,1206,3.173,1207,3.173,1208,3.173,1209,3.173,1210,3.173,1211,3.173,1212,3.173,1213,3.173,1214,3.173,1215,5.055,1216,3.173,1217,4.402,1218,5.812,1219,3.906,1220,5.055,1221,3.173,1222,3.173,1223,3.173,1224,5.46,1225,5.935,1226,4.402,1227,5.055,1228,4.402,1229,3.173,1230,3.173,1231,5.055,1232,3.173,1233,5.055,1234,3.173,1235,5.055,1236,3.173,1237,4.402,1238,3.173,1239,3.173,1240,3.173,1884,4.24,1885,3.417,1886,4.24,1887,4.24,1888,4.24,1889,4.24,1890,3.417,1891,3.417,1892,3.744,1893,4.24,1894,4.24,1895,4.24,1896,4.24,1897,4.24,1898,4.24,1899,4.24,1900,4.24,1901,4.24,1902,4.24,1903,4.24,1904,4.24,1905,4.24,1906,3.744,1907,4.24]],["title/classes/ODataEntityAnnotations.html",[187,0.351,1196,2.934]],["body/classes/ODataEntityAnnotations.html",[3,0.068,4,0.068,5,0.068,6,0.116,8,0.052,9,0.677,10,0.22,14,2.855,25,1.785,26,0.138,27,0.009,30,3.136,32,3.525,34,0.314,37,0.107,48,1.269,49,1.913,54,3.3,55,1.553,57,2.251,61,1.74,62,0.861,71,1.794,72,1.851,73,1.977,77,0.241,85,0.888,94,0.705,106,1.024,113,0.594,118,0.931,120,0.995,125,0.167,142,1.434,160,1.54,161,3.596,174,1.129,177,3.136,181,0.218,185,0.005,186,0.005,187,0.564,189,0.165,191,0.739,196,0.292,198,0.953,204,0.64,216,2.099,244,1.755,251,0.165,252,1.513,419,2.556,452,2.409,483,3.483,535,2.027,597,2.624,961,3.768,1128,3.601,1134,3.553,1136,2.499,1155,6.127,1156,2.979,1157,4.096,1158,4.908,1159,4.212,1160,3.002,1162,4.886,1163,2.123,1164,3.738,1167,2.979,1169,3.935,1171,5.604,1173,5.604,1175,4.212,1181,2.979,1182,2.979,1183,2.979,1184,2.979,1185,2.979,1186,2.047,1187,5.162,1188,5.817,1189,4.886,1190,4.886,1191,4.336,1192,5.162,1193,4.886,1194,4.886,1195,2.979,1196,5.829,1197,2.979,1198,2.979,1199,2.979,1200,4.886,1201,2.979,1202,4.886,1203,2.979,1204,5.311,1205,4.212,1206,4.886,1207,2.979,1208,4.886,1209,2.979,1210,4.886,1211,2.979,1212,4.886,1213,2.979,1214,4.886,1215,4.886,1216,2.979,1217,5.604,1218,5.588,1219,4.713,1220,4.886,1221,2.979,1222,2.979,1223,2.979,1224,5.311,1225,5.817,1226,4.212,1227,4.886,1228,4.212,1229,2.979,1230,2.979,1231,2.979,1232,2.979,1233,2.979,1234,2.979,1235,4.886,1236,2.979,1237,4.212,1238,2.979,1239,2.979,1240,2.979,1885,3.208,1890,3.208,1891,3.208,1892,3.515,1906,3.515,1908,3.981,1909,3.981,1910,3.981,1911,3.981,1912,3.981,1913,3.981,1914,3.981,1915,3.981,1916,3.981,1917,3.981,1918,3.981,1919,3.981,1920,3.981,1921,3.981,1922,3.981,1923,3.981,1924,3.981,1925,3.981,1926,3.981,1927,3.981,1928,3.981,1929,3.981,1930,3.981,1931,3.981,1932,3.981,1933,3.981,1934,3.981,1935,3.981,1936,3.981]],["title/classes/ODataEntityContainer.html",[187,0.351,1937,3.56]],["body/classes/ODataEntityContainer.html",[3,0.089,4,0.089,5,0.089,6,0.097,8,0.068,9,0.612,10,0.223,25,1.511,26,0.141,27,0.009,31,0.644,34,0.443,37,0.079,45,2.592,60,0.91,62,1.035,77,0.25,85,0.503,86,3.478,94,0.671,106,1.061,118,1.221,120,0.668,125,0.17,126,1.618,136,2.858,142,2.436,150,4.783,151,4.33,174,0.668,181,0.225,185,0.007,186,0.007,187,0.415,189,0.216,191,0.889,196,0.29,198,1.03,204,0.839,251,0.216,254,1.99,430,0.722,452,2.746,594,3.369,619,2.507,620,4.609,632,5.972,634,3.146,675,3.64,912,4.255,1026,3.666,1109,3.726,1111,3.904,1112,3.904,1113,3.248,1115,3.048,1116,3.607,1117,2.893,1118,4.082,1120,3.812,1121,3.748,1122,3.748,1123,3.096,1124,2.893,1125,2.893,1127,3.248,1128,2.352,1129,2.893,1136,1.742,1624,4.332,1642,4.158,1719,6.017,1721,4.75,1722,4.75,1723,4.27,1724,4.522,1725,5.191,1731,3.906,1732,3.906,1733,3.146,1735,4.983,1751,3.666,1752,3.906,1753,3.666,1754,3.666,1755,3.906,1756,3.666,1757,2.784,1758,3.906,1759,3.013,1760,3.906,1761,2.507,1762,3.295,1763,3.295,1764,2.893,1765,3.295,1766,3.146,1767,3.295,1768,3.295,1769,3.295,1770,3.666,1771,3.906,1772,3.466,1773,3.666,1774,3.146,1775,3.146,1776,2.893,1937,5.451,1938,6.625,1939,5.615,1940,5.22,1941,5.22,1942,5.22]],["title/classes/ODataEntityService.html",[187,0.351,1943,3.306]],["body/classes/ODataEntityService.html",[3,0.099,4,0.099,5,0.099,6,0.107,8,0.075,10,0.218,19,1.814,26,0.136,27,0.009,34,0.44,35,3.347,37,0.087,48,1.684,60,0.704,85,0.559,94,0.719,105,2.75,118,1.693,120,0.926,125,0.163,160,1.077,171,2.395,176,4.159,181,0.23,185,0.007,186,0.007,187,0.461,189,0.24,191,0.951,196,0.279,198,0.975,244,2.219,252,2.328,430,1.142,452,2.444,535,2.606,594,3.072,597,3.247,619,3.476,912,3.476,1335,6.082,1337,5.416,1338,5.416,1339,5.416,1346,4.345,1347,3.828,1348,5.416,1349,5.751,1350,5.083,1352,3.86,1357,4.345,1358,5.416,1359,5.083,1365,4.345,1366,5.416,1367,5.083,1369,3.666,1377,3.218,1432,5.9,1943,5.416,1944,5.806,1945,5.416,1946,7.885,1947,5.806,1948,6.652,1949,5.806,1950,6.39,1951,5.481,1952,5.806,1953,4.679,1954,4.679,1955,4.679,1956,5.806,1957,5.806,1958,4.679,1959,4.679,1960,5.806,1961,4.679,1962,5.806]],["title/classes/ODataEntitySet.html",[187,0.351,1939,3.306]],["body/classes/ODataEntitySet.html",[3,0.089,4,0.089,5,0.089,6,0.103,8,0.068,9,0.611,10,0.223,19,1.304,25,1.674,26,0.141,27,0.009,31,0.644,34,0.418,37,0.078,45,2.584,60,0.908,62,1.033,77,0.252,85,0.501,86,3.471,94,0.67,106,1.059,118,1.217,120,0.666,125,0.17,126,1.613,136,2.855,142,2.431,152,4.777,174,0.666,181,0.225,182,4.324,183,3.996,185,0.007,186,0.007,187,0.413,189,0.215,191,0.887,196,0.291,198,1.03,204,0.836,251,0.215,254,1.987,430,0.72,452,2.744,594,3.365,635,4.193,639,4.594,642,5.959,675,3.637,912,4.216,1026,3.654,1109,3.721,1111,3.895,1112,3.895,1113,3.242,1115,2.345,1116,3.6,1117,2.884,1118,4.077,1120,3.807,1121,3.741,1122,3.741,1123,3.092,1124,2.884,1125,2.884,1127,3.242,1128,2.345,1129,2.884,1624,4.329,1642,4.152,1719,6.014,1721,4.74,1722,4.74,1723,4.261,1724,4.515,1725,5.186,1731,3.893,1732,3.893,1733,3.135,1735,4.975,1751,3.654,1752,3.893,1753,3.654,1754,3.654,1755,3.893,1756,3.654,1757,2.775,1758,3.893,1759,3.003,1760,3.893,1761,2.499,1762,3.285,1763,3.285,1764,2.884,1765,3.285,1766,3.135,1767,3.285,1768,3.285,1769,3.285,1770,3.654,1771,3.893,1772,3.455,1773,3.654,1774,3.135,1775,3.135,1776,2.884,1938,7,1939,5.051,1963,5.203,1964,5.203,1965,5.203,1966,5.203]],["title/classes/ODataEntitySetService.html",[187,0.351,1967,3.56]],["body/classes/ODataEntitySetService.html",[3,0.054,4,0.054,5,0.054,6,0.109,8,0.041,10,0.218,14,3.855,19,1.188,26,0.131,27,0.009,31,0.241,34,0.414,35,3.481,36,1.418,37,0.047,48,1.78,60,0.575,61,1.376,71,2.136,76,2.993,77,0.199,84,0.789,85,0.835,94,0.471,103,3.721,105,2.947,113,0.851,118,1.674,120,0.95,121,1.511,125,0.164,126,1.469,130,2.136,145,4.022,160,1.68,173,4.802,174,0.871,176,3.437,181,0.224,183,3.817,184,1.563,185,0.005,186,0.005,187,0.25,189,0.13,191,0.623,196,0.278,198,0.983,244,1.706,252,1.924,430,1.12,452,2.11,535,1.707,619,4.479,634,5.294,635,2.536,912,3.27,961,4.599,1123,3.157,1140,2.438,1160,4.077,1169,5.091,1186,4.218,1251,3.329,1254,2.09,1260,3.329,1335,4.005,1337,3.547,1338,3.547,1339,3.547,1346,2.355,1347,3.696,1348,3.547,1349,4.752,1350,3.329,1352,2.528,1357,2.355,1358,3.547,1359,3.329,1365,2.355,1366,3.547,1367,3.329,1369,1.987,1375,2.21,1377,1.744,1395,4.186,1405,2.09,1435,5.883,1445,3.291,1449,3.148,1528,2.536,1653,5.985,1656,2.09,1761,3.827,1943,5.095,1945,5.963,1948,5.115,1950,4.186,1951,5.653,1953,2.536,1954,2.536,1955,2.536,1958,3.82,1959,2.536,1961,2.536,1967,3.82,1968,8.376,1969,5.036,1970,4.186,1971,5.703,1972,4.74,1973,5.703,1974,4.752,1975,7.156,1976,5.703,1977,5.605,1978,3.147,1979,4.186,1980,5.605,1981,3.147,1982,3.147,1983,3.147,1984,3.147,1985,6.518,1986,3.147,1987,3.147,1988,3.147,1989,5.036,1990,2.779,1991,5.703,1992,4.74,1993,3.147,1994,3.147,1995,3.147,1996,4.74,1997,3.147,1998,3.147,1999,3.147,2000,3.147,2001,3.147,2002,3.147,2003,3.147,2004,3.147,2005,3.147,2006,3.147,2007,3.147,2008,3.147,2009,4.74,2010,3.147,2011,3.147,2012,3.147,2013,2.779,2014,3.147,2015,3.147,2016,3.147,2017,2.779,2018,3.147,2019,3.82,2020,3.147,2021,3.147,2022,3.147,2023,6.347,2024,5.703,2025,3.147,2026,4.458,2027,2.779,2028,3.147,2029,2.779,2030,3.147,2031,3.147,2032,3.147,2033,3.147,2034,3.147,2035,3.147,2036,4.74,2037,3.147,2038,3.147,2039,3.147,2040,3.147,2041,3.147,2042,3.147,2043,3.147,2044,3.147,2045,3.147,2046,3.147,2047,3.147,2048,3.147]],["title/classes/ODataEntityTypeKey.html",[187,0.351,2049,3.56]],["body/classes/ODataEntityTypeKey.html",[3,0.039,4,0.039,5,0.039,6,0.069,8,0.029,9,0.48,10,0.119,14,0.991,25,0.82,26,0.129,27,0.009,30,1.089,31,0.632,34,0.366,37,0.088,49,1.494,51,1.513,57,1.496,60,1.031,64,0.991,65,1.653,67,2.189,76,2.357,77,0.248,84,0.807,85,0.857,92,3.712,94,0.364,97,3.064,98,2.015,99,2.667,100,3.492,101,1.762,105,2.762,106,1.224,107,1.762,108,1.762,112,1.762,113,1.257,114,2.561,120,1.127,121,2.55,125,0.165,126,0.703,128,2.033,130,1.653,136,1.664,140,1.905,141,1.615,146,2.117,157,4.303,159,0.796,160,1.082,161,1.089,162,0.776,163,3.633,164,0.796,165,0.796,166,1.366,167,1.366,168,2.55,169,1.366,171,0.935,172,1.309,174,0.875,175,2.637,176,2.996,177,3.393,181,0.058,184,2.637,185,0.004,186,0.004,187,0.422,189,0.094,196,0.149,198,0.754,203,0.757,204,0.743,205,0.639,215,0.624,217,0.92,244,1.677,245,2.071,247,1.802,251,0.241,254,2.072,255,2.282,256,2.082,405,1.664,446,1.887,449,1.089,450,1.166,462,2.577,470,2.956,483,3.647,507,2.211,511,2.211,521,2.996,594,2.998,595,1.126,645,2.002,675,1.557,815,2.577,912,3.837,914,1.126,934,1.592,961,1.309,1029,3.378,1045,3.365,1047,1.827,1062,2.633,1109,2.295,1115,2.082,1118,1.166,1120,1.762,1123,1.431,1127,1.762,1128,2.393,1136,1.771,1140,3.378,1157,1.309,1160,1.957,1169,2.211,1186,3.732,1191,1.506,1219,3.068,1261,2.464,1281,1.697,1282,1.697,1429,1.697,1442,1.697,1449,1.506,1508,2.745,1512,2.464,1624,1.166,1649,2.117,1720,2.117,1724,1.366,1738,2.667,1747,2.667,1757,1.209,1759,1.309,1761,2.996,1762,1.431,1763,1.431,1764,2.561,1765,1.431,1766,1.366,1767,1.431,1768,1.431,1769,1.431,1776,1.257,1783,5.18,1789,3.365,1790,3.365,1792,1.506,1793,1.506,1794,1.506,1814,3.199,1815,6.186,1816,5.117,1818,3.457,1820,3.457,1822,4.691,1823,2.917,1824,2.577,1827,1.697,1828,2.745,1829,1.697,1830,1.697,1831,2.745,1832,2.745,1833,1.697,1834,3.457,1835,1.697,1836,1.697,1837,1.592,1838,3.973,1839,1.431,1840,1.431,1846,2.436,1847,1.506,1848,1.431,1974,3.068,1985,3.457,2026,1.592,2049,4.279,2050,4.279,2051,3.669,2052,4.688,2053,2.002,2054,1.431,2055,1.697,2056,2.956,2057,2.956,2058,6.407,2059,2.956,2060,4.279,2061,2.956,2062,2.002,2063,2.956,2064,2.002,2065,2.002,2066,1.697,2067,3.239,2068,2.002,2069,2.002,2070,2.002,2071,2.002,2072,5.148,2073,2.002,2074,5.148,2075,2.002,2076,3.239,2077,2.002,2078,3.239,2079,2.002,2080,2.002,2081,2.002,2082,2.002,2083,2.002,2084,2.745,2085,6.038,2086,2.002,2087,2.002,2088,2.002,2089,2.002,2090,2.002,2091,2.002,2092,2.002,2093,3.239,2094,3.239,2095,3.239,2096,3.239,2097,3.239,2098,2.956,2099,2.002,2100,3.239,2101,4.317,2102,2.002,2103,2.002,2104,3.239,2105,2.002,2106,2.002,2107,2.002,2108,3.239,2109,2.002,2110,3.239,2111,3.239,2112,3.239,2113,3.239,2114,3.239,2115,3.239,2116,2.002,2117,5.509,2118,4.08,2119,2.002,2120,4.699,2121,4.699,2122,1.827,2123,3.723,2124,2.002,2125,2.002,2126,2.002,2127,2.002,2128,2.002,2129,2.002,2130,2.002,2131,2.002,2132,2.002,2133,2.002,2134,2.002,2135,2.002,2136,2.002,2137,2.002,2138,2.002,2139,2.002,2140,2.002,2141,2.002,2142,7.434,2143,2.002,2144,2.002,2145,2.002,2146,2.002,2147,5.509,2148,2.002,2149,1.697,2150,3.239,2151,2.002,2152,2.002,2153,2.002,2154,2.002,2155,3.239,2156,2.002,2157,2.002,2158,1.697,2159,2.002,2160,2.002,2161,2.002,2162,1.592,2163,1.827,2164,2.002,2165,2.002,2166,4.688,2167,2.002,2168,2.002,2169,2.002,2170,2.002,2171,2.002,2172,2.002,2173,2.956,2174,2.002,2175,2.002,2176,5.799,2177,7.053,2178,5.754,2179,3.239,2180,3.239,2181,2.002,2182,4.688,2183,2.002,2184,2.002,2185,2.002,2186,2.002,2187,2.002,2188,2.002,2189,5.509,2190,2.002,2191,1.697,2192,2.002,2193,2.002,2194,2.002,2195,3.239,2196,1.506,2197,1.697,2198,1.697,2199,1.697,2200,2.002,2201,4.688,2202,2.002,2203,2.002,2204,2.002,2205,2.002,2206,2.002,2207,2.002,2208,2.002,2209,2.002,2210,3.723,2211,3.239,2212,2.002,2213,2.002,2214,2.002,2215,2.002,2216,1.827,2217,2.002,2218,2.002,2219,2.002,2220,2.002,2221,2.002,2222,2.002,2223,2.002,2224,2.002,2225,2.002,2226,4.08,2227,3.239,2228,3.239,2229,2.002,2230,2.002,2231,1.827,2232,2.002,2233,2.002,2234,2.002,2235,2.002,2236,2.002,2237,3.239,2238,5.148,2239,2.002,2240,2.002,2241,3.239,2242,3.239,2243,2.002,2244,3.239,2245,2.002,2246,3.239,2247,3.239,2248,2.002,2249,2.002,2250,2.002,2251,4.08,2252,2.002,2253,2.002]],["title/classes/ODataEnumType.html",[187,0.351,2254,3.56]],["body/classes/ODataEnumType.html",[3,0.064,4,0.064,5,0.064,6,0.111,8,0.049,9,0.489,10,0.226,25,1.703,26,0.141,27,0.009,31,0.583,34,0.386,37,0.057,45,1.866,51,3.506,60,1.122,62,1.121,76,2.682,77,0.247,84,0.957,85,0.789,86,2.777,92,3.571,94,0.536,98,1.989,100,3.202,101,3.32,105,2.864,106,1.084,107,3.662,108,3.662,112,2.594,118,1.479,120,0.481,125,0.174,126,1.164,132,2.264,136,2.49,142,1.945,144,3.831,154,3.544,156,3.372,157,4.432,174,0.809,181,0.228,185,0.005,186,0.005,187,0.298,189,0.155,191,0.709,196,0.289,198,1.046,204,0.604,251,0.155,254,1.733,430,1.013,452,2.576,594,2.934,595,1.866,675,3.335,783,4.768,912,3.932,1026,2.638,1109,3.14,1111,3.117,1112,3.117,1113,2.594,1115,2.434,1116,2.88,1117,2.082,1118,3.555,1120,3.662,1121,2.993,1122,2.993,1123,3.193,1124,2.082,1125,2.082,1127,2.594,1128,1.693,1129,2.082,1136,1.802,1624,4.445,1642,3.504,1719,5.739,1720,3.649,1721,3.793,1722,3.793,1723,3.409,1724,3.81,1725,4.623,1731,2.811,1732,2.811,1733,2.264,1735,4.199,1736,2.495,1738,3.117,1740,4.768,1741,4.768,1742,4.768,1744,4.768,1745,4.768,1747,3.117,1749,4.768,1750,4.041,1751,2.638,1752,2.811,1753,2.638,1754,2.638,1755,2.811,1756,2.638,1757,2.004,1758,2.811,1759,2.168,1760,2.811,1761,1.804,1762,2.371,1763,2.371,1764,2.082,1765,2.371,1766,2.264,1767,2.371,1768,2.371,1769,2.371,1770,2.638,1771,2.811,1772,2.495,1773,2.638,1774,2.264,1775,2.264,1776,2.082,1783,2.495,1784,3.317,1785,3.317,1789,3.649,1790,3.649,1791,3.317,1792,2.495,1793,2.495,1794,2.495,1814,4.166,2254,4.352,2255,8.577,2256,4.768,2257,4.768,2258,4.768,2259,3.756,2260,3.756,2261,3.756,2262,3.756,2263,5.4,2264,3.756,2265,5.4,2266,4.352,2267,3.317,2268,5.48,2269,4.352,2270,3.756,2271,5.571,2272,4.352,2273,4.352,2274,4.352,2275,3.317,2276,3.756,2277,4.352,2278,3.756,2279,3.027,2280,3.027,2281,3.756,2282,3.756,2283,3.756,2284,3.756,2285,3.756]],["title/classes/ODataEnumTypeFieldParser.html",[187,0.351,2268,3.306]],["body/classes/ODataEnumTypeFieldParser.html",[3,0.073,4,0.073,5,0.073,6,0.1,8,0.055,9,0.533,10,0.187,26,0.131,27,0.009,31,0.451,34,0.408,37,0.089,49,1.018,51,2.432,57,1.661,60,1.08,62,1.036,76,1.419,77,0.257,84,1.126,85,0.861,92,3.658,94,0.672,98,1.987,100,2.958,101,2.043,105,2.676,106,0.925,107,2.043,108,2.043,112,2.043,113,1.091,118,0.995,120,1.092,125,0.171,130,1.917,136,2.631,140,2.791,141,1.547,142,2.123,143,2.455,144,3.268,153,4.217,154,3.42,155,2.563,156,3.145,157,3.145,158,4.217,163,2.832,174,0.866,181,0.197,185,0.006,186,0.006,187,0.468,189,0.176,191,0.775,196,0.263,198,0.881,204,0.684,205,1.198,217,1.066,251,0.176,254,1.066,255,1.419,256,2.438,405,2.123,430,0.589,446,3.48,452,2.097,483,3.897,521,3.509,551,2.017,595,2.113,675,3.456,782,5.206,784,3.756,912,2.043,1029,3.48,1045,3.403,1062,1.706,1109,4.043,1111,3.403,1112,3.403,1113,2.043,1116,3.145,1117,2.357,1118,3.946,1120,3.25,1121,3.268,1122,3.268,1123,2.3,1124,2.357,1125,2.357,1127,2.832,1128,1.917,1129,2.357,1136,1.419,1160,2.269,1186,3.032,1261,2.269,1352,2.269,1512,2.269,1720,2.455,1724,3.553,1733,2.563,1738,2.455,1747,2.455,1750,4.412,1757,2.269,1759,3.403,1761,2.043,1764,2.357,1774,2.563,1775,2.563,1776,2.357,1789,3.403,1790,3.403,1814,2.563,1822,4.852,1839,2.685,1840,2.685,1846,2.825,1847,2.825,1848,2.685,1974,2.825,2054,2.685,2055,3.183,2066,3.183,2084,3.183,2101,4.612,2149,3.183,2158,3.183,2162,2.988,2178,4.412,2191,3.183,2196,2.825,2197,3.183,2198,3.183,2199,3.183,2266,3.428,2268,5.742,2269,3.428,2271,4.751,2272,3.428,2273,3.428,2274,3.428,2277,3.428,2279,5.453,2280,3.428,2286,6.775,2287,4.254,2288,3.183,2289,3.756,2290,6.451,2291,3.756,2292,3.756,2293,3.756,2294,3.756,2295,3.756,2296,3.756,2297,5.206,2298,3.756,2299,3.756,2300,6.451,2301,5.206,2302,3.756,2303,3.756,2304,3.756,2305,5.975,2306,3.756,2307,3.756,2308,3.756,2309,3.756,2310,3.756,2311,3.756,2312,3.756,2313,3.756,2314,3.756,2315,3.756,2316,3.756,2317,5.206]],["title/classes/ODataEnumTypeParser.html",[187,0.351,1814,2.662]],["body/classes/ODataEnumTypeParser.html",[3,0.061,4,0.061,5,0.061,6,0.115,8,0.046,9,0.469,10,0.227,25,1.67,26,0.138,27,0.009,31,0.515,34,0.375,37,0.078,49,1.465,51,2.524,57,1.46,60,1.084,62,1.096,76,1.184,77,0.257,84,1.163,85,0.841,92,3.756,94,0.608,98,1.932,100,2.943,101,2.94,105,2.738,106,0.813,107,2.94,108,2.94,112,2.489,113,1.005,118,1.432,120,1.086,125,0.173,126,1.1,130,1.599,136,2.204,140,3.184,141,1.765,142,1.866,143,2.048,144,3.731,153,2.991,154,3.561,155,3.689,156,3.59,157,3.988,158,4.132,163,2.489,174,0.861,181,0.223,185,0.005,186,0.005,187,0.412,189,0.147,191,0.681,196,0.288,198,0.996,204,0.57,205,0.999,217,1.299,251,0.147,254,0.889,255,1.184,256,2.246,405,1.866,430,0.991,446,3.148,452,1.897,483,3.59,521,3.233,551,1.214,595,1.762,644,3.133,646,3.133,675,3.277,730,3.133,912,1.704,1029,3.148,1045,2.991,1062,1.423,1109,3.835,1111,2.991,1112,2.991,1113,2.489,1115,1.599,1116,2.764,1117,1.966,1118,3.148,1120,2.94,1121,2.872,1122,2.872,1123,2.387,1124,1.966,1125,1.966,1127,2.489,1128,1.599,1129,1.966,1136,1.729,1160,1.892,1186,2.665,1261,1.892,1352,2.764,1512,1.892,1720,3.533,1723,3.271,1733,2.138,1736,2.356,1738,2.991,1747,2.991,1750,3.877,1757,2.764,1759,2.048,1761,1.704,1764,1.966,1774,2.138,1775,2.138,1776,1.966,1789,2.991,1790,2.991,1814,3.123,1822,4.47,1839,2.24,1840,2.24,1846,2.356,1847,2.356,1848,2.24,1974,2.356,2054,2.24,2055,2.655,2066,2.655,2084,4.58,2101,4.249,2149,4.58,2158,2.655,2162,2.492,2178,3.877,2191,2.655,2196,2.356,2197,2.655,2198,2.655,2199,2.655,2256,4.575,2257,4.575,2258,4.575,2266,4.176,2267,3.133,2268,5.778,2269,4.176,2271,5.425,2272,4.176,2273,4.176,2274,4.176,2275,3.133,2277,4.176,2279,4.933,2280,2.859,2286,7.842,2288,2.655,2289,3.133,2290,5.944,2291,3.133,2292,3.133,2293,3.133,2294,3.133,2295,4.575,2296,3.133,2297,5.405,2298,3.133,2299,3.133,2300,5.944,2301,4.575,2302,3.133,2303,3.133,2304,3.133,2305,5.405,2306,3.133,2307,3.133,2308,3.133,2309,3.133,2310,3.133,2311,3.133,2312,3.133,2313,5.944,2314,3.133,2315,3.133,2316,3.133,2317,4.575,2318,5.181,2319,3.548,2320,3.548,2321,3.548,2322,3.548,2323,3.548,2324,3.548,2325,3.548,2326,3.548,2327,3.548,2328,3.548,2329,3.548,2330,3.548,2331,3.548,2332,3.548]],["title/classes/ODataInMemoryCache.html",[187,0.351,2333,3.901]],["body/classes/ODataInMemoryCache.html",[3,0.076,4,0.076,5,0.076,6,0.079,8,0.057,9,0.548,10,0.227,25,1.92,26,0.139,27,0.009,31,0.463,34,0.338,35,3.648,37,0.066,41,3.942,49,1.778,50,3.997,60,0.837,76,2.304,77,0.245,84,0.838,85,0.583,94,0.601,103,3.758,105,1.922,106,1.314,116,4.532,118,1.737,120,0.995,125,0.173,126,2.14,160,1.123,181,0.23,185,0.006,186,0.007,187,0.351,189,0.183,191,0.795,196,0.29,198,1.022,251,0.25,436,4.359,446,3.113,450,2.273,452,2.773,471,2.123,918,5.193,1049,2.79,1123,3.353,1136,1.475,1163,2.357,1247,2.195,1254,2.935,1270,5.204,1347,3.62,1377,2.449,1390,5.141,1433,5.047,1445,5.049,1493,5.287,1515,4.53,1596,6.007,1598,5.557,1599,5.642,1600,4.53,1601,4.878,1602,4.849,1603,4.53,1604,4.878,1605,4.53,1606,4.53,1607,4.878,1608,4.878,1609,4.878,1610,5.967,1613,3.562,1615,5.642,1616,6.547,1617,4.585,1618,3.307,1621,3.822,1622,3.562,1624,2.273,1625,3.104,1627,3.307,1628,5.167,1629,4.252,1631,3.562,1633,3.562,1635,3.562,1637,4.849,1638,3.307,1639,3.562,1640,3.307,1642,2.449,1643,3.562,1645,4.252,1647,3.307,1649,4.286,1650,5.557,1651,3.307,2333,5.345,2334,4.42,2335,4.42,2336,3.902,2337,3.902,2338,4.42,2339,4.42,2340,3.902,2341,3.902,2342,4.42,2343,3.902,2344,3.902,2345,3.902,2346,3.902,2347,3.902,2348,3.902,2349,3.902,2350,3.902,2351,3.902,2352,4.878,2353,3.562,2354,3.562,2355,3.562,2356,3.562]],["title/classes/ODataInStorageCache.html",[187,0.351,2357,3.56]],["body/classes/ODataInStorageCache.html",[0,1.01,3,0.069,4,0.069,5,0.069,6,0.101,8,0.052,9,0.513,10,0.224,16,2.072,25,1.885,26,0.138,27,0.009,31,0.434,34,0.317,35,3.581,37,0.061,41,3.96,49,1.708,50,4.11,60,0.797,76,2.193,77,0.251,84,0.909,85,0.547,94,0.563,103,3.688,104,2.072,105,1.802,106,1.284,109,2.072,113,1.065,116,4.44,118,1.825,120,1.026,125,0.175,126,2.037,160,1.053,174,0.515,181,0.228,185,0.006,186,0.006,187,0.32,189,0.167,191,0.746,196,0.291,198,1.019,244,1.526,251,0.235,256,1.894,436,4.149,446,2.919,450,2.072,452,2.74,471,1.935,918,5.062,1049,2.543,1123,3.29,1136,1.894,1158,4.149,1163,2.149,1247,2.001,1254,2.675,1270,5.147,1347,3.517,1377,2.232,1390,5.074,1433,4.934,1440,2.829,1445,4.923,1493,5.168,1515,6.127,1586,3.014,1587,3.014,1596,5.944,1598,4.918,1599,5.481,1600,4.247,1601,4.574,1602,5.481,1603,4.247,1604,4.574,1605,4.247,1606,4.247,1607,4.574,1608,4.574,1609,4.574,1610,5.846,1613,3.246,1615,5.481,1616,6.443,1617,4.738,1618,3.014,1621,2.543,1622,3.246,1624,2.072,1625,2.829,1627,3.014,1628,4.918,1629,3.986,1631,3.246,1633,3.246,1635,3.246,1637,4.616,1638,3.014,1639,3.246,1640,3.014,1642,2.232,1643,3.246,1645,3.986,1647,3.014,1649,4.118,1650,5.339,1651,3.014,1664,3.014,2336,3.557,2337,3.557,2340,3.557,2341,3.557,2343,3.557,2344,3.557,2345,3.557,2346,3.557,2347,3.557,2348,3.557,2349,3.557,2350,3.557,2351,3.557,2352,4.574,2353,3.246,2354,3.246,2355,3.246,2356,3.246,2357,4.574,2358,3.557,2359,7.763,2360,5.676,2361,4.028,2362,4.028,2363,5.011,2364,4.028,2365,4.028,2366,4.028,2367,4.028,2368,3.246,2369,3.557,2370,3.557,2371,3.557,2372,3.557,2373,5.011,2374,3.557,2375,3.557,2376,3.557,2377,3.557,2378,3.557,2379,3.557]],["title/modules/ODataModule.html",[2380,3.56,2381,3.103]],["body/modules/ODataModule.html",[0,1.551,3,0.106,4,0.106,5,0.106,6,0.098,10,0.159,26,0.113,27,0.009,34,0.496,37,0.127,62,1.151,85,0.781,113,0.923,123,4.17,125,0.119,174,0.963,181,0.159,185,0.007,186,0.007,187,0.491,191,0.813,196,0.2,198,0.71,204,0.994,220,2.17,347,2.551,1115,2.787,1342,5.926,1345,4.344,1405,4.107,1761,2.97,1861,4.996,1867,4.107,2381,5.696,2382,4.984,2383,5.461,2384,7.16,2385,5.926,2386,6.643,2387,6.185,2388,6.969,2389,6.185,2390,7.16,2391,7.16,2392,6.643,2393,4.984,2394,6.643,2395,5.461,2396,6.535,2397,6.643,2398,4.344,2399,5.461,2400,5.461,2401,6.643,2402,7.45,2403,5.461,2404,5.461,2405,5.461,2406,5.461,2407,4.984,2408,5.461,2409,5.461,2410,5.461,2411,4.984,2412,5.461,2413,5.461,2414,5.461,2415,5.461,2416,6.643,2417,5.461,2418,6.063,2419,4.628,2420,5.461,2421,4.984,2422,5.461,2423,5.461,2424,5.461,2425,5.461]],["title/classes/ODataParameterParser.html",[187,0.351,1801,3.56]],["body/classes/ODataParameterParser.html",[3,0.073,4,0.073,5,0.073,6,0.116,8,0.055,9,0.534,10,0.221,19,1.481,25,1.32,26,0.137,27,0.009,31,0.623,34,0.408,37,0.089,49,1.622,51,3.168,60,0.716,77,0.253,85,0.849,92,3.918,98,1.622,100,3.77,101,2.048,105,2.878,106,1.147,107,3.254,108,3.513,110,4.271,112,2.837,113,1.216,114,4.054,118,0.998,120,0.756,125,0.17,130,1.922,140,2.795,141,1.549,148,3.274,161,3.513,162,2.318,174,0.936,176,3.513,177,2.048,181,0.216,185,0.006,186,0.006,187,0.469,189,0.176,191,0.776,196,0.287,198,0.968,204,0.686,217,1.069,251,0.176,256,2.261,405,2.127,430,0.817,446,2.193,462,4.149,483,2.275,521,3.513,551,2.021,594,3.26,643,2.832,914,2.118,934,2.995,1045,3.911,1062,1.71,1113,2.048,1136,1.423,1140,3.038,1352,2.275,1512,2.275,1720,4.222,1730,3.192,1736,2.832,1738,2.461,1747,3.409,1757,2.275,1783,5.599,1789,4.433,1790,4.433,1792,2.832,1793,2.832,1794,2.832,1796,3.766,1801,5.461,1808,3.766,1811,3.766,1813,6.459,1814,4.408,1815,5.474,1816,3.192,1817,3.766,1818,3.192,1819,3.766,1820,3.192,1821,3.766,1822,5.41,1823,3.729,1824,4.149,1825,3.766,1826,3.766,1827,3.192,1828,5.474,1829,3.192,1830,5.474,1831,3.192,1832,4.42,1833,5.474,1834,4.42,1835,3.192,1836,3.192,1837,2.995,1838,3.192,1839,2.692,1840,2.692,1841,5.215,1842,3.766,1843,5.983,1844,3.766,1845,3.766,1846,2.832,1847,2.832,1848,2.692,1849,6.459,1850,7.193,1851,5.215,1852,5.215,1853,3.766,1854,3.766,1855,3.766,1856,3.766,1857,3.766,1858,3.766,2426,5.907,2427,4.265,2428,4.265,2429,4.265,2430,4.265,2431,4.265,2432,4.265,2433,4.265,2434,4.265,2435,4.265,2436,4.265,2437,4.265,2438,4.265,2439,4.265,2440,4.265]],["title/classes/ODataPathSegments.html",[187,0.351,1431,3.103]],["body/classes/ODataPathSegments.html",[3,0.068,4,0.068,5,0.068,6,0.114,8,0.073,9,0.51,10,0.216,19,2.048,25,1.825,26,0.135,27,0.009,29,3.933,31,0.635,34,0.434,37,0.085,42,3.364,49,1.566,52,2.802,60,0.991,62,0.863,67,1.647,77,0.253,85,0.85,106,0.626,111,2.054,113,1.24,118,0.934,120,1.109,125,0.173,126,2.324,160,1.675,174,0.909,175,2.802,181,0.218,185,0.005,186,0.005,187,0.317,189,0.165,191,0.741,196,0.282,198,0.977,203,1.332,204,1.142,205,1.125,212,2.412,214,2.85,215,1.956,216,1.866,245,1.558,251,0.165,253,1.93,254,1.001,255,2.669,360,1.238,423,4.221,430,0.781,521,2.709,914,1.983,1029,4.113,1045,2.305,1049,2.521,1062,2.262,1120,3.141,1127,1.918,1261,3.009,1347,1.8,1369,2.521,1431,4.594,1483,5.655,1508,2.988,1625,3.962,1660,5.271,1668,4.546,1669,3.218,1670,3.218,1951,4.979,2054,2.521,2120,6.042,2121,6.042,2122,3.218,2123,5.271,2196,2.652,2441,3.526,2442,6.54,2443,4.981,2444,4.981,2445,6.301,2446,5.641,2447,5.641,2448,3.993,2449,3.993,2450,4.981,2451,6.583,2452,3.993,2453,3.993,2454,3.993,2455,3.993,2456,4.546,2457,3.993,2458,3.993,2459,3.993,2460,4.981,2461,3.993,2462,3.993,2463,3.993,2464,3.993,2465,3.993,2466,3.993,2467,3.993,2468,3.993,2469,6.275,2470,2.988,2471,3.526,2472,3.993,2473,3.993,2474,3.993,2475,5.641,2476,5.641,2477,6.54,2478,3.993,2479,3.993,2480,3.993,2481,3.993,2482,3.993,2483,3.993,2484,3.993,2485,5.641,2486,3.993,2487,3.993,2488,3.993,2489,3.993,2490,3.993,2491,3.993,2492,3.993,2493,3.993,2494,7.107,2495,3.993,2496,6.54,2497,3.993,2498,3.993,2499,3.993,2500,3.993,2501,3.993,2502,5.641,2503,6.54,2504,3.526,2505,3.526,2506,3.526,2507,3.526,2508,3.993,2509,3.993,2510,3.993,2511,5.641,2512,3.993,2513,3.993,2514,3.993,2515,3.993,2516,3.993,2517,3.993,2518,3.993,2519,3.993,2520,3.993,2521,3.993,2522,5.641,2523,3.993,2524,3.993,2525,3.993,2526,5.641,2527,3.993,2528,3.993]],["title/classes/ODataPathSegmentsHandler.html",[187,0.351,2529,3.56]],["body/classes/ODataPathSegmentsHandler.html",[3,0.098,4,0.098,5,0.098,6,0.116,8,0.074,10,0.184,26,0.118,27,0.009,34,0.458,37,0.108,52,2.85,55,3.206,56,4.082,57,2.316,58,4.556,60,1.074,62,1.258,63,2.96,77,0.2,85,0.882,106,1.127,120,1.121,125,0.151,175,3.568,181,0.184,185,0.007,186,0.007,187,0.571,189,0.237,191,0.944,196,0.286,198,1.005,204,1.155,205,1.617,251,0.237,253,1.964,399,2.014,430,0.794,1251,5.046,1347,2.587,1431,5.773,1483,5.209,1868,3.811,1951,5.734,2444,5.068,2445,5.377,2451,4.625,2456,5.79,2470,4.295,2529,5.79,2530,5.068,2531,5.739,2532,5.739,2533,5.739,2534,5.739,2535,5.739,2536,5.739,2537,5.739,2538,5.739,2539,5.068,2540,5.068,2541,6.344,2542,5.068,2543,6.344,2544,5.068,2545,6.925,2546,5.068,2547,5.068,2548,5.068,2549,5.068,2550,6.925,2551,5.068,2552,5.068,2553,5.068,2554,5.068,2555,5.068,2556,5.068,2557,5.068,2558,5.068,2559,5.068,2560,5.068]],["title/classes/ODataPropertyAnnotations.html",[187,0.351,1187,2.934]],["body/classes/ODataPropertyAnnotations.html",[3,0.077,4,0.077,5,0.077,6,0.058,8,0.058,9,0.628,10,0.191,14,1.955,25,1.801,26,0.135,27,0.009,30,2.148,32,3.706,34,0.34,37,0.112,48,1.351,49,1.663,54,3.47,55,1.744,57,1.26,61,1.955,71,2.015,72,2.079,73,2.221,77,0.242,85,0.895,94,0.741,106,1.09,113,0.668,118,1.046,120,1.032,125,0.15,142,1.61,160,1.58,161,3.336,174,1.147,177,3.336,181,0.191,185,0.006,186,0.006,187,0.593,189,0.185,191,0.802,196,0.26,198,0.896,204,0.719,216,2.167,244,1.867,251,0.185,252,1.64,419,2.197,452,2.499,597,2.759,961,4.009,1128,3.718,1134,3.852,1136,2.49,1155,6.234,1156,3.346,1157,4.307,1158,5.089,1159,4.566,1160,3.255,1162,5.198,1163,2.385,1164,4.052,1167,3.346,1169,4.186,1171,5.845,1173,5.845,1175,4.566,1181,3.346,1182,3.346,1183,3.346,1184,3.346,1185,3.346,1186,2.3,1187,5.775,1188,6.033,1189,5.198,1190,5.198,1191,4.613,1192,5.354,1193,5.198,1194,5.198,1195,3.346,1196,5.577,1197,3.346,1198,3.346,1199,3.346,1200,3.346,1201,3.346,1202,3.346,1203,3.346,1204,4.566,1205,4.566,1206,3.346,1207,3.346,1208,3.346,1209,3.346,1210,3.346,1211,3.346,1212,3.346,1213,3.346,1214,3.346,1215,5.198,1216,3.346,1217,4.566,1218,5.577,1219,4.052,1220,5.198,1221,3.346,1222,3.346,1223,3.346,1224,4.566,1225,6.033,1226,4.566,1227,4.566,1228,4.566,1229,3.346,1230,3.346,1231,3.346,1232,3.346,1233,3.346,1234,3.346,1235,5.198,1236,3.346,1237,4.566,1238,3.346,1239,3.346,1240,3.346,1885,3.604,1890,3.604,1891,3.604,2561,4.472,2562,4.472,2563,4.472]],["title/classes/ODataQueryOptionHandler.html",[187,0.351,2564,3.56]],["body/classes/ODataQueryOptionHandler.html",[3,0.04,4,0.04,5,0.04,6,0.108,8,0.087,10,0.202,25,1.058,26,0.123,27,0.009,28,2.522,29,3.836,31,0.562,34,0.331,37,0.057,49,1.66,60,1.133,62,1.095,64,2.774,65,2.859,66,3.006,67,2.75,68,2.694,69,3.695,70,3.1,71,3.308,72,3.413,73,3.646,74,3.13,76,2.906,77,0.24,84,1.038,85,0.871,105,1.504,109,2.436,110,1.21,111,4.539,117,3.804,118,1.622,120,0.96,121,2.275,125,0.164,126,1.171,141,1.358,174,0.978,181,0.202,184,2.352,185,0.004,186,0.004,187,0.3,189,0.097,191,0.496,196,0.267,198,1.002,203,0.785,204,0.607,205,0.663,207,2.27,208,0.999,215,1.492,243,1.604,244,2.087,247,2.475,250,0.999,251,0.156,253,2.033,254,0.947,399,0.826,430,0.523,443,4.989,458,3.337,460,3.055,469,3.046,482,2.386,499,4.428,500,2.51,503,2.51,504,2.51,524,5.91,525,4.736,535,1.361,539,3.046,634,5.213,833,4.173,838,3.817,844,4.209,845,2.51,846,4.209,847,2.51,848,3.945,849,2.654,850,2.828,851,2.828,852,2.828,860,2.828,869,3.817,884,3.046,888,3.046,890,3.817,1053,2.077,1062,1.515,1120,1.815,1123,2.704,1127,2.275,1136,1.58,1140,3.263,1247,4.362,1261,2.016,1264,6.121,1283,4.182,1413,4.371,1615,5.269,1621,4.005,1624,3.992,1642,3.006,1649,2.181,1761,3.047,2054,3.424,2101,3.751,2196,2.51,2216,1.896,2418,1.896,2450,3.337,2564,6.859,2565,2.352,2566,5.424,2567,3.779,2568,3.779,2569,6.316,2570,6.344,2571,5.941,2572,2.352,2573,2.352,2574,2.352,2575,3.779,2576,2.352,2577,3.779,2578,2.352,2579,4.789,2580,8.651,2581,3.779,2582,2.352,2583,2.352,2584,2.352,2585,3.779,2586,2.352,2587,2.352,2588,3.779,2589,5.941,2590,2.352,2591,3.779,2592,2.352,2593,5.424,2594,3.779,2595,3.779,2596,2.352,2597,3.779,2598,2.352,2599,3.779,2600,2.352,2601,3.779,2602,2.352,2603,2.352,2604,3.779,2605,3.779,2606,2.352,2607,3.779,2608,2.352,2609,2.077,2610,2.352,2611,4.371,2612,1.896,2613,3.046,2614,3.046,2615,4.737,2616,5.941,2617,2.352,2618,2.352,2619,5.424,2620,4.737,2621,2.352,2622,2.352,2623,3.779,2624,2.352,2625,2.352,2626,3.779,2627,2.352,2628,3.779,2629,2.352,2630,2.352,2631,2.352,2632,2.352,2633,2.352,2634,2.352,2635,2.352,2636,2.352,2637,7.153,2638,2.352,2639,2.352,2640,4.737,2641,2.352,2642,3.779,2643,2.352,2644,2.352,2645,2.352,2646,2.352,2647,2.352,2648,2.352,2649,2.352,2650,2.352,2651,3.779,2652,4.737,2653,4.737,2654,4.737,2655,4.737,2656,2.352,2657,3.779,2658,3.779,2659,3.779,2660,2.352,2661,2.352,2662,2.352,2663,7.501,2664,7.501,2665,6.344,2666,7.501,2667,2.352,2668,2.352,2669,2.352,2670,2.352,2671,2.352,2672,2.352,2673,2.352,2674,3.337,2675,2.352,2676,2.352,2677,3.779,2678,2.352,2679,3.779,2680,2.352,2681,3.779,2682,2.352,2683,2.352,2684,2.352,2685,3.779,2686,2.352,2687,2.352,2688,2.352,2689,2.352,2690,2.352,2691,2.352,2692,2.352,2693,3.779,2694,2.352,2695,3.779,2696,2.352,2697,3.779,2698,2.352,2699,4.737,2700,2.352,2701,2.352,2702,2.352,2703,3.779,2704,2.352,2705,3.779,2706,2.352,2707,3.779,2708,2.352,2709,2.352,2710,2.352,2711,2.352,2712,2.352,2713,2.352,2714,2.352,2715,2.352,2716,5.941,2717,2.352,2718,2.352,2719,5.941,2720,2.352,2721,2.352,2722,5.941,2723,2.352,2724,4.737,2725,2.352,2726,2.352,2727,5.941,2728,2.352,2729,5.941,2730,2.352,2731,2.352,2732,5.941,2733,2.352,2734,2.352,2735,2.352]],["title/classes/ODataQueryOptions.html",[187,0.351,2614,3.56]],["body/classes/ODataQueryOptions.html",[3,0.073,4,0.073,5,0.073,6,0.114,8,0.056,9,0.535,10,0.209,19,1.484,25,1.322,26,0.132,27,0.009,28,4.143,29,2.667,31,0.56,34,0.455,37,0.089,60,1.055,61,1.87,64,2.967,65,3.058,66,2.37,67,3.02,68,2.124,69,3.761,70,3.155,71,1.927,72,1.988,73,2.124,75,2.468,77,0.235,84,0.939,85,0.822,105,2.155,111,2.199,113,0.638,117,3.263,118,1.587,120,0.757,125,0.162,126,1.325,160,1.542,174,0.868,175,2.939,181,0.216,185,0.006,186,0.006,187,0.34,189,0.177,191,0.777,196,0.283,198,0.98,203,1.427,204,0.951,205,1.205,206,1.834,207,1.294,209,1.325,211,2.27,212,1.834,214,2.936,215,2.115,216,1.923,244,2.459,251,0.177,253,2.721,255,1.974,257,1.815,360,1.325,430,0.939,443,4.428,445,4.049,482,4.853,499,3.93,503,3.93,504,3.93,505,3.003,507,2.577,509,3.003,510,3.003,511,3.566,524,4.506,525,2.7,634,2.577,833,4.156,844,3.736,846,3.736,848,3.93,850,4.428,851,4.428,852,4.428,853,4.769,854,4.769,855,4.769,873,3.2,1062,2.373,1136,2.72,1140,2.199,1621,3.736,1649,2.468,1824,3.003,2101,2.7,2231,3.446,2443,5.225,2460,5.225,2469,5.225,2471,3.776,2504,3.776,2505,3.776,2506,3.776,2507,3.776,2564,3.446,2569,6.788,2612,3.446,2613,5.901,2614,5.469,2674,5.225,2736,3.776,2737,5.917,2738,7.323,2739,5.917,2740,5.917,2741,4.276,2742,4.276,2743,5.917,2744,6.196,2745,4.276,2746,5.917,2747,4.276,2748,4.276,2749,4.276,2750,5.917,2751,4.276,2752,4.276,2753,4.276,2754,4.276,2755,4.276,2756,4.276,2757,4.276,2758,4.276,2759,4.276,2760,5.917,2761,5.917,2762,5.917,2763,5.917,2764,4.276,2765,4.276,2766,6.786,2767,5.917,2768,4.276,2769,5.917,2770,4.276,2771,4.276,2772,4.276,2773,4.276,2774,4.276,2775,4.276,2776,4.276,2777,4.276,2778,4.276,2779,4.276,2780,4.276,2781,4.276,2782,4.276,2783,4.276,2784,4.276,2785,4.276,2786,5.917,2787,4.276,2788,4.276,2789,4.276,2790,4.276,2791,5.917,2792,5.917,2793,5.917,2794,5.917,2795,5.917,2796,4.276,2797,4.276]],["title/classes/ODataReferential.html",[187,0.351,2063,3.56]],["body/classes/ODataReferential.html",[3,0.039,4,0.039,5,0.039,6,0.069,8,0.029,9,0.481,10,0.058,14,0.992,25,0.82,26,0.129,27,0.009,30,1.09,31,0.632,34,0.366,37,0.088,49,1.494,51,1.514,57,1.758,60,1.031,64,0.992,65,1.654,67,2.19,76,2.358,77,0.248,84,0.807,85,0.857,92,3.713,94,0.364,97,3.065,98,2.016,99,2.668,100,3.493,101,1.763,105,2.762,106,1.224,107,1.763,108,1.763,112,1.763,113,1.257,114,2.562,120,1.128,121,2.551,125,0.164,126,0.703,128,2.034,130,1.654,136,1.665,140,1.906,141,1.502,146,2.118,157,4.304,159,0.796,160,1.082,161,1.09,162,0.776,163,3.634,164,0.796,165,0.796,166,1.367,167,1.367,168,2.997,169,1.367,171,0.936,172,1.31,174,0.875,175,2.638,176,2.997,177,3.393,181,0.058,184,2.638,185,0.004,186,0.004,187,0.422,189,0.094,196,0.149,198,0.754,203,0.757,204,0.743,205,0.639,215,0.624,217,0.92,244,1.678,245,2.072,247,1.803,251,0.241,254,2.073,255,2.282,256,2.082,405,1.665,446,1.888,449,1.09,450,1.167,462,2.578,470,2.958,483,3.648,507,2.212,511,2.212,521,2.997,594,2.999,595,1.127,675,1.558,729,3.241,815,2.578,912,3.837,914,1.127,934,1.594,961,1.31,1029,3.379,1045,3.366,1047,1.829,1062,2.634,1109,2.296,1115,2.083,1118,1.167,1120,1.763,1123,1.432,1127,1.763,1128,2.394,1136,1.772,1140,3.379,1157,1.31,1160,1.958,1169,2.212,1186,3.732,1191,1.507,1219,3.07,1261,2.466,1281,1.698,1282,1.698,1429,1.698,1442,1.698,1449,1.507,1508,2.747,1512,2.466,1624,1.167,1649,2.118,1720,2.118,1724,1.367,1738,2.668,1747,2.668,1757,1.21,1759,1.31,1761,2.997,1762,1.432,1763,1.432,1764,2.562,1765,1.432,1766,1.367,1767,1.432,1768,1.432,1769,1.432,1776,1.257,1783,5.181,1789,3.366,1790,3.366,1792,1.507,1793,1.507,1794,1.507,1814,3.201,1815,6.187,1816,5.118,1818,3.459,1820,3.459,1822,4.692,1823,2.918,1824,2.578,1827,1.698,1828,2.747,1829,1.698,1830,1.698,1831,2.747,1832,2.747,1833,1.698,1834,3.459,1835,1.698,1836,1.698,1837,1.594,1838,3.975,1839,1.432,1840,1.432,1846,2.438,1847,1.507,1848,1.432,1974,3.07,1985,3.459,2026,1.594,2049,3.725,2050,4.28,2052,4.69,2053,2.003,2054,1.432,2055,1.698,2056,2.958,2057,2.958,2058,6.408,2059,2.958,2060,4.28,2061,2.958,2062,2.003,2063,3.725,2064,2.003,2065,2.003,2066,1.698,2067,3.241,2068,2.003,2069,2.003,2070,2.003,2071,2.003,2072,5.15,2073,2.003,2074,5.15,2075,2.003,2076,3.241,2077,2.003,2078,3.241,2079,2.003,2080,2.003,2081,2.003,2082,2.003,2083,2.003,2084,2.747,2085,6.039,2086,2.003,2087,2.003,2088,2.003,2089,2.003,2090,2.003,2091,2.003,2092,2.003,2093,3.241,2094,3.241,2095,3.241,2096,3.241,2097,3.241,2098,2.958,2099,2.003,2100,3.241,2101,4.318,2102,2.003,2103,2.003,2104,3.241,2105,2.003,2106,2.003,2107,2.003,2108,3.241,2109,2.003,2110,3.241,2111,3.241,2112,3.241,2113,3.241,2114,3.241,2115,3.241,2116,2.003,2117,5.511,2118,4.082,2119,2.003,2120,4.7,2121,4.7,2122,1.829,2123,3.725,2124,2.003,2125,2.003,2126,2.003,2127,2.003,2128,2.003,2129,2.003,2130,2.003,2131,2.003,2132,2.003,2133,2.003,2134,2.003,2135,2.003,2136,2.003,2137,2.003,2138,2.003,2139,2.003,2140,2.003,2141,2.003,2142,7.435,2143,2.003,2144,2.003,2145,2.003,2146,2.003,2147,5.511,2148,2.003,2149,1.698,2150,3.241,2151,2.003,2152,2.003,2153,2.003,2154,2.003,2155,3.241,2156,2.003,2157,2.003,2158,1.698,2159,2.003,2160,2.003,2161,2.003,2162,1.594,2163,1.829,2164,2.003,2165,2.003,2166,4.69,2167,2.003,2168,2.003,2169,2.003,2170,2.003,2171,2.003,2172,2.003,2173,2.958,2174,2.003,2175,2.003,2176,5.801,2177,7.054,2178,5.755,2179,3.241,2180,3.241,2181,2.003,2182,4.69,2183,2.003,2184,2.003,2185,2.003,2186,2.003,2187,2.003,2188,2.003,2189,5.511,2190,2.003,2191,1.698,2192,2.003,2193,2.003,2194,2.003,2195,3.241,2196,1.507,2197,1.698,2198,1.698,2199,1.698,2200,2.003,2201,4.69,2202,2.003,2203,2.003,2204,2.003,2205,2.003,2206,2.003,2207,2.003,2208,2.003,2209,2.003,2210,3.725,2211,3.241,2212,2.003,2213,2.003,2214,2.003,2215,2.003,2216,1.829,2217,2.003,2218,2.003,2219,2.003,2220,2.003,2221,2.003,2222,2.003,2223,2.003,2224,2.003,2225,2.003,2226,4.082,2227,3.241,2228,3.241,2229,2.003,2230,2.003,2231,1.829,2232,2.003,2233,2.003,2234,2.003,2235,2.003,2236,2.003,2237,3.241,2238,5.15,2239,2.003,2240,2.003,2241,3.241,2242,3.241,2243,2.003,2244,3.241,2245,2.003,2246,3.241,2247,3.241,2248,2.003,2249,2.003,2250,2.003,2251,4.082,2252,2.003,2253,2.003,2798,2.269]],["title/classes/ODataRequest.html",[187,0.351,1390,2.55]],["body/classes/ODataRequest.html",[1,1.857,3,0.055,4,0.055,5,0.055,6,0.117,8,0.042,9,0.436,10,0.206,11,2.782,12,4.349,14,3.155,15,3.81,16,3.711,19,2.04,20,3.483,24,3.968,25,1.077,26,0.131,27,0.009,28,3.197,29,2.893,31,0.613,34,0.417,37,0.048,41,3.603,42,2.972,43,3.999,49,2.071,53,1.783,54,1.496,57,1.937,60,0.834,61,1.407,64,1.407,65,1.45,67,1.327,70,1.496,71,1.45,72,1.496,76,1.073,77,0.245,78,1.939,80,1.857,83,1.939,84,0.445,85,0.823,104,3.848,105,1.835,109,2.972,111,1.655,113,1.117,120,1.025,121,2.315,125,0.139,130,2.172,142,1.159,145,3.301,174,0.412,181,0.124,184,2.394,185,0.005,186,0.005,187,0.256,189,0.133,191,0.633,196,0.291,198,0.789,204,0.929,205,0.906,220,1.667,244,1.848,245,1.255,251,0.133,253,1.101,254,1.208,436,4.052,529,4.554,535,1.736,619,3.466,914,1.598,1029,3.711,1062,3.341,1063,4.059,1163,3.667,1186,3.957,1192,2.137,1246,2.593,1261,3.849,1270,3.968,1273,2.408,1302,2.841,1314,2.841,1318,2.841,1320,2.841,1340,4.441,1347,3.611,1349,4.792,1390,3.704,1403,5.173,1405,2.137,1409,5.599,1418,2.593,1432,5.599,1435,3.385,1448,5.667,1449,3.201,1482,2.841,1495,2.408,1499,5.667,1502,6.372,1523,2.841,1526,2.841,1527,2.841,1538,6.372,2019,2.593,2799,3.217,2800,5.78,2801,5.78,2802,5.78,2803,5.78,2804,5.78,2805,5.78,2806,6.874,2807,6.418,2808,6.418,2809,6.418,2810,6.418,2811,5.78,2812,5.78,2813,5.78,2814,4.256,2815,4.82,2816,2.841,2817,3.217,2818,3.217,2819,3.217,2820,6.418,2821,3.217,2822,6.874,2823,6.874,2824,3.217,2825,3.217,2826,3.217,2827,6.418,2828,3.217,2829,3.217,2830,3.217,2831,3.217,2832,3.217,2833,3.217,2834,3.217,2835,3.217,2836,3.217,2837,3.217,2838,3.217,2839,3.217,2840,3.217,2841,3.217,2842,3.217,2843,3.217,2844,3.217,2845,3.217,2846,3.217,2847,3.217,2848,3.217,2849,3.217,2850,3.217,2851,3.217,2852,3.217,2853,3.217,2854,3.217,2855,3.217,2856,3.217,2857,3.217,2858,3.217,2859,3.217,2860,3.217,2861,4.82,2862,3.217,2863,5.78,2864,3.217,2865,2.841,2866,2.841,2867,2.841,2868,3.217,2869,3.217,2870,3.217,2871,3.217,2872,3.217,2873,6.874,2874,3.217,2875,6.418,2876,4.82,2877,3.217,2878,4.82,2879,3.217,2880,3.217,2881,3.217,2882,3.217,2883,3.217,2884,4.82,2885,6.418,2886,3.217,2887,5.78,2888,4.82,2889,5.78,2890,3.217,2891,4.82,2892,3.217,2893,3.217,2894,7.216,2895,3.217,2896,3.217,2897,3.217,2898,3.217,2899,3.217,2900,4.82,2901,3.217,2902,3.217,2903,3.217,2904,3.217,2905,3.217,2906,3.217,2907,3.217,2908,3.217,2909,3.217,2910,3.217,2911,4.82,2912,3.217,2913,3.217,2914,3.217,2915,3.217,2916,3.217,2917,3.217,2918,3.217,2919,3.217,2920,3.217,2921,3.217,2922,3.217,2923,3.217,2924,4.82,2925,3.217,2926,3.217,2927,3.217,2928,4.82,2929,3.217,2930,3.217,2931,3.217,2932,4.82,2933,3.217,2934,3.217,2935,3.217,2936,3.217,2937,3.217,2938,3.217,2939,3.217,2940,3.217,2941,6.418,2942,3.217,2943,3.217,2944,3.217,2945,3.217,2946,3.217,2947,3.217,2948,3.217,2949,3.217,2950,3.217,2951,3.217,2952,3.217,2953,3.217,2954,3.217,2955,3.217,2956,3.217,2957,3.217,2958,6.874,2959,3.217,2960,4.82,2961,4.82,2962,3.217,2963,3.217,2964,3.217,2965,3.217,2966,3.217,2967,3.217,2968,3.217,2969,3.217,2970,3.217,2971,3.217,2972,3.217,2973,3.217,2974,3.217]],["title/classes/ODataResponse.html",[187,0.351,1433,2.662]],["body/classes/ODataResponse.html",[3,0.062,4,0.062,5,0.062,6,0.115,8,0.047,9,0.477,10,0.214,14,2.712,16,3.876,23,1.868,25,1.52,26,0.13,27,0.009,34,0.466,37,0.055,38,3.176,39,2.189,40,2.189,49,2.022,57,2.323,60,1,77,0.226,84,0.729,85,0.805,94,0.523,103,1.588,104,4.42,105,2.707,106,1.348,109,3.876,113,1.338,116,4.505,120,0.964,125,0.139,142,2.451,145,4.241,160,1.341,174,0.995,175,1.804,181,0.185,185,0.005,186,0.005,187,0.288,189,0.15,191,0.692,196,0.284,198,0.959,204,0.847,215,1.873,220,2.174,244,2.365,251,0.15,476,3.207,507,2.189,511,2.189,529,3.744,535,1.898,619,3.961,914,1.804,1062,1.456,1123,1.417,1134,3.916,1136,2.07,1157,2.096,1158,4.909,1163,3.309,1164,3.5,1187,3.5,1192,4.12,1196,3.5,1218,3.5,1246,4.247,1247,2.618,1261,3.309,1270,4.76,1273,2.718,1312,4.654,1340,4.488,1347,3.505,1374,4.999,1375,4.357,1376,4.999,1390,4.488,1403,4.247,1404,6.656,1405,2.412,1409,5.093,1411,3.207,1418,2.927,1428,3.207,1432,5.093,1433,4.542,1439,3.207,1445,3.58,1493,3.916,1494,4.654,1495,2.718,1567,5.477,1586,5.641,1587,5.641,1638,5.961,1713,4.247,2814,4.654,2816,3.207,2865,3.207,2866,3.207,2867,3.207,2975,3.632,2976,6.203,2977,6.203,2978,6.203,2979,6.203,2980,5.27,2981,6.203,2982,5.27,2983,3.632,2984,3.632,2985,5.485,2986,3.632,2987,3.632,2988,3.632,2989,3.632,2990,3.632,2991,5.27,2992,3.632,2993,3.632,2994,3.632,2995,3.632,2996,3.632,2997,3.632,2998,3.632,2999,3.632,3000,3.632,3001,3.632,3002,3.632,3003,3.632,3004,3.632,3005,3.632,3006,3.632,3007,5.27,3008,3.632,3009,3.632,3010,5.27,3011,5.27,3012,3.632,3013,3.632,3014,3.632,3015,3.632,3016,3.632,3017,3.632,3018,3.632,3019,3.632,3020,3.632,3021,3.632,3022,3.632,3023,3.632,3024,6.203,3025,3.632,3026,3.632,3027,3.632,3028,3.632,3029,6.203,3030,3.632,3031,3.632,3032,3.632,3033,3.207,3034,3.632,3035,3.632,3036,3.632,3037,3.632,3038,5.27,3039,3.632,3040,3.632,3041,3.632,3042,3.632,3043,5.27,3044,3.632,3045,3.632,3046,4.247,3047,3.632,3048,3.632,3049,4.654,3050,3.632,3051,3.632,3052,6.203,3053,3.632,3054,3.632,3055,6.203,3056,3.632,3057,3.632,3058,7.227,3059,6.203,3060,7.227,3061,3.632,3062,5.27,3063,5.27,3064,3.632,3065,6.203,3066,3.632,3067,6.656,3068,6.203,3069,6.203,3070,5.27,3071,3.632,3072,6.203,3073,3.632,3074,3.632,3075,3.632,3076,3.632,3077,3.632,3078,3.632,3079,3.632]],["title/classes/ODataResponseOptions.html",[187,0.351,2985,3.56]],["body/classes/ODataResponseOptions.html",[3,0.087,4,0.087,5,0.087,6,0.118,8,0.066,9,0.601,10,0.235,23,4.04,26,0.135,27,0.009,31,0.601,32,3.901,33,4.353,34,0.413,37,0.076,41,3.434,47,4.005,48,1.44,49,1.773,50,3.09,54,3.444,60,0.806,77,0.254,79,4.734,80,4.274,84,0.919,85,0.64,92,3.334,93,4.463,95,4.675,96,5.146,113,0.758,118,1.907,125,0.161,174,0.65,181,0.215,185,0.006,186,0.006,187,0.403,189,0.21,191,0.873,196,0.292,198,0.96,204,0.817,216,2.063,217,1.666,251,0.21,254,1.666,485,5.968,535,2.393,913,4.094,914,2.523,1011,5.355,1062,2.664,1113,3.192,1115,2.29,1157,4.534,1247,2.523,1277,4.486,1281,4.973,1282,3.802,1307,4.486,1334,4.486,1442,4.973,1491,4.486,1691,4.094,2101,4.959,2173,5.968,2210,5.355,2985,5.968,3033,4.486,3046,6.866,3049,4.486,3080,5.08,3081,6.645,3082,6.645,3083,6.645,3084,6.645,3085,6.645,3086,6.645,3087,5.08,3088,5.08,3089,5.08,3090,5.08,3091,5.08,3092,5.08,3093,5.08,3094,6.645,3095,5.08,3096,6.645,3097,5.08,3098,6.645,3099,5.08,3100,6.645,3101,5.08,3102,6.645,3103,6.645,3104,5.08,3105,5.08,3106,5.08,3107,6.645,3108,6.645,3109,5.08,3110,5.08,3111,5.08,3112,5.08,3113,5.08,3114,5.08,3115,5.08,3116,5.08,3117,5.08,3118,5.08,3119,4.486,3120,5.08,3121,5.08,3122,5.08,3123,5.08,3124,5.08,3125,5.08,3126,5.08,3127,5.08,3128,5.08,3129,5.08,3130,5.08]],["title/classes/ODataSchema.html",[187,0.351,1725,2.789]],["body/classes/ODataSchema.html",[3,0.075,4,0.075,5,0.075,6,0.116,8,0.057,9,0.543,10,0.222,25,1.34,26,0.139,27,0.009,34,0.473,37,0.066,48,1.697,51,1.799,60,0.728,62,0.918,77,0.255,85,0.804,92,2.547,94,0.596,100,2.623,105,2.459,106,1.215,113,1.103,118,1.404,120,1.068,121,2.095,125,0.163,134,4.451,136,2.161,140,2.828,141,1.568,142,2.161,143,4.263,145,3.798,147,4.663,149,4.329,151,3.958,174,0.945,181,0.226,184,2.167,185,0.006,186,0.006,187,0.347,189,0.181,191,0.788,196,0.29,198,0.972,204,0.701,251,0.181,254,1.094,405,2.161,430,0.604,452,2.125,521,2.882,535,2.161,594,1.852,619,2.882,634,2.629,675,3.479,771,4.835,1109,3.974,1111,3.463,1112,3.463,1113,2.882,1115,3.49,1116,3.2,1117,2.418,1118,3.086,1120,3.547,1121,3.325,1122,3.325,1123,2.34,1124,2.418,1125,2.418,1127,2.882,1128,1.966,1129,2.418,1136,2.464,1247,2.167,1340,4.819,1409,5.988,1495,3.265,1717,5.952,1720,4.618,1725,3.788,1733,2.629,1735,2.897,1736,2.897,1774,2.629,1775,2.629,1776,2.418,1789,4.469,1790,4.469,1840,2.754,1937,5.527,1939,4.49,2098,3.516,2254,5.952,3131,4.363,3132,6,3133,6,3134,6,3135,6,3136,6,3137,6,3138,4.363,3139,4.363,3140,4.363,3141,7.386,3142,4.363,3143,4.363,3144,4.363,3145,4.363,3146,6,3147,7.386,3148,4.363,3149,6,3150,4.363,3151,6,3152,4.363,3153,6,3154,4.363,3155,6,3156,4.363,3157,4.363,3158,4.363,3159,4.363,3160,4.363,3161,4.363,3162,4.363,3163,4.363,3164,4.363,3165,4.363,3166,4.363,3167,4.363,3168,4.363,3169,4.363,3170,4.363,3171,4.363,3172,4.363,3173,4.363,3174,4.363,3175,4.363,3176,4.363,3177,4.363,3178,4.363,3179,6.858,3180,4.363,3181,6,3182,4.363,3183,4.363,3184,6,3185,6,3186,4.363,3187,6,3188,4.363,3189,4.363,3190,4.363,3191,4.363,3192,4.363,3193,4.363,3194,4.363,3195,4.363,3196,4.363]],["title/classes/ODataSchemaElement.html",[187,0.351,1719,2.934]],["body/classes/ODataSchemaElement.html",[3,0.078,4,0.078,5,0.078,6,0.112,8,0.059,9,0.558,10,0.216,25,1.679,26,0.142,27,0.009,31,0.677,34,0.419,37,0.068,45,3.065,60,0.85,62,0.945,76,2.621,77,0.254,85,0.823,86,4.167,94,0.613,106,0.968,118,1.064,120,0.582,125,0.169,126,1.409,135,3.421,136,2.984,140,2.545,141,1.796,142,2.523,181,0.219,185,0.006,186,0.006,187,0.361,189,0.188,191,0.811,196,0.284,198,1.047,204,0.731,205,1.281,251,0.255,254,2.143,255,2.338,256,1.517,430,0.629,446,2.339,452,2.172,535,2.223,594,3.579,675,3.628,912,4.151,1062,1.823,1109,4.024,1111,3.562,1112,3.562,1113,2.184,1115,2.782,1116,3.292,1117,2.52,1118,4.04,1120,3.773,1121,3.421,1122,3.421,1123,2.931,1124,2.52,1125,2.52,1127,2.964,1128,2.049,1129,2.52,1260,3.194,1340,4.044,1372,4.015,1429,3.403,1512,2.425,1624,4.52,1642,4.49,1719,5.599,1721,4.335,1722,4.335,1723,3.896,1724,4.528,1725,5.115,1733,2.74,1735,5.38,1751,4.335,1753,4.335,1754,4.335,1756,4.335,1757,3.292,1759,3.562,1761,2.964,1762,3.896,1763,3.896,1764,3.421,1765,3.896,1766,3.719,1767,3.896,1768,3.896,1769,3.896,1770,3.194,1772,4.099,1773,4.335,1774,2.74,1775,2.74,1776,2.52,1786,5.45,1839,2.871,1848,2.871,2162,3.194,2163,3.665,3197,4.547,3198,6.172,3199,4.547,3200,4.547,3201,4.547,3202,4.547,3203,4.547,3204,4.547,3205,4.547,3206,4.547,3207,4.547,3208,4.547,3209,6.172,3210,4.547,3211,6.172]],["title/injectables/ODataServiceFactory.html",[2385,3.103,3212,3.901]],["body/injectables/ODataServiceFactory.html",[3,0.101,4,0.101,5,0.101,6,0.108,8,0.077,10,0.204,26,0.135,27,0.009,34,0.463,37,0.089,55,3.102,56,4.425,76,2.773,77,0.254,85,0.705,94,0.727,106,1.149,125,0.175,174,0.937,181,0.219,183,4.432,185,0.007,186,0.007,187,0.632,191,0.962,196,0.257,198,0.84,251,0.245,399,2.077,430,1.013,619,4.314,634,5.146,1063,5.836,1123,2.856,1186,4.274,1340,4.796,1341,5.226,1342,5.836,1343,7.983,1345,5.586,1761,3.991,1967,6.697,2385,5.144,2398,4.157,3212,6.466,3213,5.226,3214,5.918,3215,5.918,3216,5.918,3217,5.918,3218,8.31,3219,5.918,3220,5.918,3221,8.31,3222,6.697,3223,7.323]],["title/classes/ODataSingletonService.html",[187,0.351,3222,3.56]],["body/classes/ODataSingletonService.html",[3,0.085,4,0.085,5,0.085,6,0.101,8,0.064,10,0.213,14,3.633,19,1.641,26,0.134,27,0.009,34,0.434,35,3.65,36,2.238,37,0.075,48,1.732,56,4.271,76,2.869,77,0.182,85,0.75,94,0.65,103,3.404,105,2.914,113,0.977,118,1.162,125,0.16,160,1.215,173,5.008,176,3.991,181,0.225,183,4.433,185,0.006,186,0.006,187,0.394,189,0.206,191,0.86,196,0.277,198,0.972,244,2.093,252,2.234,430,1.12,452,2.508,535,2.358,619,4.385,912,3.145,961,4.494,1123,3.037,1160,4.316,1169,5.008,1247,3.252,1335,5.144,1337,4.9,1338,4.9,1339,4.9,1346,3.717,1347,3.819,1348,4.9,1349,5.519,1350,4.599,1352,3.492,1357,3.717,1358,4.9,1359,4.599,1365,3.717,1366,4.9,1367,4.599,1369,3.136,1375,3.488,1377,2.753,1435,5.144,1445,3.779,1449,5.374,1472,5.781,1943,6.056,1945,6.219,1948,6.275,1953,4.003,1954,4.003,1955,4.003,1958,4.003,1959,4.003,1961,4.003,1977,4.386,1979,5.781,1985,6.219,1990,4.386,2013,4.386,2017,4.386,2027,4.386,2029,4.386,3222,5.277,3224,4.967,3225,6.547,3226,6.547,3227,7.324,3228,4.967,3229,7.324,3230,4.967,3231,4.967,3232,4.967,3233,4.967,3234,4.967,3235,4.967,3236,4.967,3237,4.967,3238,6.547]],["title/classes/Operator.html",[187,0.351,352,1.875]],["body/classes/Operator.html",[0,1.494,3,0.048,4,0.048,5,0.048,6,0.089,8,0.036,10,0.111,19,0.698,25,0.965,26,0.124,27,0.009,31,0.692,34,0.295,37,0.132,60,1.108,62,1.044,77,0.252,84,0.732,85,0.898,94,0.525,98,1.957,106,1.342,113,0.889,120,0.825,125,0.159,141,1.681,160,1.364,174,1.184,181,0.111,185,0.004,186,0.004,187,0.676,188,2.245,189,0.115,190,1.218,191,0.567,195,1.218,196,0.208,198,0.607,199,1.218,201,1.218,203,0.929,204,0.448,205,0.785,206,2.205,207,1.307,208,1.182,209,2.205,210,2.457,211,2.701,212,2.701,213,2.787,214,1.117,215,2.123,216,2.026,217,1.71,218,1.218,219,0.698,220,0.804,221,1.218,222,1.888,223,1.888,224,1.218,225,1.218,226,1.596,227,1.218,228,1.218,229,1.218,230,2.206,231,2.659,232,1.218,233,1.218,234,1.218,235,1.218,236,1.218,237,1.218,238,1.218,239,1.218,240,1.218,241,1.218,242,1.218,243,3.933,244,1.161,245,1.684,246,1.218,247,1.087,248,1.218,249,1.218,250,1.182,251,0.247,252,2.074,253,2.729,254,1.083,255,0.929,256,1.441,257,2.895,258,3.111,259,1.218,260,1.218,261,1.888,262,1.218,263,2.312,264,2.312,265,1.218,266,2.245,267,1.218,268,1.218,269,1.218,270,1.218,271,1.218,272,1.218,273,1.218,274,1.218,275,1.218,276,1.218,277,1.218,278,1.218,279,1.218,280,1.888,281,1.555,282,1.218,283,1.218,284,2.245,285,1.218,286,2.605,287,1.218,288,1.888,289,1.218,290,1.218,291,2.245,292,1.218,293,1.888,294,1.218,295,1.218,296,1.218,297,1.218,298,1.218,299,1.218,300,1.218,301,2.245,302,1.218,303,1.218,304,1.218,305,1.218,306,1.218,307,1.218,308,1.218,309,1.218,310,1.218,311,1.218,312,1.218,313,1.218,314,1.218,315,1.218,316,1.218,317,1.218,318,1.218,319,1.218,320,1.218,321,1.218,322,1.218,323,1.218,324,1.218,325,1.218,326,1.218,327,1.218,328,1.218,329,1.218,330,1.218,331,1.218,332,1.218,333,2.245,334,1.218,335,1.218,336,1.218,337,1.218,338,2.245,339,1.218,340,1.888,341,1.218,342,1.218,343,1.888,344,1.218,345,1.218,346,1.218,347,1.149,348,2.245,349,1.218,350,1.218,351,1.218,352,2.895,353,2.982,354,2.819,355,3.741,356,3.938,357,1.888,358,1.218,359,1.218,360,0.863,361,1.218,362,1.218,363,2.245,364,1.218,365,1.218,366,1.218,367,1.218,368,1.218,369,1.218,370,1.218,371,1.218,372,1.218,373,1.218,374,1.218,375,1.218,376,1.218,377,1.218,378,1.218,379,1.218,380,1.218,381,1.218,382,1.218,383,1.218,384,1.218,385,1.218,386,2.245,387,1.218,388,1.218,389,1.218,390,1.218,391,1.218,392,1.218,393,1.218,394,1.218,395,1.218,396,1.218,397,1.218,398,1.732,399,0.978,400,1.833,401,1.218,402,1.218,403,1.218,404,2.245,405,1.905,406,1.218,407,1.218,408,1.218,409,2.245,410,1.218,411,1.218,412,1.218,413,1.218,414,2.895,415,1.218,416,1.182,417,2.895,418,1.218,419,1.003,420,2.605,421,1.218,422,0.907,464,1.255,535,1.555,1086,2.46,3239,2.786,3240,2.786,3241,2.786,3242,2.786,3243,2.786]],["title/classes/OrderByExpression.html",[187,0.351,844,2.789]],["body/classes/OrderByExpression.html",[3,0.087,4,0.087,5,0.087,6,0.108,8,0.066,9,0.599,10,0.214,25,1.752,26,0.136,27,0.009,31,0.507,34,0.412,37,0.111,49,1.769,60,0.613,62,0.774,70,3.436,77,0.227,85,0.849,94,0.658,98,1.949,106,1.159,117,3.136,118,1.183,120,0.945,125,0.161,126,1.567,154,2.656,171,2.085,174,0.945,181,0.218,185,0.006,186,0.006,187,0.526,189,0.209,191,0.87,196,0.286,198,1.002,206,2.29,207,2.235,209,2.676,210,2.649,211,2.589,212,2.589,213,2.652,215,2.157,216,2.137,217,1.268,220,2.131,230,1.73,251,0.274,252,1.986,281,2.661,360,1.567,399,1.775,422,1.646,430,0.7,445,4.336,447,4.182,448,4.182,449,4.146,450,2.6,452,2.589,453,3.358,455,3.047,460,4.186,464,2.279,466,3.358,467,3.358,468,3.551,471,2.428,473,3.047,475,2.802,478,2.697,479,2.802,481,3.047,490,3.992,502,3.358,512,3.358,529,2.511,530,4.399,531,2.802,532,2.918,844,5.789,845,4.399,884,4.075,885,4.465,3244,4.075,3245,6.625,3246,6.625,3247,5.056,3248,5.056,3249,5.849,3250,5.056,3251,5.056,3252,5.849,3253,5.056,3254,5.056,3255,5.056,3256,5.339,3257,5.849,3258,5.849,3259,5.849,3260,6.524,3261,4.465,3262,4.957,3263,5.849]],["title/classes/OrderByField.html",[187,0.351,3256,3.56]],["body/classes/OrderByField.html",[3,0.094,4,0.094,5,0.094,6,0.111,8,0.071,10,0.179,25,1.561,26,0.128,27,0.009,31,0.534,34,0.429,37,0.116,49,1.314,70,2.553,77,0.232,85,0.86,94,0.545,98,1.999,106,1.096,117,2.966,120,1.069,125,0.134,154,2.801,171,2.264,174,0.983,181,0.179,185,0.007,186,0.007,187,0.555,189,0.227,191,0.918,196,0.269,198,0.882,206,2.382,207,2.114,209,2.722,210,2.718,211,2.646,212,2.646,213,2.711,215,2.226,216,2.193,217,1.752,220,1.584,230,1.879,251,0.289,252,1.476,360,1.702,399,1.927,422,1.787,445,3.47,449,3.885,460,3.952,464,2.474,471,2.637,473,3.309,475,3.043,478,2.929,479,3.043,481,3.309,490,3.309,502,3.646,512,3.646,529,2.727,530,4.64,531,3.043,532,3.169,535,2.516,536,4.425,844,5.64,845,4.64,3244,4.425,3249,4.848,3252,4.848,3256,6.519,3257,7.375,3258,7.375,3259,7.375,3260,6.785,3261,4.848,3262,5.228,3263,6.169,3264,5.49,3265,5.49,3266,5.49,3267,5.49,3268,5.49]],["title/interfaces/Parser.html",[0,1.108,100,1.931]],["body/interfaces/Parser.html",[0,1.977,1,3.354,2,2.222,3,0.071,4,0.071,5,0.071,6,0.094,7,2.51,8,0.054,9,0.377,10,0.172,11,2.404,12,2.51,13,3.668,14,1.821,15,3.709,16,2.988,17,2.63,18,3.668,19,1.815,20,2.51,21,3.668,22,2.63,23,3.441,24,2.404,26,0.137,27,0.009,28,2.702,29,2.619,30,2.791,31,0.702,32,3.596,33,4.013,34,0.232,35,2.841,36,1.877,37,0.137,38,2.51,39,2.51,40,2.51,41,3.61,42,2.142,43,3.221,44,3.502,45,2.069,46,2.51,47,3.502,48,0.81,49,0.997,50,1.937,51,2.397,52,2.069,53,3.221,54,3.367,55,2.267,56,2.886,57,1.885,58,3.221,59,3.354,60,1.071,61,3.166,62,0.889,63,2.093,64,2.541,65,2.619,66,3.221,67,2.397,68,2.886,69,3.221,70,2.702,71,2.619,72,2.702,73,2.886,74,3.354,75,3.354,76,1.939,77,0.259,78,3.502,79,3.502,80,3.354,81,2.63,82,2.63,83,2.51,84,1.12,85,0.56,86,2.142,87,2.63,88,2.309,89,2.766,90,2.766,91,2.766,92,3.676,93,2.51,94,0.577,95,2.63,96,2.63,97,4.903,98,0.997,99,3.862,100,3.166,101,3.658,102,4.444,103,2.541,104,2.988,105,2.698,106,1.195,107,3.658,108,3.478,109,2.142,110,3.441,111,2.142,112,2.791,113,0.622,114,2.309,115,2.766,116,2.222,117,2.467,118,0.975,119,2.766,120,0.533,121,2.001,122,2.404,123,2.142,124,2.63,125,0.167,126,1.801,127,2.766,128,2.309,129,2.766,130,1.877,131,2.766,132,2.51,133,2.63,134,3.502,135,4.576,136,1.5,137,2.51,138,2.51,139,2.51,140,1.718,141,1.328,142,2.915,143,2.404,144,3.221,145,2.142,146,3.354,147,2.63,148,3.221,149,2.63,150,3.502,151,2.404,152,3.502,153,3.354,154,2.33,155,2.51,156,2.222,157,3.099,158,2.404,159,1.462,160,0.773,161,3.478,162,1.988,163,2.001,164,1.462,165,1.462,166,2.51,167,2.51,168,2.001,169,2.51,170,2.766,171,1.718,172,2.404,173,2.51,174,0.856,175,2.069,176,2.001,177,2.001,178,2.001,179,2.51,180,2.63,181,0.186,182,2.404,183,2.222,184,2.069,185,0.006,186,0.006,191,0.763,196,0.216,198,0.768,430,0.926,1738,2.404,1747,2.404,3269,4.166,3270,4.166,3271,4.166]],["title/interfaces/ParserOptions.html",[0,1.108,92,1.875]],["body/interfaces/ParserOptions.html",[0,1.975,1,3.345,2,2.213,3,0.071,4,0.071,5,0.071,6,0.054,7,2.501,8,0.054,9,0.604,10,0.228,11,2.395,12,2.501,13,4.801,14,1.814,15,3.701,16,2.98,17,2.62,18,4.801,19,1.812,20,2.501,21,4.801,22,2.62,23,4.051,24,2.395,26,0.138,27,0.009,28,2.695,29,3.258,30,3.472,31,0.71,32,3.913,33,4.366,34,0.231,35,2.835,36,1.87,37,0.137,38,2.501,39,2.501,40,2.501,41,3.606,42,2.134,43,3.212,44,3.492,45,2.061,46,2.501,47,3.492,48,0.807,49,0.993,50,1.93,51,2.39,52,2.061,53,3.212,54,3.76,55,2.26,56,2.878,57,1.881,58,3.212,59,3.345,60,1.05,61,3.16,62,0.887,63,2.087,64,2.534,65,2.612,66,3.212,67,2.39,68,2.878,69,3.212,70,2.695,71,2.612,72,2.695,73,2.878,74,3.345,75,3.345,76,1.934,77,0.259,78,4.583,79,4.583,80,4.389,81,2.62,82,2.62,83,2.501,84,1.119,85,0.558,86,2.134,87,2.62,88,2.3,89,2.756,90,2.756,91,2.756,92,3.432,93,2.501,94,0.575,95,2.62,96,2.62,97,4.172,98,0.993,99,3.854,100,2.92,101,3.207,102,4.435,103,2.534,104,2.98,105,2.296,106,1.134,107,3.207,108,2.783,109,2.134,110,3.434,111,2.134,112,1.993,113,0.619,114,2.3,115,2.756,116,2.213,117,2.46,118,0.971,119,2.756,120,0.531,121,1.993,122,2.395,123,2.134,124,2.62,125,0.161,126,1.796,127,2.756,128,2.3,129,2.756,130,1.87,131,2.756,132,2.501,133,2.62,134,3.492,135,4.571,136,1.494,137,2.501,138,2.501,139,2.501,140,1.711,141,1.325,142,2.912,143,2.395,144,3.212,145,2.134,146,3.345,147,2.62,148,3.212,149,2.62,150,3.492,151,2.395,152,3.492,153,3.345,154,2.324,155,2.501,156,2.213,157,3.091,158,2.395,159,1.456,160,0.77,161,3.472,162,1.983,163,1.993,164,1.456,165,1.456,166,2.501,167,2.501,168,1.993,169,2.501,170,2.756,171,1.711,172,2.395,173,2.501,174,0.854,175,2.061,176,1.993,177,1.993,178,1.993,179,2.501,180,2.62,181,0.106,182,2.395,183,2.213,184,2.061,185,0.006,186,0.006]],["title/interfaces/PassedInitialConfig.html",[0,1.108,2388,3.56]],["body/interfaces/PassedInitialConfig.html",[0,1.545,2,3.286,3,0.106,4,0.106,5,0.106,6,0.08,8,0.08,9,0.679,10,0.216,26,0.122,27,0.009,34,0.496,37,0.127,62,1.149,85,0.78,113,0.92,123,4.574,174,0.96,185,0.007,186,0.007,187,0.489,204,0.99,220,1.777,347,2.541,1115,3.798,1342,5.686,1345,4.327,1405,4.091,1761,2.959,1861,4.985,1867,4.091,2381,5.272,2383,5.44,2384,6.628,2385,5.686,2386,5.44,2388,6.791,2390,6.628,2391,6.628,2392,6.628,2393,4.965,2394,6.628,2395,5.44,2396,6.524,2397,7.44,2398,4.327,2399,5.44,2400,5.44,2401,7.627,2402,7.44,2403,5.44,2404,5.44,2405,5.44,2406,5.44,2407,4.965,2408,5.44,2409,5.44,2410,5.44,2411,4.965,2412,5.44,2413,5.44,2414,5.44,2415,5.44,2416,6.628,2417,5.44,2418,6.049,2419,4.61,2420,5.44,2421,4.965,2422,5.44,2423,5.44,2424,5.44,2425,5.44]],["title/interfaces/Renderable.html",[0,1.108,209,1.369]],["body/interfaces/Renderable.html",[0,1.504,2,1.505,3,0.048,4,0.048,5,0.048,6,0.084,8,0.037,10,0.072,19,0.707,25,0.974,26,0.122,27,0.009,31,0.69,34,0.297,37,0.133,60,1.109,62,1.049,77,0.252,84,0.738,85,0.899,94,0.529,98,1.962,106,1.345,113,0.895,120,0.682,125,0.158,141,1.688,160,1.37,174,1.185,181,0.072,185,0.004,186,0.004,187,0.677,188,2.263,190,1.233,191,0.573,195,1.233,196,0.193,198,0.688,199,1.233,201,1.233,203,0.941,204,0.453,205,0.795,206,2.216,207,1.319,208,1.197,209,2.216,210,2.467,211,2.705,212,2.705,213,2.792,214,2.405,215,2.13,216,2.033,217,1.626,218,1.233,219,0.707,220,0.814,221,1.233,222,1.907,223,1.907,224,1.233,225,1.233,226,1.612,227,1.233,228,1.233,229,1.233,230,2.219,231,2.675,232,1.233,233,1.233,234,1.233,235,1.233,236,1.233,237,1.233,238,1.233,239,1.233,240,1.233,241,1.233,242,1.233,243,3.929,244,1.172,245,1.701,246,1.233,247,1.1,248,1.233,249,1.233,250,1.197,251,0.221,252,2.081,253,2.593,254,1.093,255,0.941,256,1.455,257,2.91,258,3.125,259,1.233,260,1.233,261,1.907,262,1.233,263,2.331,264,2.331,265,1.233,266,2.263,267,1.233,268,1.233,269,1.233,270,1.233,271,1.233,272,1.233,273,1.233,274,1.233,275,1.233,276,1.233,277,1.233,278,1.233,279,1.233,280,1.907,281,1.57,282,1.233,283,1.233,284,2.263,285,1.233,286,2.622,287,1.233,288,1.907,289,1.233,290,1.233,291,2.263,292,1.233,293,1.907,294,1.233,295,1.233,296,1.233,297,1.233,298,1.233,299,1.233,300,1.233,301,2.263,302,1.233,303,1.233,304,1.233,305,1.233,306,1.233,307,1.233,308,1.233,309,1.233,310,1.233,311,1.233,312,1.233,313,1.233,314,1.233,315,1.233,316,1.233,317,1.233,318,1.233,319,1.233,320,1.233,321,1.233,322,1.233,323,1.233,324,1.233,325,1.233,326,1.233,327,1.233,328,1.233,329,1.233,330,1.233,331,1.233,332,1.233,333,2.263,334,1.233,335,1.233,336,1.233,337,1.233,338,2.263,339,1.233,340,1.907,341,1.233,342,1.233,343,1.907,344,1.233,345,1.233,346,1.233,347,1.163,348,2.263,349,1.233,350,1.233,351,1.233,352,2.546,353,2.622,354,2.835,355,3.748,356,3.942,357,1.907,358,1.233,359,1.233,360,0.874,361,1.233,362,1.233,363,2.263,364,1.233,365,1.233,366,1.233,367,1.233,368,1.233,369,1.233,370,1.233,371,1.233,372,1.233,373,1.233,374,1.233,375,1.233,376,1.233,377,1.233,378,1.233,379,1.233,380,1.233,381,1.233,382,1.233,383,1.233,384,1.233,385,1.233,386,2.263,387,1.233,388,1.233,389,1.233,390,1.233,391,1.233,392,1.233,393,1.233,394,1.233,395,1.233,396,1.233,397,1.233,398,1.749,399,0.99,400,1.851,401,1.233,402,1.233,403,1.233,404,2.263,405,1.92,406,1.233,407,1.233,408,1.233,409,2.263,410,1.233,411,1.233,412,1.233,413,1.233,414,2.91,415,1.233,416,1.197,417,2.91,418,1.233,419,1.016,420,2.622,421,1.233,422,0.918,464,1.271,3272,2.821,3273,2.821,3274,2.821,3275,2.821]],["title/interfaces/ResponseJson.html",[0,1.108,2368,3.56]],["body/interfaces/ResponseJson.html",[0,1.424,2,3.029,3,0.097,4,0.097,5,0.097,6,0.074,8,0.074,9,0.646,16,4.211,25,1.594,26,0.131,27,0.009,34,0.398,37,0.085,41,3.865,50,3.923,76,2.604,77,0.251,84,1.133,85,0.547,94,0.564,103,3.12,104,4.211,109,4.211,113,1.222,120,0.999,125,0.162,174,0.727,185,0.007,186,0.007,187,0.451,198,0.652,244,2.315,251,0.235,256,2.381,471,2.727,918,4.506,1136,1.895,1158,4.928,1270,4.97,1347,3.217,1377,3.147,1390,4.505,1433,4.704,1440,3.989,1445,4.119,1493,4.506,1515,5.841,1586,6.128,1587,6.128,1596,4.74,1599,5.751,1602,5.013,1610,5.751,1617,3.771,1629,3.989,1645,3.989,1664,4.25,2352,5.752,2353,4.577,2354,4.577,2355,4.577,2356,4.577,2357,4.577,2358,5.014,2359,7.875,2363,5.014,2368,5.752,2369,5.014,2370,5.014,2371,5.014,2372,5.014,2373,6.302,2374,5.014,2375,5.014,2376,5.014,2377,5.014,2378,5.014,2379,5.014]],["title/interfaces/ResponseOptions.html",[0,1.108,93,2.662]],["body/interfaces/ResponseOptions.html",[0,1.998,1,3.431,2,2.296,3,0.074,4,0.074,5,0.074,6,0.056,7,2.594,8,0.056,9,0.616,10,0.188,11,2.484,12,2.594,13,3.753,14,1.882,15,3.774,16,3.057,17,2.718,18,3.753,19,1.841,20,2.594,21,3.753,22,2.718,23,3.502,24,2.484,26,0.137,27,0.009,28,2.764,29,2.679,30,2.855,31,0.704,32,3.647,33,4.07,34,0.24,35,2.89,36,1.94,37,0.137,38,2.594,39,2.594,40,2.594,41,3.639,42,2.214,43,3.295,44,3.582,45,2.138,46,2.594,47,4.425,48,0.837,49,1.03,50,2.002,51,2.452,52,2.138,53,3.295,54,3.415,55,2.319,56,2.952,57,1.918,58,3.295,59,3.431,60,1.056,61,3.211,62,0.91,63,2.141,64,2.599,65,2.679,66,3.295,67,2.452,68,2.952,69,3.295,70,2.764,71,2.679,72,2.764,73,2.952,74,3.431,75,3.431,76,1.984,77,0.26,78,3.582,79,3.582,80,3.431,81,2.718,82,2.718,83,2.594,84,1.169,85,0.573,86,2.214,87,2.718,88,2.386,89,2.859,90,2.859,91,2.859,92,3.467,93,3.582,94,0.676,95,4.636,96,4.636,97,4.238,98,1.03,99,3.93,100,2.977,101,3.27,102,4.522,103,2.599,104,3.057,105,2.332,106,1.152,107,3.27,108,2.855,109,2.214,110,3.502,111,2.214,112,2.067,113,0.643,114,2.386,115,2.859,116,2.296,117,2.523,118,1.007,119,2.859,120,0.551,121,2.067,122,2.484,123,2.214,124,2.718,125,0.162,126,1.842,127,2.859,128,2.386,129,2.859,130,1.94,131,2.859,132,2.594,133,2.718,134,3.582,135,4.613,136,1.55,137,2.594,138,2.594,139,2.594,140,1.775,141,1.359,142,2.941,143,2.484,144,3.295,145,2.214,146,3.431,147,2.718,148,3.295,149,2.718,150,3.582,151,2.484,152,3.582,153,3.431,154,2.384,155,2.594,156,2.296,157,3.171,158,2.484,159,1.511,160,0.799,161,3.527,162,2.034,163,2.067,164,1.511,165,1.511,166,2.594,167,2.594,168,2.067,169,2.594,170,2.859,171,1.775,172,2.484,173,2.594,174,0.871,175,2.138,176,2.067,177,2.067,178,2.067,179,2.594,180,2.718,181,0.11,182,2.484,183,2.296,184,2.138,185,0.006,186,0.006]],["title/classes/SearchExpression.html",[187,0.351,846,2.789]],["body/classes/SearchExpression.html",[3,0.071,4,0.071,5,0.071,6,0.112,8,0.054,9,0.525,10,0.212,25,1.617,26,0.136,27,0.009,31,0.619,34,0.404,37,0.109,49,2.007,60,0.878,62,0.637,68,3.321,77,0.219,85,0.851,94,0.576,106,0.653,113,0.621,117,2.839,118,0.973,120,0.926,125,0.159,126,1.289,136,2.091,154,2.328,171,1.716,174,1.009,181,0.215,185,0.006,186,0.006,187,0.461,189,0.172,191,0.763,196,0.288,198,1.001,204,0.669,205,1.172,206,2.073,207,2.023,209,2.558,210,2.477,211,2.444,212,2.444,213,2.504,215,2.094,216,1.999,217,1.043,220,1.929,230,1.423,231,1.716,251,0.24,252,1.561,254,1.043,255,1.388,281,2.408,360,1.289,398,1.668,399,1.46,422,1.354,430,0.803,445,4.164,447,3.665,448,4.222,449,4.264,450,2.14,452,2.444,453,2.763,455,4.751,460,3.915,464,1.875,466,2.763,467,2.763,471,1.998,475,2.306,478,3.097,479,2.306,490,2.507,530,3.856,531,4.37,532,2.401,846,5.861,847,3.856,888,3.353,905,4.679,906,3.353,1029,2.14,1062,2.902,1140,3.439,1440,2.922,2288,3.113,2744,5.832,3262,3.113,3276,3.353,3277,5.905,3278,5.905,3279,8.023,3280,7.646,3281,5.806,3282,6.917,3283,4.16,3284,4.16,3285,5.126,3286,4.16,3287,4.16,3288,4.16,3289,4.16,3290,5.126,3291,4.16,3292,5.126,3293,4.16,3294,4.16,3295,4.16,3296,4.16,3297,5.126,3298,4.16,3299,4.16,3300,4.679,3301,3.674,3302,3.674,3303,7.403,3304,6.721,3305,3.674,3306,5.126,3307,3.674,3308,3.674,3309,5.126,3310,5.126,3311,5.126,3312,5.126,3313,5.126,3314,3.674,3315,5.126,3316,3.674,3317,3.674,3318,3.674,3319,3.674,3320,3.674]],["title/classes/SearchTerm.html",[187,0.351,3300,3.56]],["body/classes/SearchTerm.html",[3,0.081,4,0.081,5,0.081,6,0.106,8,0.061,10,0.163,25,1.417,26,0.13,27,0.009,31,0.584,34,0.426,37,0.115,49,1.712,60,0.926,68,2.351,77,0.24,85,0.866,94,0.47,113,0.707,117,2.692,120,1.049,125,0.122,154,2.543,171,1.952,174,1.049,181,0.163,185,0.006,186,0.006,187,0.504,189,0.196,191,0.833,196,0.257,198,0.821,204,0.761,205,1.334,206,2.216,207,1.919,209,2.541,210,2.592,211,2.541,212,2.541,213,2.603,215,2.192,216,2.092,217,1.59,220,1.365,230,1.62,231,1.952,251,0.262,254,1.187,255,1.579,360,1.467,398,1.898,399,1.661,422,1.541,445,3.15,448,2.988,449,4.248,455,4.8,460,3.678,464,2.133,471,2.274,475,2.624,478,3.383,479,2.624,530,4.211,531,4.543,532,2.732,535,2.284,846,5.78,847,4.211,905,5.111,906,3.815,1029,2.435,1062,3.063,1140,3.678,1440,3.325,2288,3.542,2744,3.815,3262,3.542,3276,3.815,3277,4.18,3278,4.18,3279,7.996,3280,7.514,3282,6.607,3285,4.18,3290,4.18,3292,4.18,3297,4.18,3300,6.156,3301,4.18,3302,4.18,3303,7.61,3304,7.033,3305,4.18,3306,5.6,3307,4.18,3308,4.18,3309,5.6,3310,5.6,3311,5.6,3312,5.6,3313,5.6,3314,4.18,3315,5.6,3316,4.18,3317,4.18,3318,4.18,3319,4.18,3320,4.18,3321,4.734,3322,4.734,3323,4.734,3324,4.734,3325,4.734,3326,4.734]],["title/classes/SegmentHandler.html",[187,0.351,2470,3.306]],["body/classes/SegmentHandler.html",[3,0.094,4,0.094,5,0.094,6,0.117,8,0.071,10,0.214,26,0.134,27,0.009,29,3.145,31,0.534,34,0.451,37,0.105,52,2.722,55,2.138,56,2.722,57,1.544,58,3.038,60,1.096,62,0.839,63,1.974,77,0.238,85,0.878,106,1.36,118,1.633,120,1.068,125,0.169,160,1.295,181,0.227,185,0.007,186,0.007,187,0.554,189,0.227,191,0.917,196,0.288,198,1.007,204,1.122,205,1.544,251,0.227,399,1.924,430,1.119,535,2.513,1251,4.902,1347,2.47,1431,4.902,1483,4.635,1868,3.64,1951,5.759,2445,6.049,2451,5.624,2456,4.417,2470,5.223,2529,4.417,2530,4.84,2539,4.84,2540,6.162,2541,6.162,2542,6.162,2543,6.162,2544,6.162,2545,6.78,2546,7.138,2547,4.84,2548,7.138,2549,6.162,2550,6.78,2551,7.138,2552,4.84,2553,7.138,2554,4.84,2555,4.84,2556,4.84,2557,4.84,2558,4.84,2559,4.84,2560,4.84,2609,4.84,3327,5.481,3328,5.481,3329,5.481,3330,5.481,3331,5.481,3332,5.481,3333,5.481,3334,5.481,3335,5.481,3336,5.481,3337,5.481]],["title/classes/SelectExpression.html",[187,0.351,848,2.934]],["body/classes/SelectExpression.html",[3,0.093,4,0.093,5,0.093,6,0.108,8,0.071,9,0.628,10,0.214,25,1.8,26,0.136,27,0.009,31,0.416,34,0.427,37,0.104,49,1.831,60,0.659,62,0.832,64,3.344,77,0.213,85,0.802,94,0.689,98,1.929,106,1.2,117,3.246,118,1.271,120,0.979,125,0.16,126,1.685,154,2.783,171,2.241,174,0.888,181,0.218,185,0.007,186,0.007,187,0.432,189,0.225,191,0.912,196,0.288,198,1.006,206,2.151,207,2.314,209,2.639,210,2.489,211,2.37,212,2.37,213,2.429,215,2.105,216,2.116,220,2.206,251,0.287,252,1.866,281,2.754,360,1.685,422,1.769,430,0.752,445,4.395,447,4.382,448,4.382,449,4.209,450,2.795,452,2.639,453,3.609,455,3.275,460,4.282,464,2.449,466,3.609,467,4.61,468,3.817,471,2.61,473,3.275,475,3.012,478,2.899,479,3.012,481,3.275,490,4.183,496,5.195,529,2.699,531,3.012,532,3.137,848,6.13,849,4.875,890,4.38,891,4.799,3338,4.799,3339,5.435,3340,5.435,3341,5.435,3342,5.435,3343,5.435,3344,5.435]],["title/classes/StringAndCollectionFunctions.html",[187,0.351,266,1.875]],["body/classes/StringAndCollectionFunctions.html",[0,1.466,3,0.046,4,0.046,5,0.046,6,0.094,8,0.035,10,0.18,19,0.675,26,0.126,27,0.009,31,0.698,34,0.289,37,0.132,60,1.116,62,1.227,77,0.25,84,0.972,85,0.897,94,0.514,98,2.037,106,1.335,113,0.873,120,0.662,125,0.164,141,1.662,160,1.349,174,1.182,181,0.18,185,0.004,186,0.004,187,0.672,188,2.196,189,0.111,190,1.176,191,0.552,195,1.176,196,0.227,198,0.806,199,1.176,201,1.176,203,0.898,204,0.432,205,0.758,206,2.177,207,1.272,208,1.142,209,2.084,210,2.286,211,2.689,212,2.689,213,2.776,214,1.079,215,1.933,216,1.845,217,1.59,218,1.176,219,0.675,220,0.776,221,1.176,222,1.838,223,1.838,224,1.176,225,1.176,226,1.554,227,1.176,228,1.176,229,1.176,230,2.17,231,2.616,232,1.176,233,1.176,234,1.176,235,1.176,236,1.176,237,1.176,238,1.176,239,1.176,240,1.176,241,1.176,242,1.176,243,3.943,244,1.13,245,1.64,246,1.176,247,1.049,248,1.176,249,1.176,250,1.142,251,0.214,252,2.054,253,2.556,254,1.054,255,0.898,256,1.403,257,2.854,258,3.071,259,1.176,260,1.176,261,1.838,262,1.176,263,2.262,264,2.262,265,1.176,266,2.482,267,1.838,268,1.176,269,1.838,270,1.176,271,1.838,272,1.176,273,1.838,274,1.176,275,1.838,276,1.176,277,1.838,278,1.176,279,1.838,280,2.557,281,2.421,282,1.176,283,1.176,284,2.196,285,1.176,286,2.557,287,1.176,288,1.838,289,1.176,290,1.176,291,2.196,292,1.176,293,1.838,294,1.176,295,1.176,296,1.176,297,1.176,298,1.176,299,1.176,300,1.176,301,2.196,302,1.176,303,1.176,304,1.176,305,1.176,306,1.176,307,1.176,308,1.176,309,1.176,310,1.176,311,1.176,312,1.176,313,1.176,314,1.176,315,1.176,316,1.176,317,1.176,318,1.176,319,1.176,320,1.176,321,1.176,322,1.176,323,1.176,324,1.176,325,1.176,326,1.176,327,1.176,328,1.176,329,1.176,330,1.176,331,1.176,332,1.176,333,2.196,334,1.176,335,1.176,336,1.176,337,1.176,338,2.196,339,1.176,340,1.838,341,1.176,342,1.176,343,1.838,344,1.176,345,1.176,346,1.176,347,1.11,348,2.196,349,1.176,350,1.176,351,1.176,352,2.482,353,2.557,354,2.773,355,3.721,356,3.926,357,1.838,358,1.176,359,1.176,360,0.834,361,1.176,362,1.176,363,2.196,364,1.176,365,1.176,366,1.176,367,1.176,368,1.176,369,1.176,370,1.176,371,1.176,372,1.176,373,1.176,374,1.176,375,1.176,376,1.176,377,1.176,378,1.176,379,1.176,380,1.176,381,1.176,382,1.176,383,1.176,384,1.176,385,1.176,386,2.196,387,1.176,388,1.176,389,1.176,390,1.176,391,1.176,392,1.176,393,1.176,394,1.176,395,1.176,396,1.176,397,1.176,398,1.685,399,0.944,400,1.784,401,1.176,402,1.176,403,1.176,404,2.196,405,1.863,406,1.176,407,1.176,408,1.176,409,2.196,410,1.176,411,1.176,412,1.176,413,1.176,414,2.854,415,1.176,416,1.142,417,2.854,418,1.176,419,0.969,420,2.557,421,1.176,422,0.876,430,0.972,3345,4.203,3346,4.203,3347,4.203,3348,4.203,3349,4.203,3350,4.203,3351,2.691,3352,2.691,3353,2.691,3354,2.691,3355,2.691,3356,2.691,3357,2.691]],["title/classes/StringFunctions.html",[187,0.351,291,1.875]],["body/classes/StringFunctions.html",[0,1.492,3,0.048,4,0.048,5,0.048,6,0.084,8,0.036,10,0.153,19,0.697,26,0.123,27,0.009,31,0.689,34,0.295,37,0.132,60,1.112,62,1.18,77,0.252,84,0.731,85,0.898,94,0.525,98,1.956,106,1.385,113,0.889,120,0.676,125,0.161,141,1.68,160,1.364,174,1.184,181,0.153,185,0.004,186,0.004,187,0.676,188,2.243,189,0.115,190,1.216,191,0.567,195,1.216,196,0.192,198,0.683,199,1.216,201,1.216,203,0.928,204,0.447,205,0.783,206,2.204,207,1.305,208,1.18,209,2.113,210,2.315,211,2.7,212,2.7,213,2.787,214,1.115,215,1.957,216,1.867,217,1.615,218,1.216,219,0.697,220,0.802,221,1.216,222,1.886,223,1.886,224,1.216,225,1.216,226,1.594,227,1.216,228,1.216,229,1.216,230,2.204,231,2.657,232,1.216,233,1.216,234,1.216,235,1.216,236,1.216,237,1.216,238,1.216,239,1.216,240,1.216,241,1.216,242,1.216,243,3.926,244,1.159,245,1.682,246,1.216,247,1.085,248,1.216,249,1.216,250,1.18,251,0.219,252,2.073,253,2.582,254,1.081,255,0.928,256,1.439,257,2.893,258,3.109,259,1.216,260,1.216,261,1.886,262,1.216,263,2.31,264,2.31,265,1.216,266,2.243,267,1.216,268,1.216,269,1.216,270,1.216,271,1.216,272,1.216,273,1.216,274,1.216,275,1.216,276,1.216,277,1.216,278,1.216,279,1.216,280,1.886,281,1.553,282,1.216,283,1.216,284,2.243,285,1.216,286,2.602,287,1.216,288,1.886,289,1.216,290,1.216,291,2.527,292,1.886,293,2.602,294,1.216,295,1.886,296,1.216,297,1.886,298,1.216,299,1.886,300,1.216,301,2.243,302,1.216,303,1.216,304,1.216,305,1.216,306,1.216,307,1.216,308,1.216,309,1.216,310,1.216,311,1.216,312,1.216,313,1.216,314,1.216,315,1.216,316,1.216,317,1.216,318,1.216,319,1.216,320,1.216,321,1.216,322,1.216,323,1.216,324,1.216,325,1.216,326,1.216,327,1.216,328,1.216,329,1.216,330,1.216,331,1.216,332,1.216,333,2.243,334,1.216,335,1.216,336,1.216,337,1.216,338,2.243,339,1.216,340,1.886,341,1.216,342,1.216,343,1.886,344,1.216,345,1.216,346,1.216,347,1.147,348,2.243,349,1.216,350,1.216,351,1.216,352,2.527,353,2.602,354,2.817,355,3.74,356,3.938,357,1.886,358,1.216,359,1.216,360,0.862,361,1.216,362,1.216,363,2.243,364,1.216,365,1.216,366,1.216,367,1.216,368,1.216,369,1.216,370,1.216,371,1.216,372,1.216,373,1.216,374,1.216,375,1.216,376,1.216,377,1.216,378,1.216,379,1.216,380,1.216,381,1.216,382,1.216,383,1.216,384,1.216,385,1.216,386,2.243,387,1.216,388,1.216,389,1.216,390,1.216,391,1.216,392,1.216,393,1.216,394,1.216,395,1.216,396,1.216,397,1.216,398,1.729,399,0.976,400,1.831,401,1.216,402,1.216,403,1.216,404,2.243,405,1.903,406,1.216,407,1.216,408,1.216,409,2.243,410,1.216,411,1.216,412,1.216,413,1.216,414,2.893,415,1.216,416,1.18,417,2.893,418,1.216,419,1.001,420,2.602,421,1.216,422,0.905,3119,3.808,3358,4.313,3359,4.313,3360,4.313,3361,2.781,3362,2.781,3363,2.781,3364,2.781]],["title/interfaces/StructuredTypeFieldOptions.html",[0,1.108,97,2.55]],["body/interfaces/StructuredTypeFieldOptions.html",[0,2.002,1,3.448,2,2.313,3,0.074,4,0.074,5,0.074,6,0.056,7,2.613,8,0.056,9,0.618,11,2.503,12,2.613,13,3.772,14,1.896,15,3.789,16,3.073,17,2.738,18,3.772,19,1.847,20,2.613,21,3.772,22,2.738,23,3.516,24,2.503,26,0.137,27,0.009,28,2.778,29,2.693,30,2.87,31,0.704,32,3.659,33,4.083,34,0.242,35,2.902,36,1.954,37,0.138,38,2.613,39,2.613,40,2.613,41,3.645,42,2.23,43,3.311,44,3.601,45,2.154,46,2.613,47,3.601,48,0.843,49,1.038,50,2.016,51,2.464,52,2.154,53,3.311,54,3.426,55,2.33,56,2.967,57,1.926,58,3.311,59,3.448,60,1.058,61,3.221,62,0.914,63,2.152,64,2.612,65,2.693,66,3.311,67,2.464,68,2.967,69,3.311,70,2.778,71,2.693,72,2.778,73,2.967,74,3.448,75,3.448,76,1.994,77,0.26,78,3.601,79,3.601,80,3.448,81,2.738,82,2.738,83,2.613,84,1.132,85,0.575,86,2.23,87,2.738,88,2.403,89,2.88,90,2.88,91,2.88,92,3.474,93,2.613,94,0.679,95,2.738,96,2.738,97,4.459,98,1.763,99,4.459,100,2.989,101,3.283,102,4.54,103,2.612,104,3.073,105,2.339,106,1.155,107,3.283,108,2.87,109,2.23,110,3.516,111,2.23,112,2.083,113,0.647,114,2.403,115,2.88,116,2.313,117,2.536,118,1.014,119,2.88,120,0.555,121,2.083,122,2.503,123,2.23,124,2.738,125,0.163,126,1.852,127,2.88,128,2.403,129,2.88,130,1.954,131,2.88,132,2.613,133,2.738,134,3.601,135,4.621,136,1.562,137,2.613,138,2.613,139,2.613,140,1.788,141,1.366,142,2.947,143,2.503,144,3.311,145,2.23,146,3.448,147,2.738,148,3.311,149,2.738,150,3.601,151,2.503,152,3.601,153,3.448,154,2.396,155,2.613,156,2.313,157,3.187,158,2.503,159,1.522,160,0.805,161,3.538,162,2.044,163,2.083,164,1.522,165,1.522,166,2.613,167,2.613,168,2.083,169,2.613,170,2.88,171,1.788,172,2.503,173,2.613,174,0.875,175,2.154,176,2.083,177,2.083,178,2.083,179,2.613,180,2.738,181,0.111,182,2.503,183,2.313,184,2.154,185,0.006,186,0.006]],["title/classes/TypeFunctions.html",[187,0.351,333,1.875]],["body/classes/TypeFunctions.html",[0,1.501,3,0.048,4,0.048,5,0.048,6,0.069,8,0.036,10,0.112,19,0.704,26,0.126,27,0.009,31,0.69,34,0.297,37,0.133,60,1.111,62,1.129,77,0.254,84,0.736,85,0.899,94,0.528,98,1.96,106,1.368,113,0.894,120,0.68,125,0.159,141,1.686,160,1.368,174,1.185,181,0.112,185,0.004,186,0.004,187,0.677,188,2.257,189,0.116,190,1.229,191,0.571,195,1.229,196,0.14,198,0.499,199,1.229,201,1.229,203,0.938,204,0.452,205,0.792,206,2.212,207,1.315,208,1.193,209,2.122,210,2.323,211,2.704,212,2.704,213,2.79,214,1.127,215,1.964,216,1.875,217,1.623,218,1.229,219,0.704,220,0.811,221,1.229,222,1.901,223,1.901,224,1.229,225,1.229,226,1.607,227,1.229,228,1.229,229,1.229,230,2.215,231,2.67,232,1.229,233,1.229,234,1.229,235,1.229,236,1.229,237,1.229,238,1.229,239,1.229,240,1.229,241,1.229,242,1.229,243,3.928,244,1.169,245,1.696,246,1.229,247,1.096,248,1.229,249,1.229,250,1.193,251,0.22,252,2.079,253,2.59,254,1.09,255,0.938,256,1.451,257,2.906,258,3.121,259,1.229,260,1.229,261,1.901,262,1.229,263,2.325,264,2.325,265,1.229,266,2.257,267,1.229,268,1.229,269,1.229,270,1.229,271,1.229,272,1.229,273,1.229,274,1.229,275,1.229,276,1.229,277,1.229,278,1.229,279,1.229,280,1.901,281,1.566,282,1.229,283,1.229,284,2.257,285,1.229,286,2.617,287,1.229,288,1.901,289,1.229,290,1.229,291,2.257,292,1.229,293,1.901,294,1.229,295,1.229,296,1.229,297,1.229,298,1.229,299,1.229,300,1.229,301,2.257,302,1.229,303,1.229,304,1.229,305,1.229,306,1.229,307,1.229,308,1.229,309,1.229,310,1.229,311,1.229,312,1.229,313,1.229,314,1.229,315,1.229,316,1.229,317,1.229,318,1.229,319,1.229,320,1.229,321,1.229,322,1.229,323,1.229,324,1.229,325,1.229,326,1.229,327,1.229,328,1.229,329,1.229,330,1.229,331,1.229,332,1.229,333,2.541,334,1.901,335,1.229,336,1.901,337,1.229,338,2.257,339,1.229,340,1.901,341,1.229,342,1.229,343,1.901,344,1.229,345,1.229,346,1.229,347,1.159,348,2.257,349,1.229,350,1.229,351,1.229,352,2.541,353,2.617,354,2.83,355,3.746,356,3.941,357,1.901,358,1.229,359,1.229,360,0.871,361,1.229,362,1.229,363,2.257,364,1.229,365,1.229,366,1.229,367,1.229,368,1.229,369,1.229,370,1.229,371,1.229,372,1.229,373,1.229,374,1.229,375,1.229,376,1.229,377,1.229,378,1.229,379,1.229,380,1.229,381,1.229,382,1.229,383,1.229,384,1.229,385,1.229,386,2.257,387,1.229,388,1.229,389,1.229,390,1.229,391,1.229,392,1.229,393,1.229,394,1.229,395,1.229,396,1.229,397,1.229,398,1.743,399,0.986,400,1.845,401,1.229,402,1.229,403,1.229,404,2.257,405,1.915,406,1.229,407,1.229,408,1.229,409,2.257,410,1.229,411,1.229,412,1.229,413,1.229,414,2.906,415,1.229,416,1.193,417,2.906,418,1.229,419,1.012,420,2.617,421,1.229,422,0.915,430,0.602,3365,4.348,3366,4.348,3367,2.81,3368,2.81]],["title/dependencies.html",[3369,3.248,3370,4.697]],["body/dependencies.html",[27,0.009,36,3.163,185,0.008,186,0.008,2393,5.656,2398,4.929,3370,6.197,3371,7.018,3372,9.181,3373,7.018,3374,7.018,3375,8.11,3376,8.11,3377,7.018,3378,7.018,3379,7.018,3380,7.018,3381,7.018,3382,7.018,3383,7.018,3384,7.018,3385,7.018]],["title/miscellaneous/enumerations.html",[3386,2.753,3387,4.697]],["body/miscellaneous/enumerations.html",[6,0.11,7,3.745,8,0.081,26,0.114,27,0.009,28,3.509,52,3.748,53,4.182,54,3.509,55,2.943,56,3.748,57,2.126,58,4.182,59,4.355,60,1.145,61,3.695,62,1.155,63,2.717,64,3.299,65,3.401,66,4.182,67,3.112,68,3.748,69,4.182,70,3.509,71,3.401,72,3.509,73,3.748,74,4.355,75,4.355,141,1.421,185,0.007,186,0.007,873,5.647,907,5.487,908,6.663,915,5.487,916,5.487,1413,5.008,2054,3.923,2611,5.008,3386,4.65,3387,5.487,3388,6.214,3389,7.546,3390,5.487,3391,6.663,3392,7.546,3393,6.663,3394,7.546,3395,5.487,3396,6.214,3397,6.214,3398,6.214,3399,6.214,3400,5.487,3401,7.546,3402,7.546,3403,7.546,3404,7.546]],["title/index.html",[8,0.048,2419,2.753,3405,3.248]],["body/index.html",[15,2.518,23,3.602,27,0.009,34,0.482,37,0.105,41,3.062,42,2.337,45,2.257,50,2.113,61,1.987,64,2.697,65,2.78,67,3.098,111,4.261,121,2.182,124,3.895,125,0.087,142,2.984,145,4.575,154,1.822,160,0.843,174,0.581,183,3.29,185,0.006,186,0.006,187,0.556,207,2.376,216,2.127,254,1.756,619,2.963,770,6.054,912,3.608,918,2.869,1049,2.869,1063,4.333,1115,3.157,1247,4.459,1254,5.937,1260,5.276,1261,2.424,1340,3.56,1342,3.191,1347,3.799,1377,2.518,1408,4.012,1512,2.424,1528,3.662,1540,4.012,1637,3.191,1764,2.518,1766,2.738,1837,3.191,1866,3.4,1868,3.018,1970,4.012,1989,4.012,2019,5.644,2026,3.191,2380,6.528,2381,5.517,2385,4.333,2396,6.054,2398,4.919,2411,4.972,2612,3.662,3046,4.972,3067,7.855,3406,7.546,3407,4.544,3408,4.544,3409,4.544,3410,4.544,3411,4.544,3412,4.544,3413,6.169,3414,4.544,3415,4.544,3416,6.633,3417,4.544,3418,4.544,3419,4.544,3420,6.169,3421,6.169,3422,6.633,3423,4.544,3424,6.169,3425,4.544,3426,6.169,3427,6.169,3428,4.544,3429,4.544,3430,6.169,3431,4.544,3432,4.544,3433,4.544,3434,6.169,3435,6.169,3436,4.544,3437,4.544,3438,6.169,3439,4.544,3440,4.544,3441,4.544,3442,4.544,3443,4.544,3444,4.544,3445,4.544,3446,4.544,3447,4.544,3448,4.544,3449,4.544,3450,4.544,3451,6.169,3452,9.141,3453,4.544,3454,4.544,3455,4.544,3456,7.004,3457,8.43,3458,4.544,3459,4.544,3460,4.544,3461,7.004,3462,4.544,3463,4.544,3464,4.544,3465,7.004,3466,6.169,3467,6.169,3468,4.544,3469,6.169,3470,6.169,3471,7.512,3472,5.447,3473,6.169,3474,4.544,3475,6.169,3476,4.544,3477,4.544,3478,4.544,3479,4.544,3480,4.544,3481,8.546,3482,4.544,3483,4.544,3484,4.544,3485,7.512,3486,4.544,3487,7.004,3488,4.544,3489,4.544,3490,4.544,3491,4.544,3492,4.544,3493,4.544,3494,4.544,3495,4.544,3496,4.544,3497,4.544,3498,4.544,3499,4.544,3500,4.544,3501,4.544,3502,4.544,3503,4.012,3504,4.544,3505,4.544,3506,4.544,3507,4.012,3508,4.544,3509,4.544,3510,6.169,3511,6.169,3512,4.544,3513,4.544,3514,4.544,3515,4.012,3516,4.544]],["title/license.html",[2419,2.753,3405,3.248,3517,2.964]],["body/license.html",[27,0.008,63,2.387,185,0.008,186,0.008,1260,5.509,1385,5.853,1772,5.209,1974,4.402,1980,5.853,2026,5.867,2579,5.853,3422,5.853,3517,5.342,3518,5.853,3519,8.354,3520,6.629,3521,5.853,3522,5.853,3523,5.853,3524,7.844,3525,6.629,3526,6.629,3527,6.629,3528,6.629,3529,6.629,3530,6.629,3531,7.844,3532,9.147,3533,6.629,3534,6.629,3535,6.629,3536,6.629,3537,6.629,3538,6.629,3539,6.629,3540,6.629,3541,6.629,3542,6.629,3543,6.629,3544,7.844,3545,6.629,3546,6.629,3547,6.629,3548,6.629,3549,6.629,3550,6.629,3551,7.844,3552,7.844,3553,6.629,3554,6.629,3555,6.629,3556,6.629,3557,6.629,3558,6.629,3559,6.629,3560,6.629,3561,6.629,3562,6.629,3563,6.629,3564,6.629,3565,6.629,3566,6.629,3567,6.629,3568,6.629,3569,6.629,3570,6.629,3571,6.629,3572,6.629,3573,6.629,3574,6.629,3575,6.629,3576,6.629,3577,6.629,3578,6.629,3579,6.629,3580,6.629,3581,6.629,3582,6.629]],["title/modules.html",[2382,4.877]],["body/modules.html",[27,0.008,185,0.008,186,0.008,2381,5.136,2382,5.893,3583,7.312]],["title/overview.html",[3584,5.343]],["body/overview.html",[2,3.874,27,0.008,185,0.008,186,0.008,189,0.301,1062,2.912,2380,5.853,3213,6.413,3503,6.413,3584,6.413,3585,7.263,3586,7.263]],["title/properties.html",[9,0.481,3369,3.248]],["body/properties.html",[9,0.631,23,3.586,27,0.009,185,0.008,186,0.008,1123,2.72,1247,4.487,1340,4.024,1345,5.674,2407,6.511,3406,7.532,3416,6.157,3507,6.157,3515,7.134,3517,5.619,3518,6.157,3521,6.157,3522,6.157,3523,6.157,3587,6.973,3588,6.973,3589,6.973,3590,6.973,3591,6.973,3592,6.973,3593,6.973,3594,6.973,3595,6.973,3596,6.973,3597,6.973,3598,6.973]],["title/miscellaneous/typealiases.html",[3386,2.753,3599,5.319]],["body/miscellaneous/typealiases.html",[6,0.119,7,2.993,8,0.064,15,3.629,25,2.093,26,0.141,27,0.009,31,0.38,32,3.252,33,3.629,38,2.993,39,2.993,40,2.993,41,3.538,42,2.554,43,3.629,44,2.993,45,2.467,46,2.993,47,3.946,48,0.966,49,1.189,50,2.31,60,0.794,64,2.863,65,2.951,67,2.7,69,3.629,70,3.045,77,0.236,84,0.906,99,3.779,103,2.172,110,3.367,123,3.367,128,2.753,134,3.946,135,3.629,144,3.629,146,3.779,148,3.629,150,3.946,152,3.946,153,3.779,185,0.006,186,0.006,206,2.413,211,1.539,423,3.717,444,4.386,469,5.277,488,4.003,500,4.348,528,5.277,595,4.127,834,4.003,845,4.348,847,4.348,849,4.599,860,4.9,1160,2.649,1164,4.348,1350,4.599,1359,4.599,1367,5.144,1374,5.277,1375,4.599,1376,5.277,1435,4.599,1621,3.136,1649,2.867,1945,3.717,1951,4.348,1969,4.386,2050,4.003,2056,5.277,2057,5.277,2059,5.277,2060,5.277,2061,5.277,2421,4.003,2441,4.386,2445,4.9,2611,5.277,2613,5.277,2736,4.386,3244,4.003,3276,4.003,3282,5.277,3338,4.386,3386,3.717,3390,7.95,3391,8.062,3393,8.083,3395,4.386,3400,4.386,3472,4.386,3600,6.547,3601,4.967,3602,4.967,3603,4.967,3604,4.967,3605,4.967,3606,7.324,3607,6.547,3608,7.786,3609,6.547,3610,6.547,3611,7.786,3612,6.547,3613,8.093,3614,6.547,3615,6.547,3616,7.324,3617,4.967,3618,6.547,3619,6.547,3620,6.547,3621,6.547,3622,6.547,3623,6.547,3624,6.547,3625,4.967,3626,4.967,3627,7.324,3628,7.786,3629,6.547,3630,6.547,3631,4.967,3632,7.786,3633,6.547,3634,4.967,3635,4.967,3636,4.967,3637,4.967,3638,4.967,3639,4.967,3640,4.967,3641,4.967]]],"invertedIndex":[["",{"_index":27,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":1029,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["0.12.0",{"_index":3385,"title":{},"body":{"dependencies.html":{}}}],["0.120.0",{"_index":3587,"title":{},"body":{"properties.html":{}}}],["07/schema",{"_index":2234,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["1",{"_index":1062,"title":{"classes/Field-1.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"overview.html":{}}}],["1.1.19",{"_index":3380,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":3586,"title":{},"body":{"overview.html":{}}}],["124",{"_index":3585,"title":{},"body":{"overview.html":{}}}],["15.2.3",{"_index":3372,"title":{},"body":{"dependencies.html":{}}}],["1].tostring",{"_index":2962,"title":{},"body":{"classes/ODataRequest.html":{}}}],["1}\\$skiptoken=([\\d\\w\\s",{"_index":1239,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["2",{"_index":3503,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0",{"_index":38,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":3383,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1585,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3520,"title":{},"body":{"license.html":{}}}],["3",{"_index":3502,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":39,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":3497,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":40,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["404",{"_index":2035,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["7.5.0",{"_index":3381,"title":{},"body":{"dependencies.html":{}}}],["9a",{"_index":2120,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["_add",{"_index":448,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["_add(name",{"_index":454,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["_add(node",{"_index":490,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_annotations",{"_index":2976,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2800,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_children",{"_index":447,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_connector",{"_index":3277,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_context",{"_index":2977,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_fields",{"_index":2149,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["_functions",{"_index":1224,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2801,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_keys",{"_index":2148,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["_method",{"_index":2802,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_name",{"_index":223,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["_negated",{"_index":3278,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_options",{"_index":2978,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2803,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2804,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":2979,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":1214,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_requests",{"_index":1476,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responses",{"_index":1480,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2805,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2442,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["above",{"_index":3550,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1444,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":597,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["acc",{"_index":521,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["acc.params",{"_index":2489,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2488,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["accept",{"_index":11,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":2906,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":2900,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":2897,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":2903,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":535,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByField.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["action.ts",{"_index":548,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":658,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":554,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":557,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":559,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":556,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":555,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":558,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":665,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":669,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":667,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":666,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":668,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":662,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":567,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":570,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":568,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":569,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":714,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":664,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":716,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":721,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":717,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":715,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":718,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":719,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":720,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":660,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":740,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":746,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":742,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":741,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":743,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":744,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":745,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":659,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":661,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":663,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":957,"title":{},"body":{"classes/Field.html":{}}}],["actionimports",{"_index":621,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":749,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":423,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["add(ctx",{"_index":1510,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["add(left",{"_index":387,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2447,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["added",{"_index":3396,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["additionalitems",{"_index":2140,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["addressinfo",{"_index":3486,"title":{},"body":{"index.html":{}}}],["again",{"_index":3461,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":3600,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["airport",{"_index":3460,"title":{},"body":{"index.html":{}}}],["airports",{"_index":3452,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":3463,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":3493,"title":{},"body":{"index.html":{}}}],["airports.fetch().subscribe",{"_index":3455,"title":{},"body":{"index.html":{}}}],["airports.query((q",{"_index":3473,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":3476,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":3450,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":3454,"title":{},"body":{"index.html":{}}}],["alias",{"_index":141,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["alias(value",{"_index":2657,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["aliases",{"_index":211,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["all(field",{"_index":412,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1501,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["along",{"_index":3432,"title":{},"body":{"index.html":{}}}],["and(exp",{"_index":3285,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["and(left",{"_index":376,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3542,"title":{},"body":{"license.html":{}}}],["angular",{"_index":3406,"title":{},"body":{"index.html":{},"properties.html":{}}}],["angular/animations",{"_index":3371,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2393,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1405,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/PassedInitialConfig.html":{}}}],["angular/compiler",{"_index":3373,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2398,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":3374,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":3375,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":3378,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":3417,"title":{},"body":{"index.html":{}}}],["annot",{"_index":1125,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annot.bool",{"_index":1145,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.int",{"_index":1146,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.permissions",{"_index":1147,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.properties",{"_index":1148,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.string",{"_index":1144,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.term",{"_index":1132,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annotatable",{"_index":1122,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue",{"_index":1111,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue(term",{"_index":1117,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation",{"_index":675,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation.ts",{"_index":572,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":576,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":586,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:16",{"_index":587,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:19",{"_index":786,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:2",{"_index":577,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:21",{"_index":791,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:22",{"_index":796,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:23",{"_index":788,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":789,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":787,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":792,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":790,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":793,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":794,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":795,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":589,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":591,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":590,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":135,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":573,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":142,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":2918,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":750,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":3067,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":3069,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(field",{"_index":410,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)['_name",{"_index":227,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":2182,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["any[]).map((v",{"_index":2103,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["api",{"_index":1340,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{},"properties.html":{}}}],["api.options",{"_index":2943,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apiconfig",{"_index":123,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":1343,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":1,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["apioptions.helper.countparam",{"_index":2946,"title":{},"body":{"classes/ODataRequest.html":{}}}],["apioptions.helper.etag(options.body",{"_index":2949,"title":{},"body":{"classes/ODataRequest.html":{}}}],["app",{"_index":3441,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":3446,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":3444,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":3447,"title":{},"body":{"index.html":{}}}],["application",{"_index":3426,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":2908,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1410,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1411,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["applied",{"_index":2714,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["appliesto",{"_index":584,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["apply",{"_index":2713,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["apply(query",{"_index":2715,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["applymixins(derivedctor",{"_index":235,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatafunctions",{"_index":418,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":415,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":421,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":3430,"title":{},"body":{"index.html":{}}}],["arising",{"_index":3579,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":188,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":386,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arr",{"_index":2635,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.find((v",{"_index":2638,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.push(obj",{"_index":2639,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["array",{"_index":1649,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":2154,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(right",{"_index":358,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.configs",{"_index":1873,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(this.passedconfigs",{"_index":1870,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["array.isarray(value",{"_index":1823,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["arraybuffer",{"_index":2822,"title":{},"body":{"classes/ODataRequest.html":{}}}],["arrays",{"_index":1426,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["arrays.zip(this._requests",{"_index":1531,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["asc",{"_index":3258,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["ascending",{"_index":3245,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["ascending(field",{"_index":3249,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["asp",{"_index":1303,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["assertarray",{"_index":2566,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject",{"_index":2567,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject(create",{"_index":2575,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign",{"_index":2568,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign(values",{"_index":2577,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["associated",{"_index":3533,"title":{},"body":{"license.html":{}}}],["at(index",{"_index":2581,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["atomicitygroup",{"_index":1456,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["attach",{"_index":1945,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["attach(model",{"_index":1977,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":1947,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":2013,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":1960,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>>(model",{"_index":2014,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["attr",{"_index":1053,"title":{},"body":{"classes/Field.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["attr?.nodevalue",{"_index":1055,"title":{},"body":{"classes/Field.html":{}}}],["attribute",{"_index":915,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":997,"title":{},"body":{"classes/Field.html":{}}}],["attribute_action",{"_index":994,"title":{},"body":{"classes/Field.html":{}}}],["attribute_alias",{"_index":964,"title":{},"body":{"classes/Field.html":{}}}],["attribute_applies_to",{"_index":1002,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_term",{"_index":1001,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_type",{"_index":972,"title":{},"body":{"classes/Field.html":{}}}],["attribute_contains_target",{"_index":986,"title":{},"body":{"classes/Field.html":{}}}],["attribute_default_value",{"_index":981,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set",{"_index":995,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set_path",{"_index":988,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_type",{"_index":990,"title":{},"body":{"classes/Field.html":{}}}],["attribute_extends",{"_index":1000,"title":{},"body":{"classes/Field.html":{}}}],["attribute_function",{"_index":993,"title":{},"body":{"classes/Field.html":{}}}],["attribute_has_stream",{"_index":985,"title":{},"body":{"classes/Field.html":{}}}],["attribute_include_in_service_document",{"_index":996,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_bound",{"_index":987,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_composable",{"_index":989,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_flags",{"_index":999,"title":{},"body":{"classes/Field.html":{}}}],["attribute_max_length",{"_index":976,"title":{},"body":{"classes/Field.html":{}}}],["attribute_name",{"_index":970,"title":{},"body":{"classes/Field.html":{}}}],["attribute_namespace",{"_index":965,"title":{},"body":{"classes/Field.html":{}}}],["attribute_nullable",{"_index":975,"title":{},"body":{"classes/Field.html":{}}}],["attribute_open_type",{"_index":973,"title":{},"body":{"classes/Field.html":{}}}],["attribute_partner",{"_index":982,"title":{},"body":{"classes/Field.html":{}}}],["attribute_path",{"_index":991,"title":{},"body":{"classes/Field.html":{}}}],["attribute_precision",{"_index":977,"title":{},"body":{"classes/Field.html":{}}}],["attribute_property",{"_index":983,"title":{},"body":{"classes/Field.html":{}}}],["attribute_qualifier",{"_index":967,"title":{},"body":{"classes/Field.html":{}}}],["attribute_referenced_property",{"_index":984,"title":{},"body":{"classes/Field.html":{}}}],["attribute_scale",{"_index":978,"title":{},"body":{"classes/Field.html":{}}}],["attribute_srid",{"_index":980,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target",{"_index":992,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target_namespace",{"_index":968,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term",{"_index":969,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term_namespace",{"_index":966,"title":{},"body":{"classes/Field.html":{}}}],["attribute_type",{"_index":974,"title":{},"body":{"classes/Field.html":{}}}],["attribute_underlying_type",{"_index":998,"title":{},"body":{"classes/Field.html":{}}}],["attribute_unicode",{"_index":979,"title":{},"body":{"classes/Field.html":{}}}],["attribute_uri",{"_index":963,"title":{},"body":{"classes/Field.html":{}}}],["attribute_value",{"_index":971,"title":{},"body":{"classes/Field.html":{}}}],["attribute_version",{"_index":962,"title":{},"body":{"classes/Field.html":{}}}],["attributes",{"_index":961,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":1167,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":1054,"title":{},"body":{"classes/Field.html":{}}}],["attrs",{"_index":1985,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attrs[field.name",{"_index":2250,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["attrs[key",{"_index":2208,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["author",{"_index":3598,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":3569,"title":{},"body":{"license.html":{}}}],["available",{"_index":2413,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["average",{"_index":3403,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["backward",{"_index":2515,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":171,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":2126,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["baseterm",{"_index":582,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["basetype",{"_index":598,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["basic",{"_index":3499,"title":{},"body":{"index.html":{}}}],["batch",{"_index":53,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":3492,"title":{},"body":{"index.html":{}}}],["batch._requests",{"_index":1487,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1412,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1545,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":1413,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/enumerations.html":{}}}],["binary(value",{"_index":2659,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["binding",{"_index":643,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":707,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":709,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:2",{"_index":710,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingstructuredtype",{"_index":3181,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingstructuredtype.issubtypeof(callablebindingstructuredtype",{"_index":3189,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingtype",{"_index":3147,"title":{},"body":{"classes/ODataSchema.html":{}}}],["blob",{"_index":2823,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":104,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bodyqueryoptions",{"_index":12,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":137,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":31,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["boolean((f.value",{"_index":2294,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["boolean(field.collection",{"_index":2077,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["boolean(field.navigation",{"_index":2079,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["bound",{"_index":179,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1549,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1414,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1561,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1553,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":2173,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["browse",{"_index":3583,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3376,"title":{},"body":{"dependencies.html":{}}}],["bugs",{"_index":3593,"title":{},"body":{"properties.html":{}}}],["build",{"_index":1615,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["buildentry",{"_index":1600,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1613,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":207,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3506,"title":{},"body":{"index.html":{}}}],["buildjsonbody(requests",{"_index":1562,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildkey",{"_index":1601,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1618,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildlegacybody",{"_index":1544,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildpathandquery",{"_index":2469,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["c",{"_index":1980,"title":{},"body":{"classes/ODataEntitySetService.html":{},"license.html":{}}}],["c.binding()?.type",{"_index":3186,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.clone",{"_index":479,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["c.istypeof(type",{"_index":2098,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["c.tojson",{"_index":906,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["cache",{"_index":41,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":3008,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1657,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":95,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":47,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":3049,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":3123,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1703,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cachekey",{"_index":2813,"title":{},"body":{"classes/ODataRequest.html":{}}}],["california",{"_index":3475,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1735,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["callable.configure",{"_index":3196,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":1813,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callablebindingstructuredtype",{"_index":3187,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callablebindingtype",{"_index":3185,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callableconfig",{"_index":148,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":147,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":1337,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":1346,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":1338,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":1357,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["can't",{"_index":2045,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["case",{"_index":485,"title":{},"body":{"classes/ConditionalFunctions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["case(condition",{"_index":349,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":3365,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(value",{"_index":334,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":1044,"title":{},"body":{"classes/Field.html":{}}}],["catcherror",{"_index":2008,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["catcherror((error",{"_index":2033,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["caught",{"_index":131,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":192,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(value",{"_index":195,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":2170,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ch.findchildparser(predicate",{"_index":2172,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["change",{"_index":3472,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":3398,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["changeset",{"_index":1548,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1415,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1546,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1577,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1547,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1575,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1469,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["charge",{"_index":3528,"title":{},"body":{"license.html":{}}}],["check",{"_index":1049,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":1048,"title":{},"body":{"classes/Field.html":{}}}],["childparser",{"_index":2174,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["childparser((c",{"_index":2097,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["children",{"_index":449,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["children.push(exp",{"_index":3308,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children.push(new",{"_index":3306,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children[index",{"_index":477,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["chunk",{"_index":1583,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunk.slice(1",{"_index":1584,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["chunks",{"_index":1566,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["city",{"_index":3467,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3572,"title":{},"body":{"license.html":{}}}],["class",{"_index":187,"title":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":189,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clean",{"_index":2363,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["clear",{"_index":2569,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2548,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearpaging",{"_index":2709,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["clearparameters",{"_index":2553,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":1345,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["clone",{"_index":216,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["close",{"_index":1550,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1580,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":161,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":284,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["commonmodule",{"_index":2392,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["complete.html#_toc406398229",{"_index":1295,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1296,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1299,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1300,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1297,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1298,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["complextype",{"_index":937,"title":{},"body":{"classes/Field.html":{}}}],["complextypes",{"_index":751,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3509,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":3379,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":3438,"title":{},"body":{"index.html":{}}}],["composable",{"_index":180,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["composite",{"_index":2039,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["compute",{"_index":66,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["compute(opts",{"_index":458,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["computed",{"_index":2052,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["computeexpression",{"_index":443,"title":{"classes/ComputeExpression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["computeexpression.compute",{"_index":2675,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["computeexpressionbuilder",{"_index":469,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["computeexpressionbuilder,current",{"_index":459,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["concat",{"_index":3345,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["concat(field",{"_index":267,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["concatmap",{"_index":1406,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["condition",{"_index":351,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditionalfunctions",{"_index":348,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3549,"title":{},"body":{"license.html":{}}}],["config",{"_index":1115,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["config.accept",{"_index":1323,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.alias",{"_index":3161,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":1135,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["config.base",{"_index":2151,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.bodyqueryoptions",{"_index":1321,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.bound",{"_index":1780,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":1782,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":3194,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":3172,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.deleterefby",{"_index":1329,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.entities",{"_index":3166,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":1778,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":1941,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":1964,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":3163,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1325,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fetchpolicy",{"_index":1319,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.fields",{"_index":2160,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.flags",{"_index":2291,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1313,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.jsonbatchformat",{"_index":1333,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.keys.map((key",{"_index":2156,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.members",{"_index":2280,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":1839,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["config.namespace",{"_index":3160,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.nonparenthesisforemptyparameterfunction",{"_index":1331,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.open",{"_index":2153,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.params",{"_index":1311,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.prefer",{"_index":1327,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.return",{"_index":1842,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":1966,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1309,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.stripmetadata",{"_index":1317,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["config.version",{"_index":1307,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1315,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["configs",{"_index":122,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["configure",{"_index":1720,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["configure(undefined",{"_index":1736,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{}}}],["connection",{"_index":3581,"title":{},"body":{"license.html":{}}}],["connector",{"_index":3279,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["console.log",{"_index":3471,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":3464,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":3456,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":3459,"title":{},"body":{"index.html":{}}}],["const",{"_index":113,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["constants",{"_index":914,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["constructor",{"_index":251,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":711,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":1130,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":574,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":1341,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":1113,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["constructor(configs",{"_index":1863,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["constructor(field",{"_index":536,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/OrderByField.html":{}}}],["constructor(group",{"_index":1080,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":1161,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2814,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":551,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{}}}],["constructor(namespace",{"_index":672,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(o",{"_index":2572,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["constructor(op",{"_index":1086,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(passedconfigs",{"_index":1881,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["constructor(path",{"_index":708,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":1868,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(property",{"_index":736,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":687,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":399,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":219,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(request",{"_index":1389,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":3327,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2444,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":588,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":585,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":682,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":739,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":450,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["constructor(uri",{"_index":731,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(value",{"_index":3321,"title":{},"body":{"classes/SearchTerm.html":{}}}],["constructor(values",{"_index":2739,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(xml",{"_index":1004,"title":{},"body":{"classes/Field.html":{}}}],["constructors",{"_index":236,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructors.foreach((basector",{"_index":237,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":771,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":3177,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":620,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":633,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:11",{"_index":631,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":628,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:5",{"_index":627,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":632,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":630,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:9",{"_index":629,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["containers",{"_index":149,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":3346,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(field",{"_index":269,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":692,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["content",{"_index":530,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["content_id",{"_index":1416,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1417,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1418,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1576,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":3419,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1567,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":3032,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":1163,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1672,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1675,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1674,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1676,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continue",{"_index":2922,"title":{},"body":{"classes/ODataRequest.html":{}}}],["continueonerror",{"_index":87,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3576,"title":{},"body":{"license.html":{}}}],["conventions.html#sec_parameteraliases",{"_index":2656,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptioncompute",{"_index":2673,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptionformat",{"_index":2678,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["converts",{"_index":2604,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["copies",{"_index":3544,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3531,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3519,"title":{},"body":{"license.html":{}}}],["core",{"_index":1305,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["count",{"_index":61,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["count(opts",{"_index":493,"title":{},"body":{"classes/CountExpression.html":{}}}],["countdistinct",{"_index":3404,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["countexpression",{"_index":487,"title":{"classes/CountExpression.html":{}},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countexpressionbuilder",{"_index":528,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["countexpressionbuilder,current",{"_index":494,"title":{},"body":{"classes/CountExpression.html":{}}}],["countfield",{"_index":501,"title":{"classes/CountField.html":{}},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(field",{"_index":533,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countfield(this.field.clone",{"_index":523,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["countryregion",{"_index":3468,"title":{},"body":{"index.html":{}}}],["count}(${object.keys(params",{"_index":514,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["create",{"_index":1761,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{}}}],["create(attrs",{"_index":1983,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["create/update/patch",{"_index":2042,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["createsyncloader",{"_index":2424,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["createsyncloader(passedconfig",{"_index":2409,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["creating",{"_index":1766,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["creation",{"_index":127,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1274,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["csdl",{"_index":610,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":911,"title":{},"body":{"classes/Field.html":{}}}],["csdlaction",{"_index":546,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlactionimport",{"_index":565,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlannotable",{"_index":571,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":592,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":575,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["csdlannotations",{"_index":578,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdlcomplextype",{"_index":593,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlentitycontainer",{"_index":618,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlentityset",{"_index":625,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["csdlentitytype",{"_index":613,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlenummember",{"_index":647,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["csdlenumtype",{"_index":650,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunction",{"_index":560,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunctionimport",{"_index":562,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlinclude",{"_index":670,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlincludeannotations",{"_index":679,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlkey",{"_index":614,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationproperty",{"_index":602,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationpropertybinding",{"_index":637,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlondelete",{"_index":697,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlparameter",{"_index":553,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlproperty",{"_index":601,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlpropertyref",{"_index":617,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlreference",{"_index":676,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlreferentialconstraint",{"_index":696,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlreturntype",{"_index":552,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlschema",{"_index":747,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlsingleton",{"_index":626,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlstructuralproperty",{"_index":691,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":703,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":705,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":704,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":596,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":607,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":605,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":608,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":604,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":606,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":609,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":581,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdltypedefinition",{"_index":757,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["ctx",{"_index":1507,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1514,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":460,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["custom",{"_index":2062,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["customheaders",{"_index":2888,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":2907,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":2892,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":2895,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":2927,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3505,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1245,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["customparams",{"_index":2932,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":2935,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":2933,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3573,"title":{},"body":{"license.html":{}}}],["data",{"_index":1158,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["data(data",{"_index":1171,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":1025,"title":{},"body":{"classes/Field.html":{}}}],["date",{"_index":128,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["date(value",{"_index":302,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1678,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":301,"title":{"classes/DateAndTimeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["day",{"_index":807,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["day(value",{"_index":304,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["deal",{"_index":3535,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3582,"title":{},"body":{"license.html":{}}}],["deep",{"_index":3504,"title":{},"body":{"index.html":{}}}],["def",{"_index":2589,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["default",{"_index":126,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/Field-1.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["default_fetch_policy",{"_index":1279,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_strip_metadata",{"_index":1280,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["default_timeout",{"_index":1658,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1281,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["default_version].odata_etag",{"_index":2207,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["default_version].type(value",{"_index":2096,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaults",{"_index":2225,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaultvalue",{"_index":583,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["defined",{"_index":196,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":770,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"index.html":{}}}],["definition.ts",{"_index":797,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":806,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":804,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":799,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":801,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":805,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":800,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":802,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":803,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1251,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":2891,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleterefby",{"_index":13,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deleting",{"_index":3410,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1468,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":1233,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":3414,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3370,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependson",{"_index":1457,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deps",{"_index":2425,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["derivedctor.prototype",{"_index":240,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["desc",{"_index":3259,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["descending",{"_index":3246,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["descending(field",{"_index":3252,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["description",{"_index":1123,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"properties.html":{}}}],["deseialize",{"_index":1740,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1741,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":101,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1738,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1742,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":1969,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/typealiases.html":{}}}],["destroy(key",{"_index":1986,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["diego",{"_index":3521,"title":{},"body":{"license.html":{},"properties.html":{}}}],["directive",{"_index":3130,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":3124,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["disable",{"_index":2405,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["distribute",{"_index":3540,"title":{},"body":{"license.html":{}}}],["div",{"_index":424,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":393,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":1007,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement",{"_index":1018,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.attributes",{"_index":1015,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":1027,"title":{},"body":{"classes/Field.html":{}}}],["documentation",{"_index":3422,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":1006,"title":{},"body":{"classes/Field.html":{}}}],["down",{"_index":2625,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["duration",{"_index":2611,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["duration(value",{"_index":2658,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["dynamic",{"_index":3377,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":154,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["e().eq(\"emails",{"_index":3488,"title":{},"body":{"index.html":{}}}],["e.istypeof(type",{"_index":3179,"title":{},"body":{"classes/ODataSchema.html":{}}}],["editlink",{"_index":1206,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":2115,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.boolean'].indexof(this.type",{"_index":2137,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.byte",{"_index":2131,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.date",{"_index":2111,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.datetimeoffset",{"_index":2113,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.decimal",{"_index":2135,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.double'].indexof(this.type",{"_index":2136,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.guid",{"_index":2114,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int16",{"_index":2130,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int32",{"_index":2129,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int64",{"_index":2128,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.sbyte'].indexof",{"_index":2132,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.string",{"_index":2110,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.timeofday",{"_index":2112,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmx:dataservices",{"_index":922,"title":{},"body":{"classes/Field.html":{}}}],["edmx:edmx",{"_index":920,"title":{},"body":{"classes/Field.html":{}}}],["edmx:include",{"_index":926,"title":{},"body":{"classes/Field.html":{}}}],["edmx:includeannotations",{"_index":928,"title":{},"body":{"classes/Field.html":{}}}],["edmx:reference",{"_index":924,"title":{},"body":{"classes/Field.html":{}}}],["element",{"_index":1026,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["empty",{"_index":1264,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["encode",{"_index":108,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encode(params",{"_index":1808,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(value",{"_index":112,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encoded",{"_index":1745,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1744,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1570,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":184,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":3347,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(field",{"_index":271,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":145,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":2957,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":619,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":3462,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":1950,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{}}}],["entitycontainer",{"_index":752,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["entitycontainerconfig",{"_index":150,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":3065,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":1951,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":55,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":3216,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":152,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":3218,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":178,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":151,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysetschema",{"_index":1976,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["entitytype",{"_index":182,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{},"classes/ODataEntitySet.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":753,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1598,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry",{"_index":1616,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1697,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1686,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1695,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu",{"_index":2265,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["enu.configure",{"_index":3192,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":51,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":3387,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":143,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toname(this.members",{"_index":2308,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tonames(this.members",{"_index":2303,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":2302,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":2300,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":934,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["enumtypeconfig",{"_index":144,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":153,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":754,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["eq",{"_index":1094,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["eq(left",{"_index":364,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1291,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["error",{"_index":130,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1500,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error(\"save",{"_index":2044,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('batch",{"_index":1496,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('destroy",{"_index":2030,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('field",{"_index":1832,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["error('modify",{"_index":2028,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('no",{"_index":1706,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["error('odata",{"_index":1051,"title":{},"body":{"classes/Field.html":{}}}],["error('unable",{"_index":1046,"title":{},"body":{"classes/Field.html":{}}}],["error('update",{"_index":2025,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error(`${this.name",{"_index":2197,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["error(`no",{"_index":2528,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["error.status",{"_index":2034,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["errorhandler",{"_index":129,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":2085,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`maxlength",{"_index":2092,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`required",{"_index":2090,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors[field.name",{"_index":2253,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errs",{"_index":2251,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["escape",{"_index":212,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["eslint",{"_index":2404,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["eslint/explicit",{"_index":2408,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["etag",{"_index":14,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":3010,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3568,"title":{},"body":{"license.html":{}}}],["events",{"_index":1499,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["every(predicate",{"_index":2585,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["examples",{"_index":3415,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1540,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["execute",{"_index":1509,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":1979,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["exists",{"_index":1627,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exp",{"_index":2744,"title":{},"body":{"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.children",{"_index":3317,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.connector",{"_index":3318,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.length",{"_index":3305,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["expand",{"_index":65,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":838,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["expandexpression",{"_index":833,"title":{"classes/ExpandExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["expandexpression.expand",{"_index":2670,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expandexpression.expand(opts",{"_index":861,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandexpressionbuilder",{"_index":860,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["expandexpressionbuilder,current",{"_index":839,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield",{"_index":841,"title":{"classes/ExpandField.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield(field",{"_index":875,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield(this.field.clone",{"_index":857,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandobject",{"_index":3606,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3607,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandtype",{"_index":3608,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expand}(${object.keys(params",{"_index":856,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expired",{"_index":1628,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["exponentialdecimals",{"_index":78,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":2905,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":37,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3559,"title":{},"body":{"license.html":{}}}],["expression",{"_index":445,"title":{"classes/Expression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["expression(key",{"_index":2743,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression).render",{"_index":510,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["expression:116",{"_index":498,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:123",{"_index":3294,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:131",{"_index":492,"title":{},"body":{"classes/CountExpression.html":{}}}],["expression:138",{"_index":3287,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:146",{"_index":3299,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:177",{"_index":843,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:191",{"_index":837,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:30",{"_index":466,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:34",{"_index":467,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:38",{"_index":468,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:45",{"_index":465,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:48",{"_index":3341,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:5",{"_index":453,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:62",{"_index":457,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:70",{"_index":3255,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expression:85",{"_index":3251,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expressions",{"_index":2612,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"index.html":{}}}],["expressions/expand",{"_index":2758,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expressions/select",{"_index":2759,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["extend",{"_index":622,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":94,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1257,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["f",{"_index":483,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["f.configure",{"_index":2188,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.default",{"_index":2227,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.deserialize(value[f.name",{"_index":2181,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.isstructuredtype",{"_index":2228,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.name",{"_index":2178,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["f.navigation",{"_index":2237,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.nullable",{"_index":2249,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.serialize((value",{"_index":2183,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.structured().defaults",{"_index":2230,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.tojsonschema(expand",{"_index":2243,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.value",{"_index":2298,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["f]{12",{"_index":2124,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f]{12}$/.test",{"_index":2483,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":2123,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["f]{8",{"_index":2122,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fa",{"_index":2121,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["factory",{"_index":1063,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["factory(api",{"_index":1482,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["factory(name",{"_index":221,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["false",{"_index":255,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["features",{"_index":3033,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":3110,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1254,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["fetchall",{"_index":1970,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["fetchall(options",{"_index":1992,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetching",{"_index":1639,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["fetchmany",{"_index":1971,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany(top",{"_index":1994,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchnavigationproperty",{"_index":1339,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":1365,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchone",{"_index":1972,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchone(options",{"_index":1996,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate",{"_index":1973,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate(key",{"_index":1998,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchpolicy",{"_index":15,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":98,"title":{"classes/Field.html":{},"classes/Field-1.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["field(enu",{"_index":2263,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["field(field",{"_index":496,"title":{},"body":{"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["field(name",{"_index":462,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["field(namevalue",{"_index":2295,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["field(odatametadata.attribute_alias",{"_index":1034,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":1033,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_uri",{"_index":1020,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_version",{"_index":1013,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_action",{"_index":1039,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotation",{"_index":1024,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotations",{"_index":1043,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":1036,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":1040,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":1037,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":1035,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_function",{"_index":1038,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include",{"_index":1021,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":1023,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_term",{"_index":1042,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":1041,"title":{},"body":{"classes/Field.html":{}}}],["field.default",{"_index":2073,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.encode(v",{"_index":2221,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.factory",{"_index":473,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["field.factory(name",{"_index":229,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["field.isstructuredtype",{"_index":2218,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.maxlength",{"_index":2075,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.name",{"_index":2195,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.navigation",{"_index":2192,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.nullable",{"_index":2076,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.precision",{"_index":2081,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.referentials",{"_index":2070,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.scale",{"_index":2083,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.structured",{"_index":2219,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.type",{"_index":2068,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.validate(value",{"_index":2252,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.value",{"_index":2289,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldnames",{"_index":1059,"title":{},"body":{"classes/Field.html":{}}}],["fields",{"_index":157,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields(value",{"_index":2266,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fields.reduce",{"_index":2180,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields.reduce((acc",{"_index":2229,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fieldtype",{"_index":908,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":1014,"title":{},"body":{"classes/Field.html":{}}}],["fieldtype.tag",{"_index":1022,"title":{},"body":{"classes/Field.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["files",{"_index":3534,"title":{},"body":{"license.html":{}}}],["filter",{"_index":67,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":2226,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["filter((k",{"_index":2792,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((key",{"_index":505,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":1849,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1714,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2497,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(opts",{"_index":539,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["filterconnector",{"_index":3609,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["filterexpression",{"_index":499,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["filterexpression.filter",{"_index":2686,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["filterexpression.filter(opts",{"_index":518,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["filterexpressionbuilder",{"_index":500,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["filterexpressionbuilder,current",{"_index":540,"title":{},"body":{"classes/CountField.html":{},"classes/ExpandField.html":{}}}],["filtertype",{"_index":3611,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":1120,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["find((f",{"_index":2215,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((field",{"_index":2194,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((k",{"_index":2143,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["find((p",{"_index":3035,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2450,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["findannotation",{"_index":1112,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findannotation(predicate",{"_index":1124,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findcallablefortype",{"_index":3132,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":3146,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":2168,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["findentitysetfortype",{"_index":3133,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":3149,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":3134,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":3151,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findoptionsfortype",{"_index":1790,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":3135,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":3153,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":42,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2453,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["firstvaluefrom",{"_index":1407,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["fitness",{"_index":3564,"title":{},"body":{"license.html":{}}}],["flags",{"_index":155,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":193,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(value",{"_index":199,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":3407,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1602,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3548,"title":{},"body":{"license.html":{}}}],["foreach((key",{"_index":2794,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["forget",{"_index":1603,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1622,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":1866,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"index.html":{}}}],["forkjoin(this.configs",{"_index":1874,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["format",{"_index":74,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["format(opts",{"_index":2679,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["format/v4.01/odata",{"_index":1286,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["forroot",{"_index":2386,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["forroot(passedconfig",{"_index":2387,"title":{},"body":{"modules/ODataModule.html":{}}}],["fot",{"_index":2594,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["found",{"_index":2196,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["fractionalseconds",{"_index":808,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["fractionalseconds(value",{"_index":306,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3527,"title":{},"body":{"license.html":{}}}],["friends",{"_index":3485,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":2980,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":2991,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":2981,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson(req",{"_index":2993,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":45,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2476,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["function",{"_index":62,"title":{"classes/Function.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["function('case",{"_index":350,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('cast",{"_index":335,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":330,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":268,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":270,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":303,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":305,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":272,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":331,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":307,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.distance",{"_index":341,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.intersects",{"_index":344,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.length",{"_index":346,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":290,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":287,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":309,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":274,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('isof",{"_index":337,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":276,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":294,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":311,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":313,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":315,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":317,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":319,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":332,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":321,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":278,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":283,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":323,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":296,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":325,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":327,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":298,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":300,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":329,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function(name",{"_index":1227,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["functionimport",{"_index":955,"title":{},"body":{"classes/Field.html":{}}}],["functionimports",{"_index":623,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":563,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":419,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["furnished",{"_index":3547,"title":{},"body":{"license.html":{}}}],["g",{"_index":1439,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["g1",{"_index":1458,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["g2",{"_index":1459,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ge",{"_index":1095,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ge(left",{"_index":370,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["generate",{"_index":3431,"title":{},"body":{"index.html":{}}}],["generated",{"_index":3508,"title":{},"body":{"index.html":{}}}],["generator",{"_index":3413,"title":{},"body":{"index.html":{}}}],["geodistance",{"_index":1074,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geodistance(value",{"_index":339,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geofunctions",{"_index":338,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geointersects",{"_index":1075,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geointersects(value",{"_index":342,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geolength",{"_index":1076,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geolength(line",{"_index":345,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["get'].indexof(this._method",{"_index":2894,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":119,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1625,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(path",{"_index":2588,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["get(target",{"_index":224,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["getannotations",{"_index":3004,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":1372,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataSchemaElement.html":{}}}],["getbody",{"_index":2845,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcachekey",{"_index":2857,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":3002,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":1894,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":1898,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":1926,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":1177,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":3157,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getentitysetschema",{"_index":2006,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["getetag",{"_index":1919,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":1906,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2849,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1277,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":1917,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":1932,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":1930,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":1921,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":1928,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":1923,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2843,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":2609,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":1896,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":1057,"title":{},"body":{"classes/Field.html":{}}}],["getoptions",{"_index":2998,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2847,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getparseroptions",{"_index":1275,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["getpath",{"_index":2841,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2851,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":3000,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":1934,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":1892,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1604,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1629,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2839,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":3234,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":1902,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":1904,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstructuredtypeschema",{"_index":1956,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":2419,"title":{"index.html":{},"license.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["gettop",{"_index":1900,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":1179,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2853,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2855,"title":{},"body":{"classes/ODataRequest.html":{}}}],["git+https://github.com/diegomvh/angular",{"_index":3596,"title":{},"body":{"properties.html":{}}}],["given",{"_index":1624,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["granted",{"_index":3526,"title":{},"body":{"license.html":{}}}],["group",{"_index":400,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":3612,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":398,"title":{"classes/Grouping.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["grouping(exp",{"_index":3307,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(node",{"_index":3312,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(objects.clone(this.group",{"_index":403,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["gt",{"_index":1096,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["gt(left",{"_index":368,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":2482,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["haaster",{"_index":3523,"title":{},"body":{"license.html":{},"properties.html":{}}}],["hack",{"_index":2481,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["handle",{"_index":1638,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1605,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1631,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1606,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1633,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":525,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1607,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1635,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlers",{"_index":2471,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(key",{"_index":2746,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":382,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["has(path",{"_index":2591,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["has(target",{"_index":233,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hashmap",{"_index":2633,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["haskey",{"_index":2546,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2551,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":2145,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["hasstream",{"_index":615,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["hassubsequence",{"_index":439,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(s1",{"_index":289,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":440,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(s1",{"_index":285,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1246,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headerkey",{"_index":3038,"title":{},"body":{"classes/ODataResponse.html":{}}}],["headers",{"_index":16,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1452,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":1157,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["here",{"_index":3511,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3525,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3570,"title":{},"body":{"license.html":{}}}],["holds",{"_index":1659,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["homepage",{"_index":3592,"title":{},"body":{"properties.html":{}}}],["hour",{"_index":809,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["hour(value",{"_index":308,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["htmlcollection",{"_index":1060,"title":{},"body":{"classes/Field.html":{}}}],["http",{"_index":1273,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1569,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1571,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":2929,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpheaders((options",{"_index":1522,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":2963,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":2938,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams(params",{"_index":2945,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1582,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey",{"_index":3039,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":3062,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":2960,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":2942,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1419,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1284,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["http://json",{"_index":2232,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["httpclientmodule",{"_index":2394,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["httpcontext",{"_index":2827,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httperrorresponse",{"_index":1395,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{}}}],["httpheaders",{"_index":1403,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":3020,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpheaders(response['headers",{"_index":1593,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["httpparams",{"_index":2820,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1404,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["httpresponsebase",{"_index":1398,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["https://devblogs.microsoft.com/odata/extension",{"_index":1301,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3512,"title":{},"body":{"index.html":{}}}],["https://docs.oasis",{"_index":2652,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3515,"title":{},"body":{"index.html":{},"properties.html":{}}}],["https://github.com/odata/aspnetcoreodata/issues/171",{"_index":91,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1647",{"_index":90,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1974",{"_index":89,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://json",{"_index":2106,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":3429,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1471,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":30,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["identify",{"_index":1650,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["ieee754",{"_index":2898,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":79,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":2901,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2859,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2860,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":81,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":82,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implements",{"_index":217,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3560,"title":{},"body":{"license.html":{}}}],["import",{"_index":34,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2411,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["in(left",{"_index":384,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["include",{"_index":2189,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_etag",{"_index":2201,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_navigation",{"_index":2177,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["include_parents",{"_index":2142,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["includeannotations",{"_index":88,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3553,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":564,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["includes",{"_index":678,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":1772,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"license.html":{}}}],["incorporates",{"_index":3498,"title":{},"body":{"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":3348,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(field",{"_index":273,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2520,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indexof(this.type",{"_index":2116,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["indicating",{"_index":1642,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataSchemaElement.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":452,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["init",{"_index":2816,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":2867,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":2876,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":2883,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.context",{"_index":2872,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":2889,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":2880,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":2931,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2864,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":2871,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":2940,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":2869,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2866,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":2874,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":2878,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":3437,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":3212,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":3213,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["injection",{"_index":2415,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken",{"_index":2395,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["injectiontoken('odata.config",{"_index":2403,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["inside",{"_index":1121,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["install",{"_index":3423,"title":{},"body":{"index.html":{}}}],["installation",{"_index":3420,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1140,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["instead",{"_index":3208,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["int",{"_index":138,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["integer",{"_index":2134,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["invalid",{"_index":3638,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["isbatch",{"_index":2807,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":549,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["iscallabletype",{"_index":3184,"title":{},"body":{"classes/ODataSchema.html":{}}}],["iscomposable",{"_index":561,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["isedmtype",{"_index":1828,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isenumtype",{"_index":1830,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isexpired",{"_index":1608,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1640,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2808,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isflags",{"_index":652,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["iskey",{"_index":2141,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ismutate",{"_index":2809,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":3136,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":3155,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":3366,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(value",{"_index":336,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["isquerybody",{"_index":2810,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isstructuredtype",{"_index":1833,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["issubtypeof",{"_index":1721,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(schema",{"_index":1751,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(type",{"_index":2164,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["issupertypeof",{"_index":1722,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issupertypeof(schema",{"_index":1754,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof",{"_index":1723,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof(type",{"_index":1757,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["items",{"_index":2139,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["john",{"_index":3490,"title":{},"body":{"index.html":{}}}],["john@example.com\").or(e().eq(\"username",{"_index":3489,"title":{},"body":{"index.html":{}}}],["join",{"_index":360,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["json",{"_index":1261,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"index.html":{}}}],["json.body",{"_index":3019,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2510,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2512,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2376,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":3021,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":3022,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2375,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2509,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":3023,"title":{},"body":{"classes/ODataResponse.html":{}}}],["jsonbatchformat",{"_index":17,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["jsonschemacustom",{"_index":2057,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":2059,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":2060,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":2061,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":2056,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["k",{"_index":1691,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponseOptions.html":{}}}],["k.name",{"_index":2144,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.startswith(key",{"_index":1692,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":3112,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2737,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...keys",{"_index":2796,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(keys",{"_index":2748,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":160,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["key(value",{"_index":2544,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key.set(kt.alias",{"_index":2220,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["key.size",{"_index":2222,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keyof",{"_index":177,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys",{"_index":175,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2456,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["keys.indexof(k",{"_index":2793,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keytypes",{"_index":2211,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keywords",{"_index":3589,"title":{},"body":{"properties.html":{}}}],["key}=${params[key",{"_index":516,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["key}=${value",{"_index":2507,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3558,"title":{},"body":{"license.html":{}}}],["kt",{"_index":2213,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["kt.name.split",{"_index":2214,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["lambda",{"_index":404,"title":{"classes/Lambda.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":413,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":411,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":409,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["last",{"_index":1660,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2458,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1662,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le",{"_index":1097,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["le(left",{"_index":374,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left",{"_index":355,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left.split('/').pop().tolowercase()[0",{"_index":406,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op",{"_index":408,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${render(right",{"_index":407,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":281,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length(value",{"_index":275,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["levels",{"_index":75,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["levels(n",{"_index":872,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["liability",{"_index":3574,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3571,"title":{},"body":{"license.html":{}}}],["library",{"_index":3416,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license",{"_index":3517,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":3537,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3561,"title":{},"body":{"license.html":{}}}],["line",{"_index":347,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"modules/ODataModule.html":{},"classes/Operator.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lines",{"_index":1572,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1283,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["literal",{"_index":25,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":3477,"title":{},"body":{"index.html":{}}}],["loadconfigs",{"_index":1862,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["loader",{"_index":2401,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["loaders",{"_index":2399,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["location",{"_index":3046,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":3009,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logicaloperators",{"_index":363,"title":{"classes/LogicalOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["long_description",{"_index":2053,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["looking",{"_index":1763,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["lt",{"_index":1098,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["lt(left",{"_index":372,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":1948,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":3496,"title":{},"body":{"index.html":{}}}],["make",{"_index":2412,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["managed",{"_index":2580,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["map",{"_index":1136,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2506,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":2242,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["map((key",{"_index":515,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{}}}],["map((n",{"_index":532,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["map((name",{"_index":476,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataResponse.html":{}}}],["map((response",{"_index":1529,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["map((s",{"_index":2495,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["map((v",{"_index":359,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["map((value",{"_index":1878,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["map([...this.annotations",{"_index":1189,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["map(this.annotations",{"_index":1194,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mapfields",{"_index":2256,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapfields(mapper",{"_index":2269,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapped",{"_index":2273,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mapper",{"_index":2271,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["maps",{"_index":2272,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["match",{"_index":1128,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":1238,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":1236,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":1240,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":1129,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["matchespattern",{"_index":3358,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matchespattern(value",{"_index":292,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["matching",{"_index":186,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":873,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/enumerations.html":{}}}],["max_age",{"_index":3106,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":96,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime",{"_index":810,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["maxdatetime(value",{"_index":310,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":159,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":83,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["meant",{"_index":1765,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["mediacontenttype",{"_index":1212,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":1210,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":1200,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":1208,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":158,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":156,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":2316,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3563,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2579,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"license.html":{}}}],["message",{"_index":1581,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":54,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":1202,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":1186,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{}}}],["methods",{"_index":191,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["microsoft.odata.sampleservice.models.trippin.airport",{"_index":3453,"title":{},"body":{"index.html":{}}}],["microsoft.odata.sampleservice.models.trippin.person",{"_index":3482,"title":{},"body":{"index.html":{}}}],["min",{"_index":3402,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mindatetime",{"_index":811,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["mindatetime(value",{"_index":312,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":44,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute",{"_index":812,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["minute(value",{"_index":314,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["miscellaneous",{"_index":3386,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":2317,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3518,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mod",{"_index":425,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":395,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":173,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["model.attach(this.entities",{"_index":2016,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entities().entity",{"_index":2015,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entity",{"_index":3237,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfieldoptions",{"_index":3614,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3615,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/collection",{"_index":2010,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["models/model",{"_index":1959,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":1974,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"license.html":{}}}],["modify(key",{"_index":2000,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["modifying",{"_index":2663,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["module",{"_index":2380,"title":{"modules/ODataModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":2382,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2391,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["month",{"_index":813,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["month(value",{"_index":316,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":426,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":391,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1420,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1421,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1555,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["n",{"_index":869,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["n.render",{"_index":475,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["name",{"_index":125,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["named",{"_index":2198,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["namednodemap",{"_index":1050,"title":{},"body":{"classes/Field.html":{}}}],["names",{"_index":446,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.indexof(key",{"_index":2205,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["names.indexof(type",{"_index":1848,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.join",{"_index":2307,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.join(cache_key_separator",{"_index":1679,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.length",{"_index":2304,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":1847,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":3210,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["namespace",{"_index":140,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":1773,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["namevalue",{"_index":2297,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["name}/${key",{"_index":232,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["navigation",{"_index":163,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["navigationproperties",{"_index":599,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":58,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":636,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["navigationpropertybindings",{"_index":773,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne",{"_index":1099,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ne(left",{"_index":366,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":427,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":397,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["negated",{"_index":3280,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["nestedexpandoptions",{"_index":3616,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["net",{"_index":1304,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["network",{"_index":43,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":174,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["newline",{"_index":1422,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1423,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["next",{"_index":2406,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["nextlink",{"_index":1231,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2396,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["nicer",{"_index":1762,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["node",{"_index":455,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["node.children",{"_index":3311,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.connector",{"_index":3309,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.length",{"_index":3310,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.negated",{"_index":3313,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["none",{"_index":46,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":114,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3567,"title":{},"body":{"license.html":{}}}],["nonparenthesisforemptyparameterfunction",{"_index":18,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["normalize",{"_index":243,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalize(value",{"_index":2662,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["normalized",{"_index":2661,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["normalizevalue",{"_index":208,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue(value",{"_index":250,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["not(exp",{"_index":3290,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["not(value",{"_index":380,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["notexp",{"_index":3316,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["notice",{"_index":3551,"title":{},"body":{"license.html":{}}}],["now",{"_index":318,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["npm",{"_index":3424,"title":{},"body":{"index.html":{}}}],["null",{"_index":244,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["nullable",{"_index":162,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":84,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":3125,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":1237,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":3126,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["o",{"_index":482,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":3111,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["obj",{"_index":2637,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["object",{"_index":247,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.assign",{"_index":1191,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{}}}],["object.assign(acc",{"_index":511,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["object.assign(acc.params",{"_index":2490,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":2937,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(this",{"_index":1133,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1324,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["object.create(null",{"_index":242,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":239,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":2159,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.entries(config.fields).map",{"_index":2292,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":1844,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(params",{"_index":2505,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.entries(values",{"_index":2764,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["object.fromentries(key",{"_index":2224,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":241,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":238,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(attrs",{"_index":2204,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.keys(this.values).reduce",{"_index":520,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects",{"_index":203,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this._segments",{"_index":2513,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(this.values[key",{"_index":522,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["objects.clone(v",{"_index":264,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["objects.get(obj",{"_index":2643,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.has(obj",{"_index":2647,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.merge(obj",{"_index":2648,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.resolvekey(key",{"_index":2223,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["objects.set(obj",{"_index":2641,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.unset(obj",{"_index":2644,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["observable",{"_index":35,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1502,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3530,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1247,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{},"properties.html":{}}}],["odata.git",{"_index":3597,"title":{},"body":{"properties.html":{}}}],["odata.include",{"_index":2917,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":3169,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":3113,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":3115,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3513,"title":{},"body":{"index.html":{}}}],["odata/issues",{"_index":3594,"title":{},"body":{"properties.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1597,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:103",{"_index":1644,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:124",{"_index":1626,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:136",{"_index":1623,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:157",{"_index":1620,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:166",{"_index":1641,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:176",{"_index":1636,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:187",{"_index":1632,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:22",{"_index":1612,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:222",{"_index":1634,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1611,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:30",{"_index":1630,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:31",{"_index":1646,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1648,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:55",{"_index":1652,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:74",{"_index":1614,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:91",{"_index":1619,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":2334,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:4",{"_index":2335,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2358,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2361,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2360,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:35",{"_index":2367,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:45",{"_index":2366,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/helper.ts",{"_index":3640,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/loaders.ts",{"_index":1860,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:12",{"_index":1883,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/loaders.ts:21",{"_index":1864,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:29",{"_index":1865,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{}}}],["odata/src/lib/loaders.ts:6",{"_index":1880,"title":{},"body":{"classes/ODataConfigLoader.html":{}}}],["odata/src/lib/loaders.ts:9",{"_index":1882,"title":{},"body":{"classes/ODataConfigSyncLoader.html":{}}}],["odata/src/lib/models/options.ts",{"_index":3395,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2383,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata/src/lib/module.ts:31",{"_index":2389,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":1242,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:103",{"_index":1243,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:123",{"_index":1276,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:134",{"_index":1278,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:21",{"_index":1271,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:25",{"_index":1267,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:29",{"_index":1250,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:33",{"_index":1262,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:37",{"_index":1268,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:41",{"_index":1259,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:45",{"_index":1253,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:49",{"_index":1265,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:53",{"_index":1256,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:57",{"_index":1272,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:61",{"_index":1248,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:66",{"_index":1244,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:72",{"_index":1252,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:82",{"_index":1266,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2530,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:11",{"_index":3336,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:15",{"_index":3335,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:19",{"_index":3333,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:23",{"_index":3331,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:26",{"_index":3329,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:29",{"_index":3334,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:33",{"_index":3332,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:36",{"_index":3330,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:41",{"_index":2531,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:43",{"_index":2533,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:46",{"_index":2538,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:49",{"_index":2532,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:52",{"_index":2534,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:55",{"_index":2535,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:58",{"_index":2537,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:6",{"_index":3328,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:61",{"_index":2536,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:8",{"_index":3337,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2441,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:112",{"_index":2449,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:117",{"_index":2452,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:122",{"_index":2463,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:136",{"_index":2454,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:141",{"_index":2459,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:146",{"_index":2448,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:152",{"_index":2455,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:48",{"_index":2446,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:54",{"_index":2461,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:67",{"_index":2467,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:73",{"_index":2457,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:88",{"_index":2465,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:99",{"_index":2464,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":3400,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts",{"_index":897,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:14",{"_index":904,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:18",{"_index":902,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:28",{"_index":900,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:30",{"_index":899,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:34",{"_index":901,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:38",{"_index":903,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:5",{"_index":898,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts",{"_index":444,"title":{},"body":{"classes/ComputeExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:17",{"_index":451,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:29",{"_index":461,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:69",{"_index":456,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:75",{"_index":463,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts",{"_index":488,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:111",{"_index":491,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:137",{"_index":497,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:14",{"_index":545,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:18",{"_index":544,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:24",{"_index":543,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:54",{"_index":541,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:66",{"_index":538,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:76",{"_index":542,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:8",{"_index":537,"title":{},"body":{"classes/CountField.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:86",{"_index":489,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/count.ts:95",{"_index":495,"title":{},"body":{"classes/CountExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts",{"_index":834,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:108",{"_index":889,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:11",{"_index":878,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:117",{"_index":886,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:129",{"_index":893,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:133",{"_index":895,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:137",{"_index":882,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:142",{"_index":883,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:152",{"_index":835,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:161",{"_index":840,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:17",{"_index":896,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:197",{"_index":836,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:202",{"_index":842,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:21",{"_index":894,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:27",{"_index":887,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:63",{"_index":879,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:72",{"_index":892,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:84",{"_index":880,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:96",{"_index":881,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/filter.ts",{"_index":3636,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts",{"_index":3244,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:12",{"_index":3267,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:19",{"_index":3266,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:31",{"_index":3265,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:40",{"_index":3247,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:49",{"_index":3254,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:5",{"_index":3264,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:65",{"_index":3248,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:8",{"_index":3268,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:91",{"_index":3250,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:95",{"_index":3253,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts",{"_index":3276,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:11",{"_index":3326,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:15",{"_index":3325,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:154",{"_index":3288,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:158",{"_index":3289,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:162",{"_index":3293,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:166",{"_index":3286,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:170",{"_index":3291,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:180",{"_index":3298,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:22",{"_index":3324,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:34",{"_index":3323,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:43",{"_index":3283,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:44",{"_index":3281,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:59",{"_index":3296,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:75",{"_index":3284,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:8",{"_index":3322,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts",{"_index":3338,"title":{},"body":{"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:18",{"_index":3343,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:54",{"_index":3340,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:59",{"_index":3342,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:9",{"_index":3339,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts",{"_index":190,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:105",{"_index":1073,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:109",{"_index":1072,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:118",{"_index":1071,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:139",{"_index":1070,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:15",{"_index":3275,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:150",{"_index":3351,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:154",{"_index":3352,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:158",{"_index":3353,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:16",{"_index":3274,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:162",{"_index":3354,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:166",{"_index":3355,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:17",{"_index":3272,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:170",{"_index":3356,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:174",{"_index":3357,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:184",{"_index":442,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:187",{"_index":441,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:193",{"_index":3361,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:196",{"_index":3362,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:199",{"_index":3363,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:20",{"_index":1064,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:202",{"_index":3364,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:208",{"_index":819,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:21",{"_index":1065,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:211",{"_index":820,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:214",{"_index":821,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:217",{"_index":822,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:220",{"_index":823,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:223",{"_index":824,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:226",{"_index":825,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:229",{"_index":826,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:23",{"_index":1066,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:232",{"_index":827,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:235",{"_index":828,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:238",{"_index":829,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:241",{"_index":830,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:244",{"_index":831,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:247",{"_index":832,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:253",{"_index":197,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:256",{"_index":200,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:259",{"_index":202,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:265",{"_index":3367,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:269",{"_index":3368,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:27",{"_index":1067,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:275",{"_index":1077,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:278",{"_index":1078,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:281",{"_index":1079,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:287",{"_index":486,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:292",{"_index":3239,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:299",{"_index":3243,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:303",{"_index":3242,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:312",{"_index":3241,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:347",{"_index":3240,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:357",{"_index":1100,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:360",{"_index":1107,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:363",{"_index":1102,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:366",{"_index":1101,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:369",{"_index":1106,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:372",{"_index":1105,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:383",{"_index":1108,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:386",{"_index":1103,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:389",{"_index":1104,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:395",{"_index":429,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:398",{"_index":435,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:401",{"_index":433,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:404",{"_index":431,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:407",{"_index":432,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:410",{"_index":434,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:415",{"_index":1081,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:418",{"_index":1085,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:422",{"_index":1084,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:429",{"_index":1083,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:441",{"_index":1082,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:446",{"_index":1087,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:453",{"_index":1091,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:457",{"_index":1090,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:466",{"_index":1089,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:47",{"_index":1068,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:490",{"_index":1088,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:500",{"_index":1093,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:504",{"_index":1092,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:6",{"_index":3273,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:97",{"_index":1069,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/handlers.ts",{"_index":2565,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:109",{"_index":2582,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:113",{"_index":2602,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:117",{"_index":2586,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:121",{"_index":2587,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:127",{"_index":2576,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:148",{"_index":2600,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:159",{"_index":2590,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:168",{"_index":2606,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:187",{"_index":2592,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:197",{"_index":2578,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:206",{"_index":2583,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:31",{"_index":2573,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:40",{"_index":2610,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:48",{"_index":2603,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:56",{"_index":2584,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:66",{"_index":2608,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:73",{"_index":2574,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:83",{"_index":2596,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:91",{"_index":2598,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2736,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:102",{"_index":2755,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:110",{"_index":2756,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:127",{"_index":2742,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:132",{"_index":2745,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:138",{"_index":2751,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:144",{"_index":2747,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:148",{"_index":2754,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:156",{"_index":2749,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:165",{"_index":2741,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:40",{"_index":2740,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:52",{"_index":2752,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:91",{"_index":2757,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2799,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2825,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2830,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2828,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2831,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2833,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:226",{"_index":2834,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:23",{"_index":2826,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:24",{"_index":2829,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:276",{"_index":2840,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:285",{"_index":2842,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:289",{"_index":2844,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:293",{"_index":2846,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:30",{"_index":2832,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:302",{"_index":2848,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:31",{"_index":2824,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:311",{"_index":2850,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:317",{"_index":2852,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:323",{"_index":2854,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:327",{"_index":2856,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:331",{"_index":2858,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:337",{"_index":2838,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:345",{"_index":2835,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:349",{"_index":2836,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:353",{"_index":2837,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2819,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2817,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2818,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2821,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:44",{"_index":2815,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3635,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":1156,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:103",{"_index":1927,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:107",{"_index":1929,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:111",{"_index":1931,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:115",{"_index":1933,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:119",{"_index":1909,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":1168,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:120",{"_index":1935,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:127",{"_index":1913,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:128",{"_index":1914,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:129",{"_index":1915,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:139",{"_index":1908,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:140",{"_index":1936,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:147",{"_index":1912,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:173",{"_index":1893,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:177",{"_index":1895,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:181",{"_index":1897,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:185",{"_index":1899,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:189",{"_index":1901,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:19",{"_index":1176,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:194",{"_index":1903,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:199",{"_index":1905,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:206",{"_index":1884,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:207",{"_index":1907,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:214",{"_index":1888,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":1178,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:30",{"_index":1180,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:35",{"_index":1174,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:36",{"_index":1170,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:37",{"_index":1172,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":1165,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":1166,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:83",{"_index":1918,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:87",{"_index":1920,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:91",{"_index":1922,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:95",{"_index":1924,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:99",{"_index":1925,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":547,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":907,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:46",{"_index":909,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:47",{"_index":910,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":3080,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":3092,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":3091,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":3090,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":3088,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:25",{"_index":3089,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:27",{"_index":3087,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":3086,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:34",{"_index":3105,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:38",{"_index":3093,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:42",{"_index":3097,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:59",{"_index":3104,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:65",{"_index":3099,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:70",{"_index":3101,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:76",{"_index":3095,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":2975,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:134",{"_index":2987,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:135",{"_index":3001,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:145",{"_index":2984,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":3003,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:155",{"_index":2983,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:156",{"_index":3005,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:178",{"_index":2990,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:202",{"_index":2989,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:220",{"_index":2995,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:247",{"_index":2997,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":2988,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:31",{"_index":2982,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:47",{"_index":2992,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:59",{"_index":2994,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:80",{"_index":2996,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":2986,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:94",{"_index":2999,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3641,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1384,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:115",{"_index":1399,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:125",{"_index":1396,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:49",{"_index":1392,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:50",{"_index":1391,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:51",{"_index":1393,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:57",{"_index":1402,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:61",{"_index":1401,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:93",{"_index":1400,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3639,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":1110,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:18",{"_index":1114,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:30",{"_index":1126,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:39",{"_index":1119,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":1154,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":1153,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":1150,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":1151,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":1152,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":1149,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1718,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1726,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:24",{"_index":1746,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:36",{"_index":1737,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:58",{"_index":1739,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:68",{"_index":1748,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1729,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:78",{"_index":1743,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1727,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:86",{"_index":1734,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1728,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/element.ts",{"_index":3197,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:19",{"_index":3205,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:29",{"_index":3203,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:38",{"_index":3204,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:47",{"_index":3202,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:58",{"_index":3200,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:68",{"_index":3201,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:7",{"_index":3199,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:8",{"_index":3198,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/entity",{"_index":1938,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":2255,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/parsers/callable.ts",{"_index":1796,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:110",{"_index":1810,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:117",{"_index":1807,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:123",{"_index":1812,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:13",{"_index":2428,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:138",{"_index":1809,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:14",{"_index":2431,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:15",{"_index":2430,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:152",{"_index":1806,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:16",{"_index":2427,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:169",{"_index":1805,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:17",{"_index":2429,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:18",{"_index":2426,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:28",{"_index":2439,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:36",{"_index":2433,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:43",{"_index":2432,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:56",{"_index":2436,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:60",{"_index":2437,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:64",{"_index":2434,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:69",{"_index":2438,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:73",{"_index":2440,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:79",{"_index":2435,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:91",{"_index":1799,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:92",{"_index":1800,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:93",{"_index":1798,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:94",{"_index":1804,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:95",{"_index":1803,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:96",{"_index":1802,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:97",{"_index":1797,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/enum",{"_index":2286,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/schema/parsers/structured",{"_index":2050,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":3131,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:12",{"_index":3139,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":3144,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":3138,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":3143,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":3142,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":3140,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":3137,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:39",{"_index":3156,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:46",{"_index":3158,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:54",{"_index":3152,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:60",{"_index":3154,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:66",{"_index":3148,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":3150,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":3145,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/base.ts",{"_index":1336,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:100",{"_index":1368,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:105",{"_index":1370,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:110",{"_index":1371,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:15",{"_index":1344,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:22",{"_index":1373,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:26",{"_index":1360,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:32",{"_index":1361,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:38",{"_index":1362,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:44",{"_index":1363,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:50",{"_index":1364,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:63",{"_index":1351,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:69",{"_index":1353,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:75",{"_index":1354,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:81",{"_index":1355,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:87",{"_index":1356,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/entity",{"_index":1968,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":1944,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:12",{"_index":1957,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:6",{"_index":1952,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":1949,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":3214,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":3217,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":3220,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":3215,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":3224,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:34",{"_index":3235,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:44",{"_index":3233,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:58",{"_index":3231,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":7,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:100",{"_index":3269,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:105",{"_index":3271,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:110",{"_index":3270,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:120",{"_index":438,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:121",{"_index":437,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3634,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/wiki",{"_index":3516,"title":{},"body":{"index.html":{}}}],["odata_config",{"_index":2402,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odata_entityid_headers",{"_index":3011,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":3439,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1424,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":3007,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionoptions",{"_index":1350,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataactionresource",{"_index":1348,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotatable",{"_index":1109,"title":{"classes/ODataAnnotatable.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:18",{"_index":1733,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:30",{"_index":1775,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:39",{"_index":1774,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation",{"_index":1116,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation(annot",{"_index":1137,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odataannotations",{"_index":1155,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:12",{"_index":1890,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:153",{"_index":1889,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:161",{"_index":1886,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:169",{"_index":1887,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:19",{"_index":1891,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:41",{"_index":2563,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:49",{"_index":2561,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:57",{"_index":2562,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:63",{"_index":1916,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":1885,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:71",{"_index":1910,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:79",{"_index":1911,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataapi",{"_index":1409,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":1241,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{}}}],["odatabaseservice",{"_index":1335,"title":{"classes/ODataBaseService.html":{}},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:100",{"_index":1955,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:26",{"_index":1954,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:63",{"_index":1953,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1383,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1504,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1474,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1485,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildjsonbody(this._requests",{"_index":1525,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody",{"_index":1543,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildlegacybody(bound",{"_index":1537,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parsejsonresponse(this._requests",{"_index":1530,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.parselegacyresponse(this._requests",{"_index":1539,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1596,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:103",{"_index":2349,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:124",{"_index":2344,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:136",{"_index":2343,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:14",{"_index":2339,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:157",{"_index":2342,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:166",{"_index":2348,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:176",{"_index":2347,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:187",{"_index":2345,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:22",{"_index":2337,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:222",{"_index":2346,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:23",{"_index":2336,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:29",{"_index":2338,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:38",{"_index":2350,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:54",{"_index":2362,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:55",{"_index":2351,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:64",{"_index":2365,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:74",{"_index":2340,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:79",{"_index":2364,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:91",{"_index":2341,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacacheentry",{"_index":1617,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1717,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":3170,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1730,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":1342,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odatacollection",{"_index":2009,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataconfigasyncloader",{"_index":1859,"title":{"classes/ODataConfigAsyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["odataconfigloader",{"_index":1861,"title":{"classes/ODataConfigLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader",{"_index":1867,"title":{"classes/ODataConfigSyncLoader.html":{}},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odataconfigsyncloader(passedconfig.config",{"_index":2410,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["odatacontext",{"_index":1164,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":1374,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":1218,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesannotations(this.helper",{"_index":1222,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitiesoptions",{"_index":3618,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":1375,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":1196,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentityannotations(this.helper",{"_index":1223,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataentitycontainer",{"_index":1937,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":3173,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3619,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityresource",{"_index":1991,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice",{"_index":1943,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:19",{"_index":3228,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:27",{"_index":1990,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:35",{"_index":1978,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityset",{"_index":1939,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":1942,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":1989,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["odataentitysetservice",{"_index":1967,"title":{"classes/ODataEntitySetService.html":{}},"body":{"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":2049,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataentitytypekey(key",{"_index":2157,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataenumtype",{"_index":2254,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":3164,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":2268,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":2293,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":1814,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatafunctionoptions",{"_index":1359,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatafunctionresource",{"_index":1358,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":417,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1282,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[options?.version",{"_index":2095,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[parseroptions?.version",{"_index":2206,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatahelper[this.version",{"_index":1334,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":2333,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2357,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":917,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_data_services",{"_index":1028,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_reference",{"_index":1019,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_schema",{"_index":1032,"title":{},"body":{"classes/Field.html":{}}}],["odatametadatatype",{"_index":32,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":1958,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3620,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3621,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelfieldoptions",{"_index":3622,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelrelation",{"_index":3623,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":3389,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2381,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":3428,"title":{},"body":{"index.html":{}}}],["odatamodule.forroot(trippinconfig",{"_index":3436,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":1366,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataoperators",{"_index":414,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1435,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":1801,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":1845,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odatapathsegments",{"_index":1431,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2514,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2529,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":1376,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":1187,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3624,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2613,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":1367,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2564,"title":{"classes/ODataQueryOptionHandler.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this.values",{"_index":2787,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2614,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(objects.clone(this.values",{"_index":2785,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionshandler",{"_index":2650,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odatareferential",{"_index":2063,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatareferential(referential",{"_index":2071,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatarequest",{"_index":1390,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1432,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1433,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2379,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":2985,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":3109,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options.parseroptions",{"_index":3030,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1725,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement",{"_index":1719,"title":{"classes/ODataSchemaElement.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement:29",{"_index":1760,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:38",{"_index":1771,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:47",{"_index":1758,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:58",{"_index":1752,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:68",{"_index":1755,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:7",{"_index":1731,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:8",{"_index":1732,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odatasegment",{"_index":2445,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2385,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/PassedInitialConfig.html":{},"index.html":{}}}],["odatasingletonresource",{"_index":3229,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odatasingletonservice",{"_index":3222,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":3141,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":3167,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":2058,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":2161,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser",{"_index":1815,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser).field",{"_index":1836,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatasyntax",{"_index":420,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataversion",{"_index":33,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":1162,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odatawithout",{"_index":3425,"title":{},"body":{"index.html":{}}}],["of([this.passedconfigs",{"_index":1872,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["of(cached",{"_index":1705,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["of(this.passedconfigs",{"_index":1871,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["ok",{"_index":1595,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["omit",{"_index":1302,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["omitnullvalues",{"_index":1306,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["ondelete",{"_index":693,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["one",{"_index":2418,"title":{},"body":{"modules/ODataModule.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/PassedInitialConfig.html":{}}}],["onerror",{"_index":1386,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(response",{"_index":1394,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1387,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(response",{"_index":1397,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":353,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":172,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1285,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1288,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["open.org/odata/odata/v4.01/odata",{"_index":2653,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["opentype",{"_index":600,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["operator",{"_index":352,"title":{"classes/Operator.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":388,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":377,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":394,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":365,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":371,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":369,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":383,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":385,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":375,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":373,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":396,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":392,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":367,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":381,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":379,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":390,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operators",{"_index":416,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":524,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["option(key",{"_index":2750,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":526,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["options",{"_index":105,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["options.body",{"_index":2951,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.bodyqueryoptions",{"_index":2956,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.context",{"_index":2950,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.custom",{"_index":2244,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.custom[f.name",{"_index":2245,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.etag",{"_index":2947,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.expand",{"_index":2238,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.fetchpolicy",{"_index":2955,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.headers",{"_index":1523,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.helper",{"_index":3068,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":3061,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes",{"_index":3075,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":3071,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":3078,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.observe",{"_index":2952,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.params",{"_index":1526,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["options.reportprogress",{"_index":2953,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.required",{"_index":2247,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.required[f.name",{"_index":2248,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.responsetype",{"_index":2954,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.select",{"_index":2239,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select).indexof(f.name",{"_index":2240,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.withcount",{"_index":2944,"title":{},"body":{"classes/ODataRequest.html":{}}}],["options.withcredentials",{"_index":1527,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["opts",{"_index":117,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts(node",{"_index":876,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["or(exp",{"_index":3292,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["or(left",{"_index":378,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["order",{"_index":3257,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderby",{"_index":70,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":884,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{}}}],["orderbyexpression",{"_index":844,"title":{"classes/OrderByExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyexpression.orderby",{"_index":2690,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["orderbyexpression.orderby(opts",{"_index":865,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["orderbyexpressionbuilder",{"_index":845,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"miscellaneous/typealiases.html":{}}}],["orderbyexpressionbuilder,current",{"_index":885,"title":{},"body":{"classes/ExpandField.html":{},"classes/OrderByExpression.html":{}}}],["orderbyfield",{"_index":3256,"title":{"classes/OrderByField.html":{}},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(field",{"_index":3263,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(this.field.clone",{"_index":3261,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyobject",{"_index":3627,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3628,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1511,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1292,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["other.annotations",{"_index":1190,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["other.context",{"_index":1193,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["otherwise",{"_index":3578,"title":{},"body":{"license.html":{}}}],["out",{"_index":3580,"title":{},"body":{"license.html":{}}}],["output",{"_index":1768,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["override",{"_index":1440,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["overview",{"_index":3584,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":176,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["p.configure",{"_index":1857,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":1854,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.name",{"_index":1850,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":1853,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":3036,"title":{},"body":{"classes/ODataResponse.html":{}}}],["pack",{"_index":2257,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["pack(value",{"_index":2274,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["package",{"_index":3369,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pagination",{"_index":2708,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["paging",{"_index":2701,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["param",{"_index":76,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["param0",{"_index":2700,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["parameter",{"_index":110,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":1821,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":1819,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":1817,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":181,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["parameters(value",{"_index":2549,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":1852,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":19,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["params[p.name",{"_index":1851,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":2147,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parent.children.push(this",{"_index":2186,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parentelement",{"_index":1058,"title":{},"body":{"classes/Field.html":{}}}],["parentelement.children",{"_index":1061,"title":{},"body":{"classes/Field.html":{}}}],["parenthesis",{"_index":1263,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["parse",{"_index":1047,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parsejsonresponse",{"_index":1590,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parselegacyresponse",{"_index":1565,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["parser",{"_index":100,"title":{"interfaces/Parser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parser.deserialize(value",{"_index":2099,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.parsefromstring(xml",{"_index":1008,"title":{},"body":{"classes/Field.html":{}}}],["parser.serialize(value",{"_index":2102,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype",{"_index":1789,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["parserfortype(this.base",{"_index":2185,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype(this.return.type",{"_index":1855,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":1827,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions",{"_index":92,"title":{"interfaces/ParserOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parseroptions?.stringasenum",{"_index":2305,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":132,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1293,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["part2",{"_index":2655,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["partial",{"_index":1169,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["particular",{"_index":3565,"title":{},"body":{"license.html":{}}}],["partner",{"_index":694,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["passed",{"_index":2420,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig",{"_index":2390,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfig?.loader",{"_index":2422,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["passedconfigs",{"_index":1869,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["passedinitialconfig",{"_index":2388,"title":{"interfaces/PassedInitialConfig.html":{}},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["patch",{"_index":1449,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["patch'].indexof(this._method",{"_index":2911,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":3230,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":29,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["path(value",{"_index":2542,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.slice(1",{"_index":2479,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2478,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2468,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2443,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["pathandparams(escape",{"_index":2460,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["paths",{"_index":2491,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames",{"_index":52,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegmentnames.entityset",{"_index":1669,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.function",{"_index":2474,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.navigationproperty",{"_index":2518,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.property",{"_index":2519,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2472,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder(segment",{"_index":2487,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathwithparams",{"_index":2811,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":293,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["payload",{"_index":116,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":3481,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":3494,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":3480,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":3483,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3524,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":139,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3545,"title":{},"body":{"license.html":{}}}],["person",{"_index":3529,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3546,"title":{},"body":{"license.html":{}}}],["pick",{"_index":2203,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picked",{"_index":2202,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["picks",{"_index":2200,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["pipe",{"_index":1528,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"index.html":{}}}],["please",{"_index":3411,"title":{},"body":{"index.html":{}}}],["point",{"_index":340,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["policy",{"_index":1255,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["polygon",{"_index":343,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["portions",{"_index":3555,"title":{},"body":{"license.html":{}}}],["post",{"_index":1448,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":2924,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":164,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":1127,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["predicate(this",{"_index":2169,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["prefer",{"_index":20,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":2926,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":2916,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":2925,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":2914,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`omit",{"_index":2920,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":2912,"title":{},"body":{"classes/ODataRequest.html":{}}}],["preference",{"_index":3102,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference.split(',').foreach((prefer",{"_index":3122,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["preference_applied",{"_index":3012,"title":{},"body":{"classes/ODataResponse.html":{}}}],["preferenceapplied",{"_index":3043,"title":{},"body":{"classes/ODataResponse.html":{}}}],["prefix",{"_index":213,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["prefix}/${name",{"_index":228,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["pretty",{"_index":1767,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["primitive",{"_index":2618,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["private",{"_index":49,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":3412,"title":{},"body":{"index.html":{}}}],["projects/.../builder.ts",{"_index":3393,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../compute.ts",{"_index":3601,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../count.ts",{"_index":3602,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../durations.ts",{"_index":3603,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../expand.ts",{"_index":3605,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../filter.ts",{"_index":3610,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../helper.ts",{"_index":3617,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":3388,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../options.ts",{"_index":3390,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../orderby.ts",{"_index":3626,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3604,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../search.ts",{"_index":3630,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":3625,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../select.ts",{"_index":3631,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../structured",{"_index":3613,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":3391,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"properties.html":{}}}],["property",{"_index":57,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":1217,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.enum",{"_index":2314,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["property.ts",{"_index":690,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":778,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":724,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":725,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":726,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":728,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":727,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":723,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":698,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":779,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":701,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":699,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":702,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":700,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":737,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":781,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:40",{"_index":738,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:43",{"_index":712,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:44",{"_index":713,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":780,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":722,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":942,"title":{},"body":{"classes/Field.html":{}}}],["propertyrefs",{"_index":616,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["props",{"_index":1220,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["protected",{"_index":252,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1294,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["protocol/odata",{"_index":1289,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["provide",{"_index":2416,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["provided",{"_index":3556,"title":{},"body":{"license.html":{}}}],["provider",{"_index":2397,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["providers",{"_index":2384,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["proxy",{"_index":222,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["proxyhandler",{"_index":218,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["public",{"_index":48,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3539,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3566,"title":{},"body":{"license.html":{}}}],["push",{"_index":2570,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["push(value",{"_index":2595,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["put",{"_index":436,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":115,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1643,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1609,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1645,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.apply(options",{"_index":1380,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["q.expand",{"_index":3484,"title":{},"body":{"index.html":{}}}],["q.filter",{"_index":3466,"title":{},"body":{"index.html":{}}}],["q.filter().clear",{"_index":3479,"title":{},"body":{"index.html":{}}}],["q.filter().push",{"_index":3474,"title":{},"body":{"index.html":{}}}],["qualifier",{"_index":579,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["queries",{"_index":3449,"title":{},"body":{"index.html":{}}}],["query",{"_index":111,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query((q",{"_index":3465,"title":{},"body":{"index.html":{}}}],["query.compute",{"_index":2722,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.expand",{"_index":2719,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.filter",{"_index":2729,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.orderby",{"_index":2732,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.search",{"_index":2727,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.select",{"_index":2716,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.transform",{"_index":2724,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["querycustomtype",{"_index":206,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":3392,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":3408,"title":{},"body":{"index.html":{}}}],["queryoptionnames",{"_index":28,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataApiOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoptionnames.compute",{"_index":2674,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.count",{"_index":2763,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.expand",{"_index":851,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.filter",{"_index":503,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.format",{"_index":2762,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.levels",{"_index":855,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.orderby",{"_index":852,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.search",{"_index":504,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.select",{"_index":850,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skip",{"_index":853,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skiptoken",{"_index":2761,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.top",{"_index":854,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.transform",{"_index":2760,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":3629,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["r",{"_index":1352,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1715,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1479,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["r2",{"_index":1460,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":2133,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw",{"_index":2054,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"miscellaneous/enumerations.html":{}}}],["raw(`'${serialized",{"_index":2311,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":2184,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw(key",{"_index":2484,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":2312,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(value",{"_index":2651,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["read",{"_index":1661,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["readlink",{"_index":1204,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":529,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["readonlyarray",{"_index":2862,"title":{},"body":{"classes/ODataRequest.html":{}}}],["reduce",{"_index":1667,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":507,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["reference",{"_index":59,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":671,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":673,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:15",{"_index":674,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:18",{"_index":683,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:20",{"_index":686,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:21",{"_index":684,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:22",{"_index":685,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":732,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":735,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":734,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":733,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":170,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":168,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":1003,"title":{},"body":{"classes/Field.html":{}}}],["referential",{"_index":169,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":945,"title":{},"body":{"classes/Field.html":{}}}],["referentialconstraints",{"_index":695,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":167,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["reg",{"_index":1139,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["reg.test(a.term",{"_index":1143,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["regexp",{"_index":1118,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["regexp(`^${term",{"_index":1141,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["region",{"_index":121,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":1837,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"index.html":{}}}],["relative",{"_index":1443,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["remove",{"_index":1621,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["remove(...keys",{"_index":2790,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(keys",{"_index":2753,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(value",{"_index":2597,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["removed",{"_index":3397,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":210,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render'].includes(key",{"_index":234,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(field",{"_index":259,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":357,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":361,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.field",{"_index":512,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["render(this.group",{"_index":402,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.value",{"_index":3301,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["render(undefined",{"_index":464,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["render(v",{"_index":261,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value(syntax",{"_index":246,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render",{"_index":249,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":209,"title":{"interfaces/Renderable.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["replace",{"_index":3041,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2806,"title":{},"body":{"classes/ODataRequest.html":{}}}],["repository",{"_index":3595,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":86,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1493,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["req.api",{"_index":1494,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1702,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1712,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1698,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1700,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1498,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1713,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1665,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":103,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["request('post",{"_index":1524,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.request.method",{"_index":1551,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.tojson",{"_index":1564,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request.urlwithparams",{"_index":1588,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["request>('post",{"_index":1536,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requester",{"_index":1492,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1477,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests.map((request",{"_index":1563,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests[index].request",{"_index":1579,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["require",{"_index":2040,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["required",{"_index":470,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["res",{"_index":1445,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1707,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1711,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":3014,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1671,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.destroy(options",{"_index":2031,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.haskey",{"_index":2024,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.headers",{"_index":3015,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1455,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1560,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":2029,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1709,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2355,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1552,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1554,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1556,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1558,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1557,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1450,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(this.request.body",{"_index":1454,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${request.tolegacy",{"_index":1559,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1453,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":3016,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":3017,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2378,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":2027,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":3018,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res['body",{"_index":1462,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res['headers",{"_index":1461,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["reset",{"_index":3637,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolve",{"_index":2210,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["resolvekey",{"_index":2209,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["resource",{"_index":1347,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resource.call(params",{"_index":1381,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.fetch",{"_index":1382,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.query((q",{"_index":1379,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resourceparams",{"_index":2885,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":2936,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":2934,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":2884,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1377,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":2055,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["response",{"_index":1270,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["response.body",{"_index":1573,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1568,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.ok",{"_index":1464,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['body",{"_index":1594,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response['status",{"_index":1592,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2368,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":93,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1434,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responses.map((response",{"_index":1591,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1349,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1515,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restorerequester",{"_index":1506,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["restriction",{"_index":3536,"title":{},"body":{"license.html":{}}}],["result",{"_index":1508,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["result.params",{"_index":2493,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2492,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":185,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["retrun",{"_index":2711,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["return",{"_index":85,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":198,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["returntype",{"_index":550,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["right",{"_index":356,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rights",{"_index":3538,"title":{},"body":{"license.html":{}}}],["root",{"_index":3442,"title":{},"body":{"index.html":{}}}],["round",{"_index":194,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["round(value",{"_index":201,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":36,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1656,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitySetService.html":{}}}],["s",{"_index":1369,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataSingletonService.html":{}}}],["s.key",{"_index":2503,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1668,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2511,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1670,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2496,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s1",{"_index":288,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["s2",{"_index":286,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["same",{"_index":1497,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["save",{"_index":1975,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["save(attrs",{"_index":2002,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["scale",{"_index":165,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":912,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["schema.alias",{"_index":1785,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":2125,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.default",{"_index":2138,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.format",{"_index":2118,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.iscompoundkey",{"_index":2038,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.maxlength",{"_index":2127,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.namespace",{"_index":1784,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":2107,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.org/draft",{"_index":2233,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.pattern",{"_index":2119,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.properties",{"_index":2241,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.required",{"_index":2246,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.resolvekey(attrs",{"_index":2043,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.ts",{"_index":748,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":758,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":767,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":760,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":765,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":762,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":764,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":766,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":759,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":763,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":769,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":768,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":761,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":2117,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schemaconfig",{"_index":134,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":133,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1610,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1647,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1688,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1687,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":68,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["search(opts",{"_index":888,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{}}}],["searchconnector",{"_index":3282,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpression",{"_index":846,"title":{"classes/SearchExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchexpression.search",{"_index":2683,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["searchexpression.search(opts",{"_index":863,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["searchexpressionbuilder",{"_index":847,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpressionbuilder,current",{"_index":3295,"title":{},"body":{"classes/SearchExpression.html":{}}}],["searchterm",{"_index":3300,"title":{"classes/SearchTerm.html":{}},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(this.value",{"_index":3302,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(value",{"_index":3320,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["second",{"_index":814,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["second(value",{"_index":320,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["segment",{"_index":2451,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segment.clearkey",{"_index":2500,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2480,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2501,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2473,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2475,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2477,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2470,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2521,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2526,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1483,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2462,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegmentnames.batch",{"_index":1484,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2517,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2498,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2522,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2502,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1666,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2523,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2524,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":64,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(opts",{"_index":890,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SelectExpression.html":{}}}],["selectexpression",{"_index":848,"title":{"classes/SelectExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SelectExpression.html":{}}}],["selectexpression.select",{"_index":2667,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["selectexpression.select(opts",{"_index":858,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["selectexpressionbuilder",{"_index":849,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["selectexpressionbuilder,current",{"_index":891,"title":{},"body":{"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["selector",{"_index":3440,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3632,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3543,"title":{},"body":{"license.html":{}}}],["send",{"_index":1249,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["send(options",{"_index":1517,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendjson(options",{"_index":1521,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sendlegacy",{"_index":1535,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sent",{"_index":1258,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["serialization",{"_index":1749,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":107,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":1811,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1747,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1750,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1589,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":183,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":124,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2400,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["sessionstorage",{"_index":2369,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":634,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set(path",{"_index":2599,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["set.ts",{"_index":635,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{}}}],["set.ts:101",{"_index":2005,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:119",{"_index":2001,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:136",{"_index":1987,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:154",{"_index":1999,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:176",{"_index":2003,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:19",{"_index":1988,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:3",{"_index":638,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:36",{"_index":1981,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:37",{"_index":1982,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:48",{"_index":2007,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:5",{"_index":641,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:56",{"_index":1993,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:6",{"_index":639,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:65",{"_index":1995,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:7",{"_index":642,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:78",{"_index":1997,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:8",{"_index":640,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:87",{"_index":1984,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["setcache",{"_index":3081,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":3094,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":3082,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":3096,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":3083,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":3098,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied",{"_index":3084,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setpreferenceapplied(preference",{"_index":3100,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setup",{"_index":3427,"title":{},"body":{"index.html":{}}}],["setversion",{"_index":3085,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":3103,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3552,"title":{},"body":{"license.html":{}}}],["shortcut",{"_index":2699,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["shortcuts",{"_index":2032,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["side",{"_index":3588,"title":{},"body":{"properties.html":{}}}],["single",{"_index":1219,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{}}}],["singleconfigorarray",{"_index":1875,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleconfigorarray.pipe",{"_index":1877,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["singleton",{"_index":56,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":3219,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":772,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":774,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":775,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":777,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":776,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":3221,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":624,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":3227,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":72,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skip(n",{"_index":867,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["skip(opts",{"_index":2695,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["skiptoken",{"_index":73,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skiptoken(opts",{"_index":2697,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["software",{"_index":3532,"title":{},"body":{"license.html":{}}}],["some(predicate",{"_index":2601,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["specific",{"_index":2041,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["specified",{"_index":1052,"title":{},"body":{"classes/Field.html":{}}}],["split",{"_index":3034,"title":{},"body":{"classes/ODataResponse.html":{}}}],["split(newline_regexp",{"_index":1574,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["srid",{"_index":566,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["standardaggregatemethods",{"_index":3394,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":280,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["started",{"_index":3405,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1472,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1578,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":3349,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(field",{"_index":277,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1654,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":3470,"title":{},"body":{"index.html":{}}}],["static",{"_index":220,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["status",{"_index":1586,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["statustext",{"_index":1587,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2359,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":50,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":3128,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["storerequester",{"_index":1489,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["streaming",{"_index":80,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":77,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["string(name",{"_index":2199,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["stringandcollectionfunctions",{"_index":266,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":21,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":291,"title":{"classes/StringFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":1429,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.titlecase(this.name",{"_index":2163,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.uniqueid",{"_index":1437,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1269,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["stripmetadata",{"_index":22,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":611,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["structured",{"_index":594,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["structuredtype",{"_index":1838,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["structuredtypeconfig",{"_index":146,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":99,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":97,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":1946,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":1835,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["styleurls",{"_index":3445,"title":{},"body":{"index.html":{}}}],["sub",{"_index":428,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["sub(left",{"_index":389,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["subject",{"_index":1385,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3541,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":3457,"title":{},"body":{"index.html":{}}}],["subscribe((airports",{"_index":3458,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3554,"title":{},"body":{"license.html":{}}}],["substring",{"_index":3350,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["substring(field",{"_index":279,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["subtype",{"_index":1753,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["sum",{"_index":3401,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super",{"_index":471,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["super(annotationlist",{"_index":580,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(config",{"_index":1776,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["super(field",{"_index":2066,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["super(init",{"_index":3013,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":612,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super.clone",{"_index":1486,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["super.flush",{"_index":2377,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["supertype",{"_index":1756,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["support",{"_index":3500,"title":{},"body":{"index.html":{}}}],["supported",{"_index":1056,"title":{},"body":{"classes/Field.html":{}}}],["switch",{"_index":1491,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["switchmap",{"_index":1408,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["symbol",{"_index":225,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["symbol.tostringtag",{"_index":230,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":2421,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"miscellaneous/typealiases.html":{}}}],["syntax",{"_index":422,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["t",{"_index":106,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":3418,"title":{},"body":{"index.html":{}}}],["tag",{"_index":916,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":950,"title":{},"body":{"classes/Field.html":{}}}],["tag_action_import",{"_index":956,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotation",{"_index":931,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotations",{"_index":930,"title":{},"body":{"classes/Field.html":{}}}],["tag_complex_type",{"_index":936,"title":{},"body":{"classes/Field.html":{}}}],["tag_data_services",{"_index":921,"title":{},"body":{"classes/Field.html":{}}}],["tag_edmx",{"_index":919,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_container",{"_index":951,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_set",{"_index":952,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_type",{"_index":938,"title":{},"body":{"classes/Field.html":{}}}],["tag_enum_type",{"_index":933,"title":{},"body":{"classes/Field.html":{}}}],["tag_function",{"_index":947,"title":{},"body":{"classes/Field.html":{}}}],["tag_function_import",{"_index":954,"title":{},"body":{"classes/Field.html":{}}}],["tag_include",{"_index":925,"title":{},"body":{"classes/Field.html":{}}}],["tag_include_annotations",{"_index":927,"title":{},"body":{"classes/Field.html":{}}}],["tag_key",{"_index":940,"title":{},"body":{"classes/Field.html":{}}}],["tag_member",{"_index":935,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property",{"_index":943,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property_binding",{"_index":958,"title":{},"body":{"classes/Field.html":{}}}],["tag_on_delete",{"_index":946,"title":{},"body":{"classes/Field.html":{}}}],["tag_parameter",{"_index":949,"title":{},"body":{"classes/Field.html":{}}}],["tag_property",{"_index":939,"title":{},"body":{"classes/Field.html":{}}}],["tag_property_ref",{"_index":941,"title":{},"body":{"classes/Field.html":{}}}],["tag_reference",{"_index":923,"title":{},"body":{"classes/Field.html":{}}}],["tag_referential_constraint",{"_index":944,"title":{},"body":{"classes/Field.html":{}}}],["tag_return_type",{"_index":948,"title":{},"body":{"classes/Field.html":{}}}],["tag_schema",{"_index":932,"title":{},"body":{"classes/Field.html":{}}}],["tag_singleton",{"_index":953,"title":{},"body":{"classes/Field.html":{}}}],["tag_term",{"_index":929,"title":{},"body":{"classes/Field.html":{}}}],["tag_type_definition",{"_index":959,"title":{},"body":{"classes/Field.html":{}}}],["tags",{"_index":918,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(res",{"_index":1651,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1693,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1673,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1677,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1694,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1655,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1708,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["target",{"_index":226,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["targetnamespace",{"_index":681,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["te",{"_index":2664,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["templateurl",{"_index":3443,"title":{},"body":{"index.html":{}}}],["term",{"_index":136,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["term(value",{"_index":3297,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["termnamespace",{"_index":680,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["terms",{"_index":755,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["test",{"_index":2593,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["text",{"_index":1538,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":2909,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":1009,"title":{},"body":{"classes/Field.html":{}}}],["text_plain",{"_index":2861,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._add(countfield",{"_index":534,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{}}}],["this._add(exp",{"_index":3315,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(field",{"_index":3344,"title":{},"body":{"classes/SelectExpression.html":{}}}],["this._add(name",{"_index":484,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._add(new",{"_index":3262,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(node",{"_index":877,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this._add(notexp",{"_index":3319,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._annotations",{"_index":3059,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_etag",{"_index":3064,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._annotations.set(options.helper.odata_id",{"_index":3066,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":2875,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._children",{"_index":531,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.length",{"_index":905,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.map((c",{"_index":478,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.map((n",{"_index":474,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._children.push",{"_index":3314,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.push(node",{"_index":481,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["this._connector",{"_index":3303,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._context",{"_index":3055,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._fields",{"_index":2158,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["this._fields.filter",{"_index":2191,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["this._fields.foreach((f",{"_index":2187,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._fields.map((f",{"_index":2315,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this._functions",{"_index":1225,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":2928,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._keys",{"_index":2155,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this._method",{"_index":2863,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._negated",{"_index":3304,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._options",{"_index":3029,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":3051,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":3037,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":3048,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setpreferenceapplied(preferenceapplied",{"_index":3045,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":3042,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":2941,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":2973,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":2969,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":2887,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":2959,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}?${this._params",{"_index":2970,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":3052,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":1215,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._requests",{"_index":1488,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1478,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1503,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1505,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses",{"_index":1481,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responses).foreach((tuple",{"_index":1532,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":2873,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2485,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2508,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2525,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.reduce",{"_index":2486,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2516,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.accept",{"_index":1322,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.add(ctx",{"_index":1541,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.alias",{"_index":405,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.annotatedvalue(computed",{"_index":2089,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(long_description",{"_index":2236,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(term",{"_index":2162,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["this.annotations",{"_index":1134,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.annotations.find(predicate",{"_index":1138,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.api",{"_index":1495,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":2017,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":1788,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(bindingtype",{"_index":3182,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(callablebindingtype",{"_index":3188,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":1962,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":2904,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":2899,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":2896,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":2902,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":2882,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":2890,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":2893,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":2881,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":2930,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.jsonbatchformat",{"_index":1518,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.options.params",{"_index":2939,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":2923,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":2915,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":2913,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.omitnullvalues",{"_index":2919,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":2910,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":3072,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":2879,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.requester",{"_index":1490,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this.path",{"_index":2967,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":2968,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":1961,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.assertarray",{"_index":2636,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().every(predicate",{"_index":2631,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().filter((v",{"_index":2624,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().find(predicate",{"_index":2632,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().push(value",{"_index":2622,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().some(predicate",{"_index":2630,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray()[index",{"_index":2629,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(false",{"_index":2642,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(true",{"_index":2640,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.base",{"_index":2150,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.body",{"_index":3024,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":3054,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1320,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":2971,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":2961,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":2972,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":1779,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1680,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1681,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1689,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":3129,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":3168,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find((c",{"_index":3183,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":3195,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":1010,"title":{},"body":{"classes/Field.html":{}}}],["this.children",{"_index":2171,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.client",{"_index":3223,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.apifor(this.apinameorentitytype",{"_index":1378,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["this.client.entityset(this.name",{"_index":2011,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.client.singleton(this.name",{"_index":3236,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.collection",{"_index":1820,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.complete",{"_index":1466,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":1781,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.configs",{"_index":1876,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["this.containers",{"_index":3171,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":3176,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":1192,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":1183,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":1185,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.create(attrs",{"_index":2036,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.default",{"_index":2072,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.deleterefby",{"_index":1328,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.deserialize(this.default",{"_index":2105,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.entities",{"_index":3165,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities().create(attrs",{"_index":2022,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().entity(key",{"_index":2012,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchall(options",{"_index":2018,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchmany(top",{"_index":2020,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchone(options",{"_index":2021,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities.find((e",{"_index":3180,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":3193,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":3238,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entity(key",{"_index":2023,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entitysetpath",{"_index":1777,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":1940,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":3190,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":1963,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1664,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1696,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1690,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1684,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1682,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":2088,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.enums",{"_index":3162,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":3178,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":3191,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error(response",{"_index":1470,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.escape",{"_index":265,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.factory.entityset",{"_index":3451,"title":{},"body":{"index.html":{}}}],["this.fetchpolicy",{"_index":1318,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field.tojson",{"_index":502,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.fields",{"_index":2176,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields().find",{"_index":2296,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.fields().map(mapper",{"_index":2299,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.find((s",{"_index":2527,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":1142,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.findchildparser(predicate",{"_index":2175,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.flags",{"_index":2290,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1683,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":1228,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.cachekey",{"_index":2356,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":1012,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects",{"_index":1017,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects(dataservices",{"_index":1031,"title":{},"body":{"classes/Field.html":{}}}],["this.getresponse(req",{"_index":1704,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group",{"_index":1438,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.group.tojson",{"_index":401,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1699,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1701,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1312,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":3050,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":3031,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(headerkey",{"_index":3040,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":3063,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":3047,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(preference_applied",{"_index":3044,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":3025,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":1188,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.annotations(data",{"_index":1182,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":1181,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":1230,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":1234,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":1207,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":1229,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":1197,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":1199,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":1226,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":1198,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":1213,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":1211,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":1201,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":1209,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":1203,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":1232,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":1216,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":1195,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":1205,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":1184,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.id",{"_index":1436,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.ieee754compatible",{"_index":3117,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isenumtype",{"_index":1831,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.isexpired(entry",{"_index":1685,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isquerybody",{"_index":2958,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.isstructuredtype",{"_index":1834,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.istypeof(schema.type",{"_index":3211,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.istypeof(type",{"_index":2165,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.jsonbatchformat",{"_index":1332,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.keys",{"_index":2212,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.location",{"_index":3121,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":3127,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":2074,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.members",{"_index":2279,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":3114,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.modify(key",{"_index":2047,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.n",{"_index":2615,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.name",{"_index":256,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.names",{"_index":472,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.names.push(name",{"_index":480,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.namespace",{"_index":1840,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["this.namespace}.${this.name",{"_index":1846,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":2309,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":2306,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${params.join",{"_index":262,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":2078,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.next(response",{"_index":1465,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":1235,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.nonparenthesisforemptyparameterfunction",{"_index":1330,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.normalize",{"_index":258,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":1818,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.o.delete(this.n",{"_index":2649,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n",{"_index":2616,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n).filter((v",{"_index":2645,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n).length",{"_index":2626,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.get(this.n)[0",{"_index":2628,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.has(this.n",{"_index":2621,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.set",{"_index":2623,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o.set(this.n",{"_index":2619,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.observe",{"_index":2870,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":3491,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":3478,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":354,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":2152,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.option",{"_index":517,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoptionnames.levels",{"_index":874,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoptionnames.skip",{"_index":868,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoptionnames.top",{"_index":871,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.options",{"_index":3060,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.clear",{"_index":2710,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression",{"_index":2666,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.compute",{"_index":2676,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.expand",{"_index":2671,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.filter",{"_index":2687,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.orderby",{"_index":2691,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.search",{"_index":2684,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.select",{"_index":2668,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.helper.context",{"_index":3056,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.option",{"_index":2689,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.compute",{"_index":2677,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.expand",{"_index":2720,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.filter",{"_index":2730,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.format",{"_index":2680,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.orderby",{"_index":2733,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.search",{"_index":2685,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.select",{"_index":2717,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skip",{"_index":2696,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skiptoken",{"_index":2698,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.top",{"_index":2694,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.transform",{"_index":2725,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.expand",{"_index":2672,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.filter",{"_index":2688,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.orderby",{"_index":2692,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.select",{"_index":2669,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.transform",{"_index":2682,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.compute",{"_index":2723,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.expand",{"_index":2721,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.filter",{"_index":2731,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.orderby",{"_index":2734,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.search",{"_index":2728,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.select",{"_index":2718,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.skip",{"_index":2705,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.skiptoken",{"_index":2703,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.top",{"_index":2707,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.remove(queryoptionnames.transform",{"_index":2726,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.toqueryarguments",{"_index":2712,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.version",{"_index":3053,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.op}(${left",{"_index":362,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.order",{"_index":3260,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.paging(query",{"_index":2735,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.parameters",{"_index":1843,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":1858,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":1856,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1310,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.params.keys().length",{"_index":2964,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.parent",{"_index":2166,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.fields",{"_index":2190,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.issubtypeof(type",{"_index":2167,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.keys",{"_index":2193,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parse(parser",{"_index":2100,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser",{"_index":1783,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.binding",{"_index":1795,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":1791,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":1792,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.encode(v",{"_index":1826,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":1794,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.field(enu",{"_index":2282,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.fields(value",{"_index":2281,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.mapfields(mapper",{"_index":2283,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.pack(value",{"_index":2285,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":1787,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":1825,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":1793,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.tojsonschema(options",{"_index":2109,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser.unpack(value",{"_index":2284,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parseroptions",{"_index":1822,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.path",{"_index":2966,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.path.endswith($batch",{"_index":2974,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.pathandparams",{"_index":2504,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.path}?${this.params",{"_index":2965,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.payload",{"_index":3058,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":2080,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.prefer",{"_index":1326,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.properties.get(name",{"_index":1221,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.property",{"_index":2064,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.put(req.cachekey",{"_index":2354,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1710,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":3448,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":2065,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.references",{"_index":1016,"title":{},"body":{"classes/Field.html":{}}}],["this.referentials",{"_index":2069,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.referentials.length",{"_index":2146,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.reportprogress",{"_index":2868,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.body",{"_index":1463,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.headers",{"_index":1451,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1446,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1447,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2865,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":3074,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":3073,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":3076,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":3079,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":2886,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":2877,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2371,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.restorerequester(handler",{"_index":1516,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.return",{"_index":1841,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":2082,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.schema",{"_index":3206,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.alias",{"_index":3209,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.api",{"_index":3207,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.namespace}.${this.name",{"_index":1786,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataSchemaElement.html":{}}}],["this.schemas",{"_index":1030,"title":{},"body":{"classes/Field.html":{}}}],["this.scope(r",{"_index":1716,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2352,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.segment.key",{"_index":2545,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2539,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2550,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2543,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2541,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2494,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegmentnames.action",{"_index":2556,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.entityset",{"_index":2554,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.function",{"_index":2557,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.navigationproperty",{"_index":2560,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.property",{"_index":2559,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.singleton",{"_index":2555,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2558,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.send(options).pipe(map((response",{"_index":1542,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendjson(options",{"_index":1519,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.sendlegacy(options",{"_index":1520,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.serialize(value",{"_index":2310,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":1965,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.skip(skip",{"_index":2704,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken(skiptoken",{"_index":2702,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.status",{"_index":3026,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":3027,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2370,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2374,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2373,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storerequester",{"_index":1513,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.streaming",{"_index":3116,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1308,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.stripmetadata",{"_index":1316,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["this.structured().validate(value",{"_index":2087,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype",{"_index":2067,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtypeschema",{"_index":2037,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.tags(res",{"_index":2353,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":1131,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1663,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.titleize(description",{"_index":2235,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tojson(parser",{"_index":2104,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tolegacy",{"_index":1441,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.top(top",{"_index":2706,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.type",{"_index":1816,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.type.startswith('edm",{"_index":1829,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.update(key",{"_index":2048,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.url",{"_index":3028,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":2086,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.value",{"_index":2288,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this.values",{"_index":257,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values.clear",{"_index":2797,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.delete(key",{"_index":2795,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(key",{"_index":2766,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.compute",{"_index":2776,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.count",{"_index":2784,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.expand",{"_index":2774,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.filter",{"_index":2778,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.levels",{"_index":2783,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.orderby",{"_index":2779,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.search",{"_index":2777,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.select",{"_index":2773,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.skip",{"_index":2781,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.skiptoken",{"_index":2782,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.top",{"_index":2780,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.get(queryoptionnames.transform",{"_index":2775,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.has(key",{"_index":2789,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.keys",{"_index":2791,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.keys()].reduce((acc",{"_index":2771,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values.map((v",{"_index":263,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values.set(key",{"_index":2786,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[key",{"_index":508,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[name",{"_index":527,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoptionnames.expand",{"_index":862,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoptionnames.filter",{"_index":519,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoptionnames.orderby",{"_index":866,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoptionnames.search",{"_index":864,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.values[queryoptionnames.select",{"_index":859,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.version",{"_index":1011,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1314,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataRequest.html":{}}}],["through",{"_index":2414,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["throw",{"_index":1045,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["throwerror",{"_index":1653,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["time",{"_index":815,"title":{},"body":{"classes/DateAndTimeFunctions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["time(value",{"_index":322,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["timeout",{"_index":1599,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1764,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["titleize",{"_index":1724,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleize(term",{"_index":1759,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleized",{"_index":1769,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["todo",{"_index":1442,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["tojson",{"_index":215,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tojsonschema",{"_index":2313,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tojsonschema(options",{"_index":2108,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["tolegacy",{"_index":1388,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tolower",{"_index":3359,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(value",{"_index":295,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2788,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":71,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["top(n",{"_index":870,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["top(opts",{"_index":2693,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["toqueryarguments",{"_index":2738,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3577,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":214,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totaloffsetminutes",{"_index":816,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totaloffsetminutes(value",{"_index":324,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds",{"_index":817,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totalseconds(value",{"_index":326,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":3360,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(value",{"_index":297,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":69,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["transform(opts",{"_index":2681,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["trim",{"_index":3119,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(value",{"_index":299,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":3435,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":3433,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":3434,"title":{},"body":{"index.html":{}}}],["trips",{"_index":3487,"title":{},"body":{"index.html":{}}}],["true",{"_index":254,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":1005,"title":{},"body":{"classes/Field.html":{}}}],["tslib",{"_index":3382,"title":{},"body":{"dependencies.html":{}}}],["tuple[0].isstopped",{"_index":1533,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tuple[0].onload(tuple[1",{"_index":1534,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#batch",{"_index":1473,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":3226,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":26,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined",{"_index":1770,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["type(value",{"_index":2540,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type.startswith(this.alias",{"_index":3175,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":3174,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":595,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":653,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":648,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:11",{"_index":649,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:110",{"_index":2328,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:12",{"_index":784,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:13",{"_index":782,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:130",{"_index":2323,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:140",{"_index":2329,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:149",{"_index":2332,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:169",{"_index":2330,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:17",{"_index":603,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:173",{"_index":2327,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:19",{"_index":2260,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:21",{"_index":2287,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:3",{"_index":656,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":644,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:31",{"_index":2321,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:32",{"_index":2319,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:33",{"_index":646,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:34",{"_index":2320,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:35",{"_index":2267,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:36",{"_index":2318,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:39",{"_index":645,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEntityTypeKey.html":{}}}],["type.ts:4",{"_index":655,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:40",{"_index":2051,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:44",{"_index":2264,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:45",{"_index":688,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:46",{"_index":689,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:48",{"_index":2798,"title":{},"body":{"classes/ODataReferential.html":{}}}],["type.ts:49",{"_index":729,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataReferential.html":{}}}],["type.ts:5",{"_index":657,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:50",{"_index":730,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:53",{"_index":2270,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:6",{"_index":654,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:62",{"_index":2326,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:63",{"_index":2261,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:68",{"_index":2325,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:7",{"_index":2259,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:73",{"_index":2276,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:76",{"_index":2324,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:8",{"_index":783,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:83",{"_index":2262,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:87",{"_index":2278,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:9",{"_index":785,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:91",{"_index":2275,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:96",{"_index":2322,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["typealiases",{"_index":3599,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":960,"title":{},"body":{"classes/Field.html":{}}}],["typedefinitions",{"_index":756,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefunctions",{"_index":333,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":245,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types",{"_index":204,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/PassedInitialConfig.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types(undefined",{"_index":2466,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(this.o.get(this.n",{"_index":2620,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isarray(this.o.get(this.n)[0",{"_index":2627,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isarray(value",{"_index":2767,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(errors",{"_index":2093,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(params",{"_index":513,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(this.o.get(this.n",{"_index":2617,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(this.segment.key",{"_index":2547,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2552,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.values.get(key",{"_index":2765,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(this.values[key",{"_index":506,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(v",{"_index":2646,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(value",{"_index":2231,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["types.isfunction(opts",{"_index":2665,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(data",{"_index":3070,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(options.body",{"_index":2948,"title":{},"body":{"classes/ODataRequest.html":{}}}],["types.isplainobject(payload",{"_index":3077,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.o.get(this.n",{"_index":2634,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(this.payload",{"_index":3057,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":2216,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["types.isplainobject(value",{"_index":2094,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.rawtype(this",{"_index":231,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types.rawtype(v).endswith('expression",{"_index":2769,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.rawtype(value).endswith('expression",{"_index":509,"title":{},"body":{"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["typescript",{"_index":2407,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{},"properties.html":{}}}],["unchanged",{"_index":3399,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":120,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":798,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":651,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["unicode",{"_index":706,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["union",{"_index":1159,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["union(other",{"_index":1173,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["united",{"_index":3469,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1879,"title":{},"body":{"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{}}}],["unpack",{"_index":2258,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpack(value",{"_index":2277,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["unpacked",{"_index":3633,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unset",{"_index":2571,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unset(path",{"_index":2605,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unsuccessful",{"_index":1467,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1160,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["update(attrs",{"_index":3232,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(data",{"_index":1175,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["update(key",{"_index":2004,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["update/patch",{"_index":2046,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["updating",{"_index":3409,"title":{},"body":{"index.html":{}}}],["uri",{"_index":677,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["url",{"_index":109,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urlwithparams",{"_index":2812,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":3421,"title":{},"body":{"index.html":{}}}],["use",{"_index":1260,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSchemaElement.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2423,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["usevalue",{"_index":2417,"title":{},"body":{"modules/ODataModule.html":{},"interfaces/PassedInitialConfig.html":{}}}],["using",{"_index":1637,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"index.html":{}}}],["utils",{"_index":205,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["utils/arrays",{"_index":1427,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/http",{"_index":1428,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":3159,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1430,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":3006,"title":{},"body":{"classes/ODataResponse.html":{}}}],["v",{"_index":2101,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["v.render",{"_index":2770,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["v2",{"_index":3591,"title":{},"body":{"properties.html":{}}}],["v3",{"_index":3590,"title":{},"body":{"properties.html":{}}}],["v4",{"_index":3507,"title":{},"body":{"index.html":{},"properties.html":{}}}],["v4.0",{"_index":1290,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v4.01",{"_index":2654,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1287,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["v[field.name",{"_index":2217,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["valid",{"_index":2660,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["validate",{"_index":2084,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["validate(member",{"_index":2331,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":60,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataConfigAsyncLoader.html":{},"classes/ODataConfigLoader.html":{},"classes/ODataConfigSyncLoader.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["value(v",{"_index":2607,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["value).reduce",{"_index":2301,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.length",{"_index":2091,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["value.map((v",{"_index":1824,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["value.render",{"_index":248,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["value.some((v",{"_index":2768,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value.tojson",{"_index":2772,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":102,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":2179,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["values",{"_index":253,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":260,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":282,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values=nulls",{"_index":2921,"title":{},"body":{"classes/ODataRequest.html":{}}}],["values[index",{"_index":2499,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3522,"title":{},"body":{"license.html":{},"properties.html":{}}}],["var",{"_index":1512,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["variable",{"_index":166,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["variables",{"_index":1475,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":23,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"properties.html":{}}}],["version.replace(/\\;/g",{"_index":3118,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":3107,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":3108,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":913,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":3120,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3501,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3510,"title":{},"body":{"index.html":{}}}],["void",{"_index":118,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3562,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3557,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3575,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3514,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2372,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":2019,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"index.html":{}}}],["withcredentials",{"_index":24,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Parser.html":{},"interfaces/ParserOptions.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":2026,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"index.html":{},"license.html":{}}}],["works",{"_index":3495,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":3225,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["xssi_prefix",{"_index":1425,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year",{"_index":818,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["year(value",{"_index":328,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":430,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ComputeExpression.html":{},"classes/CountExpression.html":{},"classes/CountField.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GeoFunctions.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/TypeFunctions.html":{}}}],["zone.js",{"_index":3384,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jsonBatchFormat\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOptionNames[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOptionNames[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jsonBatchFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jsonBatchFormat:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:259\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:395\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:404\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:407\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:401\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:410\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:398\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:121\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:120\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:184\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeExpression.html":{"url":"classes/ComputeExpression.html","title":"class - ComputeExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                names\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                compute\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(name: string, node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ComputeExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        compute\n                        \n                    \n                \n            \n            \n                \n                    \n                    compute(opts: (builder: ComputeExpressionBuilder,current: ComputeExpression) => void, current?: ComputeExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            ComputeExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string, opts: (e: literal type) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:75\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport {\n  Field,\n  functions,\n  ODataFunctions,\n  ODataOperators,\n  operators,\n  Renderable,\n} from './syntax';\n\nexport type ComputeExpressionBuilder = {\n  t: Required>;\n  e: () => ComputeExpression;\n};\nexport class ComputeExpression extends Expression {\n  names: string[];\n  constructor({\n    children,\n    names,\n  }: {\n    children?: Renderable[];\n    names?: string[];\n  } = {}) {\n    super({ children });\n    this.names = names || [];\n  }\n\n  static compute(\n    opts: (\n      builder: ComputeExpressionBuilder,\n      current?: ComputeExpression\n    ) => ComputeExpression,\n    current?: ComputeExpression\n  ): ComputeExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new ComputeExpression(),\n      },\n      current\n    ) as ComputeExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let children = this._children.map((n) =>\n      n.render({ aliases, escape, prefix })\n    );\n    return this.names\n      .map((name, index) => `${children[index]} as ${name}`)\n      .join(',');\n  }\n\n  clone() {\n    return new ComputeExpression({\n      children: this._children.map((c) => c.clone()),\n      names: [...this.names],\n    });\n  }\n\n  private _add(name: string, node: Renderable): ComputeExpression {\n    this.names.push(name);\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    name: string,\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ComputeExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(name, node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(condition: T | string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:287\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountExpression.html":{"url":"classes/CountExpression.html","title":"class - CountExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                count\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:86\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         CountExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count(opts: (builder: CountExpressionBuilder,current: CountExpression) => void, current?: CountExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:95\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            CountExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F[], opts?: (e?: literal type) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:137\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            F[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     CountExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:116\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOptionNames } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { render, Field, Renderable } from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, { aliases, escape, prefix })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOptionNames.filter,\n      FilterExpression.filter(opts, this.values[QueryOptionNames.filter])\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  // Option Handler\n  private option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Readonly>;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static count(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression\n    ) => CountExpression,\n    current?: CountExpression\n  ): CountExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new CountExpression(),\n      },\n      current\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: Field.factory>>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountField.html":{"url":"classes/CountField.html","title":"class - CountField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/count.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                filter\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     CountField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                    \n                    option(name: QueryOptionNames, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:76\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/count.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { QueryOptionNames } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { render, Field, Renderable } from './syntax';\n\nexport class CountField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'CountField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let count = `${render(this.field, { aliases, escape, prefix })}/$count`;\n    if (!Types.isEmpty(params)) {\n      count = `${count}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return count;\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOptionNames.filter,\n      FilterExpression.filter(opts, this.values[QueryOptionNames.filter])\n    );\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new CountField(this.field.clone(), values);\n  }\n\n  // Option Handler\n  private option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type CountExpressionBuilder = {\n  t: Readonly>;\n  e: () => CountExpression;\n};\nexport class CountExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static count(\n    opts: (\n      builder: CountExpressionBuilder,\n      current?: CountExpression\n    ) => CountExpression,\n    current?: CountExpression\n  ): CountExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new CountExpression(),\n      },\n      current\n    ) as CountExpression;\n  }\n\n  private _add(node: Renderable): CountExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new CountExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  field(\n    field: F[],\n    opts?: (e: { t: F; f: CountField }) => CountExpression\n  ): CountExpression {\n    let countField = new CountField(field);\n    if (opts !== undefined)\n      opts({\n        t: Field.factory>>(),\n        f: countField,\n      });\n    return this._add(countField);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(public path: string, public target: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                        CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                        CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                        CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                        CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateAndTimeFunctions.html":{"url":"classes/DateAndTimeFunctions.html","title":"class - DateAndTimeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateAndTimeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                day\n                            \n                            \n                                fractionalseconds\n                            \n                            \n                                hour\n                            \n                            \n                                maxdatetime\n                            \n                            \n                                mindatetime\n                            \n                            \n                                minute\n                            \n                            \n                                month\n                            \n                            \n                                now\n                            \n                            \n                                second\n                            \n                            \n                                time\n                            \n                            \n                                totaloffsetminutes\n                            \n                            \n                                totalseconds\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n            \n                \ndate(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n            \n                \nday(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fractionalseconds\n                        \n                    \n                \n            \n            \n                \nfractionalseconds(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hour\n                        \n                    \n                \n            \n            \n                \nhour(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxdatetime\n                        \n                    \n                \n            \n            \n                \nmaxdatetime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mindatetime\n                        \n                    \n                \n            \n            \n                \nmindatetime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        minute\n                        \n                    \n                \n            \n            \n                \nminute(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        month\n                        \n                    \n                \n            \n            \n                \nmonth(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        second\n                        \n                    \n                \n            \n            \n                \nsecond(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n            \n                \ntime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totaloffsetminutes\n                        \n                    \n                \n            \n            \n                \ntotaloffsetminutes(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:241\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalseconds\n                        \n                    \n                \n            \n            \n                \ntotalseconds(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n            \n                \nyear(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:247\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandExpression.html":{"url":"classes/ExpandExpression.html","title":"class - ExpandExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                expand\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:152\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:191\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExpandExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        expand\n                        \n                    \n                \n            \n            \n                \n                    \n                    expand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void, current?: ExpandExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:161\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                ExpandExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F, opts?: (e?: ExpandField) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:202\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            F\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:177\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOptionNames } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport { Field, render, Renderable } from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOptionNames.select,\n      QueryOptionNames.expand,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.skip,\n      QueryOptionNames.top,\n      QueryOptionNames.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, { aliases, escape, prefix })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(this.field.clone(), values);\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOptionNames.select,\n      SelectExpression.select(opts, this.values[QueryOptionNames.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOptionNames.expand,\n      ExpandExpression.expand(opts, this.values[QueryOptionNames.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOptionNames.filter,\n      FilterExpression.filter(opts, this.values[QueryOptionNames.filter])\n    );\n  }\n\n  search(\n    opts: (builder: SearchExpressionBuilder) => SearchExpression\n  ) {\n    return this.option(\n      QueryOptionNames.search,\n      SearchExpression.search(opts, this.values[QueryOptionNames.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOptionNames.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOptionNames.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOptionNames.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOptionNames.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOptionNames.levels, n);\n  }\n\n  // Option Handler\n  private option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Readonly>;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new ExpandExpression(),\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: F, opts?: (e: ExpandField) => void): ExpandExpression {\n    let node = new ExpandField(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandField.html":{"url":"classes/ExpandField.html","title":"class - ExpandField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                expand\n                            \n                            \n                                filter\n                            \n                            \n                                levels\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                search\n                            \n                            \n                                select\n                            \n                            \n                                skip\n                            \n                            \n                                toJSON\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExpandField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expand\n                        \n                    \n                \n            \n            \n                \nexpand(opts: (builder: ExpandExpressionBuilder,current: ExpandExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:84\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: FilterExpressionBuilder,current: FilterExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:96\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        levels\n                        \n                    \n                \n            \n            \n                \nlevels(n: number | \"max\")\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                            number | \"max\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                    \n                    option(name: QueryOptionNames, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:142\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderBy\n                        \n                    \n                \n            \n            \n                \norderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:117\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(opts: (builder: SearchExpressionBuilder) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:108\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:72\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n            \n                \nskip(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        top\n                        \n                    \n                \n            \n            \n                \ntop(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:17\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { QueryOptionNames } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterExpression, FilterExpressionBuilder } from './filter';\nimport { OrderByExpression, OrderByExpressionBuilder } from './orderby';\nimport { SearchExpression, SearchExpressionBuilder } from './search';\nimport { SelectExpression, SelectExpressionBuilder } from './select';\nimport { Field, render, Renderable } from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOptionNames.select,\n      QueryOptionNames.expand,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.skip,\n      QueryOptionNames.top,\n      QueryOptionNames.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value: any = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, { aliases, escape, prefix })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(this.field.clone(), values);\n  }\n\n  select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOptionNames.select,\n      SelectExpression.select(opts, this.values[QueryOptionNames.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOptionNames.expand,\n      ExpandExpression.expand(opts, this.values[QueryOptionNames.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOptionNames.filter,\n      FilterExpression.filter(opts, this.values[QueryOptionNames.filter])\n    );\n  }\n\n  search(\n    opts: (builder: SearchExpressionBuilder) => SearchExpression\n  ) {\n    return this.option(\n      QueryOptionNames.search,\n      SearchExpression.search(opts, this.values[QueryOptionNames.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOptionNames.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOptionNames.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOptionNames.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOptionNames.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOptionNames.levels, n);\n  }\n\n  // Option Handler\n  private option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport type ExpandExpressionBuilder = {\n  t: Readonly>;\n  e: () => ExpandExpression;\n};\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static expand(\n    opts: (\n      builder: ExpandExpressionBuilder,\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new ExpandExpression(),\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: F, opts?: (e: ExpandField) => void): ExpandExpression {\n    let node = new ExpandField(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Expression.html":{"url":"classes/Expression.html","title":"class - Expression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Expression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/base.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                length\n                            \n                            \n                                    Abstract\n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Expression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Renderable } from './syntax';\n\nexport abstract class Expression implements Renderable {\n  protected _children: Renderable[];\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    this._children = children || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Expression';\n  }\n\n  abstract render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  }): string;\n\n  abstract clone(): Expression;\n\n  children() {\n    return this._children;\n  }\n\n  length() {\n    return this._children.length;\n  }\n\n  toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(public name: string, public fieldType: FieldType) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ]\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[]\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field-1.html":{"url":"classes/Field-1.html","title":"class - Field-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ProxyHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                    \n                    factory(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:23\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(target: T, key: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(target: T, key: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: boolean, escape: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        escape\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; name: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:105\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                geoDistance\n                            \n                            \n                                geoIntersects\n                            \n                            \n                                geoLength\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        geoDistance\n                        \n                    \n                \n            \n            \n                \ngeoDistance(value: T, point: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:275\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    point\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoIntersects\n                        \n                    \n                \n            \n            \n                \ngeoIntersects(value: T, polygon: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:278\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    polygon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoLength\n                        \n                    \n                \n            \n            \n                \ngeoLength(line: T, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:281\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    line\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:415\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:441\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Grouping\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:429\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:422\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; group: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:418\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:446\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:490\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Lambda\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:466\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:457\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { $type: any; op: string; values: {}; alias: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:453\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(field: T, value: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:504\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(field: T, value: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:500\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogicalOperators.html":{"url":"classes/LogicalOperators.html","title":"class - LogicalOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogicalOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                eq\n                            \n                            \n                                ge\n                            \n                            \n                                gt\n                            \n                            \n                                has\n                            \n                            \n                                in\n                            \n                            \n                                le\n                            \n                            \n                                lt\n                            \n                            \n                                ne\n                            \n                            \n                                not\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        eq\n                        \n                    \n                \n            \n            \n                \neq(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:357\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ge\n                        \n                    \n                \n            \n            \n                \nge(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:366\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gt\n                        \n                    \n                \n            \n            \n                \ngt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:386\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in\n                        \n                    \n                \n            \n            \n                \nin(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:389\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        le\n                        \n                    \n                \n            \n            \n                \nle(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:372\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lt\n                        \n                    \n                \n            \n            \n                \nlt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:369\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ne\n                        \n                    \n                \n            \n            \n                \nne(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:360\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:383\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotatable.html":{"url":"classes/ODataAnnotatable.html","title":"class - ODataAnnotatable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotatable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:30\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                            \n                                    Abstract\n                                union\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: Map, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                    \n                    data(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        union\n                        \n                    \n                \n            \n            \n                \n                    \n                    union(other: ODataAnnotations)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:30\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext\n  ) {}\n\n  attributes(\n    data: { [key: string]: any },\n    metadata: ODataMetadataType\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [key: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [key: string]: any }): { [key: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection'\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                deleteRefBy\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                jsonBatchFormat\n                            \n                            \n                                nonParenthesisForEmptyParameterFunction\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parserOptions\n                                \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:103\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:66\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:61\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRefBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"path\" | \"id\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:29\n                        \n                    \n\n            \n                \n                    Delete reference by path or by id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:45\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:53\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jsonBatchFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:41\n                        \n                    \n\n            \n                \n                    Use JSON Batch Format\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nonParenthesisForEmptyParameterFunction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:33\n                        \n                    \n\n            \n                \n                    No use parenthesis for empty parameters functions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:49\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:25\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:37\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:21\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:57\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parserOptions\n                    \n                \n\n                \n                    \n                        getparserOptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:123\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:134\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum: boolean;\n  /**\n   * Delete reference by path or by id\n   */\n  deleteRefBy: 'path' | 'id';\n  /**\n   * No use parenthesis for empty parameters functions\n   */\n  nonParenthesisForEmptyParameterFunction: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Use JSON Batch Format\n   */\n  jsonBatchFormat: boolean;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n    /**\n     * @link https://devblogs.microsoft.com/odata/extension-omit-null-value-properties-in-asp-net-core-odata/\n     */\n    omitNullValues?: boolean;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum || false;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy ?? 'path';\n    this.nonParenthesisForEmptyParameterFunction =\n      config.nonParenthesisForEmptyParameterFunction ?? false;\n    this.jsonBatchFormat = config.jsonBatchFormat ?? false;\n  }\n\n  get parserOptions(): ParserOptions {\n    return {\n      version: this.version,\n      stringAsEnum: this.stringAsEnum,\n      deleteRefBy: this.deleteRefBy,\n      nonParenthesisForEmptyParameterFunction:\n        this.nonParenthesisForEmptyParameterFunction,\n      ...this.accept,\n    };\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBaseService.html":{"url":"classes/ODataBaseService.html","title":"class - ODataBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient, name: string, apiNameOrEntityType?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/base.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiNameOrEntityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:69\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:75\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:81\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:87\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:26\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:44\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:100\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType: \"entity\" | \"entities\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:110\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"entity\" | \"entities\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/base.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { ODataClient } from '../client';\nimport {\n  ODataActionOptions,\n  ODataActionResource,\n  ODataEntities,\n  ODataEntity,\n  ODataFunctionOptions,\n  ODataFunctionResource,\n  ODataNavigationPropertyResource,\n  ODataProperty,\n  ODataQueryArgumentsOptions,\n} from '../resources';\n\nexport abstract class ODataBaseService {\n  constructor(\n    protected client: ODataClient,\n    protected name: string,\n    protected apiNameOrEntityType?: string\n  ) {}\n\n  get api() {\n    return this.client.apiFor(this.apiNameOrEntityType);\n  }\n\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entity',\n    options?: ODataFunctionOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entities',\n    options?: ODataFunctionOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property',\n    options?: ODataFunctionOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'none',\n    options?: ODataFunctionOptions\n  ): Observable;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataFunctionOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entity',\n    options?: ODataActionOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entities',\n    options?: ODataActionOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property',\n    options?: ODataActionOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'none',\n    options?: ODataActionOptions\n  ): Observable;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataActionOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity' | 'entities',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.fetch({ responseType: responseType as any, ...options });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                id\n                            \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                toJson\n                            \n                            \n                                toLegacy\n                            \n                            \n                                    \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:51\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(response: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(response: HttpResponseBase)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                HttpResponseBase\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJson\n                        \n                    \n                \n            \n            \n                \ntoJson()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { [name: string]: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLegacy\n                        \n                    \n                \n            \n            \n                \ntoLegacy()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n  HttpResponseBase,\n} from '@angular/common/http';\nimport {\n  concatMap,\n  firstValueFrom,\n  map,\n  Observable,\n  of,\n  Subject,\n  switchMap,\n} from 'rxjs';\nimport { ODataApi } from '../../api';\nimport {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport { PathSegmentNames } from '../../types';\nimport { Arrays } from '../../utils/arrays';\nimport { Http } from '../../utils/http';\nimport { Strings } from '../../utils/strings';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { ODataOptions } from './options';\n\nexport class ODataBatchRequest extends Subject {\n  id: string;\n  group: string;\n  constructor(public request: ODataRequest) {\n    super();\n    this.id = Strings.uniqueId({ prefix: 'r' });\n    this.group = Strings.uniqueId({ prefix: 'g' });\n  }\n\n  override toString() {\n    return this.toLegacy();\n  }\n\n  toLegacy() {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${this.request.pathWithParams} ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    if (this.request.method === 'GET' || this.request.method === 'DELETE') {\n      res.push(NEWLINE);\n    } else {\n      res.push(`${NEWLINE}${JSON.stringify(this.request.body)}`);\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  toJson() {\n    //TODO: Relative or Absolute url ?\n    let res: { [name: string]: any } = {\n      id: this.id,\n      method: this.request.method,\n      url: this.request.pathWithParams,\n      //'atomicityGroup': this.group\n      //\"dependsOn\": [\"g1\", \"g2\", \"r2\"]\n    };\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res['headers'] = headers\n        .keys()\n        .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`);\n    }\n    if (!(this.request.method === 'GET' || this.request.method === 'DELETE')) {\n      res['body'] = this.request.body;\n    }\n\n    return res;\n  }\n\n  onLoad(response: HttpResponseBase) {\n    if (response.ok) {\n      this.next(response);\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(response as HttpErrorResponse);\n    }\n  }\n\n  onError(response: HttpErrorResponse) {\n    this.error(response);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  private _responses: HttpResponseBase[] | null = null;\n  responses() {\n    return this._responses;\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegmentNames.batch, $BATCH);\n    return new ODataBatchResource(api, { segments });\n  }\n\n  override clone(): ODataBatchResource {\n    const batch = super.clone() as ODataBatchResource;\n    batch._requests = [...this._requests];\n    return batch;\n  }\n  //#endregion\n\n  private storeRequester() {\n    const current = this.api.requester;\n    // Switch to the batch requester\n    this.api.requester = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    return current;\n  }\n\n  private restoreRequester(\n    handler: ((req: ODataRequest) => Observable) | undefined\n  ) {\n    this.api.requester = handler;\n  }\n\n  /**\n   * Add to batch request\n   * @param ctx The context for the request\n   * @returns The result of execute the context\n   */\n  add(ctx: (batch: this) => R): R {\n    // Store original requester\n    var handler = this.storeRequester();\n    // Execute the context\n    const result = ctx(this);\n    // Restore original requester\n    this.restoreRequester(handler);\n\n    return result;\n  }\n\n  send(options?: ODataOptions): Observable> {\n    if (this.api.options.jsonBatchFormat) {\n      return this.sendJson(options);\n    } else {\n      return this.sendLegacy(options);\n    }\n  }\n\n  private sendJson(options?: ODataOptions): Observable> {\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n    });\n    return this.api\n      .request('POST', this, {\n        body: ODataBatchResource.buildJsonBody(this._requests),\n        responseType: 'json',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseJsonResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        })\n      );\n  }\n\n  private sendLegacy(\n    options?: ODataOptions\n  ): Observable> {\n    const bound = Strings.uniqueId({ prefix: BATCH_PREFIX });\n    const headers = Http.mergeHttpHeaders((options && options.headers) || {}, {\n      [ODATA_VERSION]: VERSION_4_0,\n      [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n      [ACCEPT]: MULTIPART_MIXED,\n    });\n    return this.api\n      .request>('POST', this, {\n        body: ODataBatchResource.buildLegacyBody(bound, this._requests),\n        responseType: 'text',\n        observe: 'response',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      })\n      .pipe(\n        map((response: ODataResponse) => {\n          if (this._responses == null) {\n            this._responses = [];\n          }\n          this._responses = [\n            ...this._responses,\n            ...ODataBatchResource.parseLegacyResponse(this._requests, response),\n          ];\n          Arrays.zip(this._requests, this._responses).forEach((tuple) => {\n            if (!tuple[0].isStopped) tuple[0].onLoad(tuple[1]);\n          });\n          return response;\n        })\n      );\n  }\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => R,\n    options?: ODataOptions\n  ): Observable]> {\n    let result = this.add(ctx);\n    return this.send(options).pipe(map((response) => [result, response]));\n  }\n\n  body() {\n    return ODataBatchResource.buildLegacyBody(\n      Strings.uniqueId({ prefix: BATCH_PREFIX }),\n      this._requests\n    );\n  }\n\n  json() {\n    return ODataBatchResource.buildJsonBody(this._requests);\n  }\n\n  static buildLegacyBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[]\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const request of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (request.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (request.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId({ prefix: CHANGESET_PREFIX });\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (request.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${request.toLegacy()}`);\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static buildJsonBody(requests: ODataBatchRequest[]): Object {\n    return {\n      requests: requests.map((request) => request.toJson()),\n    };\n  }\n\n  static parseLegacyResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ): HttpResponseBase[] {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = (response.body || '').split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      let request = requests[index].request;\n      let { code, message } = Http.parseResponseStatus(chunk[0]);\n      chunk = chunk.slice(1);\n\n      let headers: HttpHeaders = new HttpHeaders();\n      var index = 1;\n      for (; index = 200 && code ({\n            body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            statusText: message,\n            url: request.urlWithParams,\n          });\n    });\n  }\n\n  static parseJsonResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ): HttpResponseBase[] {\n    const responses: Object[] =\n      (response.body ? response.body : {})['responses'] ?? [];\n\n    return responses.map((response: any, index: number) => {\n      let request = requests[index].request;\n      let code = response['status'];\n\n      let headers: HttpHeaders = new HttpHeaders(response['headers']);\n      let body: string | { error: any; text: string } = response['body'];\n      if (code === 0) {\n        code = !!body ? 200 : 0;\n      }\n\n      let ok = code >= 200 && code ({\n            body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          })\n        : new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status: code,\n            url: request.urlWithParams,\n          });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:74\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:91\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:157\n                \n            \n\n\n            \n                \n                    Remove all cache entries\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:136\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:124\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:222\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:176\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:166\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:103\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:55\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegmentNames } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n            \n                Description\n            \n            \n                A cache entry that holds a payload, a last read time, and a timeout for the entry.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegmentNames } from '../types';\n\n/**\n * A cache entry that holds a payload, a last read time, and a timeout for the entry.\n * @param payload The payload to cache.\n * @param lastRead The last read time.\n * @param timeout The timeout.\n * @param tags Some tags to identify the entry.\n */\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  /**\n   * Using the resource on the request build an array of string to identify the scope of the request\n   * @param req The request with the resource to build the scope\n   * @returns Array of string to identify the scope of the request\n   */\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  /**\n   * Using the odata context on the response build an array of string to identify the tags of the response\n   * @param res The response to build the tags\n   * @returns Array of string to identify the tags of the response\n   */\n  tags(res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  /**\n   * Build an entry from a payload and some options\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param tags The tags for the entry\n   * @returns The entry to store in the cache\n   */\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  /**\n   * Build a key from store an entry in the cache\n   * @param names The names of the entry\n   * @returns The key for the entry\n   */\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  /**\n   * Put some payload in the cache\n   * @param name The name for the entry\n   * @param payload The payload to store in the cache\n   * @param timeout The timeout for the entry\n   * @param scope The scope for the entry\n   * @param tags The tags for the entry\n   */\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  /**\n   * Return the payload from the cache if it exists and is not expired\n   * @param name The name of the entry\n   * @param scope The scope of the entry\n   * @returns The payload of the entry\n   */\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  /**\n   * Remove all cache entries that are matching with the given options\n   * @param options The options to forget\n   */\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  /**\n   * Remove all cache entries\n   */\n  flush() {\n    this.entries = new Map>();\n  }\n\n  /**\n   * Check if the entry is expired\n   * @param entry The cache entry\n   * @returns Boolean indicating if the entry is expired\n   */\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:86\n                \n            \n\n\n            \n                \n                    Returns the binding parameter of the callable.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The binding parameter of the callable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:58\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:78\n                \n            \n\n\n            \n                \n                    Encode the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:68\n                \n            \n\n\n            \n                \n                    Serialize the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallableConfig, ParserOptions, Parser } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataCallableParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable extends ODataSchemaElement {\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({\n      options,\n      parserForType,\n      findOptionsForType,\n    });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:94\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigAsyncLoader.html":{"url":"classes/ODataConfigAsyncLoader.html","title":"class - ODataConfigAsyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigAsyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configs$: Observable | Observable[] | Observable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configs$\n                                                  \n                                                        \n                                                                        Observable | Observable[] | Observable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigLoader.html":{"url":"classes/ODataConfigLoader.html","title":"class - ODataConfigLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataConfigSyncLoader.html":{"url":"classes/ODataConfigSyncLoader.html","title":"class - ODataConfigSyncLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataConfigSyncLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/loaders.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ODataConfigLoader\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadConfigs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(passedConfigs: ApiConfig | ApiConfig[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/loaders.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        passedConfigs\n                                                  \n                                                        \n                                                                        ApiConfig | ApiConfig[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadConfigs\n                        \n                    \n                \n            \n            \n                \nloadConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/loaders.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiConfig } from './types';\n\nexport abstract class ODataConfigLoader {\n  abstract loadConfigs(): Observable;\n}\n\nexport class ODataConfigSyncLoader implements ODataConfigLoader {\n  constructor(private readonly passedConfigs: ApiConfig | ApiConfig[]) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n\n    return of([this.passedConfigs]);\n  }\n}\n\nexport class ODataConfigAsyncLoader implements ODataConfigLoader {\n  constructor(\n    private readonly configs$:\n      | Observable\n      | Observable[]\n      | Observable\n  ) {}\n\n  loadConfigs(): Observable {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n\n    const singleConfigOrArray = this.configs$ as Observable;\n\n    return singleConfigOrArray.pipe(\n      map((value: unknown) => {\n        if (Array.isArray(value)) {\n          return value as ApiConfig[];\n        }\n\n        return [value] as ApiConfig[];\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:161\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:169\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntitiesAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:153\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataEntitiesAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:173\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:177\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:181\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:185\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:189\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:194\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:199\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:207\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext\n  ) {}\n\n  attributes(\n    data: { [key: string]: any },\n    metadata: ODataMetadataType\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [key: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [key: string]: any }): { [key: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection'\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                property\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:71\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:79\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:127\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:128\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name, type: \"single\" | \"collection\")\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:129\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                            \"single\" | \"collection\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations | ODataEntitiesAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataEntityAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:63\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataEntityAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:83\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:87\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:91\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:95\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:99\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:103\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:107\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:111\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:115\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:120\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:140\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext\n  ) {}\n\n  attributes(\n    data: { [key: string]: any },\n    metadata: ODataMetadataType\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [key: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [key: string]: any }): { [key: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection'\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer extends ODataSchemaElement {\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(value: M)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:12\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ODataModel } from '../models/model';\nimport { EntityKey, ODataResource } from '../resources';\nimport { ODataBaseService } from './base';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entityType\n                            \n                            \n                                service\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet extends ODataSchemaElement {\n  entityType: string;\n  service: { new (...params: any[]): any };\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entityType = config.entityType;\n    this.service = config.service;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySetService.html":{"url":"classes/ODataEntitySetService.html","title":"class - ODataEntitySetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                entities\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                fetchAll\n                            \n                            \n                                    Public\n                                fetchMany\n                            \n                            \n                                    Public\n                                fetchOne\n                            \n                            \n                                    Public\n                                fetchOrCreate\n                            \n                            \n                                    Public\n                                modify\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySetSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:35\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:36\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(attrs: Partial, options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:87\n                \n            \n\n\n            \n                \n                    Create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        destroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:136\n                \n            \n\n\n            \n                \n                    Delete an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entities\n                        \n                    \n                \n            \n            \n                \n                    \n                    entities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:19\n                \n            \n\n\n            \n                \n                    Get the entity set resource for this service.\n\n\n                    \n                        Returns :         ODataEntitySetResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:27\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:56\n                \n            \n\n\n            \n                \n                    Get all entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMany(top: number, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:65\n                \n            \n\n\n            \n                \n                    Get entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    top\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOne(options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:78\n                \n            \n\n\n            \n                \n                    Get an entity from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOrCreate(key: EntityKey, attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:154\n                \n            \n\n\n            \n                \n                    Get or create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        modify\n                        \n                    \n                \n            \n            \n                \n                    \n                    modify(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:119\n                \n            \n\n\n            \n                \n                    Patch an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:176\n                \n            \n\n\n            \n                \n                    Save an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:101\n                \n            \n\n\n            \n                \n                    Update an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySetSchema\n                    \n                \n\n                \n                    \n                        getentitySetSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:48\n                                \n                            \n                    \n                        \n                                The schema for the entity set.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ODataCollection } from '../models/collection';\nimport { ODataModel } from '../models/model';\nimport {\n  EntityKey,\n  ODataEntity,\n  ODataEntityResource,\n  ODataEntitySetResource,\n  ODataOptions,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\nexport class ODataEntitySetService extends ODataEntityService {\n  /**\n   * Get the entity set resource for this service.\n   */\n  public entities(): ODataEntitySetResource {\n    return this.client.entitySet(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(key?: EntityKey): ODataEntityResource {\n    return this.entities().entity(key);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M): void;\n  public attach>>(model: C): void;\n  public attach(model: any): void {\n    if (model instanceof ODataModel) {\n      model.attach(this.entities().entity());\n    } else if (model instanceof ODataCollection) {\n      model.attach(this.entities());\n    }\n  }\n\n  /**\n   * The schema for the entity set.\n   */\n  get entitySetSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Get all entities from the entity set.\n   * @param options The options for the request.\n   */\n  public fetchAll(options?: ODataOptions) {\n    return this.entities().fetchAll(options);\n  }\n\n  /**\n   * Get entities from the entity set.\n   * @param withCount Get the count of the entities.\n   * @param options The options for the request.\n   */\n  public fetchMany(\n    top: number,\n    options?: ODataOptions & { withCount?: boolean }\n  ) {\n    return this.entities().fetchMany(top, options);\n  }\n\n  /**\n   * Get an entity from the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOne(options?: ODataOptions & { etag?: string }) {\n    return this.entities().fetchOne(options);\n  }\n\n  /**\n   * Create an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param options The options for the request.\n   */\n  public create(\n    attrs: Partial,\n    options?: ODataOptions\n  ): Observable> {\n    return this.entities().create(attrs, options);\n  }\n\n  /**\n   * Update an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('update: Resource without key'));\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public modify(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('modify: Resource without key'));\n    return res.modify(attrs, options);\n  }\n\n  /**\n   * Delete an entity in the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public destroy(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ) {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('destroy: Resource without key'));\n    return res.destroy(options);\n  }\n\n  //#region Shortcuts\n  /**\n   * Get or create an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOrCreate(\n    key: EntityKey,\n    attrs: Partial,\n    { etag, ...options }: { etag?: string } & ODataOptions = {}\n  ): Observable> {\n    return this.entity(key)\n      .fetch({ etag, ...options })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          if (error.status === 404) return this.create(attrs, options);\n          else return throwError(() => error);\n        })\n      );\n  }\n\n  /**\n   * Save an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param method The method to use.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public save(\n    attrs: Partial,\n    {\n      etag,\n      method,\n      ...options\n    }: {\n      etag?: string;\n      method?: 'create' | 'update' | 'modify';\n    } & ODataOptions = {}\n  ) {\n    let schema = this.structuredTypeSchema;\n    if (method === undefined && schema !== undefined && schema.isCompoundKey())\n      return throwError(\n        () =>\n          new Error(\n            'save: Composite key require a specific method, use create/update/patch'\n          )\n      );\n    let key = schema && schema.resolveKey(attrs);\n    if (method === undefined) method = key !== undefined ? 'update' : 'create';\n    if ((method === 'update' || method === 'modify') && key === undefined)\n      return throwError(\n        () => new Error(\"save: Can't update/patch entity without key\")\n      );\n    return method === 'create'\n      ? this.create(attrs, options)\n      : method === 'modify'\n      ? this.modify(key, attrs, { etag, ...options })\n      : this.update(key, attrs, { etag, ...options });\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this._fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {}\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag)\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {}\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                unpack\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:63\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:83\n                \n            \n\n\n            \n                \n                    Encode the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(enu: string | E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:44\n                \n            \n\n\n            \n                \n                    Find a field by name or value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enu\n                                    \n                                            string | E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name or value of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given name or value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:35\n                \n            \n\n\n            \n                \n                    Returns the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        The fields of the enum type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:73\n                \n            \n\n\n            \n                \n                    Serialize the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EnumTypeConfig, Parser, ParserOptions } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType extends ODataSchemaElement {\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: E } | { [value: number]: string };\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parser.configure({ options, parserForType, findOptionsForType });\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return this.parser.fields(value);\n  }\n\n  /**\n   * Find a field by name or value.\n   * @param enu The name or value of the field\n   * @returns The field with the given name or value\n   */\n  field(enu: string | E) {\n    return this.parser.field(enu);\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.parser.mapFields(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: ParserOptions): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: ParserOptions): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: ParserOptions): any {\n    return this.parser.encode(value, options);\n  }\n\n  unpack(value: E) {\n    return this.parser.unpack(value);\n  }\n\n  pack(value: number[]) {\n    return this.parser.pack(value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                value\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                titleize\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     E\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value))\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toNames(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this._fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _fields\n                            \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                field\n                            \n                            \n                                fields\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                mapFields\n                            \n                            \n                                pack\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                unpack\n                            \n                            \n                                validate\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(nameValue: string | E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nameValue\n                                    \n                                            string | E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields(value?: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:91\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        R\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pack\n                        \n                    \n                \n            \n            \n                \npack(value: number[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unpack\n                        \n                    \n                \n            \n            \n                \nunpack(value: E)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    member\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  ParserOptions,\n  Parser,\n} from '../../types';\nimport { Enums } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: E;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: E } | { [value: number]: string };\n  private _fields: ODataEnumTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this._fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  fields(value?: E): ODataEnumTypeFieldParser[] {\n    return [\n      ...this._fields.filter(\n        (f) => value === undefined || Boolean((f.value) & (value))\n      ),\n    ];\n  }\n\n  field(nameValue: string | E) {\n    let field = this.fields().find(\n      (f) => f.name === nameValue || f.value === nameValue\n    );\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => R) {\n    return this.fields().map(mapper);\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: ParserOptions): E {\n    // string -> number\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: E, options?: ParserOptions): string | undefined {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.flags) {\n      let names = Enums.toNames(this.members, value);\n      if (names.length === 0) names = [`${value}`];\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      let name = Enums.toName(this.members, value);\n      if (name === undefined) name = `${value}`;\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: E, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const serialized = this.serialize(value, parserOptions);\n    if (serialized === undefined) return undefined;\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this._fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n\n  unpack(value: E): number[] {\n    return Enums.toValues(this.members, value);\n  }\n\n  pack(value: number[]): E {\n    return Enums.toValues(this.members, value).reduce(\n      (acc, v) => acc | v,\n      0\n    ) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:29\n\n                \n            \n\n\n            \n                \n                    Restore the response from the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to get the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        The response from the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:14\n\n                \n            \n\n\n            \n                \n                    Store the response in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to store the response\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to store in the cache\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:74\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:91\n\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:157\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:136\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:124\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:187\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:222\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:176\n\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:166\n\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:103\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:55\n\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    let scope = this.scope(req);\n    let tags = this.tags(res);\n    this.put(req.cacheKey, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    let scope = this.scope(req);\n    return this.get(req.cacheKey, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:22\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        flush\n                        \n                    \n                \n            \n            \n                \n                    \n                    flush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:54\n\n                \n            \n\n\n            \n                \n                    Flush the cache and clean the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:79\n\n                \n            \n\n\n            \n                \n                    Restore the response from the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to get the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        The response from the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:64\n\n                \n            \n\n\n            \n                \n                    Store the response in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to store the response\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to store in the cache\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:45\n                \n            \n\n\n            \n                \n                    Restore the cache from the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:35\n                \n            \n\n\n            \n                \n                    Store the cache in the storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:74\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Build an entry from a payload and some options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        The entry to store in the cache\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:91\n\n                \n            \n\n\n            \n                \n                    Build a key from store an entry in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The names of the entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The key for the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:136\n\n                \n            \n\n\n            \n                \n                    Remove all cache entries that are matching with the given options\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:124\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Return the payload from the cache if it exists and is not expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name of the entry\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The payload of the entry\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:187\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:222\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:176\n\n                \n            \n\n\n            \n                \n                    Using the request, handle the fetching of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request to fetch\n\n                                    \n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Observable of the response\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:166\n\n                \n            \n\n\n            \n                \n                    Check if the entry is expired\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The cache entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Boolean indicating if the entry is expired\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:103\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Put some payload in the cache\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The name for the entry\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The payload to store in the cache\n\n                                    \n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n                    Using the resource on the request build an array of string to identify the scope of the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request with the resource to build the scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the scope of the request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:55\n\n                \n            \n\n\n            \n                \n                    Using the odata context on the response build an array of string to identify the tags of the response\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The response to build the tags\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Array of string to identify the tags of the response\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(passedConfig: PassedInitialConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/module.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    passedConfig\n                                    \n                                                PassedInitialConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                    Optional\n                                parserOptions\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                field\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parserOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParserOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEnumTypeParser\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: ParserOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ParserOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataStructuredTypeParser\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  ParserOptions,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  parserOptions?: ParserOptions;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): R {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) =>\n      p.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJSON\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPathSegments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(escape: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    escape\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PATH_SEPARATOR } from '../../constants';\nimport { PathSegmentNames } from '../../types';\nimport { Objects } from '../../utils';\nimport { buildPathAndQuery, raw } from '../query';\nimport { EntityKey } from '../resource';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegmentNames;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment,\n  escape: boolean = false\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegmentNames.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({\n          func: { [segment.path]: segment.parameters },\n          escape,\n        })\n      : buildPathAndQuery({ func: segment.path, escape });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    return [path, params];\n  } else {\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key, escape }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams(escape: boolean = false): [string, { [name: string]: any }] {\n    const result = this._segments.reduce(\n      (acc, segment) => {\n        const [path, params] = pathSegmentsBuilder(segment, escape);\n        acc.paths.push(path);\n        acc.params = Object.assign(acc.params, params);\n        return acc;\n      },\n      { paths: [] as string[], params: {} as { [name: string]: any } }\n    );\n    return [result.paths.join(PATH_SEPARATOR), result.params];\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegmentNames.entitySet,\n            PathSegmentNames.navigationProperty,\n            PathSegmentNames.property,\n          ].indexOf(s.name) !== -1\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                union\n                            \n                            \n                                attributes\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        union\n                        \n                    \n                \n            \n            \n                \nunion(other: ODataPropertyAnnotations)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:41\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                ODataPropertyAnnotations\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: Map = new Map(),\n    protected context?: ODataContext\n  ) {}\n\n  attributes(\n    data: { [key: string]: any },\n    metadata: ODataMetadataType\n  ): Partial {\n    return this.helper.attributes(data, metadata) as Partial;\n  }\n\n  update(data: { [key: string]: any }) {\n    this.annotations = new Map([\n      ...this.annotations,\n      ...this.helper.annotations(data),\n    ]);\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract union(other: ODataAnnotations): ODataAnnotations;\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [key: string]: any }): { [key: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  union(other: ODataPropertyAnnotations): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  union(other: ODataEntityAnnotations): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: Map>;\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: keyof T, type: 'collection'): ODataEntitiesAnnotations;\n  property(name: keyof T, type: 'single'): ODataEntityAnnotations;\n  property(\n    name: keyof T,\n    type: 'single' | 'collection'\n  ): ODataEntityAnnotations | ODataEntitiesAnnotations {\n    const props = this.properties.get(name);\n    return type === 'collection'\n      ? new ODataEntitiesAnnotations(this.helper, props)\n      : new ODataEntityAnnotations(this.helper, props);\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  union(other: ODataEntitiesAnnotations): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map([...this.annotations, ...other.annotations]),\n      Object.assign({}, this.context, other.context)\n    );\n  }\n\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      new Map(this.annotations),\n      this.context\n    );\n  }\n\n  data(data: { [key: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(\n      /[&?]{1}\\$skiptoken=([\\d\\w\\s'\\-]+)/\n    );\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [key: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptionHandler.html":{"url":"classes/ODataQueryOptionHandler.html","title":"class - ODataQueryOptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assertArray\n                            \n                            \n                                    Private\n                                assertObject\n                            \n                            \n                                assign\n                            \n                            \n                                at\n                            \n                            \n                                clear\n                            \n                            \n                                empty\n                            \n                            \n                                every\n                            \n                            \n                                find\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                            \n                                push\n                            \n                            \n                                remove\n                            \n                            \n                                set\n                            \n                            \n                                some\n                            \n                            \n                                toJSON\n                            \n                            \n                                unset\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(o: Map, n: QueryOptionNames)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                  \n                                                        \n                                                                        Map\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        n\n                                                  \n                                                        \n                                                                        QueryOptionNames\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertArray()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     any[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertObject(create: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    create\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        assign\n                        \n                    \n                \n            \n            \n                \nassign(values: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:197\n                \n            \n\n\n            \n                \n                    Merge values from object into the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to merge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        at\n                        \n                    \n                \n            \n            \n                \nat(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:109\n                \n            \n\n\n            \n                \n                    Return value at index of the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Index of the value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:206\n                \n            \n\n\n            \n                \n                    Clear the managed odata query option.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        empty\n                        \n                    \n                \n            \n            \n                \nempty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:56\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the managed odata query option is empty.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        True if the managed odata query option is empty.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        every\n                        \n                    \n                \n            \n            \n                \nevery(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(path: string, def?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:159\n                \n            \n\n\n            \n                \n                    Get the value for path from the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The path from get the value\n\n                                    \n                                \n                                \n                                    def\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default if not found\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:187\n                \n            \n\n\n            \n                \n                    Test if the managed odata query option has the value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The path fot test if the value is set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Boolean indicating if the value is set\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:83\n                \n            \n\n\n            \n                \n                    Push value to the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to push\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:91\n                \n            \n\n\n            \n                \n                    Remove value from the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(path: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:148\n                \n            \n\n\n            \n                \n                    Set the value for path in the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path for set the value\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        some\n                        \n                    \n                \n            \n            \n                \nsome(predicate: (value: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:48\n                \n            \n\n\n            \n                \n                    Converts the managed odata query option to a json object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unset\n                        \n                    \n                \n            \n            \n                \nunset(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:168\n                \n            \n\n\n            \n                \n                    Unset the value for path in the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue(v?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:66\n                \n            \n\n\n            \n                \n                    Get or Set the value of the managed odata query option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The value to set.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:40\n                                \n                            \n                    \n                        \n                                The name of the managed odata query option.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { QueryOptionNames } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  alias,\n  Expand,\n  Filter,\n  OrderBy,\n  Select,\n  Transform,\n  normalizeValue,\n  raw,\n  duration,\n  binary,\n} from './builder';\nimport {\n  ComputeExpression,\n  ComputeExpressionBuilder,\n  FilterExpression,\n  FilterExpressionBuilder,\n  OrderByExpression,\n  OrderByExpressionBuilder,\n  SearchExpression,\n  SearchExpressionBuilder,\n  ExpandExpression,\n  ExpandExpressionBuilder,\n  SelectExpression,\n  SelectExpressionBuilder,\n} from './expressions';\nimport type { ODataQueryArguments, ODataQueryOptions } from './options';\n\nexport class ODataQueryOptionHandler {\n  constructor(\n    private o: Map,\n    private n: QueryOptionNames\n  ) {}\n\n  /**\n   * The name of the managed odata query option.\n   */\n  get name() {\n    return this.n;\n  }\n\n  /**\n   * Converts the managed odata query option to a json object.\n   * @returns {any}\n   */\n  toJSON() {\n    return this.o.get(this.n);\n  }\n\n  /**\n   * Returns a boolean indicating if the managed odata query option is empty.\n   * @returns True if the managed odata query option is empty.\n   */\n  empty() {\n    return Types.isEmpty(this.o.get(this.n));\n  }\n\n  //#region Primitive Value\n  /**\n   * Get or Set the value of the managed odata query option.\n   * @param v The value to set.\n   * @returns\n   */\n  value(v?: any) {\n    if (v !== undefined) this.o.set(this.n, v);\n    return this.o.get(this.n);\n  }\n  //#endregion\n\n  //#region Array Value\n  private assertArray(): any[] {\n    if (!Types.isArray(this.o.get(this.n)))\n      this.o.set(this.n, this.o.has(this.n) ? [this.o.get(this.n)] : []);\n    return this.o.get(this.n);\n  }\n\n  /**\n   * Push value to the managed odata query option.\n   * @param value Value to push\n   */\n  push(value: any) {\n    this.assertArray().push(value);\n  }\n\n  /**\n   * Remove value from the managed odata query option.\n   * @param value Value to remove\n   */\n  remove(value: any) {\n    this.o.set(\n      this.n,\n      this.assertArray().filter((v) => v !== value)\n    );\n    // If only one and not is array... down to value\n    if (\n      this.o.get(this.n).length === 1 &&\n      !Types.isArray(this.o.get(this.n)[0])\n    )\n      this.o.set(this.n, this.o.get(this.n)[0]);\n  }\n\n  /**\n   * Return value at index of the managed odata query option.\n   * @param index Index of the value\n   * @returns The value\n   */\n  at(index: number) {\n    return this.assertArray()[index];\n  }\n\n  some(predicate: (value: any) => boolean) {\n    return this.assertArray().some(predicate);\n  }\n\n  every(predicate: (value: any) => boolean) {\n    return this.assertArray().every(predicate);\n  }\n\n  find(predicate: (value: any) => boolean) {\n    return this.assertArray().find(predicate);\n  }\n  //#endregion\n\n  //#region HashMap Value\n  private assertObject(create: boolean): { [name: string]: any } {\n    if (\n      !Types.isArray(this.o.get(this.n)) &&\n      Types.isPlainObject(this.o.get(this.n))\n    ) {\n      return this.o.get(this.n);\n    }\n    let arr = this.assertArray();\n    let obj = arr.find((v) => Types.isPlainObject(v));\n    if (!obj && create) {\n      obj = {};\n      arr.push(obj);\n    }\n    return obj;\n  }\n\n  /**\n   * Set the value for path in the managed odata query option.\n   * @param path Path for set the value\n   * @param value Value to set\n   */\n  set(path: string, value: any) {\n    let obj = this.assertObject(true);\n    Objects.set(obj, path, value);\n  }\n\n  /**\n   * Get the value for path from the managed odata query option.\n   * @param path The path from get the value\n   * @param def Default if not found\n   * @returns\n   */\n  get(path: string, def?: any): any {\n    let obj = this.assertObject(false) || {};\n    return Objects.get(obj, path, def);\n  }\n\n  /**\n   * Unset the value for path in the managed odata query option.\n   * @param path\n   */\n  unset(path: string) {\n    let obj = this.assertObject(true);\n    Objects.unset(obj, path);\n\n    if (Types.isArray(this.o.get(this.n))) {\n      this.o.set(\n        this.n,\n        this.o.get(this.n).filter((v: any) => !Types.isEmpty(v))\n      );\n      if (this.o.get(this.n).length === 1)\n        this.o.set(this.n, this.o.get(this.n)[0]);\n    }\n  }\n\n  /**\n   * Test if the managed odata query option has the value.\n   * @param path The path fot test if the value is set\n   * @returns Boolean indicating if the value is set\n   */\n  has(path: string) {\n    let obj = this.assertObject(false) || {};\n    return Objects.has(obj, path);\n  }\n\n  /**\n   * Merge values from object into the managed odata query option.\n   * @param values Object to merge\n   * @returns\n   */\n  assign(values: { [attr: string]: any }) {\n    let obj = this.assertObject(true);\n    return Objects.merge(obj, values);\n  }\n  //#endregion\n\n  /**\n   * Clear the managed odata query option.\n   */\n  clear() {\n    this.o.delete(this.n);\n  }\n}\n\nexport class ODataQueryOptionsHandler {\n  constructor(protected options: ODataQueryOptions) {}\n\n  /**\n   * Create a raw odata value\n   * @param value The value to raw\n   * @returns The raw value\n   */\n  raw(value: any) {\n    return raw(value);\n  }\n\n  /**\n   * Create a new odata alias parameter\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_ParameterAliases\n   * @param value The value of the alias\n   * @param name The name of the alias\n   * @returns The alias\n   */\n  alias(value: any, name?: string) {\n    return alias(value, name);\n  }\n\n  /**\n   * Create a duration odata value\n   * @param value The value to duration\n   * @returns The duration value\n   */\n  duration(value: any) {\n    return duration(value);\n  }\n\n  /**\n   * Create a binary odata value\n   * @param value The value to binary\n   * @returns The binary value\n   */\n  binary(value: any) {\n    return binary(value);\n  }\n\n  /**\n   * Normalize the given value to a valid odata value\n   * @param value The value to normalize\n   * @returns The normalized value\n   */\n  normalize(value: any) {\n    return normalizeValue(value);\n  }\n\n  /**\n   * Build and return a handler for modifying the $select option.\n   * If opts is given then set te value as new value for $select.\n   * @param opts Select value or builder function for SelectExpression\n   */\n  select(opts: SelectExpressionBuilder): SelectExpression;\n  select(opts: Select): ODataQueryOptionHandler;\n  select(): ODataQueryOptionHandler;\n  select(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.select,\n        SelectExpression.select(\n          opts,\n          this.options.expression(QueryOptionNames.select)\n        )\n      );\n    }\n    return this.options.option>(QueryOptionNames.select, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $expand option.\n   * If opts is given then set te value as new value for $expand.\n   * @param opts Expand value or builder function for ExpandExpression\n   */\n  expand(opts: ExpandExpressionBuilder): ExpandExpression;\n  expand(opts: Expand): ODataQueryOptionHandler;\n  expand(): ODataQueryOptionHandler;\n  expand(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.expand,\n        ExpandExpression.expand(\n          opts,\n          this.options.expression(QueryOptionNames.expand)\n        )\n      );\n    }\n    return this.options.option>(QueryOptionNames.expand, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $compute option.\n   * If opts is given then set te value as new value for $compute.\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptioncompute\n   * @param opts string value or builder function for ComputeExpression\n   */\n  compute(\n    opts: (\n      builder: ComputeExpressionBuilder,\n      current?: ComputeExpression\n    ) => ComputeExpression\n  ): ComputeExpression;\n  compute(opts: string): ODataQueryOptionHandler;\n  compute(): ODataQueryOptionHandler;\n  compute(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.compute,\n        ComputeExpression.compute(\n          opts,\n          this.options.expression(QueryOptionNames.compute)\n        )\n      );\n    }\n    return this.options.option(QueryOptionNames.compute, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $format option.\n   * If opts is given then set te value as new value for $format.\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptionformat\n   * @param opts string value for format\n   */\n  format(opts: string): ODataQueryOptionHandler;\n  format(): ODataQueryOptionHandler;\n  format(opts?: string): any {\n    return this.options.option(QueryOptionNames.format, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $transform option.\n   * If opts is given then set te value as new value for $transform.\n   * @param opts string value for transform\n   */\n  transform(opts: Transform): ODataQueryOptionHandler;\n  transform(): ODataQueryOptionHandler;\n  transform(opts?: Transform): any {\n    return this.options.option>(QueryOptionNames.transform, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $search option.\n   * If opts is given then set te value as new value for $search.\n   * @param opts string value or builder function for SearchExpression\n   */\n  search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression\n  ): SearchExpression;\n  search(opts: string): ODataQueryOptionHandler;\n  search(): ODataQueryOptionHandler;\n  search(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.search,\n        SearchExpression.search(\n          opts,\n          this.options.expression(QueryOptionNames.search)\n        )\n      );\n    }\n    return this.options.option(QueryOptionNames.search, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $filter option.\n   * If opts is given then set te value as new value for $filter.\n   * @param opts Filter value or builder function for FilterExpression\n   */\n  filter(\n    opts: (\n      builder: FilterExpressionBuilder,\n      current?: FilterExpression\n    ) => FilterExpression\n  ): FilterExpression;\n  filter(opts: Filter): ODataQueryOptionHandler;\n  filter(): ODataQueryOptionHandler;\n  filter(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.filter,\n        FilterExpression.filter(\n          opts,\n          this.options.expression(QueryOptionNames.filter)\n        )\n      );\n    }\n    return this.options.option>(QueryOptionNames.filter, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $orderby option.\n   * If opts is given then set te value as new value for $orderby.\n   * @param opts OrderBy value or builder function for OrderByExpression\n   */\n  orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ): OrderByExpression;\n  orderBy(opts: OrderBy): ODataQueryOptionHandler;\n  orderBy(): ODataQueryOptionHandler;\n  orderBy(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.option(\n        QueryOptionNames.orderBy,\n        OrderByExpression.orderBy(\n          opts,\n          this.options.expression(QueryOptionNames.orderBy)\n        )\n      );\n    }\n    return this.options.option>(QueryOptionNames.orderBy, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $top option.\n   * If opts is given then set te value as new value for $top.\n   * @param opts number value\n   */\n  top(opts: number): ODataQueryOptionHandler;\n  top(): ODataQueryOptionHandler;\n  top(opts?: number): any {\n    return this.options.option(QueryOptionNames.top, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $skip option.\n   * If opts is given then set te value as new value for $skip.\n   * @param opts number value\n   */\n  skip(opts: number): ODataQueryOptionHandler;\n  skip(): ODataQueryOptionHandler;\n  skip(opts?: number): any {\n    return this.options.option(QueryOptionNames.skip, opts);\n  }\n\n  /**\n   * Build and return a handler for modifying the $skiptoken option.\n   * If opts is given then set te value as new value for $skiptoken.\n   * @param opts string value\n   */\n  skiptoken(opts: string): ODataQueryOptionHandler;\n  skiptoken(): ODataQueryOptionHandler;\n  skiptoken(opts?: string): any {\n    return this.options.option(QueryOptionNames.skiptoken, opts);\n  }\n\n  /**\n   * Shortcut for set $top, $skip, $skiptoken.\n   * @param param0 skip or top or skiptoken\n   */\n  paging({\n    skip,\n    skiptoken,\n    top,\n  }: {\n    skip?: number | null;\n    skiptoken?: string | null;\n    top?: number | null;\n  } = {}) {\n    if (skiptoken !== undefined) {\n      if (skiptoken !== null) {\n        this.skiptoken(skiptoken);\n      } else {\n        this.options.remove(QueryOptionNames.skiptoken);\n      }\n    }\n    if (skip !== undefined) {\n      if (skip !== null) {\n        this.skip(skip);\n      } else {\n        this.options.remove(QueryOptionNames.skip);\n      }\n    }\n    if (top !== undefined) {\n      if (top !== null) {\n        this.top(top);\n      } else {\n        this.options.remove(QueryOptionNames.top);\n      }\n    }\n  }\n\n  /**\n   * Shortcut for clear pagination by unset $top, $skip, $skiptoken.\n   */\n  clearPaging() {\n    this.options.remove(QueryOptionNames.skip);\n    this.options.remove(QueryOptionNames.top);\n    this.options.remove(QueryOptionNames.skiptoken);\n  }\n\n  /**\n   * Shortcut for clear query.\n   */\n  clear() {\n    this.options.clear();\n  }\n\n  /**\n   * Retrun the query.\n   */\n  query() {\n    return this.options.toQueryArguments();\n  }\n\n  /**\n   * Apply the given query options to the current query.\n   * @param query The query to be applied.\n   */\n  apply(query: ODataQueryArguments) {\n    if (query.select !== undefined) {\n      if (query.select instanceof SelectExpression) {\n        this.options.expression(\n          QueryOptionNames.select,\n          query.select as SelectExpression\n        );\n      } else if (query.select !== null) {\n        this.options.option(QueryOptionNames.select, query.select);\n      } else {\n        this.options.remove(QueryOptionNames.select);\n      }\n    }\n    if (query.expand !== undefined) {\n      if (query.expand instanceof ExpandExpression) {\n        this.options.expression(\n          QueryOptionNames.expand,\n          query.expand as ExpandExpression\n        );\n      } else if (query.expand !== null) {\n        this.options.option(QueryOptionNames.expand, query.expand);\n      } else {\n        this.options.remove(QueryOptionNames.expand);\n      }\n    }\n    if (query.compute !== undefined) {\n      if (query.compute instanceof ComputeExpression) {\n        this.options.expression(\n          QueryOptionNames.compute,\n          query.compute as ComputeExpression\n        );\n      } else if (query.compute !== null) {\n        this.options.option(QueryOptionNames.compute, query.compute);\n      } else {\n        this.options.remove(QueryOptionNames.compute);\n      }\n    }\n    if (query.transform !== undefined) {\n      if (query.transform !== null) {\n        this.options.option(QueryOptionNames.transform, query.transform);\n      } else {\n        this.options.remove(QueryOptionNames.transform);\n      }\n    }\n    if (query.search !== undefined) {\n      if (query.search instanceof SearchExpression) {\n        this.options.expression(\n          QueryOptionNames.search,\n          query.search as SearchExpression\n        );\n      } else if (query.search !== null) {\n        this.options.option(QueryOptionNames.search, query.search);\n      } else {\n        this.options.remove(QueryOptionNames.search);\n      }\n    }\n    if (query.filter !== undefined) {\n      if (query.filter instanceof FilterExpression) {\n        this.options.expression(\n          QueryOptionNames.filter,\n          query.filter as FilterExpression\n        );\n      } else if (query.filter !== null) {\n        this.options.option(QueryOptionNames.filter, query.filter);\n      } else {\n        this.options.remove(QueryOptionNames.filter);\n      }\n    }\n    if (query.orderBy !== undefined) {\n      if (query.orderBy instanceof OrderByExpression) {\n        this.options.expression(\n          QueryOptionNames.orderBy,\n          query.orderBy as OrderByExpression\n        );\n      } else if (query.orderBy !== null) {\n        this.options.option(QueryOptionNames.orderBy, query.orderBy);\n      } else {\n        this.options.remove(QueryOptionNames.orderBy);\n      }\n    }\n    this.paging(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJSON\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values?: Map | literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                        Map | literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:40\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:127\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         ODataQueryOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(key: QueryOptionNames, exp?: Expression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exp\n                                    \n                                                Expression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(key: QueryOptionNames)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(keys: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    keys\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(key: QueryOptionNames, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:138\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(escape: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    escape\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(keys: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    keys\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataQueryArguments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOptionNames } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  buildPathAndQuery,\n  Expand,\n  Filter,\n  OrderBy,\n  QueryCustomType,\n  Select,\n  Transform,\n} from './builder';\nimport {\n  ComputeExpression,\n  Expression,\n  FilterExpression,\n  OrderByExpression,\n  SearchExpression,\n} from './expressions';\nimport { ExpandExpression } from './expressions/expand';\nimport { SelectExpression } from './expressions/select';\nimport { ODataQueryOptionHandler } from './handlers';\n\nexport type ODataQueryArguments = {\n  [QueryOptionNames.select]?: Select | SelectExpression | null;\n  [QueryOptionNames.expand]?: Expand | ExpandExpression | null;\n  [QueryOptionNames.compute]?: string | ComputeExpression | null;\n  [QueryOptionNames.filter]?: Filter | FilterExpression | null;\n  [QueryOptionNames.search]?: string | SearchExpression | null;\n  [QueryOptionNames.transform]?: Transform | null;\n  [QueryOptionNames.orderBy]?: OrderBy | OrderByExpression | null;\n  [QueryOptionNames.top]?: number | null;\n  [QueryOptionNames.skip]?: number | null;\n  [QueryOptionNames.skiptoken]?: string | null;\n  [QueryOptionNames.format]?: string | null;\n  [QueryOptionNames.levels]?: number | 'max' | null;\n  [QueryOptionNames.count]?: boolean | null;\n};\n\nexport class ODataQueryOptions {\n  values: Map;\n\n  constructor(values?: Map | { [name: string]: any }) {\n    this.values =\n      values instanceof Map\n        ? values\n        : new Map(\n            Object.entries(values || {}) as Array\n          );\n  }\n\n  // Params\n  pathAndParams(escape: boolean = false): [string, { [name: string]: any }] {\n    let aliases: QueryCustomType[] = [];\n    let options = [\n      QueryOptionNames.select,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.compute,\n      QueryOptionNames.transform,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.top,\n      QueryOptionNames.skip,\n      QueryOptionNames.skiptoken,\n      QueryOptionNames.expand,\n      QueryOptionNames.format,\n      QueryOptionNames.levels,\n      QueryOptionNames.count,\n    ]\n      .filter((key) => !Types.isEmpty(this.values.get(key)))\n      .reduce((acc, key) => {\n        let value = this.values.get(key);\n        if (\n          Types.rawType(value).endsWith('Expression') ||\n          (Types.isArray(value) &&\n            value.some((v: any) => Types.rawType(v).endsWith('Expression')))\n        ) {\n          value = Types.isArray(value)\n            ? value.map((v: Expression) =>\n                Types.rawType(v).endsWith('Expression')\n                  ? v.render({ aliases })\n                  : v\n              )\n            : (value as Expression).render({ aliases });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n\n    return buildPathAndQuery({ ...options, aliases, escape });\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return [...this.values.keys()].reduce((acc, key) => {\n      let value = this.values.get(key);\n      value = 'toJSON' in value ? value.toJSON() : value;\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this.values.get(QueryOptionNames.select) || null,\n      expand: this.values.get(QueryOptionNames.expand) || null,\n      transform: this.values.get(QueryOptionNames.transform) || null,\n      compute: this.values.get(QueryOptionNames.compute) || null,\n      search: this.values.get(QueryOptionNames.search) || null,\n      filter: this.values.get(QueryOptionNames.filter) || null,\n      orderBy: this.values.get(QueryOptionNames.orderBy) || null,\n      top: this.values.get(QueryOptionNames.top) || null,\n      skip: this.values.get(QueryOptionNames.skip) || null,\n      skiptoken: this.values.get(QueryOptionNames.skiptoken) || null,\n      levels: this.values.get(QueryOptionNames.levels) || null,\n      count: this.values.get(QueryOptionNames.count) || null,\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    return new ODataQueryOptions(Objects.clone(this.values));\n  }\n\n  // Set Renderable\n  expression(key: QueryOptionNames, exp?: Expression) {\n    if (exp !== undefined) this.values.set(key, exp);\n    return this.values.get(key);\n  }\n\n  // Option Handler\n  option(key: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.values.set(key, opts);\n    return new ODataQueryOptionHandler(this.values, key);\n  }\n\n  // Query Options tools\n  has(key: QueryOptionNames) {\n    return this.values.has(key);\n  }\n\n  remove(...keys: QueryOptionNames[]) {\n    [...this.values.keys()]\n      .filter((k) => keys.indexOf(k) !== -1)\n      .forEach((key) => {\n        this.values.delete(key);\n      });\n  }\n\n  keep(...keys: QueryOptionNames[]) {\n    [...this.values.keys()]\n      .filter((k) => keys.indexOf(k) === -1)\n      .forEach((key) => {\n        this.values.delete(key);\n      });\n  }\n\n  // Clear\n  clear() {\n    this.values.clear();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  COMPUTED,\n  DEFAULT_VERSION,\n  DESCRIPTION,\n  LONG_DESCRIPTION,\n} from '../../constants';\nimport { ODataHelper } from '../../helper';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  ParserOptions,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number | 'variable';\n  referentials: ODataReferential[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: ParserOptions\n  ): any {\n    const type =\n      options !== undefined && Types.isPlainObject(value)\n        ? ODataHelper[options?.version || DEFAULT_VERSION].type(value)\n        : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: ParserOptions): string {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType\n        .keys({ include_parents: true })\n        ?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n\n  field(name: string) {\n    if (this.isStructuredType())\n      return (this.parser as ODataStructuredTypeParser).field(\n        name as keyof T\n      );\n    throw new Error(\n      `The field ${this.name} is not related to a StructuredType`\n    );\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  private _keys?: ODataEntityTypeKey[];\n  private _fields: ODataStructuredTypeFieldParser[];\n  parserOptions?: ParserOptions;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this._keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this._fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: ParserOptions): T {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: Partial, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: ParserOptions): any {\n    const parserOptions = { ...this.parserOptions, ...options };\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    this.parserOptions = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this._fields.forEach((f) =>\n      f.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n\n  /**\n   * Returns all fields of the structured type.\n   * @param include_navigation Include navigation properties in the result.\n   * @param include_parents Include the parent types in the result.\n   * @returns All fields of the structured type.\n   */\n  fields({\n    include_navigation,\n    include_parents,\n  }: {\n    include_parents: boolean;\n    include_navigation: boolean;\n  }): ODataStructuredTypeFieldParser[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.fields({ include_parents, include_navigation })\n        : []),\n      ...this._fields.filter(\n        (field) => include_navigation || !field.navigation\n      ),\n    ];\n  }\n\n  /**\n   * Returns the keys of the structured type.\n   * @param include_parents Include the parent fields\n   * @returns The keys of the structured type\n   */\n  keys({\n    include_parents,\n  }: {\n    include_parents: boolean;\n  }): ODataEntityTypeKey[] {\n    return [\n      ...(include_parents && this.parent !== undefined\n        ? this.parent.keys({ include_parents })\n        : []),\n      ...(this._keys || []),\n    ];\n  }\n\n  /**\n   * Find the field parser for the given field name.\n   * @param name Name of the field\n   * @returns The field parser\n   */\n  field(name: keyof T): ODataStructuredTypeFieldParser {\n    let field = this.fields({\n      include_parents: true,\n      include_navigation: true,\n    }).find((field: ODataStructuredTypeFieldParser) => field.name === name);\n    //Throw error if not found\n    if (field === undefined)\n      throw new Error(`${this.name} has no field named ${String(name)}`);\n    return field;\n  }\n\n  /**\n   * Picks the fields from attributes.\n   * @param attrs\n   * @param include_parents Include the parent fields\n   * @param include_navigation Include the navigation fields\n   * @param include_etag Include the etag field\n   * @returns The picked fields\n   */\n  pick(\n    attrs: { [name: string]: any },\n    {\n      include_parents = true,\n      include_navigation = false,\n      include_etag = true,\n      options,\n    }: {\n      include_parents?: boolean;\n      include_navigation?: boolean;\n      include_etag?: boolean;\n      options?: ParserOptions;\n    } = {}\n  ): Partial {\n    const parserOptions = options || this.parserOptions;\n    const names = this.fields({ include_parents, include_navigation }).map(\n      (f) => f.name\n    );\n    return Object.keys(attrs)\n      .filter(\n        (key) =>\n          names.indexOf(key) !== -1 ||\n          (key ==\n            ODataHelper[parserOptions?.version || DEFAULT_VERSION].ODATA_ETAG &&\n            include_etag)\n      )\n      .reduce((acc, key) => Object.assign(acc, { [key]: attrs[key] }), {});\n  }\n\n  resolveKey(\n    value: any,\n    {\n      resolve = true,\n      single = true,\n    }: { resolve?: boolean; single?: boolean } = {}\n  ): any {\n    const keyTypes = this.keys({ include_parents: true });\n    const key = new Map();\n    for (var kt of keyTypes) {\n      let v = value as any;\n      let structured = this as ODataStructuredTypeParser | undefined;\n      let field: ODataStructuredTypeFieldParser | undefined;\n      for (let name of kt.name.split('/')) {\n        if (structured === undefined) break;\n        field = structured\n          .fields({ include_navigation: false, include_parents: true })\n          .find((f: ODataStructuredTypeFieldParser) => f.name === name);\n        if (field !== undefined) {\n          v = Types.isPlainObject(v) ? v[field.name] : v;\n          structured = field.isStructuredType()\n            ? field.structured()\n            : undefined;\n        }\n      }\n      if (field !== undefined && v !== undefined) {\n        key.set(kt.alias || field.name, field.encode(v));\n      }\n    }\n    if (key.size === 0) return undefined;\n    return resolve\n      ? Objects.resolveKey(key, { single })\n      : Object.fromEntries(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let fields = this.fields({\n      include_navigation: false,\n      include_parents: true,\n    }).filter((f) => f.default !== undefined || f.isStructuredType());\n    return {\n      ...fields.reduce((acc, f) => {\n        let value: any = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = {} as { [name: string]: any };\n    const fields = this.fields({\n      include_navigation: true,\n      include_parents: true,\n    }).filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                            \n                                isQueryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                                \n                                    cacheKey\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpContext\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                    \n                    factory(api: ODataApi, method: string, resource: ODataResource, options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    api\n                                    \n                                                ODataApi\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataRequest\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:345\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:349\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:353\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isQueryBody\n                        \n                    \n                \n            \n            \n                \nisQueryBody()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:337\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:276\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:285\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:289\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:293\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:302\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:311\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:317\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:323\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:327\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        cacheKey\n                    \n                \n\n                \n                    \n                        getcacheKey()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:331\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { ODataApi } from '../api';\nimport {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { QueryOptionNames } from '../types';\nimport { Http, Types } from '../utils';\nimport { ODataResource } from './resource';\nimport { ODataOptions } from './types';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly context?: HttpContext;\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOptionNames[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    context?: HttpContext;\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?:\n      | HttpParams\n      | {\n          [param: string]:\n            | string\n            | number\n            | boolean\n            | ReadonlyArray;\n        };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?:\n      | 'cache-first'\n      | 'cache-and-network'\n      | 'network-only'\n      | 'no-cache'\n      | 'cache-only';\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOptionNames[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n    this.context = init.context;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null) this._body = this.resource.serialize(this._body);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions = [\n      ...(this.api.options.bodyQueryOptions || []),\n      ...(init.bodyQueryOptions || []),\n    ];\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams();\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`\n      );\n    // Omit Null Values\n    if (\n      this.api.options.prefer?.omitNullValues === true &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`omit-values=nulls`);\n    // Continue on Error\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {}\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {}\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n  }\n\n  static factory(\n    api: ODataApi,\n    method: string,\n    resource: ODataResource,\n    options: ODataOptions & {\n      body?: any;\n      etag?: string;\n      responseType?:\n        | 'arraybuffer'\n        | 'blob'\n        | 'json'\n        | 'text'\n        | 'value'\n        | 'property'\n        | 'entity'\n        | 'entities';\n      observe: 'events' | 'response';\n      withCount?: boolean;\n      bodyQueryOptions?: QueryOptionNames[];\n    }\n  ) {\n    const apiOptions = api.options;\n    let params = options.params || {};\n    if (options.withCount) {\n      params = Http.mergeHttpParams(params, apiOptions.helper.countParam());\n    }\n\n    let etag = options.etag;\n    if (etag === undefined && Types.isPlainObject(options.body)) {\n      etag = apiOptions.helper.etag(options.body);\n    }\n\n    return new ODataRequest({\n      method,\n      etag,\n      api,\n      resource,\n      params,\n      context: options.context,\n      body: options.body,\n      observe: options.observe,\n      headers: options.headers,\n      reportProgress: options.reportProgress,\n      responseType: options.responseType,\n      fetchPolicy: options.fetchPolicy,\n      withCredentials: options.withCredentials,\n      bodyQueryOptions: options.bodyQueryOptions,\n    });\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this.isQueryBody() ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this.isQueryBody() ? 'POST' : this._method;\n  }\n\n  get body() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`)\n        )[1].toString()\n      : this._body;\n  }\n\n  get params() {\n    return this.isQueryBody()\n      ? Http.splitHttpParams(\n          this._params,\n          this.bodyQueryOptions.map((name) => `$${name}`)\n        )[0]\n      : this._params;\n  }\n\n  get headers() {\n    return this.isQueryBody()\n      ? Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN })\n      : this._headers;\n  }\n\n  get pathWithParams() {\n    return this.params.keys().length > 0\n      ? `${this.path}?${this.params}`\n      : this.path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this.path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  get cacheKey() {\n    return this._params.keys().length > 0\n      ? `${this._path}?${this._params}`\n      : this._path;\n  }\n\n  isQueryBody() {\n    return (\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`))\n    );\n  }\n\n  isBatch() {\n    return this.path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                        HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                property\n                            \n                            \n                                toJSON\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:31\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:202\n                \n            \n\n\n            \n                \n                    Handle the response body as entities\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntities\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:178\n                \n            \n\n\n            \n                \n                    Handle the response body as an entity\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:47\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                HttpResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromJSON(req: ODataRequest, json: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:59\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    json\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:220\n                \n            \n\n\n            \n                \n                    Handle the response body as a property\n\n\n                    \n                    \n                    \n                        Returns :         ODataProperty\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:247\n                \n            \n\n\n            \n                \n                    Handle the response body as a value\n\n\n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:94\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:135\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:156\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n  PREFERENCE_APPLIED,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJSON(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    }\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJSON() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options.parserOptions);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const headerKey = Http.resolveHeaderKey(\n        this.headers,\n        ODATA_VERSION_HEADERS\n      );\n      if (headerKey) {\n        const version = (this.headers.get(headerKey) || '').replace(\n          /\\;/g,\n          ''\n        ) as '2.0' | '3.0' | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const preferenceApplied = this.headers.get(PREFERENCE_APPLIED);\n      if (preferenceApplied) {\n        this._options.setPreferenceApplied(preferenceApplied);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {}\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: Map;\n  get annotations(): Map {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) this._annotations.set(options.helper.ODATA_ETAG, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) this._annotations.set(options.helper.ODATA_ID, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    let entities = payload ? annots.data(payload) : null;\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(\n            data as { [key: string]: any },\n            this.api.options.stripMetadata\n          )\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setPreferenceApplied\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ParserOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ParserOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataResponseOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cacheControl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    features\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPreferenceApplied\n                        \n                    \n                \n            \n            \n                \nsetPreferenceApplied(preference: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    preference\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  ParserOptions,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: ParserOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setPreferenceApplied(preference: string) {\n    preference.split(',').forEach((prefer) => {\n      // TODO: resolve preference\n    });\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bindingType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEntitySetForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:54\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:60\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataApi } from '../api';\nimport { Parser, ParserOptions, SchemaConfig } from '../types';\nimport { OData } from '../utils/odata';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema extends ODataAnnotatable {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    super(config);\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this)\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this)\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this)\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this)\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[]\n    );\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    const bindingStructuredType =\n      bindingType !== undefined\n        ? this.api.findStructuredTypeForType(bindingType)\n        : undefined;\n    return this.callables.find((c) => {\n      const isCallableType = c.isTypeOf(type);\n      const callableBindingType = c.binding()?.type;\n      const callableBindingStructuredType =\n        callableBindingType !== undefined\n          ? this.api.findStructuredTypeForType(callableBindingType)\n          : undefined;\n      return (\n        isCallableType &&\n        (!bindingStructuredType ||\n          (callableBindingStructuredType &&\n            bindingStructuredType.isSubtypeOf(callableBindingStructuredType)))\n      );\n    }) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    options,\n    parserForType,\n    findOptionsForType,\n  }: {\n    options: ParserOptions;\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) =>\n      enu.configure({ options, parserForType, findOptionsForType })\n    );\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ options, parserForType, findOptionsForType })\n    );\n    // Configure callables\n    this.callables.forEach((callable) =>\n      callable.configure({ options, parserForType, findOptionsForType })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchemaElement.html":{"url":"classes/ODataSchemaElement.html","title":"class - ODataSchemaElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchemaElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/element.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:58\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:68\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:47\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:29\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:38\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/element.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\nimport { Strings } from '../utils';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataSchemaElement extends ODataAnnotatable {\n  name: string;\n  schema: ODataSchema;\n\n  constructor(\n    config: { annotations?: AnnotationConfig[]; name: string },\n    schema: ODataSchema\n  ) {\n    super(config);\n    this.schema = schema;\n    this.name = config.name;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  /**\n   * Returns a full type of the structured type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string): boolean {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a subtype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSubtypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a supertype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSupertypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create an entity set service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entitySetName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the entity set.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitySetService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create a singleton service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    singletonName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the singleton.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataSingletonService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:27\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:19\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Returns :         ODataSingletonResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:58\n                \n            \n\n\n            \n                \n                    Patch the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:44\n                \n            \n\n\n            \n                \n                    Update the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataActionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:63\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataActionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataFunctionOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:26\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataFunctionOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:100\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:34\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport type { ODataModel } from '../models/model';\nimport type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:292\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Operator\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:312\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; op: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:299\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByExpression.html":{"url":"classes/OrderByExpression.html","title":"class - OrderByExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                ascending\n                            \n                            \n                                clone\n                            \n                            \n                                descending\n                            \n                            \n                                    Static\n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ascending\n                        \n                    \n                \n            \n            \n                \nascending(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         OrderByExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descending\n                        \n                    \n                \n            \n            \n                \ndescending(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        orderBy\n                        \n                    \n                \n            \n            \n                \n                    \n                    orderBy(opts: (builder: OrderByExpressionBuilder,current: OrderByExpression) => void, current?: OrderByExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:49\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                OrderByExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:70\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Field, Renderable } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.field, { aliases, escape, prefix })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Readonly>;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new OrderByExpression(),\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByField.html":{"url":"classes/OrderByField.html","title":"class - OrderByField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: Renderable, order: \"asc\" | \"desc\")\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        order\n                                                  \n                                                        \n                                                                    \"asc\" | \"desc\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         OrderByField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; order: \"asc\" | \"desc\"; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Field, Renderable } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.field, { aliases, escape, prefix })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n}\n\nexport type OrderByExpressionBuilder = {\n  t: Readonly>;\n  e: () => OrderByExpression;\n};\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static orderBy(\n    opts: (\n      builder: OrderByExpressionBuilder,\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new OrderByExpression(),\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: ParserOptions | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ParserOptions | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParserOptions.html":{"url":"interfaces/ParserOptions.html","title":"interface - ParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nonParenthesisForEmptyParameterFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nonParenthesisForEmptyParameterFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nonParenthesisForEmptyParameterFunction:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PassedInitialConfig.html":{"url":"interfaces/PassedInitialConfig.html","title":"interface - PassedInitialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PassedInitialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            config\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:         ApiConfig | ApiConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiConfig | ApiConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loader:         Provider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Provider\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataConfigLoader, ODataConfigSyncLoader } from './loaders';\nimport { ODataServiceFactory } from './services/index';\nimport { ApiConfig } from './types';\n\nexport interface PassedInitialConfig {\n  config?: ApiConfig | ApiConfig[];\n  loader?: Provider;\n}\n\nexport const ODATA_CONFIG = new InjectionToken('odata.config');\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createSyncLoader(passedConfig: PassedInitialConfig) {\n  return new ODataConfigSyncLoader(passedConfig.config!);\n}\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  static forRoot(\n    passedConfig: PassedInitialConfig\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        // Make the ODATA_CONFIG available through injection\n        { provide: ODATA_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a sync one\n        passedConfig?.loader || {\n          provide: ODataConfigLoader,\n          useFactory: createSyncLoader,\n          deps: [ODATA_CONFIG],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        clone\n                                    \n                                \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        toJSON\n                                    \n                                \n                                \n                                    \n                                        toString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  /**\n   * Store the cache in the storage\n   */\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  /**\n   * Restore the cache from the storage\n   */\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  /**\n   * Flush the cache and clean the storage\n   */\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  /**\n   * Store the response in the cache\n   * @param req The request with the resource to store the response\n   * @param res The response to store in the cache\n   */\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(res);\n    this.put(req.cacheKey, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  /**\n   * Restore the response from the cache\n   * @param req The request with the resource to get the response\n   * @returns The response from the cache\n   */\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.cacheKey, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchExpression.html":{"url":"classes/SearchExpression.html","title":"class - SearchExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _connector\n                            \n                            \n                                    Private\n                                _negated\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                and\n                            \n                            \n                                clone\n                            \n                            \n                                connector\n                            \n                            \n                                negated\n                            \n                            \n                                not\n                            \n                            \n                                or\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                search\n                            \n                            \n                                term\n                            \n                            \n                                    \n                                toJSON\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _connector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SearchConnector\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _negated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable, connector?: SearchConnector)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    connector\n                                    \n                                                SearchConnector\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        and\n                        \n                    \n                \n            \n            \n                \nand(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:138\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connector\n                        \n                    \n                \n            \n            \n                \nconnector()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchConnector\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        negated\n                        \n                    \n                \n            \n            \n                \nnegated()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        or\n                        \n                    \n                \n            \n            \n                \nor(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:123\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(opts: (builder: SearchExpressionBuilder,current: SearchExpression) => void, current?: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:59\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n            \n                \nterm(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:146\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { children: any; connector: SearchConnector; negated: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.value, { aliases, escape, prefix })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  static search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n      connector: this._connector,\n      negated: this._negated,\n    };\n  }\n\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchTerm.html":{"url":"classes/SearchTerm.html","title":"class - SearchTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchTerm\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; value: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:11\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.value, { aliases, escape, prefix })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n}\n\nexport type SearchExpressionBuilder = {\n  e: (connector?: SearchConnector) => SearchExpression;\n};\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  static search(\n    opts: (\n      builder: SearchExpressionBuilder,\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: (connector: SearchConnector = 'AND') =>\n          new SearchExpression({ connector }),\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n      connector: this._connector,\n      negated: this._negated,\n    };\n  }\n\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EntityKey\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectExpression.html":{"url":"classes/SelectExpression.html","title":"class - SelectExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/select.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                select\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        select\n                        \n                    \n                \n            \n            \n                \n                    \n                    select(opts: (builder: SelectExpressionBuilder,current: SelectExpression) => void, current?: SelectExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                SelectExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { Field, Renderable } from './syntax';\n\nexport type SelectExpressionBuilder = {\n  t: Readonly>;\n  e: () => SelectExpression;\n};\nexport class SelectExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static select(\n    opts: (\n      builder: SelectExpressionBuilder,\n      current?: SelectExpression\n    ) => SelectExpression,\n    current?: SelectExpression\n  ): SelectExpression {\n    return opts(\n      {\n        t: Field.factory>>(),\n        e: () => new SelectExpression(),\n      },\n      current\n    ) as SelectExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new SelectExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): SelectExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: any): SelectExpression {\n    return this._add(field);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(field: any, start: number, length?: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(value: T | string, pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ParserOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface ApiOptions {\n  version?: ODataVersion;\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  stringAsEnum?: boolean;\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n  //https://github.com/OData/AspNetCoreOData/issues/171\n  nonParenthesisForEmptyParameterFunction?: boolean;\n  jsonBatchFormat?: boolean;\n}\n\nexport interface ParserOptions {\n  version?: ODataVersion;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n  stringAsEnum?: boolean;\n  deleteRefBy?: 'path' | 'id';\n  nonParenthesisForEmptyParameterFunction?: boolean;\n}\n\nexport interface ResponseOptions extends ParserOptions {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends ParserOptions {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: ParserOptions | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: ParserOptions | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: E;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: E } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number | 'variable';\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:269\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    } else if (key === 'clone') {\n      return () => Field.factory(name);\n    } else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    } else if (key === 'toJSON') {\n      return () => ({\n        $type: Types.rawType(this),\n        name: name,\n      });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n\n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right) {\n      let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n      return `${left}/${this.op}(${alias}:${render(right, {\n        aliases,\n        escape,\n        prefix: alias,\n      })})`;\n    } else {\n      return `${left}/${this.op}()`;\n    }\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^15.2.3\n        \n            @angular/common : ^15.2.3\n        \n            @angular/compiler : ^15.2.3\n        \n            @angular/core : ^15.2.3\n        \n            @angular/forms : ^15.2.3\n        \n            @angular/platform-browser : ^15.2.3\n        \n            @angular/platform-browser-dynamic : ^15.2.3\n        \n            @angular/router : ^15.2.3\n        \n            @compodoc/compodoc : ^1.1.19\n        \n            rxjs : ~7.5.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.12.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegmentNames   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptionNames   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Changed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        PathSegmentNames\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOptionNames\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 levels\n                            \n                        \n                        \n                            \n                                Value : levels\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nWithout Schema\nWith Schema\nUsage\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nnpm i angular-odataWithout Schema\nImport ODataModule into your application module definition and setup the module for the serviceRootUrl.\nimport { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n    })\n    ...\n  ]\n})\nexport class AppModule {}With Schema\nUse OData Angular Generator for generate the Config and the Module definition.\nImport ODataModule, Config and Module into your application module.\nSetup ODataModule with Config and import it along with Module.\nimport { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot(TripPinConfig),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}Usage\nInject and use the ODataServiceFactory\nimport { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entitySet(\n      \"Airports\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Airport\"\n    );\n    let airports = airportsService.entities();\n\n    // Fetch airports\n    airports.fetch().subscribe(({ entities }) => {\n      console.log(\"Airports: \", entities);\n    });\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports\n      .fetchAll()\n      .subscribe((airports) => console.log(\"All Airports: \", airports));\n\n    // Fetch airport with key and fetch again from cache\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          // From Cache!\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      )\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Clone airports resource and filter new resource\n    airports\n      .clone()\n      .query((q) =>\n        q.filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) =>\n      q.filter().push({ Location: { City: { Region: \"California\" } } })\n    );\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Store airports resource\n    var json = airports.toJSON();\n    // Load airports resource\n    airports = this.odata.fromJSON(json) as ODataEntitySetResource;\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) => q.filter().clear());\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let peopleService = this.factory.entitySet(\n      \"People\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Person\"\n    );\n    let people = peopleService.entities();\n\n    // Clone people resource and expand and fetch\n    people\n      .clone()\n      .query((q) =>\n        q.expand({\n          Friends: {\n            expand: { Friends: { select: [\"AddressInfo\"] } },\n          },\n          Trips: { select: [\"Name\", \"Tags\"] },\n        })\n      )\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Clone people resource and filter with expressions\n    people\n      .clone()\n      .query((q) =>\n        q.filter(({ e }) =>\n          e().eq(\"Emails\", \"john@example.com\").or(e().eq(\"UserName\", \"john\"))\n        )\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec(() =>\n        forkJoin({\n          airports: airports.fetch(),\n          people: people.fetch({ withCount: true }),\n        })\n      )\n      .subscribe();\n  }\n}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    124 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.120.0\n        \n            Description : Client side OData typescript library for Angular\n        \n            Keywords : client, odata, odata v4, odata v3, odata v2, typescript, api, @angular, angular\n        \n            Homepage : https://github.com/diegomvh/angular-odata\n        \n            Bugs : https://github.com/diegomvh/angular-odata/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/diegomvh/angular-odata.git\n        \n            Author : Diego van Haaster\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            ComputeExpressionBuilder   (projects/.../compute.ts)\n                        \n                        \n                            CountExpressionBuilder   (projects/.../count.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandExpressionBuilder   (projects/.../expand.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterConnector   (projects/.../filter.ts)\n                        \n                        \n                            FilterExpressionBuilder   (projects/.../filter.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            GroupBy   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ODataActionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataFunctionOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataModelRelation   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByExpressionBuilder   (projects/.../orderby.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            SearchConnector   (projects/.../search.ts)\n                        \n                        \n                            SearchExpressionBuilder   (projects/.../search.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectExpressionBuilder   (projects/.../select.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                        ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                         | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupBy\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                        OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                        SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n    \n    \n        \n            \n                \n                    \n                    ComputeExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/count.ts\n    \n    \n        \n            \n                \n                    \n                    CountExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n    \n    \n        \n            \n                \n                    \n                    ExpandExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/filter.ts\n    \n    \n        \n            \n                \n                    \n                    FilterConnector\n                \n            \n            \n                \n                        \"and\" | \"or\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEventType\n                \n            \n            \n                \n                        \"change\" | \"reset\" | \"update\" | \"destroy\" | \"add\" | \"remove\" | \"invalid\" | \"request\" | \"sync\" | \"attach\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelRelation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataActionOptions\n                \n            \n            \n                \n                            ODataQueryArgumentsOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataFunctionOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n    \n    \n        \n            \n                \n                    \n                    OrderByExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/search.ts\n    \n    \n        \n            \n                \n                    \n                    SearchConnector\n                \n            \n            \n                \n                        \"AND\" | \"OR\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SearchExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/select.ts\n    \n    \n        \n            \n                \n                    \n                    SelectExpressionBuilder\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
